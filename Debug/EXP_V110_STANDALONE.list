
EXP_V110_STANDALONE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f6a0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001378  0800f830  0800f830  00010830  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010ba8  08010ba8  000163f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08010ba8  08010ba8  00011ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010bb0  08010bb0  000163f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010bb0  08010bb0  00011bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010bb4  08010bb4  00011bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000043f4  20000000  08010bb8  00012000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000163f4  2**0
                  CONTENTS
 10 .bss          00001adc  200043f4  200043f4  000163f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005ed0  20005ed0  000163f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000163f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ba7e  00000000  00000000  00016424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005a89  00000000  00000000  00031ea2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001fd0  00000000  00000000  00037930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000017ce  00000000  00000000  00039900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ca27  00000000  00000000  0003b0ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025f9c  00000000  00000000  00067af5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee522  00000000  00000000  0008da91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0017bfb3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000096a0  00000000  00000000  0017bff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000051  00000000  00000000  00185698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200043f4 	.word	0x200043f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f818 	.word	0x0800f818

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200043f8 	.word	0x200043f8
 80001cc:	0800f818 	.word	0x0800f818

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_frsub>:
 8000bc8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bcc:	e002      	b.n	8000bd4 <__addsf3>
 8000bce:	bf00      	nop

08000bd0 <__aeabi_fsub>:
 8000bd0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bd4 <__addsf3>:
 8000bd4:	0042      	lsls	r2, r0, #1
 8000bd6:	bf1f      	itttt	ne
 8000bd8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bdc:	ea92 0f03 	teqne	r2, r3
 8000be0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000be4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000be8:	d06a      	beq.n	8000cc0 <__addsf3+0xec>
 8000bea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bf2:	bfc1      	itttt	gt
 8000bf4:	18d2      	addgt	r2, r2, r3
 8000bf6:	4041      	eorgt	r1, r0
 8000bf8:	4048      	eorgt	r0, r1
 8000bfa:	4041      	eorgt	r1, r0
 8000bfc:	bfb8      	it	lt
 8000bfe:	425b      	neglt	r3, r3
 8000c00:	2b19      	cmp	r3, #25
 8000c02:	bf88      	it	hi
 8000c04:	4770      	bxhi	lr
 8000c06:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c0e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c12:	bf18      	it	ne
 8000c14:	4240      	negne	r0, r0
 8000c16:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c1a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c1e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c22:	bf18      	it	ne
 8000c24:	4249      	negne	r1, r1
 8000c26:	ea92 0f03 	teq	r2, r3
 8000c2a:	d03f      	beq.n	8000cac <__addsf3+0xd8>
 8000c2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c30:	fa41 fc03 	asr.w	ip, r1, r3
 8000c34:	eb10 000c 	adds.w	r0, r0, ip
 8000c38:	f1c3 0320 	rsb	r3, r3, #32
 8000c3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c40:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c44:	d502      	bpl.n	8000c4c <__addsf3+0x78>
 8000c46:	4249      	negs	r1, r1
 8000c48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c4c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c50:	d313      	bcc.n	8000c7a <__addsf3+0xa6>
 8000c52:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c56:	d306      	bcc.n	8000c66 <__addsf3+0x92>
 8000c58:	0840      	lsrs	r0, r0, #1
 8000c5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c5e:	f102 0201 	add.w	r2, r2, #1
 8000c62:	2afe      	cmp	r2, #254	@ 0xfe
 8000c64:	d251      	bcs.n	8000d0a <__addsf3+0x136>
 8000c66:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c6e:	bf08      	it	eq
 8000c70:	f020 0001 	biceq.w	r0, r0, #1
 8000c74:	ea40 0003 	orr.w	r0, r0, r3
 8000c78:	4770      	bx	lr
 8000c7a:	0049      	lsls	r1, r1, #1
 8000c7c:	eb40 0000 	adc.w	r0, r0, r0
 8000c80:	3a01      	subs	r2, #1
 8000c82:	bf28      	it	cs
 8000c84:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c88:	d2ed      	bcs.n	8000c66 <__addsf3+0x92>
 8000c8a:	fab0 fc80 	clz	ip, r0
 8000c8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c92:	ebb2 020c 	subs.w	r2, r2, ip
 8000c96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c9a:	bfaa      	itet	ge
 8000c9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ca0:	4252      	neglt	r2, r2
 8000ca2:	4318      	orrge	r0, r3
 8000ca4:	bfbc      	itt	lt
 8000ca6:	40d0      	lsrlt	r0, r2
 8000ca8:	4318      	orrlt	r0, r3
 8000caa:	4770      	bx	lr
 8000cac:	f092 0f00 	teq	r2, #0
 8000cb0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cb4:	bf06      	itte	eq
 8000cb6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cba:	3201      	addeq	r2, #1
 8000cbc:	3b01      	subne	r3, #1
 8000cbe:	e7b5      	b.n	8000c2c <__addsf3+0x58>
 8000cc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cc8:	bf18      	it	ne
 8000cca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cce:	d021      	beq.n	8000d14 <__addsf3+0x140>
 8000cd0:	ea92 0f03 	teq	r2, r3
 8000cd4:	d004      	beq.n	8000ce0 <__addsf3+0x10c>
 8000cd6:	f092 0f00 	teq	r2, #0
 8000cda:	bf08      	it	eq
 8000cdc:	4608      	moveq	r0, r1
 8000cde:	4770      	bx	lr
 8000ce0:	ea90 0f01 	teq	r0, r1
 8000ce4:	bf1c      	itt	ne
 8000ce6:	2000      	movne	r0, #0
 8000ce8:	4770      	bxne	lr
 8000cea:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cee:	d104      	bne.n	8000cfa <__addsf3+0x126>
 8000cf0:	0040      	lsls	r0, r0, #1
 8000cf2:	bf28      	it	cs
 8000cf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cf8:	4770      	bx	lr
 8000cfa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cfe:	bf3c      	itt	cc
 8000d00:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d04:	4770      	bxcc	lr
 8000d06:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d0a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d12:	4770      	bx	lr
 8000d14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d18:	bf16      	itet	ne
 8000d1a:	4608      	movne	r0, r1
 8000d1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d20:	4601      	movne	r1, r0
 8000d22:	0242      	lsls	r2, r0, #9
 8000d24:	bf06      	itte	eq
 8000d26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d2a:	ea90 0f01 	teqeq	r0, r1
 8000d2e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_ui2f>:
 8000d34:	f04f 0300 	mov.w	r3, #0
 8000d38:	e004      	b.n	8000d44 <__aeabi_i2f+0x8>
 8000d3a:	bf00      	nop

08000d3c <__aeabi_i2f>:
 8000d3c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d40:	bf48      	it	mi
 8000d42:	4240      	negmi	r0, r0
 8000d44:	ea5f 0c00 	movs.w	ip, r0
 8000d48:	bf08      	it	eq
 8000d4a:	4770      	bxeq	lr
 8000d4c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d50:	4601      	mov	r1, r0
 8000d52:	f04f 0000 	mov.w	r0, #0
 8000d56:	e01c      	b.n	8000d92 <__aeabi_l2f+0x2a>

08000d58 <__aeabi_ul2f>:
 8000d58:	ea50 0201 	orrs.w	r2, r0, r1
 8000d5c:	bf08      	it	eq
 8000d5e:	4770      	bxeq	lr
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	e00a      	b.n	8000d7c <__aeabi_l2f+0x14>
 8000d66:	bf00      	nop

08000d68 <__aeabi_l2f>:
 8000d68:	ea50 0201 	orrs.w	r2, r0, r1
 8000d6c:	bf08      	it	eq
 8000d6e:	4770      	bxeq	lr
 8000d70:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d74:	d502      	bpl.n	8000d7c <__aeabi_l2f+0x14>
 8000d76:	4240      	negs	r0, r0
 8000d78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d7c:	ea5f 0c01 	movs.w	ip, r1
 8000d80:	bf02      	ittt	eq
 8000d82:	4684      	moveq	ip, r0
 8000d84:	4601      	moveq	r1, r0
 8000d86:	2000      	moveq	r0, #0
 8000d88:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d8c:	bf08      	it	eq
 8000d8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d92:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d96:	fabc f28c 	clz	r2, ip
 8000d9a:	3a08      	subs	r2, #8
 8000d9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000da0:	db10      	blt.n	8000dc4 <__aeabi_l2f+0x5c>
 8000da2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da6:	4463      	add	r3, ip
 8000da8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dac:	f1c2 0220 	rsb	r2, r2, #32
 8000db0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000db4:	fa20 f202 	lsr.w	r2, r0, r2
 8000db8:	eb43 0002 	adc.w	r0, r3, r2
 8000dbc:	bf08      	it	eq
 8000dbe:	f020 0001 	biceq.w	r0, r0, #1
 8000dc2:	4770      	bx	lr
 8000dc4:	f102 0220 	add.w	r2, r2, #32
 8000dc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dcc:	f1c2 0220 	rsb	r2, r2, #32
 8000dd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000dd8:	eb43 0002 	adc.w	r0, r3, r2
 8000ddc:	bf08      	it	eq
 8000dde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000de2:	4770      	bx	lr

08000de4 <__aeabi_ldivmod>:
 8000de4:	b97b      	cbnz	r3, 8000e06 <__aeabi_ldivmod+0x22>
 8000de6:	b972      	cbnz	r2, 8000e06 <__aeabi_ldivmod+0x22>
 8000de8:	2900      	cmp	r1, #0
 8000dea:	bfbe      	ittt	lt
 8000dec:	2000      	movlt	r0, #0
 8000dee:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000df2:	e006      	blt.n	8000e02 <__aeabi_ldivmod+0x1e>
 8000df4:	bf08      	it	eq
 8000df6:	2800      	cmpeq	r0, #0
 8000df8:	bf1c      	itt	ne
 8000dfa:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000dfe:	f04f 30ff 	movne.w	r0, #4294967295
 8000e02:	f000 b9d3 	b.w	80011ac <__aeabi_idiv0>
 8000e06:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e0a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e0e:	2900      	cmp	r1, #0
 8000e10:	db09      	blt.n	8000e26 <__aeabi_ldivmod+0x42>
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	db1a      	blt.n	8000e4c <__aeabi_ldivmod+0x68>
 8000e16:	f000 f84d 	bl	8000eb4 <__udivmoddi4>
 8000e1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e22:	b004      	add	sp, #16
 8000e24:	4770      	bx	lr
 8000e26:	4240      	negs	r0, r0
 8000e28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	db1b      	blt.n	8000e68 <__aeabi_ldivmod+0x84>
 8000e30:	f000 f840 	bl	8000eb4 <__udivmoddi4>
 8000e34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e3c:	b004      	add	sp, #16
 8000e3e:	4240      	negs	r0, r0
 8000e40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e44:	4252      	negs	r2, r2
 8000e46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e4a:	4770      	bx	lr
 8000e4c:	4252      	negs	r2, r2
 8000e4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e52:	f000 f82f 	bl	8000eb4 <__udivmoddi4>
 8000e56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e5e:	b004      	add	sp, #16
 8000e60:	4240      	negs	r0, r0
 8000e62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e66:	4770      	bx	lr
 8000e68:	4252      	negs	r2, r2
 8000e6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e6e:	f000 f821 	bl	8000eb4 <__udivmoddi4>
 8000e72:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e7a:	b004      	add	sp, #16
 8000e7c:	4252      	negs	r2, r2
 8000e7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e82:	4770      	bx	lr

08000e84 <__aeabi_uldivmod>:
 8000e84:	b953      	cbnz	r3, 8000e9c <__aeabi_uldivmod+0x18>
 8000e86:	b94a      	cbnz	r2, 8000e9c <__aeabi_uldivmod+0x18>
 8000e88:	2900      	cmp	r1, #0
 8000e8a:	bf08      	it	eq
 8000e8c:	2800      	cmpeq	r0, #0
 8000e8e:	bf1c      	itt	ne
 8000e90:	f04f 31ff 	movne.w	r1, #4294967295
 8000e94:	f04f 30ff 	movne.w	r0, #4294967295
 8000e98:	f000 b988 	b.w	80011ac <__aeabi_idiv0>
 8000e9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ea0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ea4:	f000 f806 	bl	8000eb4 <__udivmoddi4>
 8000ea8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000eac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000eb0:	b004      	add	sp, #16
 8000eb2:	4770      	bx	lr

08000eb4 <__udivmoddi4>:
 8000eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000eb8:	9d08      	ldr	r5, [sp, #32]
 8000eba:	468e      	mov	lr, r1
 8000ebc:	4604      	mov	r4, r0
 8000ebe:	4688      	mov	r8, r1
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d14a      	bne.n	8000f5a <__udivmoddi4+0xa6>
 8000ec4:	428a      	cmp	r2, r1
 8000ec6:	4617      	mov	r7, r2
 8000ec8:	d962      	bls.n	8000f90 <__udivmoddi4+0xdc>
 8000eca:	fab2 f682 	clz	r6, r2
 8000ece:	b14e      	cbz	r6, 8000ee4 <__udivmoddi4+0x30>
 8000ed0:	f1c6 0320 	rsb	r3, r6, #32
 8000ed4:	fa01 f806 	lsl.w	r8, r1, r6
 8000ed8:	fa20 f303 	lsr.w	r3, r0, r3
 8000edc:	40b7      	lsls	r7, r6
 8000ede:	ea43 0808 	orr.w	r8, r3, r8
 8000ee2:	40b4      	lsls	r4, r6
 8000ee4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ee8:	fa1f fc87 	uxth.w	ip, r7
 8000eec:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ef0:	0c23      	lsrs	r3, r4, #16
 8000ef2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ef6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000efa:	fb01 f20c 	mul.w	r2, r1, ip
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d909      	bls.n	8000f16 <__udivmoddi4+0x62>
 8000f02:	18fb      	adds	r3, r7, r3
 8000f04:	f101 30ff 	add.w	r0, r1, #4294967295
 8000f08:	f080 80ea 	bcs.w	80010e0 <__udivmoddi4+0x22c>
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	f240 80e7 	bls.w	80010e0 <__udivmoddi4+0x22c>
 8000f12:	3902      	subs	r1, #2
 8000f14:	443b      	add	r3, r7
 8000f16:	1a9a      	subs	r2, r3, r2
 8000f18:	b2a3      	uxth	r3, r4
 8000f1a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000f1e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000f22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000f26:	fb00 fc0c 	mul.w	ip, r0, ip
 8000f2a:	459c      	cmp	ip, r3
 8000f2c:	d909      	bls.n	8000f42 <__udivmoddi4+0x8e>
 8000f2e:	18fb      	adds	r3, r7, r3
 8000f30:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f34:	f080 80d6 	bcs.w	80010e4 <__udivmoddi4+0x230>
 8000f38:	459c      	cmp	ip, r3
 8000f3a:	f240 80d3 	bls.w	80010e4 <__udivmoddi4+0x230>
 8000f3e:	443b      	add	r3, r7
 8000f40:	3802      	subs	r0, #2
 8000f42:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000f46:	eba3 030c 	sub.w	r3, r3, ip
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	b11d      	cbz	r5, 8000f56 <__udivmoddi4+0xa2>
 8000f4e:	40f3      	lsrs	r3, r6
 8000f50:	2200      	movs	r2, #0
 8000f52:	e9c5 3200 	strd	r3, r2, [r5]
 8000f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5a:	428b      	cmp	r3, r1
 8000f5c:	d905      	bls.n	8000f6a <__udivmoddi4+0xb6>
 8000f5e:	b10d      	cbz	r5, 8000f64 <__udivmoddi4+0xb0>
 8000f60:	e9c5 0100 	strd	r0, r1, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	4608      	mov	r0, r1
 8000f68:	e7f5      	b.n	8000f56 <__udivmoddi4+0xa2>
 8000f6a:	fab3 f183 	clz	r1, r3
 8000f6e:	2900      	cmp	r1, #0
 8000f70:	d146      	bne.n	8001000 <__udivmoddi4+0x14c>
 8000f72:	4573      	cmp	r3, lr
 8000f74:	d302      	bcc.n	8000f7c <__udivmoddi4+0xc8>
 8000f76:	4282      	cmp	r2, r0
 8000f78:	f200 8105 	bhi.w	8001186 <__udivmoddi4+0x2d2>
 8000f7c:	1a84      	subs	r4, r0, r2
 8000f7e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000f82:	2001      	movs	r0, #1
 8000f84:	4690      	mov	r8, r2
 8000f86:	2d00      	cmp	r5, #0
 8000f88:	d0e5      	beq.n	8000f56 <__udivmoddi4+0xa2>
 8000f8a:	e9c5 4800 	strd	r4, r8, [r5]
 8000f8e:	e7e2      	b.n	8000f56 <__udivmoddi4+0xa2>
 8000f90:	2a00      	cmp	r2, #0
 8000f92:	f000 8090 	beq.w	80010b6 <__udivmoddi4+0x202>
 8000f96:	fab2 f682 	clz	r6, r2
 8000f9a:	2e00      	cmp	r6, #0
 8000f9c:	f040 80a4 	bne.w	80010e8 <__udivmoddi4+0x234>
 8000fa0:	1a8a      	subs	r2, r1, r2
 8000fa2:	0c03      	lsrs	r3, r0, #16
 8000fa4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fa8:	b280      	uxth	r0, r0
 8000faa:	b2bc      	uxth	r4, r7
 8000fac:	2101      	movs	r1, #1
 8000fae:	fbb2 fcfe 	udiv	ip, r2, lr
 8000fb2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000fb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000fba:	fb04 f20c 	mul.w	r2, r4, ip
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d907      	bls.n	8000fd2 <__udivmoddi4+0x11e>
 8000fc2:	18fb      	adds	r3, r7, r3
 8000fc4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000fc8:	d202      	bcs.n	8000fd0 <__udivmoddi4+0x11c>
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	f200 80e0 	bhi.w	8001190 <__udivmoddi4+0x2dc>
 8000fd0:	46c4      	mov	ip, r8
 8000fd2:	1a9b      	subs	r3, r3, r2
 8000fd4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000fd8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000fdc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000fe0:	fb02 f404 	mul.w	r4, r2, r4
 8000fe4:	429c      	cmp	r4, r3
 8000fe6:	d907      	bls.n	8000ff8 <__udivmoddi4+0x144>
 8000fe8:	18fb      	adds	r3, r7, r3
 8000fea:	f102 30ff 	add.w	r0, r2, #4294967295
 8000fee:	d202      	bcs.n	8000ff6 <__udivmoddi4+0x142>
 8000ff0:	429c      	cmp	r4, r3
 8000ff2:	f200 80ca 	bhi.w	800118a <__udivmoddi4+0x2d6>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	1b1b      	subs	r3, r3, r4
 8000ffa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ffe:	e7a5      	b.n	8000f4c <__udivmoddi4+0x98>
 8001000:	f1c1 0620 	rsb	r6, r1, #32
 8001004:	408b      	lsls	r3, r1
 8001006:	fa22 f706 	lsr.w	r7, r2, r6
 800100a:	431f      	orrs	r7, r3
 800100c:	fa0e f401 	lsl.w	r4, lr, r1
 8001010:	fa20 f306 	lsr.w	r3, r0, r6
 8001014:	fa2e fe06 	lsr.w	lr, lr, r6
 8001018:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800101c:	4323      	orrs	r3, r4
 800101e:	fa00 f801 	lsl.w	r8, r0, r1
 8001022:	fa1f fc87 	uxth.w	ip, r7
 8001026:	fbbe f0f9 	udiv	r0, lr, r9
 800102a:	0c1c      	lsrs	r4, r3, #16
 800102c:	fb09 ee10 	mls	lr, r9, r0, lr
 8001030:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8001034:	fb00 fe0c 	mul.w	lr, r0, ip
 8001038:	45a6      	cmp	lr, r4
 800103a:	fa02 f201 	lsl.w	r2, r2, r1
 800103e:	d909      	bls.n	8001054 <__udivmoddi4+0x1a0>
 8001040:	193c      	adds	r4, r7, r4
 8001042:	f100 3aff 	add.w	sl, r0, #4294967295
 8001046:	f080 809c 	bcs.w	8001182 <__udivmoddi4+0x2ce>
 800104a:	45a6      	cmp	lr, r4
 800104c:	f240 8099 	bls.w	8001182 <__udivmoddi4+0x2ce>
 8001050:	3802      	subs	r0, #2
 8001052:	443c      	add	r4, r7
 8001054:	eba4 040e 	sub.w	r4, r4, lr
 8001058:	fa1f fe83 	uxth.w	lr, r3
 800105c:	fbb4 f3f9 	udiv	r3, r4, r9
 8001060:	fb09 4413 	mls	r4, r9, r3, r4
 8001064:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8001068:	fb03 fc0c 	mul.w	ip, r3, ip
 800106c:	45a4      	cmp	ip, r4
 800106e:	d908      	bls.n	8001082 <__udivmoddi4+0x1ce>
 8001070:	193c      	adds	r4, r7, r4
 8001072:	f103 3eff 	add.w	lr, r3, #4294967295
 8001076:	f080 8082 	bcs.w	800117e <__udivmoddi4+0x2ca>
 800107a:	45a4      	cmp	ip, r4
 800107c:	d97f      	bls.n	800117e <__udivmoddi4+0x2ca>
 800107e:	3b02      	subs	r3, #2
 8001080:	443c      	add	r4, r7
 8001082:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001086:	eba4 040c 	sub.w	r4, r4, ip
 800108a:	fba0 ec02 	umull	lr, ip, r0, r2
 800108e:	4564      	cmp	r4, ip
 8001090:	4673      	mov	r3, lr
 8001092:	46e1      	mov	r9, ip
 8001094:	d362      	bcc.n	800115c <__udivmoddi4+0x2a8>
 8001096:	d05f      	beq.n	8001158 <__udivmoddi4+0x2a4>
 8001098:	b15d      	cbz	r5, 80010b2 <__udivmoddi4+0x1fe>
 800109a:	ebb8 0203 	subs.w	r2, r8, r3
 800109e:	eb64 0409 	sbc.w	r4, r4, r9
 80010a2:	fa04 f606 	lsl.w	r6, r4, r6
 80010a6:	fa22 f301 	lsr.w	r3, r2, r1
 80010aa:	431e      	orrs	r6, r3
 80010ac:	40cc      	lsrs	r4, r1
 80010ae:	e9c5 6400 	strd	r6, r4, [r5]
 80010b2:	2100      	movs	r1, #0
 80010b4:	e74f      	b.n	8000f56 <__udivmoddi4+0xa2>
 80010b6:	fbb1 fcf2 	udiv	ip, r1, r2
 80010ba:	0c01      	lsrs	r1, r0, #16
 80010bc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80010c0:	b280      	uxth	r0, r0
 80010c2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80010c6:	463b      	mov	r3, r7
 80010c8:	4638      	mov	r0, r7
 80010ca:	463c      	mov	r4, r7
 80010cc:	46b8      	mov	r8, r7
 80010ce:	46be      	mov	lr, r7
 80010d0:	2620      	movs	r6, #32
 80010d2:	fbb1 f1f7 	udiv	r1, r1, r7
 80010d6:	eba2 0208 	sub.w	r2, r2, r8
 80010da:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80010de:	e766      	b.n	8000fae <__udivmoddi4+0xfa>
 80010e0:	4601      	mov	r1, r0
 80010e2:	e718      	b.n	8000f16 <__udivmoddi4+0x62>
 80010e4:	4610      	mov	r0, r2
 80010e6:	e72c      	b.n	8000f42 <__udivmoddi4+0x8e>
 80010e8:	f1c6 0220 	rsb	r2, r6, #32
 80010ec:	fa2e f302 	lsr.w	r3, lr, r2
 80010f0:	40b7      	lsls	r7, r6
 80010f2:	40b1      	lsls	r1, r6
 80010f4:	fa20 f202 	lsr.w	r2, r0, r2
 80010f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80010fc:	430a      	orrs	r2, r1
 80010fe:	fbb3 f8fe 	udiv	r8, r3, lr
 8001102:	b2bc      	uxth	r4, r7
 8001104:	fb0e 3318 	mls	r3, lr, r8, r3
 8001108:	0c11      	lsrs	r1, r2, #16
 800110a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800110e:	fb08 f904 	mul.w	r9, r8, r4
 8001112:	40b0      	lsls	r0, r6
 8001114:	4589      	cmp	r9, r1
 8001116:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800111a:	b280      	uxth	r0, r0
 800111c:	d93e      	bls.n	800119c <__udivmoddi4+0x2e8>
 800111e:	1879      	adds	r1, r7, r1
 8001120:	f108 3cff 	add.w	ip, r8, #4294967295
 8001124:	d201      	bcs.n	800112a <__udivmoddi4+0x276>
 8001126:	4589      	cmp	r9, r1
 8001128:	d81f      	bhi.n	800116a <__udivmoddi4+0x2b6>
 800112a:	eba1 0109 	sub.w	r1, r1, r9
 800112e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001132:	fb09 f804 	mul.w	r8, r9, r4
 8001136:	fb0e 1119 	mls	r1, lr, r9, r1
 800113a:	b292      	uxth	r2, r2
 800113c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001140:	4542      	cmp	r2, r8
 8001142:	d229      	bcs.n	8001198 <__udivmoddi4+0x2e4>
 8001144:	18ba      	adds	r2, r7, r2
 8001146:	f109 31ff 	add.w	r1, r9, #4294967295
 800114a:	d2c4      	bcs.n	80010d6 <__udivmoddi4+0x222>
 800114c:	4542      	cmp	r2, r8
 800114e:	d2c2      	bcs.n	80010d6 <__udivmoddi4+0x222>
 8001150:	f1a9 0102 	sub.w	r1, r9, #2
 8001154:	443a      	add	r2, r7
 8001156:	e7be      	b.n	80010d6 <__udivmoddi4+0x222>
 8001158:	45f0      	cmp	r8, lr
 800115a:	d29d      	bcs.n	8001098 <__udivmoddi4+0x1e4>
 800115c:	ebbe 0302 	subs.w	r3, lr, r2
 8001160:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001164:	3801      	subs	r0, #1
 8001166:	46e1      	mov	r9, ip
 8001168:	e796      	b.n	8001098 <__udivmoddi4+0x1e4>
 800116a:	eba7 0909 	sub.w	r9, r7, r9
 800116e:	4449      	add	r1, r9
 8001170:	f1a8 0c02 	sub.w	ip, r8, #2
 8001174:	fbb1 f9fe 	udiv	r9, r1, lr
 8001178:	fb09 f804 	mul.w	r8, r9, r4
 800117c:	e7db      	b.n	8001136 <__udivmoddi4+0x282>
 800117e:	4673      	mov	r3, lr
 8001180:	e77f      	b.n	8001082 <__udivmoddi4+0x1ce>
 8001182:	4650      	mov	r0, sl
 8001184:	e766      	b.n	8001054 <__udivmoddi4+0x1a0>
 8001186:	4608      	mov	r0, r1
 8001188:	e6fd      	b.n	8000f86 <__udivmoddi4+0xd2>
 800118a:	443b      	add	r3, r7
 800118c:	3a02      	subs	r2, #2
 800118e:	e733      	b.n	8000ff8 <__udivmoddi4+0x144>
 8001190:	f1ac 0c02 	sub.w	ip, ip, #2
 8001194:	443b      	add	r3, r7
 8001196:	e71c      	b.n	8000fd2 <__udivmoddi4+0x11e>
 8001198:	4649      	mov	r1, r9
 800119a:	e79c      	b.n	80010d6 <__udivmoddi4+0x222>
 800119c:	eba1 0109 	sub.w	r1, r1, r9
 80011a0:	46c4      	mov	ip, r8
 80011a2:	fbb1 f9fe 	udiv	r9, r1, lr
 80011a6:	fb09 f804 	mul.w	r8, r9, r4
 80011aa:	e7c4      	b.n	8001136 <__udivmoddi4+0x282>

080011ac <__aeabi_idiv0>:
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop

080011b0 <LL_SYSTICK_IsActiveCounterFlag>:
  * @note   It can be used in timeout function on application side.
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 80011b4:	4b07      	ldr	r3, [pc, #28]	@ (80011d4 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011c0:	bf0c      	ite	eq
 80011c2:	2301      	moveq	r3, #1
 80011c4:	2300      	movne	r3, #0
 80011c6:	b2db      	uxtb	r3, r3
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	e000e010 	.word	0xe000e010

080011d8 <delay_us>:
#include "delay.h"
#include "stm32f4xx_ll_utils.h"
#include "stm32f4xx_ll_cortex.h"

void delay_us(uint8_t micro_seconds)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
    uint32_t ticks = micro_seconds * (SystemCoreClock / 1000000);
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	4a0c      	ldr	r2, [pc, #48]	@ (8001218 <delay_us+0x40>)
 80011e6:	6812      	ldr	r2, [r2, #0]
 80011e8:	490c      	ldr	r1, [pc, #48]	@ (800121c <delay_us+0x44>)
 80011ea:	fba1 1202 	umull	r1, r2, r1, r2
 80011ee:	0c92      	lsrs	r2, r2, #18
 80011f0:	fb02 f303 	mul.w	r3, r2, r3
 80011f4:	60fb      	str	r3, [r7, #12]
    while (ticks > 0)
 80011f6:	e007      	b.n	8001208 <delay_us+0x30>
    {
        if (LL_SYSTICK_IsActiveCounterFlag())
 80011f8:	f7ff ffda 	bl	80011b0 <LL_SYSTICK_IsActiveCounterFlag>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d002      	beq.n	8001208 <delay_us+0x30>
        {
            ticks--;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	3b01      	subs	r3, #1
 8001206:	60fb      	str	r3, [r7, #12]
    while (ticks > 0)
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1f4      	bne.n	80011f8 <delay_us+0x20>
        }
    }
}
 800120e:	bf00      	nop
 8001210:	bf00      	nop
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	2000014c 	.word	0x2000014c
 800121c:	431bde83 	.word	0x431bde83

08001220 <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll SR1          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	695b      	ldr	r3, [r3, #20]
 800122c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001230:	2b80      	cmp	r3, #128	@ 0x80
 8001232:	bf0c      	ite	eq
 8001234:	2301      	moveq	r3, #1
 8001236:	2300      	movne	r3, #0
 8001238:	b2db      	uxtb	r3, r3
}
 800123a:	4618      	mov	r0, r3
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll SR1          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 8001246:	b480      	push	{r7}
 8001248:	b083      	sub	sp, #12
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001256:	2b40      	cmp	r3, #64	@ 0x40
 8001258:	bf0c      	ite	eq
 800125a:	2301      	moveq	r3, #1
 800125c:	2300      	movne	r3, #0
 800125e:	b2db      	uxtb	r3, r3
}
 8001260:	4618      	mov	r0, r3
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <LL_I2C_IsActiveFlag_SB>:
  * @rmtoll SR1          SB            LL_I2C_IsActiveFlag_SB
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_SB(I2C_TypeDef *I2Cx)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	695b      	ldr	r3, [r3, #20]
 8001278:	f003 0301 	and.w	r3, r3, #1
 800127c:	2b01      	cmp	r3, #1
 800127e:	bf0c      	ite	eq
 8001280:	2301      	moveq	r3, #1
 8001282:	2300      	movne	r3, #0
 8001284:	b2db      	uxtb	r3, r3
}
 8001286:	4618      	mov	r0, r3
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <LL_I2C_IsActiveFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_IsActiveFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ADDR(I2C_TypeDef *I2Cx)
{
 8001292:	b480      	push	{r7}
 8001294:	b083      	sub	sp, #12
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	bf0c      	ite	eq
 80012a6:	2301      	moveq	r3, #1
 80012a8:	2300      	movne	r3, #0
 80012aa:	b2db      	uxtb	r3, r3
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <LL_I2C_IsActiveFlag_BUSY>:
  * @rmtoll SR2          BUSY          LL_I2C_IsActiveFlag_BUSY
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BUSY(I2C_TypeDef *I2Cx)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR2, I2C_SR2_BUSY) == (I2C_SR2_BUSY));
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	bf0c      	ite	eq
 80012cc:	2301      	moveq	r3, #1
 80012ce:	2300      	movne	r3, #0
 80012d0:	b2db      	uxtb	r3, r3
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <LL_I2C_ClearFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_ClearFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_ADDR(I2C_TypeDef *I2Cx)
{
 80012de:	b480      	push	{r7}
 80012e0:	b085      	sub	sp, #20
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = I2Cx->SR1;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80012ec:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80012f4:	68fb      	ldr	r3, [r7, #12]
}
 80012f6:	bf00      	nop
 80012f8:	3714      	adds	r7, #20
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8001302:	b480      	push	{r7}
 8001304:	b083      	sub	sp, #12
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
 800130a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	431a      	orrs	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	601a      	str	r2, [r3, #0]
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <LL_I2C_GenerateStartCondition>:
  * @rmtoll CR1          START         LL_I2C_GenerateStartCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	601a      	str	r2, [r3, #0]
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR1          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	601a      	str	r2, [r3, #0]
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <LL_I2C_ReceiveData8>:
  * @rmtoll DR           DR            LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x0 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	691b      	ldr	r3, [r3, #16]
 8001374:	b2db      	uxtb	r3, r3
}
 8001376:	4618      	mov	r0, r3
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8001382:	b480      	push	{r7}
 8001384:	b083      	sub	sp, #12
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
 800138a:	460b      	mov	r3, r1
 800138c:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8001396:	78fb      	ldrb	r3, [r7, #3]
 8001398:	431a      	orrs	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	611a      	str	r2, [r3, #16]
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <I2C_Write>:

#include "i2c.h"


I2C_Status_t I2C_Write(I2C_TypeDef *I2Cx, uint8_t addr, uint8_t reg, uint8_t data)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b084      	sub	sp, #16
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
 80013b2:	4608      	mov	r0, r1
 80013b4:	4611      	mov	r1, r2
 80013b6:	461a      	mov	r2, r3
 80013b8:	4603      	mov	r3, r0
 80013ba:	70fb      	strb	r3, [r7, #3]
 80013bc:	460b      	mov	r3, r1
 80013be:	70bb      	strb	r3, [r7, #2]
 80013c0:	4613      	mov	r3, r2
 80013c2:	707b      	strb	r3, [r7, #1]
	uint32_t timeout = I2C_TIMEOUT;
 80013c4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80013c8:	60fb      	str	r3, [r7, #12]
	while(LL_I2C_IsActiveFlag_BUSY(I2Cx) && timeout--);
 80013ca:	bf00      	nop
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff ff73 	bl	80012b8 <LL_I2C_IsActiveFlag_BUSY>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d004      	beq.n	80013e2 <I2C_Write+0x38>
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	1e5a      	subs	r2, r3, #1
 80013dc:	60fa      	str	r2, [r7, #12]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1f4      	bne.n	80013cc <I2C_Write+0x22>
	if (timeout == 0) return I2C_Error;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d101      	bne.n	80013ec <I2C_Write+0x42>
 80013e8:	2301      	movs	r3, #1
 80013ea:	e06a      	b.n	80014c2 <I2C_Write+0x118>

	LL_I2C_GenerateStartCondition(I2Cx);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff ff9b 	bl	8001328 <LL_I2C_GenerateStartCondition>
	timeout = I2C_TIMEOUT;
 80013f2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80013f6:	60fb      	str	r3, [r7, #12]
	while(!LL_I2C_IsActiveFlag_SB(I2Cx) && timeout--);
 80013f8:	bf00      	nop
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff ff36 	bl	800126c <LL_I2C_IsActiveFlag_SB>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d104      	bne.n	8001410 <I2C_Write+0x66>
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	1e5a      	subs	r2, r3, #1
 800140a:	60fa      	str	r2, [r7, #12]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d1f4      	bne.n	80013fa <I2C_Write+0x50>
	if (timeout == 0) return I2C_Error;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d101      	bne.n	800141a <I2C_Write+0x70>
 8001416:	2301      	movs	r3, #1
 8001418:	e053      	b.n	80014c2 <I2C_Write+0x118>

	LL_I2C_TransmitData8(I2Cx, addr << 1);
 800141a:	78fb      	ldrb	r3, [r7, #3]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	b2db      	uxtb	r3, r3
 8001420:	4619      	mov	r1, r3
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff ffad 	bl	8001382 <LL_I2C_TransmitData8>
	timeout = I2C_TIMEOUT;
 8001428:	f241 3388 	movw	r3, #5000	@ 0x1388
 800142c:	60fb      	str	r3, [r7, #12]
	while(!LL_I2C_IsActiveFlag_ADDR(I2Cx) && timeout--);
 800142e:	bf00      	nop
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff ff2e 	bl	8001292 <LL_I2C_IsActiveFlag_ADDR>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d104      	bne.n	8001446 <I2C_Write+0x9c>
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	1e5a      	subs	r2, r3, #1
 8001440:	60fa      	str	r2, [r7, #12]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1f4      	bne.n	8001430 <I2C_Write+0x86>
	if (timeout == 0) return I2C_Error;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d101      	bne.n	8001450 <I2C_Write+0xa6>
 800144c:	2301      	movs	r3, #1
 800144e:	e038      	b.n	80014c2 <I2C_Write+0x118>

	LL_I2C_ClearFlag_ADDR(I2Cx);
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff ff44 	bl	80012de <LL_I2C_ClearFlag_ADDR>
	LL_I2C_TransmitData8(I2Cx, reg);
 8001456:	78bb      	ldrb	r3, [r7, #2]
 8001458:	4619      	mov	r1, r3
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff ff91 	bl	8001382 <LL_I2C_TransmitData8>
	timeout = I2C_TIMEOUT;
 8001460:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001464:	60fb      	str	r3, [r7, #12]
	while(!LL_I2C_IsActiveFlag_TXE(I2Cx) && timeout--);
 8001466:	bf00      	nop
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff fed9 	bl	8001220 <LL_I2C_IsActiveFlag_TXE>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d104      	bne.n	800147e <I2C_Write+0xd4>
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	1e5a      	subs	r2, r3, #1
 8001478:	60fa      	str	r2, [r7, #12]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1f4      	bne.n	8001468 <I2C_Write+0xbe>
	if (timeout == 0) return I2C_Error;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d101      	bne.n	8001488 <I2C_Write+0xde>
 8001484:	2301      	movs	r3, #1
 8001486:	e01c      	b.n	80014c2 <I2C_Write+0x118>

	LL_I2C_TransmitData8(I2Cx, data);
 8001488:	787b      	ldrb	r3, [r7, #1]
 800148a:	4619      	mov	r1, r3
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7ff ff78 	bl	8001382 <LL_I2C_TransmitData8>
	timeout = I2C_TIMEOUT;
 8001492:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001496:	60fb      	str	r3, [r7, #12]
	while(!LL_I2C_IsActiveFlag_TXE(I2Cx) && timeout--);
 8001498:	bf00      	nop
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff fec0 	bl	8001220 <LL_I2C_IsActiveFlag_TXE>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d104      	bne.n	80014b0 <I2C_Write+0x106>
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	1e5a      	subs	r2, r3, #1
 80014aa:	60fa      	str	r2, [r7, #12]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d1f4      	bne.n	800149a <I2C_Write+0xf0>
	if (timeout == 0) return I2C_Error;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <I2C_Write+0x110>
 80014b6:	2301      	movs	r3, #1
 80014b8:	e003      	b.n	80014c2 <I2C_Write+0x118>

	LL_I2C_GenerateStopCondition(I2Cx);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff ff44 	bl	8001348 <LL_I2C_GenerateStopCondition>
	return I2C_Success;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <I2C_ReadMulti>:
	*pData = data;
	return I2C_Success;
}

I2C_Status_t I2C_ReadMulti(I2C_TypeDef *I2Cx, uint8_t addr, uint8_t reg, uint8_t* pData, uint16_t size)
{
 80014ca:	b590      	push	{r4, r7, lr}
 80014cc:	b087      	sub	sp, #28
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	60f8      	str	r0, [r7, #12]
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	460b      	mov	r3, r1
 80014d6:	72fb      	strb	r3, [r7, #11]
 80014d8:	4613      	mov	r3, r2
 80014da:	72bb      	strb	r3, [r7, #10]
	uint32_t timeout = I2C_TIMEOUT;
 80014dc:	f241 3388 	movw	r3, #5000	@ 0x1388
 80014e0:	617b      	str	r3, [r7, #20]

	while (LL_I2C_IsActiveFlag_BUSY(I2Cx) && timeout--);
 80014e2:	bf00      	nop
 80014e4:	68f8      	ldr	r0, [r7, #12]
 80014e6:	f7ff fee7 	bl	80012b8 <LL_I2C_IsActiveFlag_BUSY>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d004      	beq.n	80014fa <I2C_ReadMulti+0x30>
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	1e5a      	subs	r2, r3, #1
 80014f4:	617a      	str	r2, [r7, #20]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1f4      	bne.n	80014e4 <I2C_ReadMulti+0x1a>
	if (timeout == 0) return I2C_Error;
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <I2C_ReadMulti+0x3a>
 8001500:	2301      	movs	r3, #1
 8001502:	e0e0      	b.n	80016c6 <I2C_ReadMulti+0x1fc>

	LL_I2C_GenerateStartCondition(I2Cx);
 8001504:	68f8      	ldr	r0, [r7, #12]
 8001506:	f7ff ff0f 	bl	8001328 <LL_I2C_GenerateStartCondition>
	timeout = I2C_TIMEOUT;
 800150a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800150e:	617b      	str	r3, [r7, #20]
	while (!LL_I2C_IsActiveFlag_SB(I2Cx) && timeout--);
 8001510:	bf00      	nop
 8001512:	68f8      	ldr	r0, [r7, #12]
 8001514:	f7ff feaa 	bl	800126c <LL_I2C_IsActiveFlag_SB>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d104      	bne.n	8001528 <I2C_ReadMulti+0x5e>
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	1e5a      	subs	r2, r3, #1
 8001522:	617a      	str	r2, [r7, #20]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1f4      	bne.n	8001512 <I2C_ReadMulti+0x48>
	if (timeout == 0) return I2C_Error;
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <I2C_ReadMulti+0x68>
 800152e:	2301      	movs	r3, #1
 8001530:	e0c9      	b.n	80016c6 <I2C_ReadMulti+0x1fc>

	LL_I2C_TransmitData8(I2Cx, addr << 1);
 8001532:	7afb      	ldrb	r3, [r7, #11]
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	b2db      	uxtb	r3, r3
 8001538:	4619      	mov	r1, r3
 800153a:	68f8      	ldr	r0, [r7, #12]
 800153c:	f7ff ff21 	bl	8001382 <LL_I2C_TransmitData8>
	timeout = I2C_TIMEOUT;
 8001540:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001544:	617b      	str	r3, [r7, #20]
	while (!LL_I2C_IsActiveFlag_ADDR(I2Cx) && timeout--);
 8001546:	bf00      	nop
 8001548:	68f8      	ldr	r0, [r7, #12]
 800154a:	f7ff fea2 	bl	8001292 <LL_I2C_IsActiveFlag_ADDR>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d104      	bne.n	800155e <I2C_ReadMulti+0x94>
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	1e5a      	subs	r2, r3, #1
 8001558:	617a      	str	r2, [r7, #20]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1f4      	bne.n	8001548 <I2C_ReadMulti+0x7e>
	if (timeout == 0) return I2C_Error;
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d101      	bne.n	8001568 <I2C_ReadMulti+0x9e>
 8001564:	2301      	movs	r3, #1
 8001566:	e0ae      	b.n	80016c6 <I2C_ReadMulti+0x1fc>
	LL_I2C_ClearFlag_ADDR(I2Cx);
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f7ff feb8 	bl	80012de <LL_I2C_ClearFlag_ADDR>

	timeout = I2C_TIMEOUT;
 800156e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001572:	617b      	str	r3, [r7, #20]
	while (!LL_I2C_IsActiveFlag_TXE(I2Cx) && timeout--);
 8001574:	bf00      	nop
 8001576:	68f8      	ldr	r0, [r7, #12]
 8001578:	f7ff fe52 	bl	8001220 <LL_I2C_IsActiveFlag_TXE>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d104      	bne.n	800158c <I2C_ReadMulti+0xc2>
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	1e5a      	subs	r2, r3, #1
 8001586:	617a      	str	r2, [r7, #20]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1f4      	bne.n	8001576 <I2C_ReadMulti+0xac>
	if (timeout == 0) return I2C_Error;
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d101      	bne.n	8001596 <I2C_ReadMulti+0xcc>
 8001592:	2301      	movs	r3, #1
 8001594:	e097      	b.n	80016c6 <I2C_ReadMulti+0x1fc>
	LL_I2C_TransmitData8(I2Cx, reg);
 8001596:	7abb      	ldrb	r3, [r7, #10]
 8001598:	4619      	mov	r1, r3
 800159a:	68f8      	ldr	r0, [r7, #12]
 800159c:	f7ff fef1 	bl	8001382 <LL_I2C_TransmitData8>

	timeout = I2C_TIMEOUT;
 80015a0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80015a4:	617b      	str	r3, [r7, #20]
	while (!LL_I2C_IsActiveFlag_TXE(I2Cx) && timeout--);
 80015a6:	bf00      	nop
 80015a8:	68f8      	ldr	r0, [r7, #12]
 80015aa:	f7ff fe39 	bl	8001220 <LL_I2C_IsActiveFlag_TXE>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d104      	bne.n	80015be <I2C_ReadMulti+0xf4>
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	1e5a      	subs	r2, r3, #1
 80015b8:	617a      	str	r2, [r7, #20]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f4      	bne.n	80015a8 <I2C_ReadMulti+0xde>
	if (timeout == 0) return I2C_Error;
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <I2C_ReadMulti+0xfe>
 80015c4:	2301      	movs	r3, #1
 80015c6:	e07e      	b.n	80016c6 <I2C_ReadMulti+0x1fc>

	LL_I2C_GenerateStartCondition(I2Cx);
 80015c8:	68f8      	ldr	r0, [r7, #12]
 80015ca:	f7ff fead 	bl	8001328 <LL_I2C_GenerateStartCondition>
	timeout = I2C_TIMEOUT;
 80015ce:	f241 3388 	movw	r3, #5000	@ 0x1388
 80015d2:	617b      	str	r3, [r7, #20]
	while (!LL_I2C_IsActiveFlag_SB(I2Cx) && timeout--);
 80015d4:	bf00      	nop
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	f7ff fe48 	bl	800126c <LL_I2C_IsActiveFlag_SB>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d104      	bne.n	80015ec <I2C_ReadMulti+0x122>
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	1e5a      	subs	r2, r3, #1
 80015e6:	617a      	str	r2, [r7, #20]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d1f4      	bne.n	80015d6 <I2C_ReadMulti+0x10c>
	if (timeout == 0) return I2C_Error;
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <I2C_ReadMulti+0x12c>
 80015f2:	2301      	movs	r3, #1
 80015f4:	e067      	b.n	80016c6 <I2C_ReadMulti+0x1fc>

	LL_I2C_TransmitData8(I2Cx, (addr << 1) | 1);
 80015f6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	b25b      	sxtb	r3, r3
 80015fe:	f043 0301 	orr.w	r3, r3, #1
 8001602:	b25b      	sxtb	r3, r3
 8001604:	b2db      	uxtb	r3, r3
 8001606:	4619      	mov	r1, r3
 8001608:	68f8      	ldr	r0, [r7, #12]
 800160a:	f7ff feba 	bl	8001382 <LL_I2C_TransmitData8>
	timeout = I2C_TIMEOUT;
 800160e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001612:	617b      	str	r3, [r7, #20]
	while (!LL_I2C_IsActiveFlag_ADDR(I2Cx) && timeout--);
 8001614:	bf00      	nop
 8001616:	68f8      	ldr	r0, [r7, #12]
 8001618:	f7ff fe3b 	bl	8001292 <LL_I2C_IsActiveFlag_ADDR>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d104      	bne.n	800162c <I2C_ReadMulti+0x162>
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	1e5a      	subs	r2, r3, #1
 8001626:	617a      	str	r2, [r7, #20]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1f4      	bne.n	8001616 <I2C_ReadMulti+0x14c>
	if (timeout == 0) return I2C_Error;
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <I2C_ReadMulti+0x16c>
 8001632:	2301      	movs	r3, #1
 8001634:	e047      	b.n	80016c6 <I2C_ReadMulti+0x1fc>

	if (size == 1) {
 8001636:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001638:	2b01      	cmp	r3, #1
 800163a:	d104      	bne.n	8001646 <I2C_ReadMulti+0x17c>
		LL_I2C_AcknowledgeNextData(I2Cx, LL_I2C_NACK);
 800163c:	2100      	movs	r1, #0
 800163e:	68f8      	ldr	r0, [r7, #12]
 8001640:	f7ff fe5f 	bl	8001302 <LL_I2C_AcknowledgeNextData>
 8001644:	e004      	b.n	8001650 <I2C_ReadMulti+0x186>
	} else {
		LL_I2C_AcknowledgeNextData(I2Cx, LL_I2C_ACK);
 8001646:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	f7ff fe59 	bl	8001302 <LL_I2C_AcknowledgeNextData>
	}
	LL_I2C_ClearFlag_ADDR(I2Cx);
 8001650:	68f8      	ldr	r0, [r7, #12]
 8001652:	f7ff fe44 	bl	80012de <LL_I2C_ClearFlag_ADDR>

	for (uint16_t i = 0; i < size; i++) {
 8001656:	2300      	movs	r3, #0
 8001658:	827b      	strh	r3, [r7, #18]
 800165a:	e02f      	b.n	80016bc <I2C_ReadMulti+0x1f2>
		timeout = I2C_TIMEOUT;
 800165c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001660:	617b      	str	r3, [r7, #20]
		while (!LL_I2C_IsActiveFlag_RXNE(I2Cx) && timeout--);
 8001662:	bf00      	nop
 8001664:	68f8      	ldr	r0, [r7, #12]
 8001666:	f7ff fdee 	bl	8001246 <LL_I2C_IsActiveFlag_RXNE>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d104      	bne.n	800167a <I2C_ReadMulti+0x1b0>
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	1e5a      	subs	r2, r3, #1
 8001674:	617a      	str	r2, [r7, #20]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1f4      	bne.n	8001664 <I2C_ReadMulti+0x19a>
		if (timeout == 0) return I2C_Error;
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d101      	bne.n	8001684 <I2C_ReadMulti+0x1ba>
 8001680:	2301      	movs	r3, #1
 8001682:	e020      	b.n	80016c6 <I2C_ReadMulti+0x1fc>

		if (i == (size - 2)) {
 8001684:	8a7a      	ldrh	r2, [r7, #18]
 8001686:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001688:	3b02      	subs	r3, #2
 800168a:	429a      	cmp	r2, r3
 800168c:	d103      	bne.n	8001696 <I2C_ReadMulti+0x1cc>
			LL_I2C_AcknowledgeNextData(I2Cx, LL_I2C_NACK);
 800168e:	2100      	movs	r1, #0
 8001690:	68f8      	ldr	r0, [r7, #12]
 8001692:	f7ff fe36 	bl	8001302 <LL_I2C_AcknowledgeNextData>
		}
		if (i == (size - 1)) {
 8001696:	8a7a      	ldrh	r2, [r7, #18]
 8001698:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800169a:	3b01      	subs	r3, #1
 800169c:	429a      	cmp	r2, r3
 800169e:	d102      	bne.n	80016a6 <I2C_ReadMulti+0x1dc>
			LL_I2C_GenerateStopCondition(I2Cx);
 80016a0:	68f8      	ldr	r0, [r7, #12]
 80016a2:	f7ff fe51 	bl	8001348 <LL_I2C_GenerateStopCondition>
		}

		pData[i] = LL_I2C_ReceiveData8(I2Cx);
 80016a6:	8a7b      	ldrh	r3, [r7, #18]
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	18d4      	adds	r4, r2, r3
 80016ac:	68f8      	ldr	r0, [r7, #12]
 80016ae:	f7ff fe5b 	bl	8001368 <LL_I2C_ReceiveData8>
 80016b2:	4603      	mov	r3, r0
 80016b4:	7023      	strb	r3, [r4, #0]
	for (uint16_t i = 0; i < size; i++) {
 80016b6:	8a7b      	ldrh	r3, [r7, #18]
 80016b8:	3301      	adds	r3, #1
 80016ba:	827b      	strh	r3, [r7, #18]
 80016bc:	8a7a      	ldrh	r2, [r7, #18]
 80016be:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d3cb      	bcc.n	800165c <I2C_ReadMulti+0x192>
	}

	return I2C_Success;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	371c      	adds	r7, #28
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd90      	pop	{r4, r7, pc}

080016ce <LL_I2C_Enable>:
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f043 0201 	orr.w	r2, r3, #1
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	601a      	str	r2, [r3, #0]
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <LL_I2C_Disable>:
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f023 0201 	bic.w	r2, r3, #1
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	601a      	str	r2, [r3, #0]
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <LL_I2C_EnableClockStretching>:
{
 800170e:	b480      	push	{r7}
 8001710:	b083      	sub	sp, #12
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	601a      	str	r2, [r3, #0]
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <LL_I2C_DisableGeneralCall>:
{
 800172e:	b480      	push	{r7}
 8001730:	b083      	sub	sp, #12
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	601a      	str	r2, [r3, #0]
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <LL_I2C_DisableOwnAddress2>:
{
 800174e:	b480      	push	{r7}
 8001750:	b083      	sub	sp, #12
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	f023 0201 	bic.w	r2, r3, #1
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	60da      	str	r2, [r3, #12]
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <LL_I2C_EnableIT_EVT>:
{
 800176e:	b480      	push	{r7}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	605a      	str	r2, [r3, #4]
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <LL_I2C_EnableIT_BUF>:
{
 800178e:	b480      	push	{r7}
 8001790:	b083      	sub	sp, #12
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_ITBUFEN);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	605a      	str	r2, [r3, #4]
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <LL_I2C_DisableIT_BUF>:
{
 80017ae:	b480      	push	{r7}
 80017b0:	b083      	sub	sp, #12
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITBUFEN);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	605a      	str	r2, [r3, #4]
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <LL_I2C_EnableIT_ERR>:
{
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_ITERREN);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	605a      	str	r2, [r3, #4]
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <LL_I2C_IsActiveFlag_TXE>:
{
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017fe:	2b80      	cmp	r3, #128	@ 0x80
 8001800:	bf0c      	ite	eq
 8001802:	2301      	moveq	r3, #1
 8001804:	2300      	movne	r3, #0
 8001806:	b2db      	uxtb	r3, r3
}
 8001808:	4618      	mov	r0, r3
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <LL_I2C_IsActiveFlag_RXNE>:
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	695b      	ldr	r3, [r3, #20]
 8001820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001824:	2b40      	cmp	r3, #64	@ 0x40
 8001826:	bf0c      	ite	eq
 8001828:	2301      	moveq	r3, #1
 800182a:	2300      	movne	r3, #0
 800182c:	b2db      	uxtb	r3, r3
}
 800182e:	4618      	mov	r0, r3
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <LL_I2C_IsActiveFlag_ADDR>:
{
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	695b      	ldr	r3, [r3, #20]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b02      	cmp	r3, #2
 800184c:	bf0c      	ite	eq
 800184e:	2301      	moveq	r3, #1
 8001850:	2300      	movne	r3, #0
 8001852:	b2db      	uxtb	r3, r3
}
 8001854:	4618      	mov	r0, r3
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <LL_I2C_IsActiveFlag_AF>:
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_AF) == (I2C_SR1_AF));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	695b      	ldr	r3, [r3, #20]
 800186c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001870:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001874:	bf0c      	ite	eq
 8001876:	2301      	moveq	r3, #1
 8001878:	2300      	movne	r3, #0
 800187a:	b2db      	uxtb	r3, r3
}
 800187c:	4618      	mov	r0, r3
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <LL_I2C_IsActiveFlag_STOP>:
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_STOPF) == (I2C_SR1_STOPF));
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	695b      	ldr	r3, [r3, #20]
 8001894:	f003 0310 	and.w	r3, r3, #16
 8001898:	2b10      	cmp	r3, #16
 800189a:	bf0c      	ite	eq
 800189c:	2301      	moveq	r3, #1
 800189e:	2300      	movne	r3, #0
 80018a0:	b2db      	uxtb	r3, r3
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <LL_I2C_IsActiveFlag_BERR>:
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_BERR) == (I2C_SR1_BERR));
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	695b      	ldr	r3, [r3, #20]
 80018ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018c2:	bf0c      	ite	eq
 80018c4:	2301      	moveq	r3, #1
 80018c6:	2300      	movne	r3, #0
 80018c8:	b2db      	uxtb	r3, r3
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <LL_I2C_IsActiveFlag_ARLO>:
{
 80018d6:	b480      	push	{r7}
 80018d8:	b083      	sub	sp, #12
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ARLO) == (I2C_SR1_ARLO));
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80018ea:	bf0c      	ite	eq
 80018ec:	2301      	moveq	r3, #1
 80018ee:	2300      	movne	r3, #0
 80018f0:	b2db      	uxtb	r3, r3
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <LL_I2C_IsActiveFlag_OVR>:
{
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_OVR) == (I2C_SR1_OVR));
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800190e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001912:	bf0c      	ite	eq
 8001914:	2301      	moveq	r3, #1
 8001916:	2300      	movne	r3, #0
 8001918:	b2db      	uxtb	r3, r3
}
 800191a:	4618      	mov	r0, r3
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <LL_I2C_ClearFlag_ADDR>:
{
 8001926:	b480      	push	{r7}
 8001928:	b085      	sub	sp, #20
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
  tmpreg = I2Cx->SR1;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001934:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800193c:	68fb      	ldr	r3, [r7, #12]
}
 800193e:	bf00      	nop
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <LL_I2C_ClearFlag_AF>:
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->SR1, I2C_SR1_AF);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	615a      	str	r2, [r3, #20]
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <LL_I2C_ClearFlag_STOP>:
{
 800196a:	b480      	push	{r7}
 800196c:	b085      	sub	sp, #20
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
  tmpreg = I2Cx->SR1;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001978:	68fb      	ldr	r3, [r7, #12]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f043 0201 	orr.w	r2, r3, #1
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	601a      	str	r2, [r3, #0]
}
 8001986:	bf00      	nop
 8001988:	3714      	adds	r7, #20
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <LL_I2C_ClearFlag_BERR>:
{
 8001992:	b480      	push	{r7}
 8001994:	b083      	sub	sp, #12
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->SR1, I2C_SR1_BERR);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	615a      	str	r2, [r3, #20]
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr

080019b2 <LL_I2C_ClearFlag_ARLO>:
{
 80019b2:	b480      	push	{r7}
 80019b4:	b083      	sub	sp, #12
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->SR1, I2C_SR1_ARLO);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	615a      	str	r2, [r3, #20]
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <LL_I2C_ClearFlag_OVR>:
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->SR1, I2C_SR1_OVR);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	615a      	str	r2, [r3, #20]
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <LL_I2C_GetTransferDirection>:
{
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(I2Cx->SR2, I2C_SR2_TRA));
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	f003 0304 	and.w	r3, r3, #4
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <LL_I2C_ReceiveData8>:
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	b2db      	uxtb	r3, r3
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <LL_I2C_TransmitData8>:
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	460b      	mov	r3, r1
 8001a32:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8001a3c:	78fb      	ldrb	r3, [r7, #3]
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	611a      	str	r2, [r3, #16]
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <I2C_ReInit>:

    while ((SysTick->VAL - start_tick) < ticks);
}

void I2C_ReInit(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
    LL_I2C_Disable(I2C_slave_obj.I2Cx);
 8001a56:	4b24      	ldr	r3, [pc, #144]	@ (8001ae8 <I2C_ReInit+0x98>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff fe47 	bl	80016ee <LL_I2C_Disable>
    LL_I2C_DeInit(I2C_slave_obj.I2Cx);
 8001a60:	4b21      	ldr	r3, [pc, #132]	@ (8001ae8 <I2C_ReInit+0x98>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f009 fdc9 	bl	800b5fc <LL_I2C_DeInit>

    LL_I2C_EnableClockStretching(I2C_slave_obj.I2Cx);
 8001a6a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ae8 <I2C_ReInit+0x98>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff fe4d 	bl	800170e <LL_I2C_EnableClockStretching>
    LL_I2C_DisableGeneralCall(I2C_slave_obj.I2Cx);
 8001a74:	4b1c      	ldr	r3, [pc, #112]	@ (8001ae8 <I2C_ReInit+0x98>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff fe58 	bl	800172e <LL_I2C_DisableGeneralCall>
    LL_I2C_DisableOwnAddress2(I2C_slave_obj.I2Cx);
 8001a7e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae8 <I2C_ReInit+0x98>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff fe63 	bl	800174e <LL_I2C_DisableOwnAddress2>

    LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001a88:	463b      	mov	r3, r7
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	605a      	str	r2, [r3, #4]
 8001a90:	609a      	str	r2, [r3, #8]
 8001a92:	60da      	str	r2, [r3, #12]
 8001a94:	611a      	str	r2, [r3, #16]
 8001a96:	615a      	str	r2, [r3, #20]
    I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	603b      	str	r3, [r7, #0]
    I2C_InitStruct.ClockSpeed = 100000;
 8001a9c:	4b13      	ldr	r3, [pc, #76]	@ (8001aec <I2C_ReInit+0x9c>)
 8001a9e:	607b      	str	r3, [r7, #4]
    I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60bb      	str	r3, [r7, #8]
    I2C_InitStruct.OwnAddress1 = 36;  // 0x12
 8001aa4:	2324      	movs	r3, #36	@ 0x24
 8001aa6:	60fb      	str	r3, [r7, #12]
    I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001aa8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001aac:	613b      	str	r3, [r7, #16]
    I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001aae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001ab2:	617b      	str	r3, [r7, #20]
    LL_I2C_Init(I2C_slave_obj.I2Cx, &I2C_InitStruct);
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae8 <I2C_ReInit+0x98>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	463a      	mov	r2, r7
 8001aba:	4611      	mov	r1, r2
 8001abc:	4618      	mov	r0, r3
 8001abe:	f009 fdd7 	bl	800b670 <LL_I2C_Init>

    LL_I2C_EnableIT_EVT(I2C_slave_obj.I2Cx);
 8001ac2:	4b09      	ldr	r3, [pc, #36]	@ (8001ae8 <I2C_ReInit+0x98>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff fe51 	bl	800176e <LL_I2C_EnableIT_EVT>
    LL_I2C_EnableIT_ERR(I2C_slave_obj.I2Cx);
 8001acc:	4b06      	ldr	r3, [pc, #24]	@ (8001ae8 <I2C_ReInit+0x98>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff fe7c 	bl	80017ce <LL_I2C_EnableIT_ERR>
    LL_I2C_Enable(I2C_slave_obj.I2Cx);
 8001ad6:	4b04      	ldr	r3, [pc, #16]	@ (8001ae8 <I2C_ReInit+0x98>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff fdf7 	bl	80016ce <LL_I2C_Enable>
}
 8001ae0:	bf00      	nop
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20004510 	.word	0x20004510
 8001aec:	000186a0 	.word	0x000186a0

08001af0 <i2c_slave_clear>:

        rx_busy_counter = 0;
    }
}

void i2c_slave_clear(void) {
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
    I2C_slave_obj.reg_address = 0;
 8001af4:	4b0a      	ldr	r3, [pc, #40]	@ (8001b20 <i2c_slave_clear+0x30>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	715a      	strb	r2, [r3, #5]
    I2C_slave_obj.curr_idx = NONE;
 8001afa:	4b09      	ldr	r3, [pc, #36]	@ (8001b20 <i2c_slave_clear+0x30>)
 8001afc:	f04f 32ff 	mov.w	r2, #4294967295
 8001b00:	601a      	str	r2, [r3, #0]
    I2C_slave_obj.reg_addr_rcvd = 0;
 8001b02:	4b07      	ldr	r3, [pc, #28]	@ (8001b20 <i2c_slave_clear+0x30>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	711a      	strb	r2, [r3, #4]
    I2C_slave_obj.ready_to_answer = 0;
 8001b08:	4b05      	ldr	r3, [pc, #20]	@ (8001b20 <i2c_slave_clear+0x30>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	719a      	strb	r2, [r3, #6]
    I2C_slave_obj.ready_to_write = 0;
 8001b0e:	4b04      	ldr	r3, [pc, #16]	@ (8001b20 <i2c_slave_clear+0x30>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	71da      	strb	r2, [r3, #7]
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	20004510 	.word	0x20004510

08001b24 <i2c_slave_init>:

int i2c_slave_init(I2C_TypeDef *I2Cx) {
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
    I2C_slave_obj.I2Cx = I2Cx;
 8001b2c:	4a09      	ldr	r2, [pc, #36]	@ (8001b54 <i2c_slave_init+0x30>)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6093      	str	r3, [r2, #8]
    I2C_Slave_Status = I2C_Status_OK;
 8001b32:	4b09      	ldr	r3, [pc, #36]	@ (8001b58 <i2c_slave_init+0x34>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	701a      	strb	r2, [r3, #0]
    i2c_slave_clear();
 8001b38:	f7ff ffda 	bl	8001af0 <i2c_slave_clear>
    memset(external_memory, 0, sizeof(external_memory));
 8001b3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b40:	2100      	movs	r1, #0
 8001b42:	4806      	ldr	r0, [pc, #24]	@ (8001b5c <i2c_slave_init+0x38>)
 8001b44:	f00b fda7 	bl	800d696 <memset>

    return 0;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20004510 	.word	0x20004510
 8001b58:	2000451c 	.word	0x2000451c
 8001b5c:	20004410 	.word	0x20004410

08001b60 <I2C_event_IRQ>:

//static uint8_t data_index = 0;

void I2C_event_IRQ(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b096      	sub	sp, #88	@ 0x58
 8001b64:	af00      	add	r7, sp, #0
	I2C_Slave_Status = I2C_Status_BUSY;
 8001b66:	4b78      	ldr	r3, [pc, #480]	@ (8001d48 <I2C_event_IRQ+0x1e8>)
 8001b68:	2201      	movs	r2, #1
 8001b6a:	701a      	strb	r2, [r3, #0]
    if (LL_I2C_IsActiveFlag_ADDR(I2C_slave_obj.I2Cx))
 8001b6c:	4b77      	ldr	r3, [pc, #476]	@ (8001d4c <I2C_event_IRQ+0x1ec>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff fe62 	bl	800183a <LL_I2C_IsActiveFlag_ADDR>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d01a      	beq.n	8001bb2 <I2C_event_IRQ+0x52>
    {
        LL_I2C_ClearFlag_ADDR(I2C_slave_obj.I2Cx);
 8001b7c:	4b73      	ldr	r3, [pc, #460]	@ (8001d4c <I2C_event_IRQ+0x1ec>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff fed0 	bl	8001926 <LL_I2C_ClearFlag_ADDR>
        if (LL_I2C_GetTransferDirection(I2C_slave_obj.I2Cx) == LL_I2C_DIRECTION_WRITE)
 8001b86:	4b71      	ldr	r3, [pc, #452]	@ (8001d4c <I2C_event_IRQ+0x1ec>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff ff31 	bl	80019f2 <LL_I2C_GetTransferDirection>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b04      	cmp	r3, #4
 8001b94:	d108      	bne.n	8001ba8 <I2C_event_IRQ+0x48>
        {
            I2C_slave_obj.reg_addr_rcvd = 0;
 8001b96:	4b6d      	ldr	r3, [pc, #436]	@ (8001d4c <I2C_event_IRQ+0x1ec>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	711a      	strb	r2, [r3, #4]
            LL_I2C_EnableIT_BUF(I2C_slave_obj.I2Cx);
 8001b9c:	4b6b      	ldr	r3, [pc, #428]	@ (8001d4c <I2C_event_IRQ+0x1ec>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff fdf4 	bl	800178e <LL_I2C_EnableIT_BUF>
 8001ba6:	e004      	b.n	8001bb2 <I2C_event_IRQ+0x52>
        else
        {
//            I2C_slave_obj.curr_idx = reg_get_index(I2C_slave_obj.reg_address);
//            data_index = 0;
//	          UART_SendStringRing(UART_CMDLINE, "FREAL\r\n");
            LL_I2C_EnableIT_BUF(I2C_slave_obj.I2Cx);
 8001ba8:	4b68      	ldr	r3, [pc, #416]	@ (8001d4c <I2C_event_IRQ+0x1ec>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff fdee 	bl	800178e <LL_I2C_EnableIT_BUF>
        }
    }

    // Data Register Empty (Trans)
    if (LL_I2C_IsActiveFlag_TXE(I2C_slave_obj.I2Cx))
 8001bb2:	4b66      	ldr	r3, [pc, #408]	@ (8001d4c <I2C_event_IRQ+0x1ec>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff fe19 	bl	80017ee <LL_I2C_IsActiveFlag_TXE>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d052      	beq.n	8001c68 <I2C_event_IRQ+0x108>
    {
        char buffer[30];
        uint8_t data_to_send = 0x00;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        snprintf(buffer, sizeof(buffer), "\r\nI2C Before Index:[%d]\r\n", I2C_slave_obj.curr_idx);
 8001bc8:	4b60      	ldr	r3, [pc, #384]	@ (8001d4c <I2C_event_IRQ+0x1ec>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8001bd0:	4a5f      	ldr	r2, [pc, #380]	@ (8001d50 <I2C_event_IRQ+0x1f0>)
 8001bd2:	211e      	movs	r1, #30
 8001bd4:	f00b fcaa 	bl	800d52c <sniprintf>
        UART_SendStringRing(UART_CMDLINE, buffer);
 8001bd8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001bdc:	4619      	mov	r1, r3
 8001bde:	485d      	ldr	r0, [pc, #372]	@ (8001d54 <I2C_event_IRQ+0x1f4>)
 8001be0:	f000 fbd8 	bl	8002394 <UART_SendStringRing>
		snprintf(buffer, sizeof(buffer), "\r\nI2C Index:[%d]\r\n", I2C_slave_obj.curr_idx);
 8001be4:	4b59      	ldr	r3, [pc, #356]	@ (8001d4c <I2C_event_IRQ+0x1ec>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8001bec:	4a5a      	ldr	r2, [pc, #360]	@ (8001d58 <I2C_event_IRQ+0x1f8>)
 8001bee:	211e      	movs	r1, #30
 8001bf0:	f00b fc9c 	bl	800d52c <sniprintf>
		UART_SendStringRing(UART_CMDLINE,buffer);
 8001bf4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4856      	ldr	r0, [pc, #344]	@ (8001d54 <I2C_event_IRQ+0x1f4>)
 8001bfc:	f000 fbca 	bl	8002394 <UART_SendStringRing>
		data_to_send = g_registers[I2C_slave_obj.curr_idx].value;
 8001c00:	4b52      	ldr	r3, [pc, #328]	@ (8001d4c <I2C_event_IRQ+0x1ec>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4955      	ldr	r1, [pc, #340]	@ (8001d5c <I2C_event_IRQ+0x1fc>)
 8001c06:	4613      	mov	r3, r2
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	4413      	add	r3, r2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	3302      	adds	r3, #2
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		snprintf(buffer, sizeof(buffer), "\r\nI2C GetDataIndex:[%d]\r\n", data_to_send);
 8001c16:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001c1a:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8001c1e:	4a50      	ldr	r2, [pc, #320]	@ (8001d60 <I2C_event_IRQ+0x200>)
 8001c20:	211e      	movs	r1, #30
 8001c22:	f00b fc83 	bl	800d52c <sniprintf>
		UART_SendStringRing(UART_CMDLINE,buffer);
 8001c26:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4849      	ldr	r0, [pc, #292]	@ (8001d54 <I2C_event_IRQ+0x1f4>)
 8001c2e:	f000 fbb1 	bl	8002394 <UART_SendStringRing>
        snprintf(buffer, sizeof(buffer), "\r\nI2C Response:[%d]\r\n", data_to_send);
 8001c32:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001c36:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8001c3a:	4a4a      	ldr	r2, [pc, #296]	@ (8001d64 <I2C_event_IRQ+0x204>)
 8001c3c:	211e      	movs	r1, #30
 8001c3e:	f00b fc75 	bl	800d52c <sniprintf>
        UART_SendStringRing(UART_CMDLINE,buffer);
 8001c42:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001c46:	4619      	mov	r1, r3
 8001c48:	4842      	ldr	r0, [pc, #264]	@ (8001d54 <I2C_event_IRQ+0x1f4>)
 8001c4a:	f000 fba3 	bl	8002394 <UART_SendStringRing>
        LL_I2C_TransmitData8(I2C_slave_obj.I2Cx, data_to_send);
 8001c4e:	4b3f      	ldr	r3, [pc, #252]	@ (8001d4c <I2C_event_IRQ+0x1ec>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8001c56:	4611      	mov	r1, r2
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff fee5 	bl	8001a28 <LL_I2C_TransmitData8>
        LL_I2C_DisableIT_BUF(I2C_slave_obj.I2Cx);
 8001c5e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d4c <I2C_event_IRQ+0x1ec>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff fda3 	bl	80017ae <LL_I2C_DisableIT_BUF>
    }
    // Data Register Not Empty (Recv)
    if (LL_I2C_IsActiveFlag_RXNE(I2C_slave_obj.I2Cx)) {
 8001c68:	4b38      	ldr	r3, [pc, #224]	@ (8001d4c <I2C_event_IRQ+0x1ec>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff fdd1 	bl	8001814 <LL_I2C_IsActiveFlag_RXNE>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d04a      	beq.n	8001d0e <I2C_event_IRQ+0x1ae>
        uint8_t received = LL_I2C_ReceiveData8(I2C_slave_obj.I2Cx);
 8001c78:	4b34      	ldr	r3, [pc, #208]	@ (8001d4c <I2C_event_IRQ+0x1ec>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff fec6 	bl	8001a0e <LL_I2C_ReceiveData8>
 8001c82:	4603      	mov	r3, r0
 8001c84:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
        if (!I2C_slave_obj.reg_addr_rcvd)
 8001c88:	4b30      	ldr	r3, [pc, #192]	@ (8001d4c <I2C_event_IRQ+0x1ec>)
 8001c8a:	791b      	ldrb	r3, [r3, #4]
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d11f      	bne.n	8001cd2 <I2C_event_IRQ+0x172>
        {
            I2C_slave_obj.reg_address = received;
 8001c92:	4a2e      	ldr	r2, [pc, #184]	@ (8001d4c <I2C_event_IRQ+0x1ec>)
 8001c94:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8001c98:	7153      	strb	r3, [r2, #5]
            char buffer[50];
            snprintf(buffer, sizeof(buffer), "Address:[%d]\r\n", received);
 8001c9a:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8001c9e:	1d38      	adds	r0, r7, #4
 8001ca0:	4a31      	ldr	r2, [pc, #196]	@ (8001d68 <I2C_event_IRQ+0x208>)
 8001ca2:	2132      	movs	r1, #50	@ 0x32
 8001ca4:	f00b fc42 	bl	800d52c <sniprintf>
            UART_SendStringRing(UART_CMDLINE, buffer);
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	4619      	mov	r1, r3
 8001cac:	4829      	ldr	r0, [pc, #164]	@ (8001d54 <I2C_event_IRQ+0x1f4>)
 8001cae:	f000 fb71 	bl	8002394 <UART_SendStringRing>
            I2C_slave_obj.reg_addr_rcvd = 1;
 8001cb2:	4b26      	ldr	r3, [pc, #152]	@ (8001d4c <I2C_event_IRQ+0x1ec>)
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	711a      	strb	r2, [r3, #4]
            snprintf(buffer, sizeof(buffer), "GET INDEX:[%d]\r\n", I2C_slave_obj.curr_idx);
 8001cb8:	4b24      	ldr	r3, [pc, #144]	@ (8001d4c <I2C_event_IRQ+0x1ec>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	1d38      	adds	r0, r7, #4
 8001cbe:	4a2b      	ldr	r2, [pc, #172]	@ (8001d6c <I2C_event_IRQ+0x20c>)
 8001cc0:	2132      	movs	r1, #50	@ 0x32
 8001cc2:	f00b fc33 	bl	800d52c <sniprintf>
            UART_SendStringRing(UART_CMDLINE, buffer);
 8001cc6:	1d3b      	adds	r3, r7, #4
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4822      	ldr	r0, [pc, #136]	@ (8001d54 <I2C_event_IRQ+0x1f4>)
 8001ccc:	f000 fb62 	bl	8002394 <UART_SendStringRing>
 8001cd0:	e01d      	b.n	8001d0e <I2C_event_IRQ+0x1ae>
        }
        else
        {
            if (g_registers[I2C_slave_obj.curr_idx].access == FULL_ACCESS)
 8001cd2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d4c <I2C_event_IRQ+0x1ec>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	4921      	ldr	r1, [pc, #132]	@ (8001d5c <I2C_event_IRQ+0x1fc>)
 8001cd8:	4613      	mov	r3, r2
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	4413      	add	r3, r2
 8001cde:	440b      	add	r3, r1
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2b03      	cmp	r3, #3
 8001ce6:	d10a      	bne.n	8001cfe <I2C_event_IRQ+0x19e>
            {
                 g_registers[I2C_slave_obj.curr_idx].value = received;
 8001ce8:	4b18      	ldr	r3, [pc, #96]	@ (8001d4c <I2C_event_IRQ+0x1ec>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	491b      	ldr	r1, [pc, #108]	@ (8001d5c <I2C_event_IRQ+0x1fc>)
 8001cee:	4613      	mov	r3, r2
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	4413      	add	r3, r2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	3302      	adds	r3, #2
 8001cf8:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 8001cfc:	701a      	strb	r2, [r3, #0]
            }
            I2C_slave_obj.reg_addr_rcvd = 0;
 8001cfe:	4b13      	ldr	r3, [pc, #76]	@ (8001d4c <I2C_event_IRQ+0x1ec>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	711a      	strb	r2, [r3, #4]
            LL_I2C_DisableIT_BUF(I2C_slave_obj.I2Cx);
 8001d04:	4b11      	ldr	r3, [pc, #68]	@ (8001d4c <I2C_event_IRQ+0x1ec>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff fd50 	bl	80017ae <LL_I2C_DisableIT_BUF>
        }
    }

    // STOP condition detected
    if (LL_I2C_IsActiveFlag_STOP(I2C_slave_obj.I2Cx)) {
 8001d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d4c <I2C_event_IRQ+0x1ec>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff fdb8 	bl	8001888 <LL_I2C_IsActiveFlag_STOP>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00f      	beq.n	8001d3e <I2C_event_IRQ+0x1de>
        LL_I2C_ClearFlag_STOP(I2C_slave_obj.I2Cx);
 8001d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d4c <I2C_event_IRQ+0x1ec>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff fe21 	bl	800196a <LL_I2C_ClearFlag_STOP>
        I2C_slave_obj.reg_addr_rcvd = 0;
 8001d28:	4b08      	ldr	r3, [pc, #32]	@ (8001d4c <I2C_event_IRQ+0x1ec>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	711a      	strb	r2, [r3, #4]
//        I2C_slave_obj.curr_idx = NONE;
//        data_index = 0;
        LL_I2C_DisableIT_BUF(I2C_slave_obj.I2Cx);
 8001d2e:	4b07      	ldr	r3, [pc, #28]	@ (8001d4c <I2C_event_IRQ+0x1ec>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff fd3b 	bl	80017ae <LL_I2C_DisableIT_BUF>
        I2C_Slave_Status = I2C_Status_OK;
 8001d38:	4b03      	ldr	r3, [pc, #12]	@ (8001d48 <I2C_event_IRQ+0x1e8>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	701a      	strb	r2, [r3, #0]
    }
}
 8001d3e:	bf00      	nop
 8001d40:	3758      	adds	r7, #88	@ 0x58
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	2000451c 	.word	0x2000451c
 8001d4c:	20004510 	.word	0x20004510
 8001d50:	0800f830 	.word	0x0800f830
 8001d54:	40011000 	.word	0x40011000
 8001d58:	0800f84c 	.word	0x0800f84c
 8001d5c:	20004520 	.word	0x20004520
 8001d60:	0800f860 	.word	0x0800f860
 8001d64:	0800f87c 	.word	0x0800f87c
 8001d68:	0800f894 	.word	0x0800f894
 8001d6c:	0800f8a4 	.word	0x0800f8a4

08001d70 <I2C_error_IRQ>:

void I2C_error_IRQ(void) {
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
    // Handle errors
	UART_SendStringRing(UART_CMDLINE,"I2C ERROR!!!\r\n");
 8001d74:	4921      	ldr	r1, [pc, #132]	@ (8001dfc <I2C_error_IRQ+0x8c>)
 8001d76:	4822      	ldr	r0, [pc, #136]	@ (8001e00 <I2C_error_IRQ+0x90>)
 8001d78:	f000 fb0c 	bl	8002394 <UART_SendStringRing>
	I2C_Slave_Status = I2C_Status_OK;
 8001d7c:	4b21      	ldr	r3, [pc, #132]	@ (8001e04 <I2C_error_IRQ+0x94>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	701a      	strb	r2, [r3, #0]
    if (LL_I2C_IsActiveFlag_BERR(I2C_slave_obj.I2Cx)) {
 8001d82:	4b21      	ldr	r3, [pc, #132]	@ (8001e08 <I2C_error_IRQ+0x98>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff fd91 	bl	80018ae <LL_I2C_IsActiveFlag_BERR>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d004      	beq.n	8001d9c <I2C_error_IRQ+0x2c>

        LL_I2C_ClearFlag_BERR(I2C_slave_obj.I2Cx);
 8001d92:	4b1d      	ldr	r3, [pc, #116]	@ (8001e08 <I2C_error_IRQ+0x98>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff fdfb 	bl	8001992 <LL_I2C_ClearFlag_BERR>
    }

    if (LL_I2C_IsActiveFlag_ARLO(I2C_slave_obj.I2Cx)) {
 8001d9c:	4b1a      	ldr	r3, [pc, #104]	@ (8001e08 <I2C_error_IRQ+0x98>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff fd98 	bl	80018d6 <LL_I2C_IsActiveFlag_ARLO>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d004      	beq.n	8001db6 <I2C_error_IRQ+0x46>
        LL_I2C_ClearFlag_ARLO(I2C_slave_obj.I2Cx);
 8001dac:	4b16      	ldr	r3, [pc, #88]	@ (8001e08 <I2C_error_IRQ+0x98>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff fdfe 	bl	80019b2 <LL_I2C_ClearFlag_ARLO>
    }

    if (LL_I2C_IsActiveFlag_AF(I2C_slave_obj.I2Cx)) {
 8001db6:	4b14      	ldr	r3, [pc, #80]	@ (8001e08 <I2C_error_IRQ+0x98>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff fd50 	bl	8001860 <LL_I2C_IsActiveFlag_AF>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d004      	beq.n	8001dd0 <I2C_error_IRQ+0x60>
        LL_I2C_ClearFlag_AF(I2C_slave_obj.I2Cx);
 8001dc6:	4b10      	ldr	r3, [pc, #64]	@ (8001e08 <I2C_error_IRQ+0x98>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff fdbd 	bl	800194a <LL_I2C_ClearFlag_AF>
    }

    if (LL_I2C_IsActiveFlag_OVR(I2C_slave_obj.I2Cx)) {
 8001dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8001e08 <I2C_error_IRQ+0x98>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff fd92 	bl	80018fe <LL_I2C_IsActiveFlag_OVR>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d004      	beq.n	8001dea <I2C_error_IRQ+0x7a>
        LL_I2C_ClearFlag_OVR(I2C_slave_obj.I2Cx);
 8001de0:	4b09      	ldr	r3, [pc, #36]	@ (8001e08 <I2C_error_IRQ+0x98>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff fdf4 	bl	80019d2 <LL_I2C_ClearFlag_OVR>
    }
    I2C_ReInit();
 8001dea:	f7ff fe31 	bl	8001a50 <I2C_ReInit>
    i2c_slave_init(I2C_slave_obj.I2Cx);
 8001dee:	4b06      	ldr	r3, [pc, #24]	@ (8001e08 <I2C_error_IRQ+0x98>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff fe96 	bl	8001b24 <i2c_slave_init>
}
 8001df8:	bf00      	nop
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	0800f8b8 	.word	0x0800f8b8
 8001e00:	40011000 	.word	0x40011000
 8001e04:	2000451c 	.word	0x2000451c
 8001e08:	20004510 	.word	0x20004510

08001e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	6039      	str	r1, [r7, #0]
 8001e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	db0a      	blt.n	8001e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	490c      	ldr	r1, [pc, #48]	@ (8001e58 <__NVIC_SetPriority+0x4c>)
 8001e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2a:	0112      	lsls	r2, r2, #4
 8001e2c:	b2d2      	uxtb	r2, r2
 8001e2e:	440b      	add	r3, r1
 8001e30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e34:	e00a      	b.n	8001e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	4908      	ldr	r1, [pc, #32]	@ (8001e5c <__NVIC_SetPriority+0x50>)
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	3b04      	subs	r3, #4
 8001e44:	0112      	lsls	r2, r2, #4
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	440b      	add	r3, r1
 8001e4a:	761a      	strb	r2, [r3, #24]
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	e000e100 	.word	0xe000e100
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e70:	d301      	bcc.n	8001e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e72:	2301      	movs	r3, #1
 8001e74:	e00f      	b.n	8001e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e76:	4a0a      	ldr	r2, [pc, #40]	@ (8001ea0 <SysTick_Config+0x40>)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e7e:	210f      	movs	r1, #15
 8001e80:	f04f 30ff 	mov.w	r0, #4294967295
 8001e84:	f7ff ffc2 	bl	8001e0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e88:	4b05      	ldr	r3, [pc, #20]	@ (8001ea0 <SysTick_Config+0x40>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e8e:	4b04      	ldr	r3, [pc, #16]	@ (8001ea0 <SysTick_Config+0x40>)
 8001e90:	2207      	movs	r2, #7
 8001e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	e000e010 	.word	0xe000e010

08001ea4 <systick_timer_start>:

#include "systick.h"
#include "stm32f4xx.h"

void systick_timer_start(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
    // Reset SysTick counter value
   // SysTick->VAL = 0;

    // Enable SysTick counter
    SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 8001ea8:	4b05      	ldr	r3, [pc, #20]	@ (8001ec0 <systick_timer_start+0x1c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a04      	ldr	r2, [pc, #16]	@ (8001ec0 <systick_timer_start+0x1c>)
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	6013      	str	r3, [r2, #0]
}
 8001eb4:	bf00      	nop
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	e000e010 	.word	0xe000e010

08001ec4 <systick_timer_init>:
    // Disable SysTick counter
   // SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
}

void systick_timer_init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
    // Set SysTick to trigger interrupt every 1ms
    SysTick_Config(SystemCoreClock/1000);
 8001ec8:	4b05      	ldr	r3, [pc, #20]	@ (8001ee0 <systick_timer_init+0x1c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a05      	ldr	r2, [pc, #20]	@ (8001ee4 <systick_timer_init+0x20>)
 8001ece:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed2:	099b      	lsrs	r3, r3, #6
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff ffc3 	bl	8001e60 <SysTick_Config>
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	2000014c 	.word	0x2000014c
 8001ee4:	10624dd3 	.word	0x10624dd3

08001ee8 <LL_USART_IsActiveFlag_FE>:
  * @rmtoll SR           FE            LL_USART_IsActiveFlag_FE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(const USART_TypeDef *USARTx)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	bf0c      	ite	eq
 8001efc:	2301      	moveq	r3, #1
 8001efe:	2300      	movne	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <LL_USART_IsActiveFlag_NE>:
  * @rmtoll SR           NF            LL_USART_IsActiveFlag_NE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(const USART_TypeDef *USARTx)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0304 	and.w	r3, r3, #4
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	bf0c      	ite	eq
 8001f22:	2301      	moveq	r3, #1
 8001f24:	2300      	movne	r3, #0
 8001f26:	b2db      	uxtb	r3, r3
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(const USART_TypeDef *USARTx)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0308 	and.w	r3, r3, #8
 8001f44:	2b08      	cmp	r3, #8
 8001f46:	bf0c      	ite	eq
 8001f48:	2301      	moveq	r3, #1
 8001f4a:	2300      	movne	r3, #0
 8001f4c:	b2db      	uxtb	r3, r3
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0320 	and.w	r3, r3, #32
 8001f6a:	2b20      	cmp	r3, #32
 8001f6c:	bf0c      	ite	eq
 8001f6e:	2301      	moveq	r3, #1
 8001f70:	2300      	movne	r3, #0
 8001f72:	b2db      	uxtb	r3, r3
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f90:	2b80      	cmp	r3, #128	@ 0x80
 8001f92:	bf0c      	ite	eq
 8001f94:	2301      	moveq	r3, #1
 8001f96:	2300      	movne	r3, #0
 8001f98:	b2db      	uxtb	r3, r3
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <LL_USART_ClearFlag_FE>:
  * @rmtoll SR           FE            LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b085      	sub	sp, #20
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
}
 8001fbe:	bf00      	nop
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <LL_USART_ClearFlag_NE>:
  * @rmtoll SR           NF            LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b085      	sub	sp, #20
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
}
 8001fe2:	bf00      	nop
 8001fe4:	3714      	adds	r7, #20
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <LL_USART_ClearFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b085      	sub	sp, #20
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002004:	68fb      	ldr	r3, [r7, #12]
}
 8002006:	bf00      	nop
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8002012:	b480      	push	{r7}
 8002014:	b089      	sub	sp, #36	@ 0x24
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	330c      	adds	r3, #12
 800201e:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	e853 3f00 	ldrex	r3, [r3]
 8002026:	60bb      	str	r3, [r7, #8]
   return(result);
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	f043 0320 	orr.w	r3, r3, #32
 800202e:	61fb      	str	r3, [r7, #28]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	330c      	adds	r3, #12
 8002034:	69fa      	ldr	r2, [r7, #28]
 8002036:	61ba      	str	r2, [r7, #24]
 8002038:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800203a:	6979      	ldr	r1, [r7, #20]
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	e841 2300 	strex	r3, r2, [r1]
 8002042:	613b      	str	r3, [r7, #16]
   return(result);
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1e7      	bne.n	800201a <LL_USART_EnableIT_RXNE+0x8>
}
 800204a:	bf00      	nop
 800204c:	bf00      	nop
 800204e:	3724      	adds	r7, #36	@ 0x24
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8002058:	b480      	push	{r7}
 800205a:	b089      	sub	sp, #36	@ 0x24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	330c      	adds	r3, #12
 8002064:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	e853 3f00 	ldrex	r3, [r3]
 800206c:	60bb      	str	r3, [r7, #8]
   return(result);
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002074:	61fb      	str	r3, [r7, #28]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	330c      	adds	r3, #12
 800207a:	69fa      	ldr	r2, [r7, #28]
 800207c:	61ba      	str	r2, [r7, #24]
 800207e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002080:	6979      	ldr	r1, [r7, #20]
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	e841 2300 	strex	r3, r2, [r1]
 8002088:	613b      	str	r3, [r7, #16]
   return(result);
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1e7      	bne.n	8002060 <LL_USART_EnableIT_TXE+0x8>
}
 8002090:	bf00      	nop
 8002092:	bf00      	nop
 8002094:	3724      	adds	r7, #36	@ 0x24
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <LL_USART_DisableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_DisableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_RXNE(USART_TypeDef *USARTx)
{
 800209e:	b480      	push	{r7}
 80020a0:	b089      	sub	sp, #36	@ 0x24
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	330c      	adds	r3, #12
 80020aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	e853 3f00 	ldrex	r3, [r3]
 80020b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	f023 0320 	bic.w	r3, r3, #32
 80020ba:	61fb      	str	r3, [r7, #28]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	330c      	adds	r3, #12
 80020c0:	69fa      	ldr	r2, [r7, #28]
 80020c2:	61ba      	str	r2, [r7, #24]
 80020c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020c6:	6979      	ldr	r1, [r7, #20]
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	e841 2300 	strex	r3, r2, [r1]
 80020ce:	613b      	str	r3, [r7, #16]
   return(result);
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1e7      	bne.n	80020a6 <LL_USART_DisableIT_RXNE+0x8>
}
 80020d6:	bf00      	nop
 80020d8:	bf00      	nop
 80020da:	3724      	adds	r7, #36	@ 0x24
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b089      	sub	sp, #36	@ 0x24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	330c      	adds	r3, #12
 80020f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	e853 3f00 	ldrex	r3, [r3]
 80020f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002100:	61fb      	str	r3, [r7, #28]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	330c      	adds	r3, #12
 8002106:	69fa      	ldr	r2, [r7, #28]
 8002108:	61ba      	str	r2, [r7, #24]
 800210a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800210c:	6979      	ldr	r1, [r7, #20]
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	e841 2300 	strex	r3, r2, [r1]
 8002114:	613b      	str	r3, [r7, #16]
   return(result);
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1e7      	bne.n	80020ec <LL_USART_DisableIT_TXE+0x8>
}
 800211c:	bf00      	nop
 800211e:	bf00      	nop
 8002120:	3724      	adds	r7, #36	@ 0x24
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(const USART_TypeDef *USARTx)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	f003 0320 	and.w	r3, r3, #32
 800213a:	2b20      	cmp	r3, #32
 800213c:	bf0c      	ite	eq
 800213e:	2301      	moveq	r3, #1
 8002140:	2300      	movne	r3, #0
 8002142:	b2db      	uxtb	r3, r3
}
 8002144:	4618      	mov	r0, r3
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <LL_USART_IsEnabledIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(const USART_TypeDef *USARTx)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002160:	2b80      	cmp	r3, #128	@ 0x80
 8002162:	bf0c      	ite	eq
 8002164:	2301      	moveq	r3, #1
 8002166:	2300      	movne	r3, #0
 8002168:	b2db      	uxtb	r3, r3
}
 800216a:	4618      	mov	r0, r3
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8002176:	b480      	push	{r7}
 8002178:	b083      	sub	sp, #12
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	b2db      	uxtb	r3, r3
}
 8002184:	4618      	mov	r0, r3
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	460b      	mov	r3, r1
 800219a:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800219c:	78fa      	ldrb	r2, [r7, #3]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	605a      	str	r2, [r3, #4]
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
	...

080021b0 <get_usart_buffer>:
    }
};

void store_char(unsigned char c, ring_buffer *buffer, USART_TypeDef *uart);

USART_Buffer* get_usart_buffer(USART_TypeDef *uart) {
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < USART_COUNT; i++) {
 80021b8:	2300      	movs	r3, #0
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	e015      	b.n	80021ea <get_usart_buffer+0x3a>
        if (usart_buffers[i].uart == uart) {
 80021be:	4910      	ldr	r1, [pc, #64]	@ (8002200 <get_usart_buffer+0x50>)
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	4613      	mov	r3, r2
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	4413      	add	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	440b      	add	r3, r1
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d107      	bne.n	80021e4 <get_usart_buffer+0x34>
            return &usart_buffers[i];
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	4613      	mov	r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	4413      	add	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4a08      	ldr	r2, [pc, #32]	@ (8002200 <get_usart_buffer+0x50>)
 80021e0:	4413      	add	r3, r2
 80021e2:	e006      	b.n	80021f2 <get_usart_buffer+0x42>
    for (int i = 0; i < USART_COUNT; i++) {
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	3301      	adds	r3, #1
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	dde6      	ble.n	80021be <get_usart_buffer+0xe>
        }
    }
    return NULL;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	20000000 	.word	0x20000000

08002204 <store_char>:
        LL_USART_EnableIT_ERROR(buffer->uart);
        LL_USART_EnableIT_RXNE(buffer->uart);
    }
}

void store_char(unsigned char c, ring_buffer *buffer, USART_TypeDef *uart) {
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
 8002210:	73fb      	strb	r3, [r7, #15]
    int i = (buffer->head + 1) % buffer->size;
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	3301      	adds	r3, #1
 8002218:	68ba      	ldr	r2, [r7, #8]
 800221a:	68d2      	ldr	r2, [r2, #12]
 800221c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002220:	fb01 f202 	mul.w	r2, r1, r2
 8002224:	1a9b      	subs	r3, r3, r2
 8002226:	617b      	str	r3, [r7, #20]

    if (i != buffer->tail) {
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	429a      	cmp	r2, r3
 8002230:	d00f      	beq.n	8002252 <store_char+0x4e>
        ATOMIC_BLOCK_START(uart);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7ff ff33 	bl	800209e <LL_USART_DisableIT_RXNE>
        buffer->buffer[buffer->head] = c;
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	4413      	add	r3, r2
 8002242:	7bfa      	ldrb	r2, [r7, #15]
 8002244:	701a      	strb	r2, [r3, #0]
        buffer->head = i;
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	605a      	str	r2, [r3, #4]
        ATOMIC_BLOCK_END(uart);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f7ff fee0 	bl	8002012 <LL_USART_EnableIT_RXNE>
    }
}
 8002252:	bf00      	nop
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <UART_ReadRing>:

int UART_ReadRing(USART_TypeDef *uart) {
 800225a:	b580      	push	{r7, lr}
 800225c:	b086      	sub	sp, #24
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
    USART_Buffer *buffer = get_usart_buffer(uart);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7ff ffa4 	bl	80021b0 <get_usart_buffer>
 8002268:	6178      	str	r0, [r7, #20]
    if (!buffer) return -1;
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d102      	bne.n	8002276 <UART_ReadRing+0x1c>
 8002270:	f04f 33ff 	mov.w	r3, #4294967295
 8002274:	e025      	b.n	80022c2 <UART_ReadRing+0x68>

    ring_buffer *rx_buffer = &buffer->rx_buffer;
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	3304      	adds	r3, #4
 800227a:	613b      	str	r3, [r7, #16]

    if (rx_buffer->head == rx_buffer->tail) {
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	685a      	ldr	r2, [r3, #4]
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	429a      	cmp	r2, r3
 8002286:	d102      	bne.n	800228e <UART_ReadRing+0x34>
        return -1;
 8002288:	f04f 33ff 	mov.w	r3, #4294967295
 800228c:	e019      	b.n	80022c2 <UART_ReadRing+0x68>
    } else {
        ATOMIC_BLOCK_START(uart);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff ff05 	bl	800209e <LL_USART_DisableIT_RXNE>
        unsigned char c = rx_buffer->buffer[rx_buffer->tail];
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	4413      	add	r3, r2
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	73fb      	strb	r3, [r7, #15]
        rx_buffer->tail = (rx_buffer->tail + 1) % rx_buffer->size;
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	3301      	adds	r3, #1
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	68d2      	ldr	r2, [r2, #12]
 80022ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80022b0:	fb01 f202 	mul.w	r2, r1, r2
 80022b4:	1a9a      	subs	r2, r3, r2
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	609a      	str	r2, [r3, #8]
        ATOMIC_BLOCK_END(uart);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7ff fea9 	bl	8002012 <LL_USART_EnableIT_RXNE>
        return c;
 80022c0:	7bfb      	ldrb	r3, [r7, #15]
    }
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <UART_WriteRing>:

void UART_WriteRing(USART_TypeDef *uart, int c) {
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b086      	sub	sp, #24
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
 80022d2:	6039      	str	r1, [r7, #0]
    USART_Buffer *buffer = get_usart_buffer(uart);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f7ff ff6b 	bl	80021b0 <get_usart_buffer>
 80022da:	6178      	str	r0, [r7, #20]
    if (!buffer || c < 0) return;
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d02b      	beq.n	800233a <UART_WriteRing+0x70>
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	db28      	blt.n	800233a <UART_WriteRing+0x70>

    ring_buffer *tx_buffer = &buffer->tx_buffer;
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	3314      	adds	r3, #20
 80022ec:	613b      	str	r3, [r7, #16]
    int i = (tx_buffer->head + 1) % tx_buffer->size;
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	3301      	adds	r3, #1
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	68d2      	ldr	r2, [r2, #12]
 80022f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80022fc:	fb01 f202 	mul.w	r2, r1, r2
 8002300:	1a9b      	subs	r3, r3, r2
 8002302:	60fb      	str	r3, [r7, #12]

    ATOMIC_BLOCK_START(uart);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f7ff feca 	bl	800209e <LL_USART_DisableIT_RXNE>
    while (i == tx_buffer->tail);
 800230a:	bf00      	nop
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	429a      	cmp	r2, r3
 8002314:	d0fa      	beq.n	800230c <UART_WriteRing+0x42>

    tx_buffer->buffer[tx_buffer->head] = (uint8_t)c;
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	4413      	add	r3, r2
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	701a      	strb	r2, [r3, #0]
    tx_buffer->head = i;
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	605a      	str	r2, [r3, #4]
    ATOMIC_BLOCK_END(uart);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f7ff fe70 	bl	8002012 <LL_USART_EnableIT_RXNE>

    LL_USART_EnableIT_TXE(uart);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7ff fe90 	bl	8002058 <LL_USART_EnableIT_TXE>
 8002338:	e000      	b.n	800233c <UART_WriteRing+0x72>
    if (!buffer || c < 0) return;
 800233a:	bf00      	nop
}
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <IsDataAvailable>:

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(USART_TypeDef *uart) {
 8002342:	b580      	push	{r7, lr}
 8002344:	b084      	sub	sp, #16
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
    USART_Buffer *buffer = get_usart_buffer(uart);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7ff ff30 	bl	80021b0 <get_usart_buffer>
 8002350:	60f8      	str	r0, [r7, #12]
    if (!buffer) return 0;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <IsDataAvailable+0x1a>
 8002358:	2300      	movs	r3, #0
 800235a:	e017      	b.n	800238c <IsDataAvailable+0x4a>

    ring_buffer *rx_buffer = &buffer->rx_buffer;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	3304      	adds	r3, #4
 8002360:	60bb      	str	r3, [r7, #8]
    return (uint16_t)(rx_buffer->size + rx_buffer->head - rx_buffer->tail) % rx_buffer->size;
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	b29a      	uxth	r2, r3
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	b29b      	uxth	r3, r3
 800236e:	4413      	add	r3, r2
 8002370:	b29a      	uxth	r2, r3
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	b29b      	uxth	r3, r3
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	b29b      	uxth	r3, r3
 800237c:	461a      	mov	r2, r3
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	fbb2 f1f3 	udiv	r1, r2, r3
 8002386:	fb01 f303 	mul.w	r3, r1, r3
 800238a:	1ad3      	subs	r3, r2, r3
}
 800238c:	4618      	mov	r0, r3
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <UART_SendStringRing>:
/* sends the string to the uart
 */
void UART_SendStringRing (USART_TypeDef *uart, const char *s)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
	while(*s) UART_WriteRing(uart, *s++);
 800239e:	e007      	b.n	80023b0 <UART_SendStringRing+0x1c>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	1c5a      	adds	r2, r3, #1
 80023a4:	603a      	str	r2, [r7, #0]
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	4619      	mov	r1, r3
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7ff ff8d 	bl	80022ca <UART_WriteRing>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1f3      	bne.n	80023a0 <UART_SendStringRing+0xc>
}
 80023b8:	bf00      	nop
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <UART_Ring_ISR>:
    memset(tx_buffer->buffer, '\0', tx_buffer->size);
    tx_buffer->head = 0;
    tx_buffer->tail = 0;
}

void UART_Ring_ISR(USART_TypeDef *uart) {
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b086      	sub	sp, #24
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
    USART_Buffer *buffer = get_usart_buffer(uart);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7ff fef0 	bl	80021b0 <get_usart_buffer>
 80023d0:	6178      	str	r0, [r7, #20]
    if (!buffer) return;
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d068      	beq.n	80024aa <UART_Ring_ISR+0xe8>

    ring_buffer *rx_buffer = &buffer->rx_buffer;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	3304      	adds	r3, #4
 80023dc:	613b      	str	r3, [r7, #16]
    ring_buffer *tx_buffer = &buffer->tx_buffer;
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	3314      	adds	r3, #20
 80023e2:	60fb      	str	r3, [r7, #12]

    if ((LL_USART_IsActiveFlag_RXNE(uart) != RESET) && (LL_USART_IsEnabledIT_RXNE(uart) != RESET)) {
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f7ff fdb8 	bl	8001f5a <LL_USART_IsActiveFlag_RXNE>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d02d      	beq.n	800244c <UART_Ring_ISR+0x8a>
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f7ff fe9a 	bl	800212a <LL_USART_IsEnabledIT_RXNE>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d027      	beq.n	800244c <UART_Ring_ISR+0x8a>
        unsigned char data = LL_USART_ReceiveData8(uart);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f7ff feba 	bl	8002176 <LL_USART_ReceiveData8>
 8002402:	4603      	mov	r3, r0
 8002404:	72fb      	strb	r3, [r7, #11]

        if ((LL_USART_IsActiveFlag_ORE(uart) != RESET) ||
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7ff fd94 	bl	8001f34 <LL_USART_IsActiveFlag_ORE>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10b      	bne.n	800242a <UART_Ring_ISR+0x68>
            (LL_USART_IsActiveFlag_FE(uart) != RESET) ||
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7ff fd68 	bl	8001ee8 <LL_USART_IsActiveFlag_FE>
 8002418:	4603      	mov	r3, r0
        if ((LL_USART_IsActiveFlag_ORE(uart) != RESET) ||
 800241a:	2b00      	cmp	r3, #0
 800241c:	d105      	bne.n	800242a <UART_Ring_ISR+0x68>
            (LL_USART_IsActiveFlag_NE(uart) != RESET)) {
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f7ff fd75 	bl	8001f0e <LL_USART_IsActiveFlag_NE>
 8002424:	4603      	mov	r3, r0
            (LL_USART_IsActiveFlag_FE(uart) != RESET) ||
 8002426:	2b00      	cmp	r3, #0
 8002428:	d009      	beq.n	800243e <UART_Ring_ISR+0x7c>
            LL_USART_ClearFlag_ORE(uart);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7ff fddf 	bl	8001fee <LL_USART_ClearFlag_ORE>
            LL_USART_ClearFlag_FE(uart);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f7ff fdb8 	bl	8001fa6 <LL_USART_ClearFlag_FE>
            LL_USART_ClearFlag_NE(uart);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7ff fdc7 	bl	8001fca <LL_USART_ClearFlag_NE>
        } else {
        	store_char(data, rx_buffer, uart);
        }
        return;
 800243c:	e036      	b.n	80024ac <UART_Ring_ISR+0xea>
        	store_char(data, rx_buffer, uart);
 800243e:	7afb      	ldrb	r3, [r7, #11]
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	6939      	ldr	r1, [r7, #16]
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff fedd 	bl	8002204 <store_char>
        return;
 800244a:	e02f      	b.n	80024ac <UART_Ring_ISR+0xea>
    }

    if ((LL_USART_IsActiveFlag_TXE(uart) != RESET) && (LL_USART_IsEnabledIT_TXE(uart) != RESET)) {
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f7ff fd97 	bl	8001f80 <LL_USART_IsActiveFlag_TXE>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d029      	beq.n	80024ac <UART_Ring_ISR+0xea>
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7ff fe79 	bl	8002150 <LL_USART_IsEnabledIT_TXE>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d023      	beq.n	80024ac <UART_Ring_ISR+0xea>
        if (tx_buffer->head == tx_buffer->tail) {
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	429a      	cmp	r2, r3
 800246e:	d103      	bne.n	8002478 <UART_Ring_ISR+0xb6>
            LL_USART_DisableIT_TXE(uart);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f7ff fe37 	bl	80020e4 <LL_USART_DisableIT_TXE>
 8002476:	e019      	b.n	80024ac <UART_Ring_ISR+0xea>
        } else {
            unsigned char c = tx_buffer->buffer[tx_buffer->tail];
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	4413      	add	r3, r2
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	72bb      	strb	r3, [r7, #10]
            tx_buffer->tail = (tx_buffer->tail + 1) % tx_buffer->size;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	3301      	adds	r3, #1
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	68d2      	ldr	r2, [r2, #12]
 8002490:	fbb3 f1f2 	udiv	r1, r3, r2
 8002494:	fb01 f202 	mul.w	r2, r1, r2
 8002498:	1a9a      	subs	r2, r3, r2
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	609a      	str	r2, [r3, #8]
            LL_USART_TransmitData8(uart, c);
 800249e:	7abb      	ldrb	r3, [r7, #10]
 80024a0:	4619      	mov	r1, r3
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f7ff fe74 	bl	8002190 <LL_USART_TransmitData8>
 80024a8:	e000      	b.n	80024ac <UART_Ring_ISR+0xea>
    if (!buffer) return;
 80024aa:	bf00      	nop
        }
    }
}
 80024ac:	3718      	adds	r7, #24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
	...

080024b4 <__NVIC_SystemReset>:
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80024b8:	f3bf 8f4f 	dsb	sy
}
 80024bc:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80024be:	4b06      	ldr	r3, [pc, #24]	@ (80024d8 <__NVIC_SystemReset+0x24>)
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80024c6:	4904      	ldr	r1, [pc, #16]	@ (80024d8 <__NVIC_SystemReset+0x24>)
 80024c8:	4b04      	ldr	r3, [pc, #16]	@ (80024dc <__NVIC_SystemReset+0x28>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80024ce:	f3bf 8f4f 	dsb	sy
}
 80024d2:	bf00      	nop
    __NOP();
 80024d4:	bf00      	nop
 80024d6:	e7fd      	b.n	80024d4 <__NVIC_SystemReset+0x20>
 80024d8:	e000ed00 	.word	0xe000ed00
 80024dc:	05fa0004 	.word	0x05fa0004

080024e0 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	619a      	str	r2, [r3, #24]
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	041a      	lsls	r2, r3, #16
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	619a      	str	r2, [r3, #24]
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
	...

0800251c <CLI_Command_Init>:
};

/*************************************************
 *             Command List Function             *
 *************************************************/
void CLI_Command_Init(USART_TypeDef *handle_uart) {
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
	SystemCLI_Init();
 8002524:	f001 fb06 	bl	8003b34 <SystemCLI_Init>
	UART_SendStringRing(handle_uart, "\r\nEXP_V110:~ $ \r\n");
 8002528:	4903      	ldr	r1, [pc, #12]	@ (8002538 <CLI_Command_Init+0x1c>)
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7ff ff32 	bl	8002394 <UART_SendStringRing>
}
 8002530:	bf00      	nop
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	0800fed4 	.word	0x0800fed4

0800253c <CLI_Command_CreateTask>:

void CLI_Command_CreateTask(void) {
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&s_CLI_CommandTaskContext.taskHandle, &s_CLI_CommandTaskContext.taskProperty);
 8002540:	4902      	ldr	r1, [pc, #8]	@ (800254c <CLI_Command_CreateTask+0x10>)
 8002542:	4803      	ldr	r0, [pc, #12]	@ (8002550 <CLI_Command_CreateTask+0x14>)
 8002544:	f00a f91e 	bl	800c784 <SCH_TASK_CreateTask>
}
 8002548:	bf00      	nop
 800254a:	bd80      	pop	{r7, pc}
 800254c:	200000e8 	.word	0x200000e8
 8002550:	200000e4 	.word	0x200000e4

08002554 <CLI_Command_Task_Update>:

static void CLI_Command_Task_Update(void) {
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
	char rxData;
	if (IsDataAvailable(EXP_UART_CONSOLE_HANDLE)) {
 800255a:	480e      	ldr	r0, [pc, #56]	@ (8002594 <CLI_Command_Task_Update+0x40>)
 800255c:	f7ff fef1 	bl	8002342 <IsDataAvailable>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d012      	beq.n	800258c <CLI_Command_Task_Update+0x38>
		rxData = UART_ReadRing(EXP_UART_CONSOLE_HANDLE);
 8002566:	480b      	ldr	r0, [pc, #44]	@ (8002594 <CLI_Command_Task_Update+0x40>)
 8002568:	f7ff fe77 	bl	800225a <UART_ReadRing>
 800256c:	4603      	mov	r3, r0
 800256e:	71fb      	strb	r3, [r7, #7]
		embeddedCliReceiveChar(get_EXPConsole_CliPointer(), (char)rxData);
 8002570:	f001 fb2c 	bl	8003bcc <get_EXPConsole_CliPointer>
 8002574:	4602      	mov	r2, r0
 8002576:	79fb      	ldrb	r3, [r7, #7]
 8002578:	4619      	mov	r1, r3
 800257a:	4610      	mov	r0, r2
 800257c:	f001 fc1c 	bl	8003db8 <embeddedCliReceiveChar>
		embeddedCliProcess(get_EXPConsole_CliPointer());
 8002580:	f001 fb24 	bl	8003bcc <get_EXPConsole_CliPointer>
 8002584:	4603      	mov	r3, r0
 8002586:	4618      	mov	r0, r3
 8002588:	f001 fc39 	bl	8003dfe <embeddedCliProcess>
	}
}
 800258c:	bf00      	nop
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40011400 	.word	0x40011400

08002598 <CMD_Clear_CLI>:
static void CMD_Clear_CLI(EmbeddedCli *cli, char *args, void *context) {
 8002598:	b580      	push	{r7, lr}
 800259a:	b088      	sub	sp, #32
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
    char buffer[10];
    snprintf(buffer, sizeof(buffer), "\33[2J");
 80025a4:	f107 0314 	add.w	r3, r7, #20
 80025a8:	4a07      	ldr	r2, [pc, #28]	@ (80025c8 <CMD_Clear_CLI+0x30>)
 80025aa:	210a      	movs	r1, #10
 80025ac:	4618      	mov	r0, r3
 80025ae:	f00a ffbd 	bl	800d52c <sniprintf>
    embeddedCliPrint(cli, buffer);
 80025b2:	f107 0314 	add.w	r3, r7, #20
 80025b6:	4619      	mov	r1, r3
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f001 fcb1 	bl	8003f20 <embeddedCliPrint>
}
 80025be:	bf00      	nop
 80025c0:	3720      	adds	r7, #32
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	0800fee8 	.word	0x0800fee8

080025cc <CMD_Reset>:

static void CMD_Reset(EmbeddedCli *cli, char *args, void *context) {
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
	NVIC_SystemReset();
 80025d8:	f7ff ff6c 	bl	80024b4 <__NVIC_SystemReset>

080025dc <CMD_NTC_Get_Temp>:
    embeddedCliPrint(cli, "");
}

static void CMD_NTC_Get_Temp(EmbeddedCli *cli, char *args, void *context) {
 80025dc:	b580      	push	{r7, lr}
 80025de:	b09e      	sub	sp, #120	@ 0x78
 80025e0:	af02      	add	r7, sp, #8
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
    // TODO: Implement NTC temperature get logic
	const char *arg1 = embeddedCliGetToken(args, 1);
 80025e8:	2101      	movs	r1, #1
 80025ea:	68b8      	ldr	r0, [r7, #8]
 80025ec:	f001 fd5a 	bl	80040a4 <embeddedCliGetToken>
 80025f0:	66b8      	str	r0, [r7, #104]	@ 0x68
	if (*arg1 == 'a') {
 80025f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b61      	cmp	r3, #97	@ 0x61
 80025f8:	d13b      	bne.n	8002672 <CMD_NTC_Get_Temp+0x96>
		int16_t temp = 0;
 80025fa:	2300      	movs	r3, #0
 80025fc:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
		char buffer[80];
		NTC_get_temperature(NTC_Temperature);
 8002600:	4845      	ldr	r0, [pc, #276]	@ (8002718 <CMD_NTC_Get_Temp+0x13c>)
 8002602:	f007 f911 	bl	8009828 <NTC_get_temperature>
		for (uint8_t channel = 0; channel < 8; channel++) {
 8002606:	2300      	movs	r3, #0
 8002608:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800260c:	e02c      	b.n	8002668 <CMD_NTC_Get_Temp+0x8c>
			temp = NTC_Temperature[channel];
 800260e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002612:	4a41      	ldr	r2, [pc, #260]	@ (8002718 <CMD_NTC_Get_Temp+0x13c>)
 8002614:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002618:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
			if (temp == 0x7FFF) {
 800261c:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	@ 0x60
 8002620:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002624:	4293      	cmp	r3, r2
 8002626:	d108      	bne.n	800263a <CMD_NTC_Get_Temp+0x5e>
				snprintf(buffer, sizeof(buffer), "--> NTC[%d] is fail", channel);
 8002628:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800262c:	f107 0010 	add.w	r0, r7, #16
 8002630:	4a3a      	ldr	r2, [pc, #232]	@ (800271c <CMD_NTC_Get_Temp+0x140>)
 8002632:	2150      	movs	r1, #80	@ 0x50
 8002634:	f00a ff7a 	bl	800d52c <sniprintf>
 8002638:	e00b      	b.n	8002652 <CMD_NTC_Get_Temp+0x76>
			} else {
				snprintf(buffer, sizeof(buffer), "--> NTC[%d]: %i", channel, temp);
 800263a:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 800263e:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	@ 0x60
 8002642:	f107 0010 	add.w	r0, r7, #16
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	4613      	mov	r3, r2
 800264a:	4a35      	ldr	r2, [pc, #212]	@ (8002720 <CMD_NTC_Get_Temp+0x144>)
 800264c:	2150      	movs	r1, #80	@ 0x50
 800264e:	f00a ff6d 	bl	800d52c <sniprintf>
			}
			embeddedCliPrint(cli, buffer);
 8002652:	f107 0310 	add.w	r3, r7, #16
 8002656:	4619      	mov	r1, r3
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f001 fc61 	bl	8003f20 <embeddedCliPrint>
		for (uint8_t channel = 0; channel < 8; channel++) {
 800265e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002662:	3301      	adds	r3, #1
 8002664:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8002668:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800266c:	2b07      	cmp	r3, #7
 800266e:	d9ce      	bls.n	800260e <CMD_NTC_Get_Temp+0x32>
 8002670:	e04a      	b.n	8002708 <CMD_NTC_Get_Temp+0x12c>
		}
	}
	else if (*arg1 == '0' || *arg1 == '1' || *arg1 == '2' || *arg1 == '3' || *arg1 == '4' || *arg1 == '5' || *arg1 == '6' || *arg1 == '7') {
 8002672:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b30      	cmp	r3, #48	@ 0x30
 8002678:	d01b      	beq.n	80026b2 <CMD_NTC_Get_Temp+0xd6>
 800267a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b31      	cmp	r3, #49	@ 0x31
 8002680:	d017      	beq.n	80026b2 <CMD_NTC_Get_Temp+0xd6>
 8002682:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	2b32      	cmp	r3, #50	@ 0x32
 8002688:	d013      	beq.n	80026b2 <CMD_NTC_Get_Temp+0xd6>
 800268a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2b33      	cmp	r3, #51	@ 0x33
 8002690:	d00f      	beq.n	80026b2 <CMD_NTC_Get_Temp+0xd6>
 8002692:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b34      	cmp	r3, #52	@ 0x34
 8002698:	d00b      	beq.n	80026b2 <CMD_NTC_Get_Temp+0xd6>
 800269a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b35      	cmp	r3, #53	@ 0x35
 80026a0:	d007      	beq.n	80026b2 <CMD_NTC_Get_Temp+0xd6>
 80026a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	2b36      	cmp	r3, #54	@ 0x36
 80026a8:	d003      	beq.n	80026b2 <CMD_NTC_Get_Temp+0xd6>
 80026aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b37      	cmp	r3, #55	@ 0x37
 80026b0:	d12a      	bne.n	8002708 <CMD_NTC_Get_Temp+0x12c>
		int channel = atoi(arg1);
 80026b2:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80026b4:	f00a f99a 	bl	800c9ec <atoi>
 80026b8:	6678      	str	r0, [r7, #100]	@ 0x64
		char buffer[80];
		NTC_get_temperature(NTC_Temperature);
 80026ba:	4817      	ldr	r0, [pc, #92]	@ (8002718 <CMD_NTC_Get_Temp+0x13c>)
 80026bc:	f007 f8b4 	bl	8009828 <NTC_get_temperature>
		int16_t temp = NTC_Temperature[channel];
 80026c0:	4a15      	ldr	r2, [pc, #84]	@ (8002718 <CMD_NTC_Get_Temp+0x13c>)
 80026c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80026c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80026c8:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
		if (temp == 0x7FFF) {
 80026cc:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	@ 0x62
 80026d0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d107      	bne.n	80026e8 <CMD_NTC_Get_Temp+0x10c>
			snprintf(buffer, sizeof(buffer), "--> NTC[%d] is fail", channel);
 80026d8:	f107 0010 	add.w	r0, r7, #16
 80026dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80026de:	4a0f      	ldr	r2, [pc, #60]	@ (800271c <CMD_NTC_Get_Temp+0x140>)
 80026e0:	2150      	movs	r1, #80	@ 0x50
 80026e2:	f00a ff23 	bl	800d52c <sniprintf>
 80026e6:	e009      	b.n	80026fc <CMD_NTC_Get_Temp+0x120>
		} else {
			snprintf(buffer, sizeof(buffer), "--> NTC[%d]: %i", channel, temp);
 80026e8:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	@ 0x62
 80026ec:	f107 0010 	add.w	r0, r7, #16
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80026f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002720 <CMD_NTC_Get_Temp+0x144>)
 80026f6:	2150      	movs	r1, #80	@ 0x50
 80026f8:	f00a ff18 	bl	800d52c <sniprintf>
		}
		embeddedCliPrint(cli, buffer);
 80026fc:	f107 0310 	add.w	r3, r7, #16
 8002700:	4619      	mov	r1, r3
 8002702:	68f8      	ldr	r0, [r7, #12]
 8002704:	f001 fc0c 	bl	8003f20 <embeddedCliPrint>
	}
	embeddedCliPrint(cli, "");
 8002708:	4906      	ldr	r1, [pc, #24]	@ (8002724 <CMD_NTC_Get_Temp+0x148>)
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f001 fc08 	bl	8003f20 <embeddedCliPrint>
}
 8002710:	bf00      	nop
 8002712:	3770      	adds	r7, #112	@ 0x70
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	20005b48 	.word	0x20005b48
 800271c:	0800fef0 	.word	0x0800fef0
 8002720:	0800ff04 	.word	0x0800ff04
 8002724:	0800ff14 	.word	0x0800ff14

08002728 <CMD_PWR_5V_Set>:

static void CMD_PWR_5V_Set(EmbeddedCli *cli, char *args, void *context) {
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
	const char *arg1 = embeddedCliGetToken(args, 1);
 8002734:	2101      	movs	r1, #1
 8002736:	68b8      	ldr	r0, [r7, #8]
 8002738:	f001 fcb4 	bl	80040a4 <embeddedCliGetToken>
 800273c:	6178      	str	r0, [r7, #20]
	s_Temperature_CurrentState.Pwr_status = (uint8_t)atoi(arg1);
 800273e:	6978      	ldr	r0, [r7, #20]
 8002740:	f00a f954 	bl	800c9ec <atoi>
 8002744:	4603      	mov	r3, r0
 8002746:	b2da      	uxtb	r2, r3
 8002748:	4b0f      	ldr	r3, [pc, #60]	@ (8002788 <CMD_PWR_5V_Set+0x60>)
 800274a:	701a      	strb	r2, [r3, #0]
	if (s_Temperature_CurrentState.Pwr_status) {
 800274c:	4b0e      	ldr	r3, [pc, #56]	@ (8002788 <CMD_PWR_5V_Set+0x60>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d008      	beq.n	8002766 <CMD_PWR_5V_Set+0x3e>
		LL_GPIO_SetOutputPin(EF_5_EN_GPIO_Port, EF_5_EN_Pin);
 8002754:	2110      	movs	r1, #16
 8002756:	480d      	ldr	r0, [pc, #52]	@ (800278c <CMD_PWR_5V_Set+0x64>)
 8002758:	f7ff fec2 	bl	80024e0 <LL_GPIO_SetOutputPin>
		embeddedCliPrint(cli, "--> Power for temp is on");
 800275c:	490c      	ldr	r1, [pc, #48]	@ (8002790 <CMD_PWR_5V_Set+0x68>)
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f001 fbde 	bl	8003f20 <embeddedCliPrint>
 8002764:	e007      	b.n	8002776 <CMD_PWR_5V_Set+0x4e>
	}
	else {
		LL_GPIO_ResetOutputPin(EF_5_EN_GPIO_Port, EF_5_EN_Pin);
 8002766:	2110      	movs	r1, #16
 8002768:	4808      	ldr	r0, [pc, #32]	@ (800278c <CMD_PWR_5V_Set+0x64>)
 800276a:	f7ff fec7 	bl	80024fc <LL_GPIO_ResetOutputPin>
		embeddedCliPrint(cli, "--> Power for temp is off");
 800276e:	4909      	ldr	r1, [pc, #36]	@ (8002794 <CMD_PWR_5V_Set+0x6c>)
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f001 fbd5 	bl	8003f20 <embeddedCliPrint>
	}
	embeddedCliPrint(cli, "");
 8002776:	4908      	ldr	r1, [pc, #32]	@ (8002798 <CMD_PWR_5V_Set+0x70>)
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f001 fbd1 	bl	8003f20 <embeddedCliPrint>
}
 800277e:	bf00      	nop
 8002780:	3718      	adds	r7, #24
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	200041c8 	.word	0x200041c8
 800278c:	40020c00 	.word	0x40020c00
 8002790:	0800ff18 	.word	0x0800ff18
 8002794:	0800ff34 	.word	0x0800ff34
 8002798:	0800ff14 	.word	0x0800ff14

0800279c <CMD_PWR_5V_Get>:

static void CMD_PWR_5V_Get(EmbeddedCli *cli, char *args, void *context) {
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
	if (s_Temperature_CurrentState.Pwr_status) {
 80027a8:	4b0a      	ldr	r3, [pc, #40]	@ (80027d4 <CMD_PWR_5V_Get+0x38>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d004      	beq.n	80027ba <CMD_PWR_5V_Get+0x1e>
		embeddedCliPrint(cli, "--> Power for temp is on");
 80027b0:	4909      	ldr	r1, [pc, #36]	@ (80027d8 <CMD_PWR_5V_Get+0x3c>)
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f001 fbb4 	bl	8003f20 <embeddedCliPrint>
 80027b8:	e003      	b.n	80027c2 <CMD_PWR_5V_Get+0x26>
	}
	else {
		embeddedCliPrint(cli, "--> Power for temp is off");
 80027ba:	4908      	ldr	r1, [pc, #32]	@ (80027dc <CMD_PWR_5V_Get+0x40>)
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f001 fbaf 	bl	8003f20 <embeddedCliPrint>
	}
	embeddedCliPrint(cli, "");
 80027c2:	4907      	ldr	r1, [pc, #28]	@ (80027e0 <CMD_PWR_5V_Get+0x44>)
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f001 fbab 	bl	8003f20 <embeddedCliPrint>
}
 80027ca:	bf00      	nop
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	200041c8 	.word	0x200041c8
 80027d8:	0800ff18 	.word	0x0800ff18
 80027dc:	0800ff34 	.word	0x0800ff34
 80027e0:	0800ff14 	.word	0x0800ff14

080027e4 <CMD_TEC_Init>:

static void CMD_TEC_Init(EmbeddedCli *cli, char *args, void *context) {
 80027e4:	b590      	push	{r4, r7, lr}
 80027e6:	b09d      	sub	sp, #116	@ 0x74
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
    // TODO: Implement TEC initialization logic
	const char *arg1 = embeddedCliGetToken(args, 1);
 80027f0:	2101      	movs	r1, #1
 80027f2:	68b8      	ldr	r0, [r7, #8]
 80027f4:	f001 fc56 	bl	80040a4 <embeddedCliGetToken>
 80027f8:	66b8      	str	r0, [r7, #104]	@ 0x68
	char buffer[60];
	int8_t tec_init_channel = 0;
 80027fa:	2300      	movs	r3, #0
 80027fc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	struct lt8722_dev *p_tec_dev;
	struct lt8722_dev *p_tec_dev_table[] = {&tec_0, &tec_1, &tec_2, &tec_3};
 8002800:	4b48      	ldr	r3, [pc, #288]	@ (8002924 <CMD_TEC_Init+0x140>)
 8002802:	f107 0410 	add.w	r4, r7, #16
 8002806:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002808:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (*arg1 == 'a') {
 800280c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b61      	cmp	r3, #97	@ 0x61
 8002812:	d13d      	bne.n	8002890 <CMD_TEC_Init+0xac>
		/* Init TEC 0 -> 3 */
		for (uint8_t channel = 0; channel < 4; channel++) {
 8002814:	2300      	movs	r3, #0
 8002816:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800281a:	e034      	b.n	8002886 <CMD_TEC_Init+0xa2>
			p_tec_dev = p_tec_dev_table[channel];
 800281c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	3370      	adds	r3, #112	@ 0x70
 8002824:	443b      	add	r3, r7
 8002826:	f853 3c60 	ldr.w	r3, [r3, #-96]
 800282a:	65fb      	str	r3, [r7, #92]	@ 0x5c
			tec_init_channel = lt8722_init(p_tec_dev);
 800282c:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800282e:	f006 fc0f 	bl	8009050 <lt8722_init>
 8002832:	4603      	mov	r3, r0
 8002834:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			LL_mDelay(10);
 8002838:	200a      	movs	r0, #10
 800283a:	f009 ff17 	bl	800c66c <LL_mDelay>
			// if init is success
			if (!tec_init_channel) {
 800283e:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10c      	bne.n	8002860 <CMD_TEC_Init+0x7c>
				lt8722_set_swen_req(p_tec_dev, LT8722_SWEN_REQ_DISABLED);
 8002846:	2100      	movs	r1, #0
 8002848:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800284a:	f006 fbb5 	bl	8008fb8 <lt8722_set_swen_req>
				snprintf(buffer, sizeof(buffer), "--> Tec %d init success", channel);
 800284e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002852:	f107 0020 	add.w	r0, r7, #32
 8002856:	4a34      	ldr	r2, [pc, #208]	@ (8002928 <CMD_TEC_Init+0x144>)
 8002858:	213c      	movs	r1, #60	@ 0x3c
 800285a:	f00a fe67 	bl	800d52c <sniprintf>
 800285e:	e007      	b.n	8002870 <CMD_TEC_Init+0x8c>
			}
			else
				snprintf(buffer, sizeof(buffer), "--> Tec %d init fail", channel);
 8002860:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002864:	f107 0020 	add.w	r0, r7, #32
 8002868:	4a30      	ldr	r2, [pc, #192]	@ (800292c <CMD_TEC_Init+0x148>)
 800286a:	213c      	movs	r1, #60	@ 0x3c
 800286c:	f00a fe5e 	bl	800d52c <sniprintf>
			embeddedCliPrint(cli, buffer);
 8002870:	f107 0320 	add.w	r3, r7, #32
 8002874:	4619      	mov	r1, r3
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f001 fb52 	bl	8003f20 <embeddedCliPrint>
		for (uint8_t channel = 0; channel < 4; channel++) {
 800287c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002880:	3301      	adds	r3, #1
 8002882:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8002886:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800288a:	2b03      	cmp	r3, #3
 800288c:	d9c6      	bls.n	800281c <CMD_TEC_Init+0x38>
 800288e:	e040      	b.n	8002912 <CMD_TEC_Init+0x12e>
		}
	}
	else if (*arg1 == '0' || *arg1 == '1' || *arg1 == '2' || *arg1 == '3') {
 8002890:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b30      	cmp	r3, #48	@ 0x30
 8002896:	d00b      	beq.n	80028b0 <CMD_TEC_Init+0xcc>
 8002898:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2b31      	cmp	r3, #49	@ 0x31
 800289e:	d007      	beq.n	80028b0 <CMD_TEC_Init+0xcc>
 80028a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b32      	cmp	r3, #50	@ 0x32
 80028a6:	d003      	beq.n	80028b0 <CMD_TEC_Init+0xcc>
 80028a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b33      	cmp	r3, #51	@ 0x33
 80028ae:	d130      	bne.n	8002912 <CMD_TEC_Init+0x12e>
		int channel = atoi(arg1);
 80028b0:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80028b2:	f00a f89b 	bl	800c9ec <atoi>
 80028b6:	6638      	str	r0, [r7, #96]	@ 0x60
		p_tec_dev = p_tec_dev_table[channel];
 80028b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	3370      	adds	r3, #112	@ 0x70
 80028be:	443b      	add	r3, r7
 80028c0:	f853 3c60 	ldr.w	r3, [r3, #-96]
 80028c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
		tec_init_channel = lt8722_init(p_tec_dev);
 80028c6:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80028c8:	f006 fbc2 	bl	8009050 <lt8722_init>
 80028cc:	4603      	mov	r3, r0
 80028ce:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		LL_mDelay(10);
 80028d2:	200a      	movs	r0, #10
 80028d4:	f009 feca 	bl	800c66c <LL_mDelay>
		// if init is success
		if (!tec_init_channel) {
 80028d8:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10b      	bne.n	80028f8 <CMD_TEC_Init+0x114>
			lt8722_set_swen_req(p_tec_dev, LT8722_SWEN_REQ_DISABLED);
 80028e0:	2100      	movs	r1, #0
 80028e2:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80028e4:	f006 fb68 	bl	8008fb8 <lt8722_set_swen_req>
			snprintf(buffer, sizeof(buffer), "--> Tec %d init success", channel);
 80028e8:	f107 0020 	add.w	r0, r7, #32
 80028ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80028ee:	4a0e      	ldr	r2, [pc, #56]	@ (8002928 <CMD_TEC_Init+0x144>)
 80028f0:	213c      	movs	r1, #60	@ 0x3c
 80028f2:	f00a fe1b 	bl	800d52c <sniprintf>
 80028f6:	e006      	b.n	8002906 <CMD_TEC_Init+0x122>
		}
		else
			snprintf(buffer, sizeof(buffer), "--> Tec %d init fail", channel);
 80028f8:	f107 0020 	add.w	r0, r7, #32
 80028fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80028fe:	4a0b      	ldr	r2, [pc, #44]	@ (800292c <CMD_TEC_Init+0x148>)
 8002900:	213c      	movs	r1, #60	@ 0x3c
 8002902:	f00a fe13 	bl	800d52c <sniprintf>
		embeddedCliPrint(cli, buffer);
 8002906:	f107 0320 	add.w	r3, r7, #32
 800290a:	4619      	mov	r1, r3
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f001 fb07 	bl	8003f20 <embeddedCliPrint>
	}
	embeddedCliPrint(cli, "");
 8002912:	4907      	ldr	r1, [pc, #28]	@ (8002930 <CMD_TEC_Init+0x14c>)
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f001 fb03 	bl	8003f20 <embeddedCliPrint>
}
 800291a:	bf00      	nop
 800291c:	3774      	adds	r7, #116	@ 0x74
 800291e:	46bd      	mov	sp, r7
 8002920:	bd90      	pop	{r4, r7, pc}
 8002922:	bf00      	nop
 8002924:	0800ff80 	.word	0x0800ff80
 8002928:	0800ff50 	.word	0x0800ff50
 800292c:	0800ff68 	.word	0x0800ff68
 8002930:	0800ff14 	.word	0x0800ff14

08002934 <CMD_TEC_Set_Volt>:

static void CMD_TEC_Set_Volt(EmbeddedCli *cli, char *args, void *context) {
 8002934:	b580      	push	{r7, lr}
 8002936:	b0a8      	sub	sp, #160	@ 0xa0
 8002938:	af02      	add	r7, sp, #8
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
    // TODO: Implement TEC voltage set logic
	const char *arg1 = embeddedCliGetToken(args, 1);
 8002940:	2101      	movs	r1, #1
 8002942:	68b8      	ldr	r0, [r7, #8]
 8002944:	f001 fbae 	bl	80040a4 <embeddedCliGetToken>
 8002948:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
	const char *arg2 = embeddedCliGetToken(args, 2);
 800294c:	2102      	movs	r1, #2
 800294e:	68b8      	ldr	r0, [r7, #8]
 8002950:	f001 fba8 	bl	80040a4 <embeddedCliGetToken>
 8002954:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
	const char *arg3 = embeddedCliGetToken(args, 3);
 8002958:	2103      	movs	r1, #3
 800295a:	68b8      	ldr	r0, [r7, #8]
 800295c:	f001 fba2 	bl	80040a4 <embeddedCliGetToken>
 8002960:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
	const char *arg4 = embeddedCliGetToken(args, 4);
 8002964:	2104      	movs	r1, #4
 8002966:	68b8      	ldr	r0, [r7, #8]
 8002968:	f001 fb9c 	bl	80040a4 <embeddedCliGetToken>
 800296c:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
	int volt[4];
	volt[0] = atoi(arg1);
 8002970:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8002974:	f00a f83a 	bl	800c9ec <atoi>
 8002978:	4603      	mov	r3, r0
 800297a:	677b      	str	r3, [r7, #116]	@ 0x74
	volt[1] = atoi(arg2);
 800297c:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8002980:	f00a f834 	bl	800c9ec <atoi>
 8002984:	4603      	mov	r3, r0
 8002986:	67bb      	str	r3, [r7, #120]	@ 0x78
	volt[2] = atoi(arg3);
 8002988:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 800298c:	f00a f82e 	bl	800c9ec <atoi>
 8002990:	4603      	mov	r3, r0
 8002992:	67fb      	str	r3, [r7, #124]	@ 0x7c
	volt[3] = atoi(arg4);
 8002994:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002998:	f00a f828 	bl	800c9ec <atoi>
 800299c:	4603      	mov	r3, r0
 800299e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	char buffer[100];
	for (uint8_t i = 0; i < 4; i++) {
 80029a2:	2300      	movs	r3, #0
 80029a4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80029a8:	e049      	b.n	8002a3e <CMD_TEC_Set_Volt+0x10a>
		temperature_set_tec_vol(i, volt[i]);
 80029aa:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	3398      	adds	r3, #152	@ 0x98
 80029b2:	443b      	add	r3, r7
 80029b4:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80029be:	4611      	mov	r1, r2
 80029c0:	4618      	mov	r0, r3
 80029c2:	f007 f90f 	bl	8009be4 <temperature_set_tec_vol>
		if (volt[i] > 3000)
 80029c6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	3398      	adds	r3, #152	@ 0x98
 80029ce:	443b      	add	r3, r7
 80029d0:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80029d4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80029d8:	4293      	cmp	r3, r2
 80029da:	dd14      	ble.n	8002a06 <CMD_TEC_Set_Volt+0xd2>
			snprintf(buffer, sizeof(buffer), "--> Tec[%d]: set %i mV OverVolt --> Tec[%d]: set 3000 mV", i, volt[i], i);
 80029dc:	f897 1097 	ldrb.w	r1, [r7, #151]	@ 0x97
 80029e0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	3398      	adds	r3, #152	@ 0x98
 80029e8:	443b      	add	r3, r7
 80029ea:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80029ee:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 80029f2:	f107 0010 	add.w	r0, r7, #16
 80029f6:	9201      	str	r2, [sp, #4]
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	460b      	mov	r3, r1
 80029fc:	4a16      	ldr	r2, [pc, #88]	@ (8002a58 <CMD_TEC_Set_Volt+0x124>)
 80029fe:	2164      	movs	r1, #100	@ 0x64
 8002a00:	f00a fd94 	bl	800d52c <sniprintf>
 8002a04:	e010      	b.n	8002a28 <CMD_TEC_Set_Volt+0xf4>
		else
			snprintf(buffer, sizeof(buffer), "--> Tec[%d]: set %i mV", i, volt[i]);
 8002a06:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 8002a0a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	3398      	adds	r3, #152	@ 0x98
 8002a12:	443b      	add	r3, r7
 8002a14:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8002a18:	f107 0010 	add.w	r0, r7, #16
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	4a0e      	ldr	r2, [pc, #56]	@ (8002a5c <CMD_TEC_Set_Volt+0x128>)
 8002a22:	2164      	movs	r1, #100	@ 0x64
 8002a24:	f00a fd82 	bl	800d52c <sniprintf>
		embeddedCliPrint(cli, buffer);
 8002a28:	f107 0310 	add.w	r3, r7, #16
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f001 fa76 	bl	8003f20 <embeddedCliPrint>
	for (uint8_t i = 0; i < 4; i++) {
 8002a34:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8002a38:	3301      	adds	r3, #1
 8002a3a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8002a3e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8002a42:	2b03      	cmp	r3, #3
 8002a44:	d9b1      	bls.n	80029aa <CMD_TEC_Set_Volt+0x76>
	}
	embeddedCliPrint(cli, "");
 8002a46:	4906      	ldr	r1, [pc, #24]	@ (8002a60 <CMD_TEC_Set_Volt+0x12c>)
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f001 fa69 	bl	8003f20 <embeddedCliPrint>
}
 8002a4e:	bf00      	nop
 8002a50:	3798      	adds	r7, #152	@ 0x98
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	0800ff90 	.word	0x0800ff90
 8002a5c:	0800ffcc 	.word	0x0800ffcc
 8002a60:	0800ff14 	.word	0x0800ff14

08002a64 <CMD_TEC_Get_Volt>:

static void CMD_TEC_Get_Volt(EmbeddedCli *cli, char *args, void *context) {
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b0ae      	sub	sp, #184	@ 0xb8
 8002a68:	af02      	add	r7, sp, #8
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
    // TODO: Implement TEC voltage get logic
	const char *arg1 = embeddedCliGetToken(args, 1);
 8002a70:	2101      	movs	r1, #1
 8002a72:	68b8      	ldr	r0, [r7, #8]
 8002a74:	f001 fb16 	bl	80040a4 <embeddedCliGetToken>
 8002a78:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
	char buffer[60];
	uint16_t vol_set = 0;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
	uint16_t vol_adc = 0;
 8002a82:	2300      	movs	r3, #0
 8002a84:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
	if (*arg1 == 'a') {
 8002a88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	2b61      	cmp	r3, #97	@ 0x61
 8002a90:	d132      	bne.n	8002af8 <CMD_TEC_Get_Volt+0x94>
		char buffer[80];
		for (uint8_t i = 0; i < 4; i++) {
 8002a92:	2300      	movs	r3, #0
 8002a94:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
 8002a98:	e029      	b.n	8002aee <CMD_TEC_Get_Volt+0x8a>
			vol_set = temperature_get_tec_vol_set(i);
 8002a9a:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f007 f904 	bl	8009cac <temperature_get_tec_vol_set>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
			vol_adc = temperature_get_tec_vol_adc(i);
 8002aaa:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f007 f918 	bl	8009ce4 <temperature_get_tec_vol_adc>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
			snprintf(buffer, sizeof(buffer), "--> Tec[%d]: set %imV, ADC %imV", i, vol_set, vol_adc);
 8002aba:	f897 10af 	ldrb.w	r1, [r7, #175]	@ 0xaf
 8002abe:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8002ac2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8002ac6:	f107 0014 	add.w	r0, r7, #20
 8002aca:	9201      	str	r2, [sp, #4]
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4a2d      	ldr	r2, [pc, #180]	@ (8002b88 <CMD_TEC_Get_Volt+0x124>)
 8002ad2:	2150      	movs	r1, #80	@ 0x50
 8002ad4:	f00a fd2a 	bl	800d52c <sniprintf>
			embeddedCliPrint(cli, buffer);
 8002ad8:	f107 0314 	add.w	r3, r7, #20
 8002adc:	4619      	mov	r1, r3
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f001 fa1e 	bl	8003f20 <embeddedCliPrint>
		for (uint8_t i = 0; i < 4; i++) {
 8002ae4:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8002ae8:	3301      	adds	r3, #1
 8002aea:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
 8002aee:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8002af2:	2b03      	cmp	r3, #3
 8002af4:	d9d1      	bls.n	8002a9a <CMD_TEC_Get_Volt+0x36>
 8002af6:	e03f      	b.n	8002b78 <CMD_TEC_Get_Volt+0x114>
		}
	}
	else if (*arg1 == '0' || *arg1 == '1' || *arg1 == '2' || *arg1 == '3') {
 8002af8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	2b30      	cmp	r3, #48	@ 0x30
 8002b00:	d00e      	beq.n	8002b20 <CMD_TEC_Get_Volt+0xbc>
 8002b02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b31      	cmp	r3, #49	@ 0x31
 8002b0a:	d009      	beq.n	8002b20 <CMD_TEC_Get_Volt+0xbc>
 8002b0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	2b32      	cmp	r3, #50	@ 0x32
 8002b14:	d004      	beq.n	8002b20 <CMD_TEC_Get_Volt+0xbc>
 8002b16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	2b33      	cmp	r3, #51	@ 0x33
 8002b1e:	d12b      	bne.n	8002b78 <CMD_TEC_Get_Volt+0x114>
		int channel = atoi(arg1);
 8002b20:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8002b24:	f009 ff62 	bl	800c9ec <atoi>
 8002b28:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
		vol_set = temperature_get_tec_vol_set(channel);
 8002b2c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	4618      	mov	r0, r3
 8002b34:	f007 f8ba 	bl	8009cac <temperature_get_tec_vol_set>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
		vol_adc = temperature_get_tec_vol_adc(channel);
 8002b3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	4618      	mov	r0, r3
 8002b46:	f007 f8cd 	bl	8009ce4 <temperature_get_tec_vol_adc>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
		snprintf(buffer, sizeof(buffer), "--> Tec[%d]: set %imV, ADC %imV", channel, vol_set, vol_adc);
 8002b50:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8002b54:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8002b58:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 8002b5c:	9201      	str	r2, [sp, #4]
 8002b5e:	9300      	str	r3, [sp, #0]
 8002b60:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b64:	4a08      	ldr	r2, [pc, #32]	@ (8002b88 <CMD_TEC_Get_Volt+0x124>)
 8002b66:	213c      	movs	r1, #60	@ 0x3c
 8002b68:	f00a fce0 	bl	800d52c <sniprintf>
		embeddedCliPrint(cli, buffer);
 8002b6c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002b70:	4619      	mov	r1, r3
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f001 f9d4 	bl	8003f20 <embeddedCliPrint>
	}
	embeddedCliPrint(cli, "");
 8002b78:	4904      	ldr	r1, [pc, #16]	@ (8002b8c <CMD_TEC_Get_Volt+0x128>)
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f001 f9d0 	bl	8003f20 <embeddedCliPrint>
}
 8002b80:	bf00      	nop
 8002b82:	37b0      	adds	r7, #176	@ 0xb0
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	0800ffe4 	.word	0x0800ffe4
 8002b8c:	0800ff14 	.word	0x0800ff14

08002b90 <CMD_TEC_Set_Dir>:

static void CMD_TEC_Set_Dir(EmbeddedCli *cli, char *args, void *context) {
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b08a      	sub	sp, #40	@ 0x28
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
    // TODO: Implement TEC direction set logic
	const char *arg1 = embeddedCliGetToken(args, 1);
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	68b8      	ldr	r0, [r7, #8]
 8002ba0:	f001 fa80 	bl	80040a4 <embeddedCliGetToken>
 8002ba4:	6278      	str	r0, [r7, #36]	@ 0x24
	const char *arg2 = embeddedCliGetToken(args, 2);
 8002ba6:	2102      	movs	r1, #2
 8002ba8:	68b8      	ldr	r0, [r7, #8]
 8002baa:	f001 fa7b 	bl	80040a4 <embeddedCliGetToken>
 8002bae:	6238      	str	r0, [r7, #32]
	const char *arg3 = embeddedCliGetToken(args, 3);
 8002bb0:	2103      	movs	r1, #3
 8002bb2:	68b8      	ldr	r0, [r7, #8]
 8002bb4:	f001 fa76 	bl	80040a4 <embeddedCliGetToken>
 8002bb8:	61f8      	str	r0, [r7, #28]
	const char *arg4 = embeddedCliGetToken(args, 4);
 8002bba:	2104      	movs	r1, #4
 8002bbc:	68b8      	ldr	r0, [r7, #8]
 8002bbe:	f001 fa71 	bl	80040a4 <embeddedCliGetToken>
 8002bc2:	61b8      	str	r0, [r7, #24]
	tec_dir_t dir_0 = atoi(arg1) ? TEC_HEAT : TEC_COOL;
 8002bc4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002bc6:	f009 ff11 	bl	800c9ec <atoi>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	bf14      	ite	ne
 8002bd0:	2301      	movne	r3, #1
 8002bd2:	2300      	moveq	r3, #0
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	75fb      	strb	r3, [r7, #23]
	tec_dir_t dir_1 = atoi(arg2) ? TEC_HEAT : TEC_COOL;
 8002bd8:	6a38      	ldr	r0, [r7, #32]
 8002bda:	f009 ff07 	bl	800c9ec <atoi>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	bf14      	ite	ne
 8002be4:	2301      	movne	r3, #1
 8002be6:	2300      	moveq	r3, #0
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	75bb      	strb	r3, [r7, #22]
	tec_dir_t dir_2 = atoi(arg3) ? TEC_HEAT : TEC_COOL;
 8002bec:	69f8      	ldr	r0, [r7, #28]
 8002bee:	f009 fefd 	bl	800c9ec <atoi>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	bf14      	ite	ne
 8002bf8:	2301      	movne	r3, #1
 8002bfa:	2300      	moveq	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	757b      	strb	r3, [r7, #21]
	tec_dir_t dir_3 = atoi(arg4) ? TEC_HEAT : TEC_COOL;
 8002c00:	69b8      	ldr	r0, [r7, #24]
 8002c02:	f009 fef3 	bl	800c9ec <atoi>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	bf14      	ite	ne
 8002c0c:	2301      	movne	r3, #1
 8002c0e:	2300      	moveq	r3, #0
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	753b      	strb	r3, [r7, #20]
	temperature_set_tec_dir(dir_0, dir_1, dir_2, dir_3);
 8002c14:	7d3b      	ldrb	r3, [r7, #20]
 8002c16:	7d7a      	ldrb	r2, [r7, #21]
 8002c18:	7db9      	ldrb	r1, [r7, #22]
 8002c1a:	7df8      	ldrb	r0, [r7, #23]
 8002c1c:	f007 f8c4 	bl	8009da8 <temperature_set_tec_dir>
	if (dir_0 == TEC_COOL) embeddedCliPrint(cli, "--> TEC 0 set cool mode");
 8002c20:	7dfb      	ldrb	r3, [r7, #23]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d104      	bne.n	8002c30 <CMD_TEC_Set_Dir+0xa0>
 8002c26:	491a      	ldr	r1, [pc, #104]	@ (8002c90 <CMD_TEC_Set_Dir+0x100>)
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f001 f979 	bl	8003f20 <embeddedCliPrint>
 8002c2e:	e003      	b.n	8002c38 <CMD_TEC_Set_Dir+0xa8>
	else embeddedCliPrint(cli, "--> TEC 0 set heat mode");
 8002c30:	4918      	ldr	r1, [pc, #96]	@ (8002c94 <CMD_TEC_Set_Dir+0x104>)
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f001 f974 	bl	8003f20 <embeddedCliPrint>
	if (dir_1 == TEC_COOL) embeddedCliPrint(cli, "--> TEC 1 set cool mode");
 8002c38:	7dbb      	ldrb	r3, [r7, #22]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d104      	bne.n	8002c48 <CMD_TEC_Set_Dir+0xb8>
 8002c3e:	4916      	ldr	r1, [pc, #88]	@ (8002c98 <CMD_TEC_Set_Dir+0x108>)
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f001 f96d 	bl	8003f20 <embeddedCliPrint>
 8002c46:	e003      	b.n	8002c50 <CMD_TEC_Set_Dir+0xc0>
	else embeddedCliPrint(cli, "--> TEC 1 set heat mode");
 8002c48:	4914      	ldr	r1, [pc, #80]	@ (8002c9c <CMD_TEC_Set_Dir+0x10c>)
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f001 f968 	bl	8003f20 <embeddedCliPrint>
	if (dir_2 == TEC_COOL) embeddedCliPrint(cli, "--> TEC 2 set cool mode");
 8002c50:	7d7b      	ldrb	r3, [r7, #21]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d104      	bne.n	8002c60 <CMD_TEC_Set_Dir+0xd0>
 8002c56:	4912      	ldr	r1, [pc, #72]	@ (8002ca0 <CMD_TEC_Set_Dir+0x110>)
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f001 f961 	bl	8003f20 <embeddedCliPrint>
 8002c5e:	e003      	b.n	8002c68 <CMD_TEC_Set_Dir+0xd8>
	else embeddedCliPrint(cli, "--> TEC 2 set heat mode");
 8002c60:	4910      	ldr	r1, [pc, #64]	@ (8002ca4 <CMD_TEC_Set_Dir+0x114>)
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f001 f95c 	bl	8003f20 <embeddedCliPrint>
	if (dir_3 == TEC_COOL) embeddedCliPrint(cli, "--> TEC 3 set cool mode");
 8002c68:	7d3b      	ldrb	r3, [r7, #20]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d104      	bne.n	8002c78 <CMD_TEC_Set_Dir+0xe8>
 8002c6e:	490e      	ldr	r1, [pc, #56]	@ (8002ca8 <CMD_TEC_Set_Dir+0x118>)
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f001 f955 	bl	8003f20 <embeddedCliPrint>
 8002c76:	e003      	b.n	8002c80 <CMD_TEC_Set_Dir+0xf0>
	else embeddedCliPrint(cli, "--> TEC 3 set heat mode");
 8002c78:	490c      	ldr	r1, [pc, #48]	@ (8002cac <CMD_TEC_Set_Dir+0x11c>)
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f001 f950 	bl	8003f20 <embeddedCliPrint>
	embeddedCliPrint(cli, "");
 8002c80:	490b      	ldr	r1, [pc, #44]	@ (8002cb0 <CMD_TEC_Set_Dir+0x120>)
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f001 f94c 	bl	8003f20 <embeddedCliPrint>
}
 8002c88:	bf00      	nop
 8002c8a:	3728      	adds	r7, #40	@ 0x28
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	08010004 	.word	0x08010004
 8002c94:	0801001c 	.word	0x0801001c
 8002c98:	08010034 	.word	0x08010034
 8002c9c:	0801004c 	.word	0x0801004c
 8002ca0:	08010064 	.word	0x08010064
 8002ca4:	0801007c 	.word	0x0801007c
 8002ca8:	08010094 	.word	0x08010094
 8002cac:	080100ac 	.word	0x080100ac
 8002cb0:	0800ff14 	.word	0x0800ff14

08002cb4 <CMD_TEC_Get_Dir>:

static void CMD_TEC_Get_Dir(EmbeddedCli *cli, char *args, void *context) {
 8002cb4:	b590      	push	{r4, r7, lr}
 8002cb6:	b093      	sub	sp, #76	@ 0x4c
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
    // TODO: Implement TEC direction get logic
	const char *arg1 = embeddedCliGetToken(args, 1);
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	68b8      	ldr	r0, [r7, #8]
 8002cc4:	f001 f9ee 	bl	80040a4 <embeddedCliGetToken>
 8002cc8:	6478      	str	r0, [r7, #68]	@ 0x44
	tec_dir_t dir[4] = {TEC_COOL, TEC_COOL, TEC_COOL, TEC_COOL};
 8002cca:	2300      	movs	r3, #0
 8002ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	temperature_get_tec_dir(&dir[0], &dir[1], &dir[2], &dir[3]);
 8002cce:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002cd2:	1cdc      	adds	r4, r3, #3
 8002cd4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002cd8:	1c9a      	adds	r2, r3, #2
 8002cda:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002cde:	1c59      	adds	r1, r3, #1
 8002ce0:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8002ce4:	4623      	mov	r3, r4
 8002ce6:	f007 f891 	bl	8009e0c <temperature_get_tec_dir>
	if (*arg1 == 'a') {
 8002cea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b61      	cmp	r3, #97	@ 0x61
 8002cf0:	d134      	bne.n	8002d5c <CMD_TEC_Get_Dir+0xa8>
		if (dir[0] == TEC_COOL) embeddedCliPrint(cli, "--> TEC 0 is cool mode");
 8002cf2:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d104      	bne.n	8002d04 <CMD_TEC_Get_Dir+0x50>
 8002cfa:	4934      	ldr	r1, [pc, #208]	@ (8002dcc <CMD_TEC_Get_Dir+0x118>)
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f001 f90f 	bl	8003f20 <embeddedCliPrint>
 8002d02:	e003      	b.n	8002d0c <CMD_TEC_Get_Dir+0x58>
		else embeddedCliPrint(cli, "--> TEC 0 is heat mode");
 8002d04:	4932      	ldr	r1, [pc, #200]	@ (8002dd0 <CMD_TEC_Get_Dir+0x11c>)
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f001 f90a 	bl	8003f20 <embeddedCliPrint>
		if (dir[1] == TEC_COOL) embeddedCliPrint(cli, "--> TEC 1 is cool mode");
 8002d0c:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d104      	bne.n	8002d1e <CMD_TEC_Get_Dir+0x6a>
 8002d14:	492f      	ldr	r1, [pc, #188]	@ (8002dd4 <CMD_TEC_Get_Dir+0x120>)
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f001 f902 	bl	8003f20 <embeddedCliPrint>
 8002d1c:	e003      	b.n	8002d26 <CMD_TEC_Get_Dir+0x72>
		else embeddedCliPrint(cli, "--> TEC 1 is heat mode");
 8002d1e:	492e      	ldr	r1, [pc, #184]	@ (8002dd8 <CMD_TEC_Get_Dir+0x124>)
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f001 f8fd 	bl	8003f20 <embeddedCliPrint>
		if (dir[2] == TEC_COOL) embeddedCliPrint(cli, "--> TEC 2 is cool mode");
 8002d26:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d104      	bne.n	8002d38 <CMD_TEC_Get_Dir+0x84>
 8002d2e:	492b      	ldr	r1, [pc, #172]	@ (8002ddc <CMD_TEC_Get_Dir+0x128>)
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f001 f8f5 	bl	8003f20 <embeddedCliPrint>
 8002d36:	e003      	b.n	8002d40 <CMD_TEC_Get_Dir+0x8c>
		else embeddedCliPrint(cli, "--> TEC 2 is heat mode");
 8002d38:	4929      	ldr	r1, [pc, #164]	@ (8002de0 <CMD_TEC_Get_Dir+0x12c>)
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f001 f8f0 	bl	8003f20 <embeddedCliPrint>
		if (dir[3] == TEC_COOL) embeddedCliPrint(cli, "--> TEC 3 is cool mode");
 8002d40:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d104      	bne.n	8002d52 <CMD_TEC_Get_Dir+0x9e>
 8002d48:	4926      	ldr	r1, [pc, #152]	@ (8002de4 <CMD_TEC_Get_Dir+0x130>)
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f001 f8e8 	bl	8003f20 <embeddedCliPrint>
 8002d50:	e034      	b.n	8002dbc <CMD_TEC_Get_Dir+0x108>
		else embeddedCliPrint(cli, "--> TEC 3 is heat mode");
 8002d52:	4925      	ldr	r1, [pc, #148]	@ (8002de8 <CMD_TEC_Get_Dir+0x134>)
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f001 f8e3 	bl	8003f20 <embeddedCliPrint>
 8002d5a:	e02f      	b.n	8002dbc <CMD_TEC_Get_Dir+0x108>
	}
	else if (*arg1 == '0' || *arg1 == '1' || *arg1 == '2' || *arg1 == '3') {
 8002d5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b30      	cmp	r3, #48	@ 0x30
 8002d62:	d00b      	beq.n	8002d7c <CMD_TEC_Get_Dir+0xc8>
 8002d64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b31      	cmp	r3, #49	@ 0x31
 8002d6a:	d007      	beq.n	8002d7c <CMD_TEC_Get_Dir+0xc8>
 8002d6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b32      	cmp	r3, #50	@ 0x32
 8002d72:	d003      	beq.n	8002d7c <CMD_TEC_Get_Dir+0xc8>
 8002d74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b33      	cmp	r3, #51	@ 0x33
 8002d7a:	d11f      	bne.n	8002dbc <CMD_TEC_Get_Dir+0x108>
		char buffer[40];
		int channel = atoi(arg1);
 8002d7c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002d7e:	f009 fe35 	bl	800c9ec <atoi>
 8002d82:	6438      	str	r0, [r7, #64]	@ 0x40
		if (dir[channel] == TEC_COOL)
 8002d84:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8002d88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d8a:	4413      	add	r3, r2
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d107      	bne.n	8002da2 <CMD_TEC_Get_Dir+0xee>
			snprintf(buffer, sizeof(buffer), "--> TEC %d is cool mode", channel);
 8002d92:	f107 0014 	add.w	r0, r7, #20
 8002d96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d98:	4a14      	ldr	r2, [pc, #80]	@ (8002dec <CMD_TEC_Get_Dir+0x138>)
 8002d9a:	2128      	movs	r1, #40	@ 0x28
 8002d9c:	f00a fbc6 	bl	800d52c <sniprintf>
 8002da0:	e006      	b.n	8002db0 <CMD_TEC_Get_Dir+0xfc>
		else
			snprintf(buffer, sizeof(buffer), "--> TEC %d is heat mode", channel);
 8002da2:	f107 0014 	add.w	r0, r7, #20
 8002da6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002da8:	4a11      	ldr	r2, [pc, #68]	@ (8002df0 <CMD_TEC_Get_Dir+0x13c>)
 8002daa:	2128      	movs	r1, #40	@ 0x28
 8002dac:	f00a fbbe 	bl	800d52c <sniprintf>
		embeddedCliPrint(cli, buffer);
 8002db0:	f107 0314 	add.w	r3, r7, #20
 8002db4:	4619      	mov	r1, r3
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f001 f8b2 	bl	8003f20 <embeddedCliPrint>
	}
	embeddedCliPrint(cli, "");
 8002dbc:	490d      	ldr	r1, [pc, #52]	@ (8002df4 <CMD_TEC_Get_Dir+0x140>)
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f001 f8ae 	bl	8003f20 <embeddedCliPrint>
}
 8002dc4:	bf00      	nop
 8002dc6:	374c      	adds	r7, #76	@ 0x4c
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd90      	pop	{r4, r7, pc}
 8002dcc:	080100c4 	.word	0x080100c4
 8002dd0:	080100dc 	.word	0x080100dc
 8002dd4:	080100f4 	.word	0x080100f4
 8002dd8:	0801010c 	.word	0x0801010c
 8002ddc:	08010124 	.word	0x08010124
 8002de0:	0801013c 	.word	0x0801013c
 8002de4:	08010154 	.word	0x08010154
 8002de8:	0801016c 	.word	0x0801016c
 8002dec:	08010184 	.word	0x08010184
 8002df0:	0801019c 	.word	0x0801019c
 8002df4:	0800ff14 	.word	0x0800ff14

08002df8 <CMD_HTR_Set_Duty>:

static void CMD_HTR_Set_Duty(EmbeddedCli *cli, char *args, void *context) {
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b0a4      	sub	sp, #144	@ 0x90
 8002dfc:	af02      	add	r7, sp, #8
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
    // TODO: Implement Heater duty cycle set logic
	const char *arg1 = embeddedCliGetToken(args, 1);
 8002e04:	2101      	movs	r1, #1
 8002e06:	68b8      	ldr	r0, [r7, #8]
 8002e08:	f001 f94c 	bl	80040a4 <embeddedCliGetToken>
 8002e0c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
	const char *arg2 = embeddedCliGetToken(args, 2);
 8002e10:	2102      	movs	r1, #2
 8002e12:	68b8      	ldr	r0, [r7, #8]
 8002e14:	f001 f946 	bl	80040a4 <embeddedCliGetToken>
 8002e18:	67f8      	str	r0, [r7, #124]	@ 0x7c
	const char *arg3 = embeddedCliGetToken(args, 3);
 8002e1a:	2103      	movs	r1, #3
 8002e1c:	68b8      	ldr	r0, [r7, #8]
 8002e1e:	f001 f941 	bl	80040a4 <embeddedCliGetToken>
 8002e22:	67b8      	str	r0, [r7, #120]	@ 0x78
	const char *arg4 = embeddedCliGetToken(args, 4);
 8002e24:	2104      	movs	r1, #4
 8002e26:	68b8      	ldr	r0, [r7, #8]
 8002e28:	f001 f93c 	bl	80040a4 <embeddedCliGetToken>
 8002e2c:	6778      	str	r0, [r7, #116]	@ 0x74
	int duty[4];
	duty[0] = atoi(arg1);
 8002e2e:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002e32:	f009 fddb 	bl	800c9ec <atoi>
 8002e36:	4603      	mov	r3, r0
 8002e38:	667b      	str	r3, [r7, #100]	@ 0x64
	duty[1] = atoi(arg2);
 8002e3a:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8002e3c:	f009 fdd6 	bl	800c9ec <atoi>
 8002e40:	4603      	mov	r3, r0
 8002e42:	66bb      	str	r3, [r7, #104]	@ 0x68
	duty[2] = atoi(arg3);
 8002e44:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8002e46:	f009 fdd1 	bl	800c9ec <atoi>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	66fb      	str	r3, [r7, #108]	@ 0x6c
	duty[3] = atoi(arg4);
 8002e4e:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8002e50:	f009 fdcc 	bl	800c9ec <atoi>
 8002e54:	4603      	mov	r3, r0
 8002e56:	673b      	str	r3, [r7, #112]	@ 0x70
	char buffer[80];
	for (uint8_t i = 0; i < 4; i++) {
 8002e58:	2300      	movs	r3, #0
 8002e5a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8002e5e:	e03a      	b.n	8002ed6 <CMD_HTR_Set_Duty+0xde>
		if (duty[i] > 100) duty[i] = 100;
 8002e60:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	3388      	adds	r3, #136	@ 0x88
 8002e68:	443b      	add	r3, r7
 8002e6a:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8002e6e:	2b64      	cmp	r3, #100	@ 0x64
 8002e70:	dd07      	ble.n	8002e82 <CMD_HTR_Set_Duty+0x8a>
 8002e72:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	3388      	adds	r3, #136	@ 0x88
 8002e7a:	443b      	add	r3, r7
 8002e7c:	2264      	movs	r2, #100	@ 0x64
 8002e7e:	f843 2c24 	str.w	r2, [r3, #-36]
		temperature_set_heater_duty(i, duty[i]);
 8002e82:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	3388      	adds	r3, #136	@ 0x88
 8002e8a:	443b      	add	r3, r7
 8002e8c:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002e96:	4611      	mov	r1, r2
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f006 ff3f 	bl	8009d1c <temperature_set_heater_duty>
		snprintf(buffer, sizeof(buffer), "--> Heater duty[%d]: %i%%", i, duty[i]);
 8002e9e:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 8002ea2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	3388      	adds	r3, #136	@ 0x88
 8002eaa:	443b      	add	r3, r7
 8002eac:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8002eb0:	f107 0014 	add.w	r0, r7, #20
 8002eb4:	9300      	str	r3, [sp, #0]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	4a0d      	ldr	r2, [pc, #52]	@ (8002ef0 <CMD_HTR_Set_Duty+0xf8>)
 8002eba:	2150      	movs	r1, #80	@ 0x50
 8002ebc:	f00a fb36 	bl	800d52c <sniprintf>
		embeddedCliPrint(cli, buffer);
 8002ec0:	f107 0314 	add.w	r3, r7, #20
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f001 f82a 	bl	8003f20 <embeddedCliPrint>
	for (uint8_t i = 0; i < 4; i++) {
 8002ecc:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8002ed6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002eda:	2b03      	cmp	r3, #3
 8002edc:	d9c0      	bls.n	8002e60 <CMD_HTR_Set_Duty+0x68>
	}
	embeddedCliPrint(cli, "");
 8002ede:	4905      	ldr	r1, [pc, #20]	@ (8002ef4 <CMD_HTR_Set_Duty+0xfc>)
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f001 f81d 	bl	8003f20 <embeddedCliPrint>
}
 8002ee6:	bf00      	nop
 8002ee8:	3788      	adds	r7, #136	@ 0x88
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	080101b4 	.word	0x080101b4
 8002ef4:	0800ff14 	.word	0x0800ff14

08002ef8 <CMD_HTR_Get_Duty>:

static void CMD_HTR_Get_Duty(EmbeddedCli *cli, char *args, void *context) {
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b09a      	sub	sp, #104	@ 0x68
 8002efc:	af02      	add	r7, sp, #8
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
    // TODO: Implement Heater duty cycle get logic
	const char *arg1 = embeddedCliGetToken(args, 1);
 8002f04:	2101      	movs	r1, #1
 8002f06:	68b8      	ldr	r0, [r7, #8]
 8002f08:	f001 f8cc 	bl	80040a4 <embeddedCliGetToken>
 8002f0c:	65b8      	str	r0, [r7, #88]	@ 0x58
	char buffer[60];
	uint8_t duty;
	if (*arg1 == 'a') {
 8002f0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	2b61      	cmp	r3, #97	@ 0x61
 8002f14:	d127      	bne.n	8002f66 <CMD_HTR_Get_Duty+0x6e>
		for (uint8_t i = 0; i < 4; i++) {
 8002f16:	2300      	movs	r3, #0
 8002f18:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002f1c:	e01e      	b.n	8002f5c <CMD_HTR_Get_Duty+0x64>
			duty = temperature_get_heater_duty(i);
 8002f1e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002f22:	4618      	mov	r0, r3
 8002f24:	f006 ff22 	bl	8009d6c <temperature_get_heater_duty>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
			snprintf(buffer, sizeof(buffer), "--> Heater duty[%d]: %i%%", i, duty);
 8002f2e:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8002f32:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8002f36:	f107 0014 	add.w	r0, r7, #20
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	4a24      	ldr	r2, [pc, #144]	@ (8002fd0 <CMD_HTR_Get_Duty+0xd8>)
 8002f40:	213c      	movs	r1, #60	@ 0x3c
 8002f42:	f00a faf3 	bl	800d52c <sniprintf>
			embeddedCliPrint(cli, buffer);
 8002f46:	f107 0314 	add.w	r3, r7, #20
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f000 ffe7 	bl	8003f20 <embeddedCliPrint>
		for (uint8_t i = 0; i < 4; i++) {
 8002f52:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002f56:	3301      	adds	r3, #1
 8002f58:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002f5c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002f60:	2b03      	cmp	r3, #3
 8002f62:	d9dc      	bls.n	8002f1e <CMD_HTR_Get_Duty+0x26>
 8002f64:	e02b      	b.n	8002fbe <CMD_HTR_Get_Duty+0xc6>
		}
	}
	else if (*arg1 == '0' || *arg1 == '1' || *arg1 == '2' || *arg1 == '3') {
 8002f66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	2b30      	cmp	r3, #48	@ 0x30
 8002f6c:	d00b      	beq.n	8002f86 <CMD_HTR_Get_Duty+0x8e>
 8002f6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	2b31      	cmp	r3, #49	@ 0x31
 8002f74:	d007      	beq.n	8002f86 <CMD_HTR_Get_Duty+0x8e>
 8002f76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	2b32      	cmp	r3, #50	@ 0x32
 8002f7c:	d003      	beq.n	8002f86 <CMD_HTR_Get_Duty+0x8e>
 8002f7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	2b33      	cmp	r3, #51	@ 0x33
 8002f84:	d11b      	bne.n	8002fbe <CMD_HTR_Get_Duty+0xc6>
		int channel = atoi(arg1);
 8002f86:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002f88:	f009 fd30 	bl	800c9ec <atoi>
 8002f8c:	6578      	str	r0, [r7, #84]	@ 0x54
		duty = temperature_get_heater_duty(channel);
 8002f8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	4618      	mov	r0, r3
 8002f94:	f006 feea 	bl	8009d6c <temperature_get_heater_duty>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
		snprintf(buffer, sizeof(buffer), "--> Heater duty[%d]: %i%%", channel, duty);
 8002f9e:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8002fa2:	f107 0014 	add.w	r0, r7, #20
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002faa:	4a09      	ldr	r2, [pc, #36]	@ (8002fd0 <CMD_HTR_Get_Duty+0xd8>)
 8002fac:	213c      	movs	r1, #60	@ 0x3c
 8002fae:	f00a fabd 	bl	800d52c <sniprintf>
		embeddedCliPrint(cli, buffer);
 8002fb2:	f107 0314 	add.w	r3, r7, #20
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f000 ffb1 	bl	8003f20 <embeddedCliPrint>
	}
	embeddedCliPrint(cli, "");
 8002fbe:	4905      	ldr	r1, [pc, #20]	@ (8002fd4 <CMD_HTR_Get_Duty+0xdc>)
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f000 ffad 	bl	8003f20 <embeddedCliPrint>
}
 8002fc6:	bf00      	nop
 8002fc8:	3760      	adds	r7, #96	@ 0x60
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	080101b4 	.word	0x080101b4
 8002fd4:	0800ff14 	.word	0x0800ff14

08002fd8 <CMD_Ref_Set_Temp>:

static void CMD_Ref_Set_Temp(EmbeddedCli *cli, char *args, void *context) {
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b092      	sub	sp, #72	@ 0x48
 8002fdc:	af02      	add	r7, sp, #8
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
    // TODO: Implement reference temperature set logic
	const char *arg1 = embeddedCliGetToken(args, 1);
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	68b8      	ldr	r0, [r7, #8]
 8002fe8:	f001 f85c 	bl	80040a4 <embeddedCliGetToken>
 8002fec:	63f8      	str	r0, [r7, #60]	@ 0x3c
	int setpoint = atoi(arg1);
 8002fee:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002ff0:	f009 fcfc 	bl	800c9ec <atoi>
 8002ff4:	63b8      	str	r0, [r7, #56]	@ 0x38
	char buffer[40];
	temperature_set_setpoint(setpoint);
 8002ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ff8:	b21b      	sxth	r3, r3
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f006 fdd6 	bl	8009bac <temperature_set_setpoint>
	snprintf(buffer, sizeof(buffer), "--> Reference Temperature: %.2f *C", (float)setpoint/10);
 8003000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003002:	ee07 3a90 	vmov	s15, r3
 8003006:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800300a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800300e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003012:	ee16 0a90 	vmov	r0, s13
 8003016:	f7fd faa7 	bl	8000568 <__aeabi_f2d>
 800301a:	4602      	mov	r2, r0
 800301c:	460b      	mov	r3, r1
 800301e:	f107 0010 	add.w	r0, r7, #16
 8003022:	e9cd 2300 	strd	r2, r3, [sp]
 8003026:	4a09      	ldr	r2, [pc, #36]	@ (800304c <CMD_Ref_Set_Temp+0x74>)
 8003028:	2128      	movs	r1, #40	@ 0x28
 800302a:	f00a fa7f 	bl	800d52c <sniprintf>
	embeddedCliPrint(cli, buffer);
 800302e:	f107 0310 	add.w	r3, r7, #16
 8003032:	4619      	mov	r1, r3
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f000 ff73 	bl	8003f20 <embeddedCliPrint>
	embeddedCliPrint(cli, "");
 800303a:	4905      	ldr	r1, [pc, #20]	@ (8003050 <CMD_Ref_Set_Temp+0x78>)
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f000 ff6f 	bl	8003f20 <embeddedCliPrint>
}
 8003042:	bf00      	nop
 8003044:	3740      	adds	r7, #64	@ 0x40
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	080101d0 	.word	0x080101d0
 8003050:	0800ff14 	.word	0x0800ff14

08003054 <CMD_Ref_Get_Temp>:

static void CMD_Ref_Get_Temp(EmbeddedCli *cli, char *args, void *context) {
 8003054:	b580      	push	{r7, lr}
 8003056:	b096      	sub	sp, #88	@ 0x58
 8003058:	af02      	add	r7, sp, #8
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
    // TODO: Implement reference temperature get logic
	char buffer[60];
	int16_t setpoint = temperature_get_setpoint();
 8003060:	f006 fdb4 	bl	8009bcc <temperature_get_setpoint>
 8003064:	4603      	mov	r3, r0
 8003066:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	snprintf(buffer, sizeof(buffer), "--> Reference Temperature: %.2f *C", (float)setpoint/10);
 800306a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800306e:	ee07 3a90 	vmov	s15, r3
 8003072:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003076:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800307a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800307e:	ee16 0a90 	vmov	r0, s13
 8003082:	f7fd fa71 	bl	8000568 <__aeabi_f2d>
 8003086:	4602      	mov	r2, r0
 8003088:	460b      	mov	r3, r1
 800308a:	f107 0010 	add.w	r0, r7, #16
 800308e:	e9cd 2300 	strd	r2, r3, [sp]
 8003092:	4a09      	ldr	r2, [pc, #36]	@ (80030b8 <CMD_Ref_Get_Temp+0x64>)
 8003094:	213c      	movs	r1, #60	@ 0x3c
 8003096:	f00a fa49 	bl	800d52c <sniprintf>
	embeddedCliPrint(cli, buffer);
 800309a:	f107 0310 	add.w	r3, r7, #16
 800309e:	4619      	mov	r1, r3
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f000 ff3d 	bl	8003f20 <embeddedCliPrint>
	embeddedCliPrint(cli, "");
 80030a6:	4905      	ldr	r1, [pc, #20]	@ (80030bc <CMD_Ref_Get_Temp+0x68>)
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f000 ff39 	bl	8003f20 <embeddedCliPrint>
}
 80030ae:	bf00      	nop
 80030b0:	3750      	adds	r7, #80	@ 0x50
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	080101d0 	.word	0x080101d0
 80030bc:	0800ff14 	.word	0x0800ff14

080030c0 <CMD_Ref_Set_NTC>:

static void CMD_Ref_Set_NTC(EmbeddedCli *cli, char *args, void *context) {
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b096      	sub	sp, #88	@ 0x58
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
    // TODO: Implement reference NTC set logic
	const char *arg1 = embeddedCliGetToken(args, 1);
 80030cc:	2101      	movs	r1, #1
 80030ce:	68b8      	ldr	r0, [r7, #8]
 80030d0:	f000 ffe8 	bl	80040a4 <embeddedCliGetToken>
 80030d4:	6578      	str	r0, [r7, #84]	@ 0x54
	int NTC_Ref = atoi(arg1);
 80030d6:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80030d8:	f009 fc88 	bl	800c9ec <atoi>
 80030dc:	6538      	str	r0, [r7, #80]	@ 0x50
	temperature_set_ntc_ref(NTC_Ref);
 80030de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	4618      	mov	r0, r3
 80030e4:	f006 ffac 	bl	800a040 <temperature_set_ntc_ref>
	char buffer[60];
	snprintf(buffer, sizeof(buffer), "--> NTC Ref is %d", NTC_Ref);
 80030e8:	f107 0014 	add.w	r0, r7, #20
 80030ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030ee:	4a09      	ldr	r2, [pc, #36]	@ (8003114 <CMD_Ref_Set_NTC+0x54>)
 80030f0:	213c      	movs	r1, #60	@ 0x3c
 80030f2:	f00a fa1b 	bl	800d52c <sniprintf>
	embeddedCliPrint(cli, buffer);
 80030f6:	f107 0314 	add.w	r3, r7, #20
 80030fa:	4619      	mov	r1, r3
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f000 ff0f 	bl	8003f20 <embeddedCliPrint>
	embeddedCliPrint(cli, "");
 8003102:	4905      	ldr	r1, [pc, #20]	@ (8003118 <CMD_Ref_Set_NTC+0x58>)
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 ff0b 	bl	8003f20 <embeddedCliPrint>
}
 800310a:	bf00      	nop
 800310c:	3758      	adds	r7, #88	@ 0x58
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	080101f4 	.word	0x080101f4
 8003118:	0800ff14 	.word	0x0800ff14

0800311c <CMD_Ref_Get_NTC>:

static void CMD_Ref_Get_NTC(EmbeddedCli *cli, char *args, void *context) {
 800311c:	b580      	push	{r7, lr}
 800311e:	b094      	sub	sp, #80	@ 0x50
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
    // TODO: Implement reference NTC get logic
	uint8_t NTC_Ref = 0;
 8003128:	2300      	movs	r3, #0
 800312a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	temperature_get_ntc_ref(&NTC_Ref);
 800312e:	f107 034f 	add.w	r3, r7, #79	@ 0x4f
 8003132:	4618      	mov	r0, r3
 8003134:	f006 ff96 	bl	800a064 <temperature_get_ntc_ref>
	char buffer[60];
	snprintf(buffer, sizeof(buffer), "--> NTC Ref is %d", NTC_Ref);
 8003138:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800313c:	f107 0010 	add.w	r0, r7, #16
 8003140:	4a08      	ldr	r2, [pc, #32]	@ (8003164 <CMD_Ref_Get_NTC+0x48>)
 8003142:	213c      	movs	r1, #60	@ 0x3c
 8003144:	f00a f9f2 	bl	800d52c <sniprintf>
	embeddedCliPrint(cli, buffer);
 8003148:	f107 0310 	add.w	r3, r7, #16
 800314c:	4619      	mov	r1, r3
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 fee6 	bl	8003f20 <embeddedCliPrint>
	embeddedCliPrint(cli, "");
 8003154:	4904      	ldr	r1, [pc, #16]	@ (8003168 <CMD_Ref_Get_NTC+0x4c>)
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f000 fee2 	bl	8003f20 <embeddedCliPrint>
}
 800315c:	bf00      	nop
 800315e:	3750      	adds	r7, #80	@ 0x50
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	080101f4 	.word	0x080101f4
 8003168:	0800ff14 	.word	0x0800ff14

0800316c <CMD_TEC_Set_Auto>:

static void CMD_TEC_Set_Auto(EmbeddedCli *cli, char *args, void *context) {
 800316c:	b580      	push	{r7, lr}
 800316e:	b098      	sub	sp, #96	@ 0x60
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
    // TODO: Implement TEC auto mode set logic
	const char *arg1 = embeddedCliGetToken(args, 1);
 8003178:	2101      	movs	r1, #1
 800317a:	68b8      	ldr	r0, [r7, #8]
 800317c:	f000 ff92 	bl	80040a4 <embeddedCliGetToken>
 8003180:	65f8      	str	r0, [r7, #92]	@ 0x5c
	const char *arg2 = embeddedCliGetToken(args, 2);
 8003182:	2102      	movs	r1, #2
 8003184:	68b8      	ldr	r0, [r7, #8]
 8003186:	f000 ff8d 	bl	80040a4 <embeddedCliGetToken>
 800318a:	65b8      	str	r0, [r7, #88]	@ 0x58
	const char *arg3 = embeddedCliGetToken(args, 3);
 800318c:	2103      	movs	r1, #3
 800318e:	68b8      	ldr	r0, [r7, #8]
 8003190:	f000 ff88 	bl	80040a4 <embeddedCliGetToken>
 8003194:	6578      	str	r0, [r7, #84]	@ 0x54
	const char *arg4 = embeddedCliGetToken(args, 4);
 8003196:	2104      	movs	r1, #4
 8003198:	68b8      	ldr	r0, [r7, #8]
 800319a:	f000 ff83 	bl	80040a4 <embeddedCliGetToken>
 800319e:	6538      	str	r0, [r7, #80]	@ 0x50
	uint8_t tec_0_en = atoi(arg1);
 80031a0:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80031a2:	f009 fc23 	bl	800c9ec <atoi>
 80031a6:	4603      	mov	r3, r0
 80031a8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	uint8_t tec_1_en = atoi(arg2);
 80031ac:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80031ae:	f009 fc1d 	bl	800c9ec <atoi>
 80031b2:	4603      	mov	r3, r0
 80031b4:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
	uint8_t tec_2_en = atoi(arg3);
 80031b8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80031ba:	f009 fc17 	bl	800c9ec <atoi>
 80031be:	4603      	mov	r3, r0
 80031c0:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	uint8_t tec_3_en = atoi(arg4);
 80031c4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80031c6:	f009 fc11 	bl	800c9ec <atoi>
 80031ca:	4603      	mov	r3, r0
 80031cc:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
	temperature_set_tec_auto(tec_0_en, tec_1_en, tec_2_en, tec_3_en);
 80031d0:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80031d4:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80031d8:	f897 104e 	ldrb.w	r1, [r7, #78]	@ 0x4e
 80031dc:	f897 004f 	ldrb.w	r0, [r7, #79]	@ 0x4f
 80031e0:	f006 fe46 	bl	8009e70 <temperature_set_tec_auto>
	char buffer[60];
	if (tec_0_en) {
 80031e4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00c      	beq.n	8003206 <CMD_TEC_Set_Auto+0x9a>
		snprintf(buffer, sizeof(buffer), "--> TEC 0 is ena");
 80031ec:	f107 0310 	add.w	r3, r7, #16
 80031f0:	4a22      	ldr	r2, [pc, #136]	@ (800327c <CMD_TEC_Set_Auto+0x110>)
 80031f2:	213c      	movs	r1, #60	@ 0x3c
 80031f4:	4618      	mov	r0, r3
 80031f6:	f00a f999 	bl	800d52c <sniprintf>
		embeddedCliPrint(cli, buffer);
 80031fa:	f107 0310 	add.w	r3, r7, #16
 80031fe:	4619      	mov	r1, r3
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f000 fe8d 	bl	8003f20 <embeddedCliPrint>
	}
	if (tec_1_en) {
 8003206:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00c      	beq.n	8003228 <CMD_TEC_Set_Auto+0xbc>
		snprintf(buffer, sizeof(buffer), "--> TEC 1 is ena");
 800320e:	f107 0310 	add.w	r3, r7, #16
 8003212:	4a1b      	ldr	r2, [pc, #108]	@ (8003280 <CMD_TEC_Set_Auto+0x114>)
 8003214:	213c      	movs	r1, #60	@ 0x3c
 8003216:	4618      	mov	r0, r3
 8003218:	f00a f988 	bl	800d52c <sniprintf>
		embeddedCliPrint(cli, buffer);
 800321c:	f107 0310 	add.w	r3, r7, #16
 8003220:	4619      	mov	r1, r3
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f000 fe7c 	bl	8003f20 <embeddedCliPrint>
	}
	if (tec_2_en) {
 8003228:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00c      	beq.n	800324a <CMD_TEC_Set_Auto+0xde>
		snprintf(buffer, sizeof(buffer), "--> TEC 2 is ena");
 8003230:	f107 0310 	add.w	r3, r7, #16
 8003234:	4a13      	ldr	r2, [pc, #76]	@ (8003284 <CMD_TEC_Set_Auto+0x118>)
 8003236:	213c      	movs	r1, #60	@ 0x3c
 8003238:	4618      	mov	r0, r3
 800323a:	f00a f977 	bl	800d52c <sniprintf>
		embeddedCliPrint(cli, buffer);
 800323e:	f107 0310 	add.w	r3, r7, #16
 8003242:	4619      	mov	r1, r3
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f000 fe6b 	bl	8003f20 <embeddedCliPrint>
	}
	if (tec_3_en) {
 800324a:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00c      	beq.n	800326c <CMD_TEC_Set_Auto+0x100>
		snprintf(buffer, sizeof(buffer), "--> TEC 3 is ena");
 8003252:	f107 0310 	add.w	r3, r7, #16
 8003256:	4a0c      	ldr	r2, [pc, #48]	@ (8003288 <CMD_TEC_Set_Auto+0x11c>)
 8003258:	213c      	movs	r1, #60	@ 0x3c
 800325a:	4618      	mov	r0, r3
 800325c:	f00a f966 	bl	800d52c <sniprintf>
		embeddedCliPrint(cli, buffer);
 8003260:	f107 0310 	add.w	r3, r7, #16
 8003264:	4619      	mov	r1, r3
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 fe5a 	bl	8003f20 <embeddedCliPrint>
	}
	embeddedCliPrint(cli, "");
 800326c:	4907      	ldr	r1, [pc, #28]	@ (800328c <CMD_TEC_Set_Auto+0x120>)
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f000 fe56 	bl	8003f20 <embeddedCliPrint>
}
 8003274:	bf00      	nop
 8003276:	3760      	adds	r7, #96	@ 0x60
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	08010208 	.word	0x08010208
 8003280:	0801021c 	.word	0x0801021c
 8003284:	08010230 	.word	0x08010230
 8003288:	08010244 	.word	0x08010244
 800328c:	0800ff14 	.word	0x0800ff14

08003290 <CMD_TEC_Get_Auto>:

static void CMD_TEC_Get_Auto(EmbeddedCli *cli, char *args, void *context) {
 8003290:	b590      	push	{r4, r7, lr}
 8003292:	b099      	sub	sp, #100	@ 0x64
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
    // TODO: Implement TEC auto mode get logic
	const char *arg1 = embeddedCliGetToken(args, 1);
 800329c:	2101      	movs	r1, #1
 800329e:	68b8      	ldr	r0, [r7, #8]
 80032a0:	f000 ff00 	bl	80040a4 <embeddedCliGetToken>
 80032a4:	65b8      	str	r0, [r7, #88]	@ 0x58
	uint8_t tec_en[4];
	temperature_get_tec_auto(&tec_en[0], &tec_en[1], &tec_en[2], &tec_en[3]);
 80032a6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80032aa:	1cdc      	adds	r4, r3, #3
 80032ac:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80032b0:	1c9a      	adds	r2, r3, #2
 80032b2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80032b6:	1c59      	adds	r1, r3, #1
 80032b8:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 80032bc:	4623      	mov	r3, r4
 80032be:	f006 fe19 	bl	8009ef4 <temperature_get_tec_auto>
	char buffer[60];
	if (*arg1 == 'a') {
 80032c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	2b61      	cmp	r3, #97	@ 0x61
 80032c8:	d12c      	bne.n	8003324 <CMD_TEC_Get_Auto+0x94>
		for (uint8_t channel = 0; channel < 4; channel++) {
 80032ca:	2300      	movs	r3, #0
 80032cc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80032d0:	e023      	b.n	800331a <CMD_TEC_Get_Auto+0x8a>
			if (tec_en[channel])
 80032d2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80032d6:	3360      	adds	r3, #96	@ 0x60
 80032d8:	443b      	add	r3, r7
 80032da:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d008      	beq.n	80032f4 <CMD_TEC_Get_Auto+0x64>
				snprintf(buffer, sizeof(buffer), "--> TEC %d is ena", channel);
 80032e2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80032e6:	f107 0014 	add.w	r0, r7, #20
 80032ea:	4a2a      	ldr	r2, [pc, #168]	@ (8003394 <CMD_TEC_Get_Auto+0x104>)
 80032ec:	213c      	movs	r1, #60	@ 0x3c
 80032ee:	f00a f91d 	bl	800d52c <sniprintf>
 80032f2:	e007      	b.n	8003304 <CMD_TEC_Get_Auto+0x74>
			else
				snprintf(buffer, sizeof(buffer), "--> TEC %d is dis", channel);
 80032f4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80032f8:	f107 0014 	add.w	r0, r7, #20
 80032fc:	4a26      	ldr	r2, [pc, #152]	@ (8003398 <CMD_TEC_Get_Auto+0x108>)
 80032fe:	213c      	movs	r1, #60	@ 0x3c
 8003300:	f00a f914 	bl	800d52c <sniprintf>
			embeddedCliPrint(cli, buffer);
 8003304:	f107 0314 	add.w	r3, r7, #20
 8003308:	4619      	mov	r1, r3
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f000 fe08 	bl	8003f20 <embeddedCliPrint>
		for (uint8_t channel = 0; channel < 4; channel++) {
 8003310:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003314:	3301      	adds	r3, #1
 8003316:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800331a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800331e:	2b03      	cmp	r3, #3
 8003320:	d9d7      	bls.n	80032d2 <CMD_TEC_Get_Auto+0x42>
 8003322:	e02f      	b.n	8003384 <CMD_TEC_Get_Auto+0xf4>
		}
	}
	else if (*arg1 == '0' || *arg1 == '1' || *arg1 == '2' || *arg1 == '3') {
 8003324:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	2b30      	cmp	r3, #48	@ 0x30
 800332a:	d00b      	beq.n	8003344 <CMD_TEC_Get_Auto+0xb4>
 800332c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	2b31      	cmp	r3, #49	@ 0x31
 8003332:	d007      	beq.n	8003344 <CMD_TEC_Get_Auto+0xb4>
 8003334:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b32      	cmp	r3, #50	@ 0x32
 800333a:	d003      	beq.n	8003344 <CMD_TEC_Get_Auto+0xb4>
 800333c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2b33      	cmp	r3, #51	@ 0x33
 8003342:	d11f      	bne.n	8003384 <CMD_TEC_Get_Auto+0xf4>
		int channel = atoi(arg1);
 8003344:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003346:	f009 fb51 	bl	800c9ec <atoi>
 800334a:	6578      	str	r0, [r7, #84]	@ 0x54
		if (tec_en[channel])
 800334c:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8003350:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003352:	4413      	add	r3, r2
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d007      	beq.n	800336a <CMD_TEC_Get_Auto+0xda>
			snprintf(buffer, sizeof(buffer), "--> TEC %d is ena", channel);
 800335a:	f107 0014 	add.w	r0, r7, #20
 800335e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003360:	4a0c      	ldr	r2, [pc, #48]	@ (8003394 <CMD_TEC_Get_Auto+0x104>)
 8003362:	213c      	movs	r1, #60	@ 0x3c
 8003364:	f00a f8e2 	bl	800d52c <sniprintf>
 8003368:	e006      	b.n	8003378 <CMD_TEC_Get_Auto+0xe8>
		else
			snprintf(buffer, sizeof(buffer), "--> TEC %d is dis", channel);
 800336a:	f107 0014 	add.w	r0, r7, #20
 800336e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003370:	4a09      	ldr	r2, [pc, #36]	@ (8003398 <CMD_TEC_Get_Auto+0x108>)
 8003372:	213c      	movs	r1, #60	@ 0x3c
 8003374:	f00a f8da 	bl	800d52c <sniprintf>
		embeddedCliPrint(cli, buffer);
 8003378:	f107 0314 	add.w	r3, r7, #20
 800337c:	4619      	mov	r1, r3
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 fdce 	bl	8003f20 <embeddedCliPrint>
	}
	embeddedCliPrint(cli, "");
 8003384:	4905      	ldr	r1, [pc, #20]	@ (800339c <CMD_TEC_Get_Auto+0x10c>)
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 fdca 	bl	8003f20 <embeddedCliPrint>
}
 800338c:	bf00      	nop
 800338e:	3764      	adds	r7, #100	@ 0x64
 8003390:	46bd      	mov	sp, r7
 8003392:	bd90      	pop	{r4, r7, pc}
 8003394:	08010258 	.word	0x08010258
 8003398:	0801026c 	.word	0x0801026c
 800339c:	0800ff14 	.word	0x0800ff14

080033a0 <CMD_HTR_Set_Auto>:

static void CMD_HTR_Set_Auto(EmbeddedCli *cli, char *args, void *context) {
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b09a      	sub	sp, #104	@ 0x68
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
    // TODO: Implement Heater auto mode set logic
	const char *arg1 = embeddedCliGetToken(args, 1);
 80033ac:	2101      	movs	r1, #1
 80033ae:	68b8      	ldr	r0, [r7, #8]
 80033b0:	f000 fe78 	bl	80040a4 <embeddedCliGetToken>
 80033b4:	6638      	str	r0, [r7, #96]	@ 0x60
	const char *arg2 = embeddedCliGetToken(args, 2);
 80033b6:	2102      	movs	r1, #2
 80033b8:	68b8      	ldr	r0, [r7, #8]
 80033ba:	f000 fe73 	bl	80040a4 <embeddedCliGetToken>
 80033be:	65f8      	str	r0, [r7, #92]	@ 0x5c
	const char *arg3 = embeddedCliGetToken(args, 3);
 80033c0:	2103      	movs	r1, #3
 80033c2:	68b8      	ldr	r0, [r7, #8]
 80033c4:	f000 fe6e 	bl	80040a4 <embeddedCliGetToken>
 80033c8:	65b8      	str	r0, [r7, #88]	@ 0x58
	const char *arg4 = embeddedCliGetToken(args, 4);
 80033ca:	2104      	movs	r1, #4
 80033cc:	68b8      	ldr	r0, [r7, #8]
 80033ce:	f000 fe69 	bl	80040a4 <embeddedCliGetToken>
 80033d2:	6578      	str	r0, [r7, #84]	@ 0x54
	uint8_t htr_en[4] = {atoi(arg1), atoi(arg2), atoi(arg3), atoi(arg4)};
 80033d4:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80033d6:	f009 fb09 	bl	800c9ec <atoi>
 80033da:	4603      	mov	r3, r0
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
 80033e2:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80033e4:	f009 fb02 	bl	800c9ec <atoi>
 80033e8:	4603      	mov	r3, r0
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 80033f0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80033f2:	f009 fafb 	bl	800c9ec <atoi>
 80033f6:	4603      	mov	r3, r0
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 80033fe:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8003400:	f009 faf4 	bl	800c9ec <atoi>
 8003404:	4603      	mov	r3, r0
 8003406:	b2db      	uxtb	r3, r3
 8003408:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	temperature_set_heater_auto(htr_en[0], htr_en[1], htr_en[2], htr_en[3]);
 800340c:	f897 0050 	ldrb.w	r0, [r7, #80]	@ 0x50
 8003410:	f897 1051 	ldrb.w	r1, [r7, #81]	@ 0x51
 8003414:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 8003418:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800341c:	f006 fd9c 	bl	8009f58 <temperature_set_heater_auto>
	char buffer[60];
	for (uint8_t channel = 0; channel < 4; channel++) {
 8003420:	2300      	movs	r3, #0
 8003422:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8003426:	e01a      	b.n	800345e <CMD_HTR_Set_Auto+0xbe>
		if (htr_en[channel]) {
 8003428:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800342c:	3368      	adds	r3, #104	@ 0x68
 800342e:	443b      	add	r3, r7
 8003430:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00d      	beq.n	8003454 <CMD_HTR_Set_Auto+0xb4>
			snprintf(buffer, sizeof(buffer), "--> Heater %d is ena", channel);
 8003438:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800343c:	f107 0014 	add.w	r0, r7, #20
 8003440:	4a0d      	ldr	r2, [pc, #52]	@ (8003478 <CMD_HTR_Set_Auto+0xd8>)
 8003442:	213c      	movs	r1, #60	@ 0x3c
 8003444:	f00a f872 	bl	800d52c <sniprintf>
			embeddedCliPrint(cli, buffer);
 8003448:	f107 0314 	add.w	r3, r7, #20
 800344c:	4619      	mov	r1, r3
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 fd66 	bl	8003f20 <embeddedCliPrint>
	for (uint8_t channel = 0; channel < 4; channel++) {
 8003454:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003458:	3301      	adds	r3, #1
 800345a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800345e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003462:	2b03      	cmp	r3, #3
 8003464:	d9e0      	bls.n	8003428 <CMD_HTR_Set_Auto+0x88>
		}
	}
	embeddedCliPrint(cli, "");
 8003466:	4905      	ldr	r1, [pc, #20]	@ (800347c <CMD_HTR_Set_Auto+0xdc>)
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f000 fd59 	bl	8003f20 <embeddedCliPrint>
}
 800346e:	bf00      	nop
 8003470:	3768      	adds	r7, #104	@ 0x68
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	08010280 	.word	0x08010280
 800347c:	0800ff14 	.word	0x0800ff14

08003480 <CMD_HTR_Get_Auto>:

static void CMD_HTR_Get_Auto(EmbeddedCli *cli, char *args, void *context) {
 8003480:	b590      	push	{r4, r7, lr}
 8003482:	b099      	sub	sp, #100	@ 0x64
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
    // TODO: Implement Heater auto mode get logic
	const char *arg1 = embeddedCliGetToken(args, 1);
 800348c:	2101      	movs	r1, #1
 800348e:	68b8      	ldr	r0, [r7, #8]
 8003490:	f000 fe08 	bl	80040a4 <embeddedCliGetToken>
 8003494:	65b8      	str	r0, [r7, #88]	@ 0x58
	uint8_t htr_en[4];
	temperature_get_heater_auto(&htr_en[0], &htr_en[1], &htr_en[2], &htr_en[3]);
 8003496:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800349a:	1cdc      	adds	r4, r3, #3
 800349c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80034a0:	1c9a      	adds	r2, r3, #2
 80034a2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80034a6:	1c59      	adds	r1, r3, #1
 80034a8:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 80034ac:	4623      	mov	r3, r4
 80034ae:	f006 fd97 	bl	8009fe0 <temperature_get_heater_auto>
	char buffer[60];
	if (*arg1 == 'a') {
 80034b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	2b61      	cmp	r3, #97	@ 0x61
 80034b8:	d12c      	bne.n	8003514 <CMD_HTR_Get_Auto+0x94>
		for (uint8_t channel = 0; channel < 4; channel++) {
 80034ba:	2300      	movs	r3, #0
 80034bc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80034c0:	e023      	b.n	800350a <CMD_HTR_Get_Auto+0x8a>
			if (htr_en[channel])
 80034c2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80034c6:	3360      	adds	r3, #96	@ 0x60
 80034c8:	443b      	add	r3, r7
 80034ca:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d008      	beq.n	80034e4 <CMD_HTR_Get_Auto+0x64>
				snprintf(buffer, sizeof(buffer), "--> Heater %d is ena", channel);
 80034d2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80034d6:	f107 0014 	add.w	r0, r7, #20
 80034da:	4a2a      	ldr	r2, [pc, #168]	@ (8003584 <CMD_HTR_Get_Auto+0x104>)
 80034dc:	213c      	movs	r1, #60	@ 0x3c
 80034de:	f00a f825 	bl	800d52c <sniprintf>
 80034e2:	e007      	b.n	80034f4 <CMD_HTR_Get_Auto+0x74>
			else
				snprintf(buffer, sizeof(buffer), "--> Heater %d is dis", channel);
 80034e4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80034e8:	f107 0014 	add.w	r0, r7, #20
 80034ec:	4a26      	ldr	r2, [pc, #152]	@ (8003588 <CMD_HTR_Get_Auto+0x108>)
 80034ee:	213c      	movs	r1, #60	@ 0x3c
 80034f0:	f00a f81c 	bl	800d52c <sniprintf>
			embeddedCliPrint(cli, buffer);
 80034f4:	f107 0314 	add.w	r3, r7, #20
 80034f8:	4619      	mov	r1, r3
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f000 fd10 	bl	8003f20 <embeddedCliPrint>
		for (uint8_t channel = 0; channel < 4; channel++) {
 8003500:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003504:	3301      	adds	r3, #1
 8003506:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800350a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800350e:	2b03      	cmp	r3, #3
 8003510:	d9d7      	bls.n	80034c2 <CMD_HTR_Get_Auto+0x42>
 8003512:	e02f      	b.n	8003574 <CMD_HTR_Get_Auto+0xf4>
		}
	}
	else if (*arg1 == '0' || *arg1 == '1' || *arg1 == '2' || *arg1 == '3') {
 8003514:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	2b30      	cmp	r3, #48	@ 0x30
 800351a:	d00b      	beq.n	8003534 <CMD_HTR_Get_Auto+0xb4>
 800351c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	2b31      	cmp	r3, #49	@ 0x31
 8003522:	d007      	beq.n	8003534 <CMD_HTR_Get_Auto+0xb4>
 8003524:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	2b32      	cmp	r3, #50	@ 0x32
 800352a:	d003      	beq.n	8003534 <CMD_HTR_Get_Auto+0xb4>
 800352c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	2b33      	cmp	r3, #51	@ 0x33
 8003532:	d11f      	bne.n	8003574 <CMD_HTR_Get_Auto+0xf4>
		int channel = atoi(arg1);
 8003534:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003536:	f009 fa59 	bl	800c9ec <atoi>
 800353a:	6578      	str	r0, [r7, #84]	@ 0x54
		if (htr_en[channel])
 800353c:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8003540:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003542:	4413      	add	r3, r2
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d007      	beq.n	800355a <CMD_HTR_Get_Auto+0xda>
			snprintf(buffer, sizeof(buffer), "--> Heater %d is ena", channel);
 800354a:	f107 0014 	add.w	r0, r7, #20
 800354e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003550:	4a0c      	ldr	r2, [pc, #48]	@ (8003584 <CMD_HTR_Get_Auto+0x104>)
 8003552:	213c      	movs	r1, #60	@ 0x3c
 8003554:	f009 ffea 	bl	800d52c <sniprintf>
 8003558:	e006      	b.n	8003568 <CMD_HTR_Get_Auto+0xe8>
		else
			snprintf(buffer, sizeof(buffer), "--> Heater %d is dis", channel);
 800355a:	f107 0014 	add.w	r0, r7, #20
 800355e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003560:	4a09      	ldr	r2, [pc, #36]	@ (8003588 <CMD_HTR_Get_Auto+0x108>)
 8003562:	213c      	movs	r1, #60	@ 0x3c
 8003564:	f009 ffe2 	bl	800d52c <sniprintf>
		embeddedCliPrint(cli, buffer);
 8003568:	f107 0314 	add.w	r3, r7, #20
 800356c:	4619      	mov	r1, r3
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f000 fcd6 	bl	8003f20 <embeddedCliPrint>
	}
	embeddedCliPrint(cli, "");
 8003574:	4905      	ldr	r1, [pc, #20]	@ (800358c <CMD_HTR_Get_Auto+0x10c>)
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 fcd2 	bl	8003f20 <embeddedCliPrint>
}
 800357c:	bf00      	nop
 800357e:	3764      	adds	r7, #100	@ 0x64
 8003580:	46bd      	mov	sp, r7
 8003582:	bd90      	pop	{r4, r7, pc}
 8003584:	08010280 	.word	0x08010280
 8003588:	08010298 	.word	0x08010298
 800358c:	0800ff14 	.word	0x0800ff14

08003590 <CMD_Temp_Set_Auto>:

static void CMD_Temp_Set_Auto(EmbeddedCli *cli, char *args, void *context) {
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
    // TODO: Implement auto temperature set logic
	const char *arg1 = embeddedCliGetToken(args, 1);
 800359c:	2101      	movs	r1, #1
 800359e:	68b8      	ldr	r0, [r7, #8]
 80035a0:	f000 fd80 	bl	80040a4 <embeddedCliGetToken>
 80035a4:	6178      	str	r0, [r7, #20]
	uint8_t Temp_auto = atoi(arg1)? 1: 0;
 80035a6:	6978      	ldr	r0, [r7, #20]
 80035a8:	f009 fa20 	bl	800c9ec <atoi>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	bf14      	ite	ne
 80035b2:	2301      	movne	r3, #1
 80035b4:	2300      	moveq	r3, #0
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	74fb      	strb	r3, [r7, #19]
	temperature_set_auto_ctrl(Temp_auto);
 80035ba:	7cfb      	ldrb	r3, [r7, #19]
 80035bc:	4618      	mov	r0, r3
 80035be:	f006 fd63 	bl	800a088 <temperature_set_auto_ctrl>
	if (Temp_auto)
 80035c2:	7cfb      	ldrb	r3, [r7, #19]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d004      	beq.n	80035d2 <CMD_Temp_Set_Auto+0x42>
		embeddedCliPrint(cli, "Temp is auto ctrl");
 80035c8:	4908      	ldr	r1, [pc, #32]	@ (80035ec <CMD_Temp_Set_Auto+0x5c>)
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f000 fca8 	bl	8003f20 <embeddedCliPrint>
 80035d0:	e003      	b.n	80035da <CMD_Temp_Set_Auto+0x4a>
	else
		embeddedCliPrint(cli, "Temp isn't auto ctrl");
 80035d2:	4907      	ldr	r1, [pc, #28]	@ (80035f0 <CMD_Temp_Set_Auto+0x60>)
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f000 fca3 	bl	8003f20 <embeddedCliPrint>
	embeddedCliPrint(cli, "");
 80035da:	4906      	ldr	r1, [pc, #24]	@ (80035f4 <CMD_Temp_Set_Auto+0x64>)
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f000 fc9f 	bl	8003f20 <embeddedCliPrint>
}
 80035e2:	bf00      	nop
 80035e4:	3718      	adds	r7, #24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	080102b0 	.word	0x080102b0
 80035f0:	080102c4 	.word	0x080102c4
 80035f4:	0800ff14 	.word	0x0800ff14

080035f8 <CMD_Temp_Get_Auto>:

static void CMD_Temp_Get_Auto(EmbeddedCli *cli, char *args, void *context) {
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
    // TODO: Implement auto temperature get logic
	uint8_t Temp_auto = 0;
 8003604:	2300      	movs	r3, #0
 8003606:	75fb      	strb	r3, [r7, #23]
	temperature_get_auto_ctrl(&Temp_auto);
 8003608:	f107 0317 	add.w	r3, r7, #23
 800360c:	4618      	mov	r0, r3
 800360e:	f006 fd4d 	bl	800a0ac <temperature_get_auto_ctrl>
	if (Temp_auto)
 8003612:	7dfb      	ldrb	r3, [r7, #23]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d004      	beq.n	8003622 <CMD_Temp_Get_Auto+0x2a>
		embeddedCliPrint(cli, "Temp is auto ctrl");
 8003618:	4908      	ldr	r1, [pc, #32]	@ (800363c <CMD_Temp_Get_Auto+0x44>)
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f000 fc80 	bl	8003f20 <embeddedCliPrint>
 8003620:	e003      	b.n	800362a <CMD_Temp_Get_Auto+0x32>
	else
		embeddedCliPrint(cli, "Temp isn't auto ctrl");
 8003622:	4907      	ldr	r1, [pc, #28]	@ (8003640 <CMD_Temp_Get_Auto+0x48>)
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	f000 fc7b 	bl	8003f20 <embeddedCliPrint>
	embeddedCliPrint(cli, "");
 800362a:	4906      	ldr	r1, [pc, #24]	@ (8003644 <CMD_Temp_Get_Auto+0x4c>)
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f000 fc77 	bl	8003f20 <embeddedCliPrint>
}
 8003632:	bf00      	nop
 8003634:	3718      	adds	r7, #24
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	080102b0 	.word	0x080102b0
 8003640:	080102c4 	.word	0x080102c4
 8003644:	0800ff14 	.word	0x0800ff14

08003648 <CMD_LSMSens_Get>:

static void CMD_LSMSens_Get(EmbeddedCli *cli, char *args, void *context) {
 8003648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800364a:	b0a1      	sub	sp, #132	@ 0x84
 800364c:	af06      	add	r7, sp, #24
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
    // TODO: Implement LSM sensor get logic
	LSM6DSOX_Read_Data(&LSM6DSOX_Data);
 8003654:	4837      	ldr	r0, [pc, #220]	@ (8003734 <CMD_LSMSens_Get+0xec>)
 8003656:	f003 fa79 	bl	8006b4c <LSM6DSOX_Read_Data>
    char buffer[80];

    const char *arg1 = embeddedCliGetToken(args, 1);
 800365a:	2101      	movs	r1, #1
 800365c:	68b8      	ldr	r0, [r7, #8]
 800365e:	f000 fd21 	bl	80040a4 <embeddedCliGetToken>
 8003662:	6678      	str	r0, [r7, #100]	@ 0x64
	int option = atoi(arg1);
 8003664:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003666:	f009 f9c1 	bl	800c9ec <atoi>
 800366a:	6638      	str	r0, [r7, #96]	@ 0x60
	if (option == 0)
 800366c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800366e:	2b00      	cmp	r3, #0
 8003670:	d123      	bne.n	80036ba <CMD_LSMSens_Get+0x72>
		snprintf(buffer, sizeof(buffer), "Accel: %d %d %d (g)\r\nGyro: %d %d %d (dps)",
								LSM6DSOX_Data.Accel.x, LSM6DSOX_Data.Accel.y, LSM6DSOX_Data.Accel.z,
 8003672:	4b30      	ldr	r3, [pc, #192]	@ (8003734 <CMD_LSMSens_Get+0xec>)
 8003674:	f9b3 3000 	ldrsh.w	r3, [r3]
		snprintf(buffer, sizeof(buffer), "Accel: %d %d %d (g)\r\nGyro: %d %d %d (dps)",
 8003678:	461e      	mov	r6, r3
								LSM6DSOX_Data.Accel.x, LSM6DSOX_Data.Accel.y, LSM6DSOX_Data.Accel.z,
 800367a:	4b2e      	ldr	r3, [pc, #184]	@ (8003734 <CMD_LSMSens_Get+0xec>)
 800367c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
		snprintf(buffer, sizeof(buffer), "Accel: %d %d %d (g)\r\nGyro: %d %d %d (dps)",
 8003680:	461a      	mov	r2, r3
								LSM6DSOX_Data.Accel.x, LSM6DSOX_Data.Accel.y, LSM6DSOX_Data.Accel.z,
 8003682:	4b2c      	ldr	r3, [pc, #176]	@ (8003734 <CMD_LSMSens_Get+0xec>)
 8003684:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		snprintf(buffer, sizeof(buffer), "Accel: %d %d %d (g)\r\nGyro: %d %d %d (dps)",
 8003688:	4619      	mov	r1, r3
								LSM6DSOX_Data.Gyro.x, LSM6DSOX_Data.Gyro.y, LSM6DSOX_Data.Gyro.z);
 800368a:	4b2a      	ldr	r3, [pc, #168]	@ (8003734 <CMD_LSMSens_Get+0xec>)
 800368c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
		snprintf(buffer, sizeof(buffer), "Accel: %d %d %d (g)\r\nGyro: %d %d %d (dps)",
 8003690:	461c      	mov	r4, r3
								LSM6DSOX_Data.Gyro.x, LSM6DSOX_Data.Gyro.y, LSM6DSOX_Data.Gyro.z);
 8003692:	4b28      	ldr	r3, [pc, #160]	@ (8003734 <CMD_LSMSens_Get+0xec>)
 8003694:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
		snprintf(buffer, sizeof(buffer), "Accel: %d %d %d (g)\r\nGyro: %d %d %d (dps)",
 8003698:	461d      	mov	r5, r3
								LSM6DSOX_Data.Gyro.x, LSM6DSOX_Data.Gyro.y, LSM6DSOX_Data.Gyro.z);
 800369a:	4b26      	ldr	r3, [pc, #152]	@ (8003734 <CMD_LSMSens_Get+0xec>)
 800369c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
		snprintf(buffer, sizeof(buffer), "Accel: %d %d %d (g)\r\nGyro: %d %d %d (dps)",
 80036a0:	f107 0010 	add.w	r0, r7, #16
 80036a4:	9304      	str	r3, [sp, #16]
 80036a6:	9503      	str	r5, [sp, #12]
 80036a8:	9402      	str	r4, [sp, #8]
 80036aa:	9101      	str	r1, [sp, #4]
 80036ac:	9200      	str	r2, [sp, #0]
 80036ae:	4633      	mov	r3, r6
 80036b0:	4a21      	ldr	r2, [pc, #132]	@ (8003738 <CMD_LSMSens_Get+0xf0>)
 80036b2:	2150      	movs	r1, #80	@ 0x50
 80036b4:	f009 ff3a 	bl	800d52c <sniprintf>
 80036b8:	e02e      	b.n	8003718 <CMD_LSMSens_Get+0xd0>
	else if (option == 1)
 80036ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d114      	bne.n	80036ea <CMD_LSMSens_Get+0xa2>
		snprintf(buffer, sizeof(buffer), "Accel: %d %d %d (g)", LSM6DSOX_Data.Accel.x, LSM6DSOX_Data.Accel.y, LSM6DSOX_Data.Accel.z);
 80036c0:	4b1c      	ldr	r3, [pc, #112]	@ (8003734 <CMD_LSMSens_Get+0xec>)
 80036c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036c6:	4619      	mov	r1, r3
 80036c8:	4b1a      	ldr	r3, [pc, #104]	@ (8003734 <CMD_LSMSens_Get+0xec>)
 80036ca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80036ce:	461a      	mov	r2, r3
 80036d0:	4b18      	ldr	r3, [pc, #96]	@ (8003734 <CMD_LSMSens_Get+0xec>)
 80036d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80036d6:	f107 0010 	add.w	r0, r7, #16
 80036da:	9301      	str	r3, [sp, #4]
 80036dc:	9200      	str	r2, [sp, #0]
 80036de:	460b      	mov	r3, r1
 80036e0:	4a16      	ldr	r2, [pc, #88]	@ (800373c <CMD_LSMSens_Get+0xf4>)
 80036e2:	2150      	movs	r1, #80	@ 0x50
 80036e4:	f009 ff22 	bl	800d52c <sniprintf>
 80036e8:	e016      	b.n	8003718 <CMD_LSMSens_Get+0xd0>
	else if (option == 2)
 80036ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d113      	bne.n	8003718 <CMD_LSMSens_Get+0xd0>
		snprintf(buffer, sizeof(buffer), "Gyro: %d %d %d (dps)", LSM6DSOX_Data.Gyro.x, LSM6DSOX_Data.Gyro.y, LSM6DSOX_Data.Gyro.z);
 80036f0:	4b10      	ldr	r3, [pc, #64]	@ (8003734 <CMD_LSMSens_Get+0xec>)
 80036f2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80036f6:	4619      	mov	r1, r3
 80036f8:	4b0e      	ldr	r3, [pc, #56]	@ (8003734 <CMD_LSMSens_Get+0xec>)
 80036fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80036fe:	461a      	mov	r2, r3
 8003700:	4b0c      	ldr	r3, [pc, #48]	@ (8003734 <CMD_LSMSens_Get+0xec>)
 8003702:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003706:	f107 0010 	add.w	r0, r7, #16
 800370a:	9301      	str	r3, [sp, #4]
 800370c:	9200      	str	r2, [sp, #0]
 800370e:	460b      	mov	r3, r1
 8003710:	4a0b      	ldr	r2, [pc, #44]	@ (8003740 <CMD_LSMSens_Get+0xf8>)
 8003712:	2150      	movs	r1, #80	@ 0x50
 8003714:	f009 ff0a 	bl	800d52c <sniprintf>
	embeddedCliPrint(cli, buffer);
 8003718:	f107 0310 	add.w	r3, r7, #16
 800371c:	4619      	mov	r1, r3
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 fbfe 	bl	8003f20 <embeddedCliPrint>
	embeddedCliPrint(cli, "");
 8003724:	4907      	ldr	r1, [pc, #28]	@ (8003744 <CMD_LSMSens_Get+0xfc>)
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f000 fbfa 	bl	8003f20 <embeddedCliPrint>
}
 800372c:	bf00      	nop
 800372e:	376c      	adds	r7, #108	@ 0x6c
 8003730:	46bd      	mov	sp, r7
 8003732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003734:	20005ab8 	.word	0x20005ab8
 8003738:	080102dc 	.word	0x080102dc
 800373c:	08010308 	.word	0x08010308
 8003740:	0801031c 	.word	0x0801031c
 8003744:	0800ff14 	.word	0x0800ff14

08003748 <CMD_H3LSens_Get>:

static void CMD_H3LSens_Get(EmbeddedCli *cli, char *args, void *context) {
 8003748:	b580      	push	{r7, lr}
 800374a:	b094      	sub	sp, #80	@ 0x50
 800374c:	af02      	add	r7, sp, #8
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
    // TODO: Implement H3L sensor get logic
	H3LIS331DL_Get_Accel(&H3LIS331DL_Data);
 8003754:	4819      	ldr	r0, [pc, #100]	@ (80037bc <CMD_H3LSens_Get+0x74>)
 8003756:	f002 febd 	bl	80064d4 <H3LIS331DL_Get_Accel>
	char buffer[50];
	snprintf(buffer, sizeof(buffer), "Accel: %d %d %d (g)", (int16_t)H3LIS331DL_Data.x, (int16_t)H3LIS331DL_Data.y, (int16_t)H3LIS331DL_Data.z);
 800375a:	4b18      	ldr	r3, [pc, #96]	@ (80037bc <CMD_H3LSens_Get+0x74>)
 800375c:	edd3 7a00 	vldr	s15, [r3]
 8003760:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003764:	ee17 3a90 	vmov	r3, s15
 8003768:	b21b      	sxth	r3, r3
 800376a:	4619      	mov	r1, r3
 800376c:	4b13      	ldr	r3, [pc, #76]	@ (80037bc <CMD_H3LSens_Get+0x74>)
 800376e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003772:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003776:	ee17 3a90 	vmov	r3, s15
 800377a:	b21b      	sxth	r3, r3
 800377c:	461a      	mov	r2, r3
 800377e:	4b0f      	ldr	r3, [pc, #60]	@ (80037bc <CMD_H3LSens_Get+0x74>)
 8003780:	edd3 7a02 	vldr	s15, [r3, #8]
 8003784:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003788:	ee17 3a90 	vmov	r3, s15
 800378c:	b21b      	sxth	r3, r3
 800378e:	f107 0014 	add.w	r0, r7, #20
 8003792:	9301      	str	r3, [sp, #4]
 8003794:	9200      	str	r2, [sp, #0]
 8003796:	460b      	mov	r3, r1
 8003798:	4a09      	ldr	r2, [pc, #36]	@ (80037c0 <CMD_H3LSens_Get+0x78>)
 800379a:	2132      	movs	r1, #50	@ 0x32
 800379c:	f009 fec6 	bl	800d52c <sniprintf>
	embeddedCliPrint(cli, buffer);
 80037a0:	f107 0314 	add.w	r3, r7, #20
 80037a4:	4619      	mov	r1, r3
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f000 fbba 	bl	8003f20 <embeddedCliPrint>
	embeddedCliPrint(cli, "");
 80037ac:	4905      	ldr	r1, [pc, #20]	@ (80037c4 <CMD_H3LSens_Get+0x7c>)
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f000 fbb6 	bl	8003f20 <embeddedCliPrint>
}
 80037b4:	bf00      	nop
 80037b6:	3748      	adds	r7, #72	@ 0x48
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	20005ad0 	.word	0x20005ad0
 80037c0:	08010308 	.word	0x08010308
 80037c4:	0800ff14 	.word	0x0800ff14

080037c8 <CMD_BMESens_Get>:

static void CMD_BMESens_Get(EmbeddedCli *cli, char *args, void *context) {
 80037c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80037cc:	b09a      	sub	sp, #104	@ 0x68
 80037ce:	af06      	add	r7, sp, #24
 80037d0:	60f8      	str	r0, [r7, #12]
 80037d2:	60b9      	str	r1, [r7, #8]
 80037d4:	607a      	str	r2, [r7, #4]
    // TODO: Implement BME sensor get logic
	BME280_Read_Data(&BME280_Data);
 80037d6:	483c      	ldr	r0, [pc, #240]	@ (80038c8 <CMD_BMESens_Get+0x100>)
 80037d8:	f002 fd88 	bl	80062ec <BME280_Read_Data>
	char buffer[50];

	const char *arg1 = embeddedCliGetToken(args, 1);
 80037dc:	2101      	movs	r1, #1
 80037de:	68b8      	ldr	r0, [r7, #8]
 80037e0:	f000 fc60 	bl	80040a4 <embeddedCliGetToken>
 80037e4:	64f8      	str	r0, [r7, #76]	@ 0x4c
	int option = atoi(arg1);
 80037e6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80037e8:	f009 f900 	bl	800c9ec <atoi>
 80037ec:	64b8      	str	r0, [r7, #72]	@ 0x48
	if (option == 0)
 80037ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d121      	bne.n	8003838 <CMD_BMESens_Get+0x70>
		snprintf(buffer, sizeof(buffer), "Temp: %.2f *C \r\nHumi: %.2f %%RH \r\nPress: %.2f hPa", BME280_Data.temperature, BME280_Data.humidity, BME280_Data.pressure);
 80037f4:	4b34      	ldr	r3, [pc, #208]	@ (80038c8 <CMD_BMESens_Get+0x100>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7fc feb5 	bl	8000568 <__aeabi_f2d>
 80037fe:	4604      	mov	r4, r0
 8003800:	460d      	mov	r5, r1
 8003802:	4b31      	ldr	r3, [pc, #196]	@ (80038c8 <CMD_BMESens_Get+0x100>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	4618      	mov	r0, r3
 8003808:	f7fc feae 	bl	8000568 <__aeabi_f2d>
 800380c:	4680      	mov	r8, r0
 800380e:	4689      	mov	r9, r1
 8003810:	4b2d      	ldr	r3, [pc, #180]	@ (80038c8 <CMD_BMESens_Get+0x100>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	4618      	mov	r0, r3
 8003816:	f7fc fea7 	bl	8000568 <__aeabi_f2d>
 800381a:	4602      	mov	r2, r0
 800381c:	460b      	mov	r3, r1
 800381e:	f107 0014 	add.w	r0, r7, #20
 8003822:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003826:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800382a:	e9cd 4500 	strd	r4, r5, [sp]
 800382e:	4a27      	ldr	r2, [pc, #156]	@ (80038cc <CMD_BMESens_Get+0x104>)
 8003830:	2132      	movs	r1, #50	@ 0x32
 8003832:	f009 fe7b 	bl	800d52c <sniprintf>
 8003836:	e037      	b.n	80038a8 <CMD_BMESens_Get+0xe0>
	else if (option == 1)
 8003838:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800383a:	2b01      	cmp	r3, #1
 800383c:	d10f      	bne.n	800385e <CMD_BMESens_Get+0x96>
		snprintf(buffer, sizeof(buffer), "Temp: %.2f *C", BME280_Data.temperature);
 800383e:	4b22      	ldr	r3, [pc, #136]	@ (80038c8 <CMD_BMESens_Get+0x100>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f7fc fe90 	bl	8000568 <__aeabi_f2d>
 8003848:	4602      	mov	r2, r0
 800384a:	460b      	mov	r3, r1
 800384c:	f107 0014 	add.w	r0, r7, #20
 8003850:	e9cd 2300 	strd	r2, r3, [sp]
 8003854:	4a1e      	ldr	r2, [pc, #120]	@ (80038d0 <CMD_BMESens_Get+0x108>)
 8003856:	2132      	movs	r1, #50	@ 0x32
 8003858:	f009 fe68 	bl	800d52c <sniprintf>
 800385c:	e024      	b.n	80038a8 <CMD_BMESens_Get+0xe0>
	else if (option == 2)
 800385e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003860:	2b02      	cmp	r3, #2
 8003862:	d10f      	bne.n	8003884 <CMD_BMESens_Get+0xbc>
		snprintf(buffer, sizeof(buffer), "Humi: %.2f %%RH", BME280_Data.humidity);
 8003864:	4b18      	ldr	r3, [pc, #96]	@ (80038c8 <CMD_BMESens_Get+0x100>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	4618      	mov	r0, r3
 800386a:	f7fc fe7d 	bl	8000568 <__aeabi_f2d>
 800386e:	4602      	mov	r2, r0
 8003870:	460b      	mov	r3, r1
 8003872:	f107 0014 	add.w	r0, r7, #20
 8003876:	e9cd 2300 	strd	r2, r3, [sp]
 800387a:	4a16      	ldr	r2, [pc, #88]	@ (80038d4 <CMD_BMESens_Get+0x10c>)
 800387c:	2132      	movs	r1, #50	@ 0x32
 800387e:	f009 fe55 	bl	800d52c <sniprintf>
 8003882:	e011      	b.n	80038a8 <CMD_BMESens_Get+0xe0>
	else if (option == 3)
 8003884:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003886:	2b03      	cmp	r3, #3
 8003888:	d10e      	bne.n	80038a8 <CMD_BMESens_Get+0xe0>
		snprintf(buffer, sizeof(buffer), "Press: %.2f hPa", BME280_Data.pressure);
 800388a:	4b0f      	ldr	r3, [pc, #60]	@ (80038c8 <CMD_BMESens_Get+0x100>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	4618      	mov	r0, r3
 8003890:	f7fc fe6a 	bl	8000568 <__aeabi_f2d>
 8003894:	4602      	mov	r2, r0
 8003896:	460b      	mov	r3, r1
 8003898:	f107 0014 	add.w	r0, r7, #20
 800389c:	e9cd 2300 	strd	r2, r3, [sp]
 80038a0:	4a0d      	ldr	r2, [pc, #52]	@ (80038d8 <CMD_BMESens_Get+0x110>)
 80038a2:	2132      	movs	r1, #50	@ 0x32
 80038a4:	f009 fe42 	bl	800d52c <sniprintf>
	embeddedCliPrint(cli, buffer);
 80038a8:	f107 0314 	add.w	r3, r7, #20
 80038ac:	4619      	mov	r1, r3
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f000 fb36 	bl	8003f20 <embeddedCliPrint>
	embeddedCliPrint(cli, "");
 80038b4:	4909      	ldr	r1, [pc, #36]	@ (80038dc <CMD_BMESens_Get+0x114>)
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f000 fb32 	bl	8003f20 <embeddedCliPrint>
}
 80038bc:	bf00      	nop
 80038be:	3750      	adds	r7, #80	@ 0x50
 80038c0:	46bd      	mov	sp, r7
 80038c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80038c6:	bf00      	nop
 80038c8:	20005ac4 	.word	0x20005ac4
 80038cc:	08010334 	.word	0x08010334
 80038d0:	08010368 	.word	0x08010368
 80038d4:	08010378 	.word	0x08010378
 80038d8:	08010388 	.word	0x08010388
 80038dc:	0800ff14 	.word	0x0800ff14

080038e0 <CMD_H250Sens_Get>:

static void CMD_H250Sens_Get(EmbeddedCli *cli, char *args, void *context) {
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b08e      	sub	sp, #56	@ 0x38
 80038e4:	af02      	add	r7, sp, #8
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
	// TODO: Implement H250 sensor get logic
	H250_I2C_Read_Data(&H250_I2C_Data);
 80038ec:	4814      	ldr	r0, [pc, #80]	@ (8003940 <CMD_H250Sens_Get+0x60>)
 80038ee:	f002 fd37 	bl	8006360 <H250_I2C_Read_Data>
	char buffer[30];
	snprintf(buffer, sizeof(buffer), "CO2: %.2f %%", (float)H250_I2C_Data/100.0f);
 80038f2:	4b13      	ldr	r3, [pc, #76]	@ (8003940 <CMD_H250Sens_Get+0x60>)
 80038f4:	881b      	ldrh	r3, [r3, #0]
 80038f6:	ee07 3a90 	vmov	s15, r3
 80038fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038fe:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8003944 <CMD_H250Sens_Get+0x64>
 8003902:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003906:	ee16 0a90 	vmov	r0, s13
 800390a:	f7fc fe2d 	bl	8000568 <__aeabi_f2d>
 800390e:	4602      	mov	r2, r0
 8003910:	460b      	mov	r3, r1
 8003912:	f107 0010 	add.w	r0, r7, #16
 8003916:	e9cd 2300 	strd	r2, r3, [sp]
 800391a:	4a0b      	ldr	r2, [pc, #44]	@ (8003948 <CMD_H250Sens_Get+0x68>)
 800391c:	211e      	movs	r1, #30
 800391e:	f009 fe05 	bl	800d52c <sniprintf>
	embeddedCliPrint(cli, buffer);
 8003922:	f107 0310 	add.w	r3, r7, #16
 8003926:	4619      	mov	r1, r3
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 faf9 	bl	8003f20 <embeddedCliPrint>
	embeddedCliPrint(cli, "");
 800392e:	4907      	ldr	r1, [pc, #28]	@ (800394c <CMD_H250Sens_Get+0x6c>)
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f000 faf5 	bl	8003f20 <embeddedCliPrint>
}
 8003936:	bf00      	nop
 8003938:	3730      	adds	r7, #48	@ 0x30
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	20005adc 	.word	0x20005adc
 8003944:	42c80000 	.word	0x42c80000
 8003948:	08010398 	.word	0x08010398
 800394c:	0800ff14 	.word	0x0800ff14

08003950 <CMD_K33Sens_Get>:

static void CMD_K33Sens_Get(EmbeddedCli *cli, char *args, void *context) {
 8003950:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003954:	b09a      	sub	sp, #104	@ 0x68
 8003956:	af06      	add	r7, sp, #24
 8003958:	60f8      	str	r0, [r7, #12]
 800395a:	60b9      	str	r1, [r7, #8]
 800395c:	607a      	str	r2, [r7, #4]
    // TODO: Implement K33 sensor get logic
	K33_Read_Data(&K33_Data);
 800395e:	485a      	ldr	r0, [pc, #360]	@ (8003ac8 <CMD_K33Sens_Get+0x178>)
 8003960:	f003 f82a 	bl	80069b8 <K33_Read_Data>
	char buffer[50];

	const char *arg1 = embeddedCliGetToken(args, 1);
 8003964:	2101      	movs	r1, #1
 8003966:	68b8      	ldr	r0, [r7, #8]
 8003968:	f000 fb9c 	bl	80040a4 <embeddedCliGetToken>
 800396c:	64f8      	str	r0, [r7, #76]	@ 0x4c
	int option = atoi(arg1);
 800396e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003970:	f009 f83c 	bl	800c9ec <atoi>
 8003974:	64b8      	str	r0, [r7, #72]	@ 0x48
	if (option == 0)
 8003976:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003978:	2b00      	cmp	r3, #0
 800397a:	d13f      	bne.n	80039fc <CMD_K33Sens_Get+0xac>
		snprintf(buffer, sizeof(buffer), "CO2: %.2f %% \r\nTemp: %.2f *C \r\nHumi: %.2f %%RH", (float)(K33_Data.CO2/1000.0f), (float)(K33_Data.Temp/100.0f), (float)(K33_Data.RH/100.0f));
 800397c:	4b52      	ldr	r3, [pc, #328]	@ (8003ac8 <CMD_K33Sens_Get+0x178>)
 800397e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003982:	ee07 3a90 	vmov	s15, r3
 8003986:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800398a:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8003acc <CMD_K33Sens_Get+0x17c>
 800398e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003992:	ee16 0a90 	vmov	r0, s13
 8003996:	f7fc fde7 	bl	8000568 <__aeabi_f2d>
 800399a:	4604      	mov	r4, r0
 800399c:	460d      	mov	r5, r1
 800399e:	4b4a      	ldr	r3, [pc, #296]	@ (8003ac8 <CMD_K33Sens_Get+0x178>)
 80039a0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80039a4:	ee07 3a90 	vmov	s15, r3
 80039a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039ac:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8003ad0 <CMD_K33Sens_Get+0x180>
 80039b0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80039b4:	ee16 0a90 	vmov	r0, s13
 80039b8:	f7fc fdd6 	bl	8000568 <__aeabi_f2d>
 80039bc:	4680      	mov	r8, r0
 80039be:	4689      	mov	r9, r1
 80039c0:	4b41      	ldr	r3, [pc, #260]	@ (8003ac8 <CMD_K33Sens_Get+0x178>)
 80039c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80039c6:	ee07 3a90 	vmov	s15, r3
 80039ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039ce:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8003ad0 <CMD_K33Sens_Get+0x180>
 80039d2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80039d6:	ee16 0a90 	vmov	r0, s13
 80039da:	f7fc fdc5 	bl	8000568 <__aeabi_f2d>
 80039de:	4602      	mov	r2, r0
 80039e0:	460b      	mov	r3, r1
 80039e2:	f107 0014 	add.w	r0, r7, #20
 80039e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80039ea:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80039ee:	e9cd 4500 	strd	r4, r5, [sp]
 80039f2:	4a38      	ldr	r2, [pc, #224]	@ (8003ad4 <CMD_K33Sens_Get+0x184>)
 80039f4:	2132      	movs	r1, #50	@ 0x32
 80039f6:	f009 fd99 	bl	800d52c <sniprintf>
 80039fa:	e055      	b.n	8003aa8 <CMD_K33Sens_Get+0x158>
	else if (option == 1)
 80039fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d119      	bne.n	8003a36 <CMD_K33Sens_Get+0xe6>
		snprintf(buffer, sizeof(buffer), "CO2: %.2f %%", (float)(K33_Data.CO2/1000.0f));
 8003a02:	4b31      	ldr	r3, [pc, #196]	@ (8003ac8 <CMD_K33Sens_Get+0x178>)
 8003a04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a08:	ee07 3a90 	vmov	s15, r3
 8003a0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a10:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8003acc <CMD_K33Sens_Get+0x17c>
 8003a14:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003a18:	ee16 0a90 	vmov	r0, s13
 8003a1c:	f7fc fda4 	bl	8000568 <__aeabi_f2d>
 8003a20:	4602      	mov	r2, r0
 8003a22:	460b      	mov	r3, r1
 8003a24:	f107 0014 	add.w	r0, r7, #20
 8003a28:	e9cd 2300 	strd	r2, r3, [sp]
 8003a2c:	4a2a      	ldr	r2, [pc, #168]	@ (8003ad8 <CMD_K33Sens_Get+0x188>)
 8003a2e:	2132      	movs	r1, #50	@ 0x32
 8003a30:	f009 fd7c 	bl	800d52c <sniprintf>
 8003a34:	e038      	b.n	8003aa8 <CMD_K33Sens_Get+0x158>
	else if (option == 2)
 8003a36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d119      	bne.n	8003a70 <CMD_K33Sens_Get+0x120>
		snprintf(buffer, sizeof(buffer), "Temp: %.2f *C", (float)(K33_Data.Temp/100.0f));
 8003a3c:	4b22      	ldr	r3, [pc, #136]	@ (8003ac8 <CMD_K33Sens_Get+0x178>)
 8003a3e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003a42:	ee07 3a90 	vmov	s15, r3
 8003a46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a4a:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8003ad0 <CMD_K33Sens_Get+0x180>
 8003a4e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003a52:	ee16 0a90 	vmov	r0, s13
 8003a56:	f7fc fd87 	bl	8000568 <__aeabi_f2d>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	f107 0014 	add.w	r0, r7, #20
 8003a62:	e9cd 2300 	strd	r2, r3, [sp]
 8003a66:	4a1d      	ldr	r2, [pc, #116]	@ (8003adc <CMD_K33Sens_Get+0x18c>)
 8003a68:	2132      	movs	r1, #50	@ 0x32
 8003a6a:	f009 fd5f 	bl	800d52c <sniprintf>
 8003a6e:	e01b      	b.n	8003aa8 <CMD_K33Sens_Get+0x158>
	else if (option == 3)
 8003a70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a72:	2b03      	cmp	r3, #3
 8003a74:	d118      	bne.n	8003aa8 <CMD_K33Sens_Get+0x158>
		snprintf(buffer, sizeof(buffer), "Humi: %.2f %%RH", (float)(K33_Data.RH/100.0f));
 8003a76:	4b14      	ldr	r3, [pc, #80]	@ (8003ac8 <CMD_K33Sens_Get+0x178>)
 8003a78:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003a7c:	ee07 3a90 	vmov	s15, r3
 8003a80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a84:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8003ad0 <CMD_K33Sens_Get+0x180>
 8003a88:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003a8c:	ee16 0a90 	vmov	r0, s13
 8003a90:	f7fc fd6a 	bl	8000568 <__aeabi_f2d>
 8003a94:	4602      	mov	r2, r0
 8003a96:	460b      	mov	r3, r1
 8003a98:	f107 0014 	add.w	r0, r7, #20
 8003a9c:	e9cd 2300 	strd	r2, r3, [sp]
 8003aa0:	4a0f      	ldr	r2, [pc, #60]	@ (8003ae0 <CMD_K33Sens_Get+0x190>)
 8003aa2:	2132      	movs	r1, #50	@ 0x32
 8003aa4:	f009 fd42 	bl	800d52c <sniprintf>
	embeddedCliPrint(cli, buffer);
 8003aa8:	f107 0314 	add.w	r3, r7, #20
 8003aac:	4619      	mov	r1, r3
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f000 fa36 	bl	8003f20 <embeddedCliPrint>
	embeddedCliPrint(cli, "");
 8003ab4:	490b      	ldr	r1, [pc, #44]	@ (8003ae4 <CMD_K33Sens_Get+0x194>)
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 fa32 	bl	8003f20 <embeddedCliPrint>
}
 8003abc:	bf00      	nop
 8003abe:	3750      	adds	r7, #80	@ 0x50
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003ac6:	bf00      	nop
 8003ac8:	20005ae0 	.word	0x20005ae0
 8003acc:	447a0000 	.word	0x447a0000
 8003ad0:	42c80000 	.word	0x42c80000
 8003ad4:	080103a8 	.word	0x080103a8
 8003ad8:	08010398 	.word	0x08010398
 8003adc:	08010368 	.word	0x08010368
 8003ae0:	08010378 	.word	0x08010378
 8003ae4:	0800ff14 	.word	0x0800ff14

08003ae8 <getCliStaticBindings>:
 *************************************************/

/*************************************************
 *                Getter - Helper                *
 *************************************************/
const CliCommandBinding *getCliStaticBindings(void) {
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
    return cliStaticBindings_internal;
 8003aec:	4b02      	ldr	r3, [pc, #8]	@ (8003af8 <getCliStaticBindings+0x10>)
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr
 8003af8:	08010554 	.word	0x08010554

08003afc <getCliStaticBindingCount>:

uint16_t getCliStaticBindingCount(void) {
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
    return sizeof(cliStaticBindings_internal) / sizeof(cliStaticBindings_internal[0]);
 8003b00:	231c      	movs	r3, #28
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <writeCharTocli_EXPConsole>:
//static void writeCharTocli_EXPForward(EmbeddedCli *embeddedCli, char c) {
//    uint8_t c_to_send = c;
//    UART_WriteRing(EXP_UART_FORWARD_HANDLE, c_to_send);
//}

static void writeCharTocli_EXPConsole(EmbeddedCli *embeddedCli, char c) {
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	460b      	mov	r3, r1
 8003b16:	70fb      	strb	r3, [r7, #3]
    uint8_t c_to_send = c;
 8003b18:	78fb      	ldrb	r3, [r7, #3]
 8003b1a:	73fb      	strb	r3, [r7, #15]
    UART_WriteRing(EXP_UART_CONSOLE_HANDLE, c_to_send);
 8003b1c:	7bfb      	ldrb	r3, [r7, #15]
 8003b1e:	4619      	mov	r1, r3
 8003b20:	4803      	ldr	r0, [pc, #12]	@ (8003b30 <writeCharTocli_EXPConsole+0x24>)
 8003b22:	f7fe fbd2 	bl	80022ca <UART_WriteRing>
}
 8003b26:	bf00      	nop
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	40011400 	.word	0x40011400

08003b34 <SystemCLI_Init>:

Std_ReturnType SystemCLI_Init() {
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
//        return E_ERROR;
//    }
//    cli_EXPForward->writeChar = writeCharTocli_EXPForward;

    // Initialize UART EXP CONSOLE CLI
    EmbeddedCliConfig *EXPConsole_config = embeddedCliDefaultConfig();
 8003b3a:	f000 f853 	bl	8003be4 <embeddedCliDefaultConfig>
 8003b3e:	6078      	str	r0, [r7, #4]
    EXPConsole_config->cliBuffer = EXPConsole_cliStaticBuffer;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a1d      	ldr	r2, [pc, #116]	@ (8003bb8 <SystemCLI_Init+0x84>)
 8003b44:	60da      	str	r2, [r3, #12]
    EXPConsole_config->cliBufferSize = EXPCONSOLE_CLI_BUFFER_SIZE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003b4c:	821a      	strh	r2, [r3, #16]
    EXPConsole_config->rxBufferSize = CLI_RX_BUFFER_SIZE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2210      	movs	r2, #16
 8003b52:	809a      	strh	r2, [r3, #4]
    EXPConsole_config->cmdBufferSize = CLI_CMD_BUFFER_SIZE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2240      	movs	r2, #64	@ 0x40
 8003b58:	80da      	strh	r2, [r3, #6]
    EXPConsole_config->historyBufferSize = CLI_HISTORY_SIZE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2280      	movs	r2, #128	@ 0x80
 8003b5e:	811a      	strh	r2, [r3, #8]
    EXPConsole_config->maxBindingCount = CLI_MAX_BINDING_COUNT;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2220      	movs	r2, #32
 8003b64:	815a      	strh	r2, [r3, #10]
    EXPConsole_config->enableAutoComplete = CLI_AUTO_COMPLETE;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	749a      	strb	r2, [r3, #18]
    EXPConsole_config->invitation = CLI_INITATION_EXP_CONSOLE;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a13      	ldr	r2, [pc, #76]	@ (8003bbc <SystemCLI_Init+0x88>)
 8003b70:	601a      	str	r2, [r3, #0]
    EXPConsole_config->staticBindings = getCliStaticBindings();
 8003b72:	f7ff ffb9 	bl	8003ae8 <getCliStaticBindings>
 8003b76:	4602      	mov	r2, r0
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	615a      	str	r2, [r3, #20]
    EXPConsole_config->staticBindingCount = getCliStaticBindingCount();
 8003b7c:	f7ff ffbe 	bl	8003afc <getCliStaticBindingCount>
 8003b80:	4603      	mov	r3, r0
 8003b82:	461a      	mov	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	831a      	strh	r2, [r3, #24]

    cli_EXPConsole = embeddedCliNew(EXPConsole_config);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 f886 	bl	8003c9a <embeddedCliNew>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	4a0b      	ldr	r2, [pc, #44]	@ (8003bc0 <SystemCLI_Init+0x8c>)
 8003b92:	6013      	str	r3, [r2, #0]
    if (cli_EXPConsole == NULL) {
 8003b94:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc0 <SystemCLI_Init+0x8c>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d101      	bne.n	8003ba0 <SystemCLI_Init+0x6c>
        return E_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e007      	b.n	8003bb0 <SystemCLI_Init+0x7c>
    }
    cli_EXPConsole->writeChar = writeCharTocli_EXPConsole;
 8003ba0:	4b07      	ldr	r3, [pc, #28]	@ (8003bc0 <SystemCLI_Init+0x8c>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a07      	ldr	r2, [pc, #28]	@ (8003bc4 <SystemCLI_Init+0x90>)
 8003ba6:	601a      	str	r2, [r3, #0]

//	// Init the CLI with blank screen
//	onClearCLI(cli, NULL, NULL);

    // CLI has now been initialized, set bool to true to enable interrupts.
    cliIsReady = true;
 8003ba8:	4b07      	ldr	r3, [pc, #28]	@ (8003bc8 <SystemCLI_Init+0x94>)
 8003baa:	2201      	movs	r2, #1
 8003bac:	701a      	strb	r2, [r3, #0]

    return E_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3708      	adds	r7, #8
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	20005220 	.word	0x20005220
 8003bbc:	080103d8 	.word	0x080103d8
 8003bc0:	20005a20 	.word	0x20005a20
 8003bc4:	08003b0d 	.word	0x08003b0d
 8003bc8:	20005a24 	.word	0x20005a24

08003bcc <get_EXPConsole_CliPointer>:
 *************************************************/
//EmbeddedCli *get_EXPForward_CliPointer() {
//    return cli_EXPForward;
//}

EmbeddedCli *get_EXPConsole_CliPointer() {
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
    return cli_EXPConsole;
 8003bd0:	4b03      	ldr	r3, [pc, #12]	@ (8003be0 <get_EXPConsole_CliPointer+0x14>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	20005a20 	.word	0x20005a20

08003be4 <embeddedCliDefaultConfig>:
 * @param pos - token position (counted from 1)
 * @return index of first char of specified token
 */
static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos);

EmbeddedCliConfig *embeddedCliDefaultConfig(void) {
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
    defaultConfig.rxBufferSize = 64;
 8003be8:	4b11      	ldr	r3, [pc, #68]	@ (8003c30 <embeddedCliDefaultConfig+0x4c>)
 8003bea:	2240      	movs	r2, #64	@ 0x40
 8003bec:	809a      	strh	r2, [r3, #4]
    defaultConfig.cmdBufferSize = 64;
 8003bee:	4b10      	ldr	r3, [pc, #64]	@ (8003c30 <embeddedCliDefaultConfig+0x4c>)
 8003bf0:	2240      	movs	r2, #64	@ 0x40
 8003bf2:	80da      	strh	r2, [r3, #6]
    defaultConfig.historyBufferSize = 128;
 8003bf4:	4b0e      	ldr	r3, [pc, #56]	@ (8003c30 <embeddedCliDefaultConfig+0x4c>)
 8003bf6:	2280      	movs	r2, #128	@ 0x80
 8003bf8:	811a      	strh	r2, [r3, #8]
    defaultConfig.cliBuffer = NULL;
 8003bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8003c30 <embeddedCliDefaultConfig+0x4c>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	60da      	str	r2, [r3, #12]
    defaultConfig.cliBufferSize = 0;
 8003c00:	4b0b      	ldr	r3, [pc, #44]	@ (8003c30 <embeddedCliDefaultConfig+0x4c>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	821a      	strh	r2, [r3, #16]
    defaultConfig.maxBindingCount = 8;
 8003c06:	4b0a      	ldr	r3, [pc, #40]	@ (8003c30 <embeddedCliDefaultConfig+0x4c>)
 8003c08:	2208      	movs	r2, #8
 8003c0a:	815a      	strh	r2, [r3, #10]
    defaultConfig.enableAutoComplete = true;
 8003c0c:	4b08      	ldr	r3, [pc, #32]	@ (8003c30 <embeddedCliDefaultConfig+0x4c>)
 8003c0e:	2201      	movs	r2, #1
 8003c10:	749a      	strb	r2, [r3, #18]
    defaultConfig.invitation = "> ";
 8003c12:	4b07      	ldr	r3, [pc, #28]	@ (8003c30 <embeddedCliDefaultConfig+0x4c>)
 8003c14:	4a07      	ldr	r2, [pc, #28]	@ (8003c34 <embeddedCliDefaultConfig+0x50>)
 8003c16:	601a      	str	r2, [r3, #0]
    defaultConfig.staticBindingCount = 0;
 8003c18:	4b05      	ldr	r3, [pc, #20]	@ (8003c30 <embeddedCliDefaultConfig+0x4c>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	831a      	strh	r2, [r3, #24]
    defaultConfig.staticBindings = NULL;
 8003c1e:	4b04      	ldr	r3, [pc, #16]	@ (8003c30 <embeddedCliDefaultConfig+0x4c>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	615a      	str	r2, [r3, #20]
    return &defaultConfig;
 8003c24:	4b02      	ldr	r3, [pc, #8]	@ (8003c30 <embeddedCliDefaultConfig+0x4c>)
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr
 8003c30:	20005a28 	.word	0x20005a28
 8003c34:	08010404 	.word	0x08010404

08003c38 <embeddedCliRequiredSize>:

uint16_t embeddedCliRequiredSize(EmbeddedCliConfig *config) {
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
    uint16_t bindingCount = (config->staticBindings == NULL) ?
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d102      	bne.n	8003c4e <embeddedCliRequiredSize+0x16>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	895b      	ldrh	r3, [r3, #10]
 8003c4c:	e000      	b.n	8003c50 <embeddedCliRequiredSize+0x18>
 8003c4e:	2300      	movs	r3, #0
 8003c50:	81fb      	strh	r3, [r7, #14]
                            (config->maxBindingCount) : 0;
    return (CLI_UINT_SIZE * (
        BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli)) +
        BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl)) +
        BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	889b      	ldrh	r3, [r3, #4]
 8003c56:	3303      	adds	r3, #3
 8003c58:	089a      	lsrs	r2, r3, #2
        BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	88db      	ldrh	r3, [r3, #6]
 8003c5e:	3303      	adds	r3, #3
 8003c60:	089b      	lsrs	r3, r3, #2
        BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 8003c62:	441a      	add	r2, r3
        BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	891b      	ldrh	r3, [r3, #8]
 8003c68:	3303      	adds	r3, #3
 8003c6a:	089b      	lsrs	r3, r3, #2
        BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 8003c6c:	18d1      	adds	r1, r2, r3
        BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 8003c6e:	89fa      	ldrh	r2, [r7, #14]
 8003c70:	4613      	mov	r3, r2
 8003c72:	005b      	lsls	r3, r3, #1
 8003c74:	4413      	add	r3, r2
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	3303      	adds	r3, #3
 8003c7a:	089b      	lsrs	r3, r3, #2
        BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 8003c7c:	18ca      	adds	r2, r1, r3
        BYTES_TO_CLI_UINTS(bindingCount * sizeof(uint8_t))
 8003c7e:	89fb      	ldrh	r3, [r7, #14]
 8003c80:	3303      	adds	r3, #3
 8003c82:	089b      	lsrs	r3, r3, #2
        BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 8003c84:	4413      	add	r3, r2
 8003c86:	3312      	adds	r3, #18
    return (CLI_UINT_SIZE * (
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	b29b      	uxth	r3, r3
    ));
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3714      	adds	r7, #20
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <embeddedCliNew>:

EmbeddedCli *embeddedCliNew(EmbeddedCliConfig *config) {
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b088      	sub	sp, #32
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
    EmbeddedCli *cli = NULL;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	61fb      	str	r3, [r7, #28]

    size_t totalSize = embeddedCliRequiredSize(config);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f7ff ffc6 	bl	8003c38 <embeddedCliRequiredSize>
 8003cac:	4603      	mov	r3, r0
 8003cae:	61bb      	str	r3, [r7, #24]

    _Bool allocated = false;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	75fb      	strb	r3, [r7, #23]

    if (config->cliBuffer == NULL || config->cliBufferSize < totalSize) {
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d005      	beq.n	8003cc8 <embeddedCliNew+0x2e>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	8a1b      	ldrh	r3, [r3, #16]
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d901      	bls.n	8003ccc <embeddedCliNew+0x32>
        return NULL;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	e071      	b.n	8003db0 <embeddedCliNew+0x116>
    }

    CLI_UINT *buf = config->cliBuffer;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	613b      	str	r3, [r7, #16]

    memset(buf, 0, totalSize);
 8003cd2:	69ba      	ldr	r2, [r7, #24]
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	6938      	ldr	r0, [r7, #16]
 8003cd8:	f009 fcdd 	bl	800d696 <memset>

    cli = (EmbeddedCli *) buf;
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	61fb      	str	r3, [r7, #28]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli));
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	3310      	adds	r3, #16
 8003ce4:	613b      	str	r3, [r7, #16]

    cli->_impl = (EmbeddedCliImpl *) buf;
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	60da      	str	r2, [r3, #12]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl));
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	3338      	adds	r3, #56	@ 0x38
 8003cf0:	613b      	str	r3, [r7, #16]

    PREPARE_IMPL(cli);
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	60fb      	str	r3, [r7, #12]
    impl->rxBuffer.buf = (char *) buf;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	611a      	str	r2, [r3, #16]
    buf += BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	889b      	ldrh	r3, [r3, #4]
 8003d02:	3303      	adds	r3, #3
 8003d04:	f023 0303 	bic.w	r3, r3, #3
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]

    impl->cmdBuffer = (char *) buf;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	61da      	str	r2, [r3, #28]
    buf += BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	88db      	ldrh	r3, [r3, #6]
 8003d18:	3303      	adds	r3, #3
 8003d1a:	f023 0303 	bic.w	r3, r3, #3
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	4413      	add	r3, r2
 8003d22:	613b      	str	r3, [r7, #16]


    impl->bindings = (CliCommandBinding *) config->staticBindings;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	695a      	ldr	r2, [r3, #20]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	625a      	str	r2, [r3, #36]	@ 0x24
    impl->bindingsCount = config->staticBindingCount;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	8b1a      	ldrh	r2, [r3, #24]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	859a      	strh	r2, [r3, #44]	@ 0x2c
    impl->maxBindingsCount = config->staticBindingCount;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	8b1a      	ldrh	r2, [r3, #24]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	85da      	strh	r2, [r3, #46]	@ 0x2e


    impl->history.buf = (char *) buf;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	605a      	str	r2, [r3, #4]
    impl->history.bufferSize = config->historyBufferSize;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	891a      	ldrh	r2, [r3, #8]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	811a      	strh	r2, [r3, #8]

    if (allocated)
 8003d4a:	7dfb      	ldrb	r3, [r7, #23]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d008      	beq.n	8003d62 <embeddedCliNew+0xc8>
        SET_FLAG(impl->flags, CLI_FLAG_ALLOCATED);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8003d56:	f043 0304 	orr.w	r3, r3, #4
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

    if (config->enableAutoComplete)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	7c9b      	ldrb	r3, [r3, #18]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d008      	beq.n	8003d7c <embeddedCliNew+0xe2>
        SET_FLAG(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8003d70:	f043 0320 	orr.w	r3, r3, #32
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

    impl->rxBuffer.size = config->rxBufferSize;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	889a      	ldrh	r2, [r3, #4]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	831a      	strh	r2, [r3, #24]
    impl->rxBuffer.front = 0;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	829a      	strh	r2, [r3, #20]
    impl->rxBuffer.back = 0;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	82da      	strh	r2, [r3, #22]
    impl->cmdMaxSize = config->cmdBufferSize;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	88da      	ldrh	r2, [r3, #6]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	845a      	strh	r2, [r3, #34]	@ 0x22
    impl->lastChar = '\0';
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    impl->invitation = config->invitation;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	601a      	str	r2, [r3, #0]
    impl->cursorPos = 0;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	869a      	strh	r2, [r3, #52]	@ 0x34

    return cli;
 8003dae:	69fb      	ldr	r3, [r7, #28]
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3720      	adds	r7, #32
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <embeddedCliReceiveChar>:

void embeddedCliReceiveChar(EmbeddedCli *cli, char c) {
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	60fb      	str	r3, [r7, #12]

    if (!fifoBufPush(&impl->rxBuffer, c)) {
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	3310      	adds	r3, #16
 8003dce:	78fa      	ldrb	r2, [r7, #3]
 8003dd0:	4611      	mov	r1, r2
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 ff8a 	bl	8004cec <fifoBufPush>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	f083 0301 	eor.w	r3, r3, #1
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d008      	beq.n	8003df6 <embeddedCliReceiveChar+0x3e>
        SET_FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8003dea:	f043 0301 	orr.w	r3, r3, #1
 8003dee:	b2da      	uxtb	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    }
}
 8003df6:	bf00      	nop
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <embeddedCliProcess>:

void embeddedCliProcess(EmbeddedCli *cli) {
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b084      	sub	sp, #16
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
    if (cli->writeChar == NULL)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 8083 	beq.w	8003f16 <embeddedCliProcess+0x118>
        return;

    PREPARE_IMPL(cli);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	60fb      	str	r3, [r7, #12]


    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_INIT_COMPLETE)) {
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d155      	bne.n	8003ed0 <embeddedCliProcess+0xd2>
        SET_FLAG(impl->flags, CLI_FLAG_INIT_COMPLETE);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8003e2a:	f043 0302 	orr.w	r3, r3, #2
 8003e2e:	b2da      	uxtb	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
        writeToOutput(cli, impl->invitation);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 fe7e 	bl	8004b3e <writeToOutput>
    }

    while (fifoBufAvailable(&impl->rxBuffer)) {
 8003e42:	e045      	b.n	8003ed0 <embeddedCliProcess+0xd2>
        char c = fifoBufPop(&impl->rxBuffer);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	3310      	adds	r3, #16
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 ff27 	bl	8004c9c <fifoBufPop>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	72fb      	strb	r3, [r7, #11]

        if (IS_FLAG_SET(impl->flags, CLI_FLAG_ESCAPE_MODE)) {
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8003e58:	f003 0308 	and.w	r3, r3, #8
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d005      	beq.n	8003e6c <embeddedCliProcess+0x6e>
            onEscapedInput(cli, c);
 8003e60:	7afb      	ldrb	r3, [r7, #11]
 8003e62:	4619      	mov	r1, r3
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 f9f5 	bl	8004254 <onEscapedInput>
 8003e6a:	e02a      	b.n	8003ec2 <embeddedCliProcess+0xc4>
        } else if (impl->lastChar == 0x1B && c == '[') {
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003e72:	2b1b      	cmp	r3, #27
 8003e74:	d10c      	bne.n	8003e90 <embeddedCliProcess+0x92>
 8003e76:	7afb      	ldrb	r3, [r7, #11]
 8003e78:	2b5b      	cmp	r3, #91	@ 0x5b
 8003e7a:	d109      	bne.n	8003e90 <embeddedCliProcess+0x92>
            //enter escape mode
            SET_FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8003e82:	f043 0308 	orr.w	r3, r3, #8
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 8003e8e:	e018      	b.n	8003ec2 <embeddedCliProcess+0xc4>
        } else if (isControlChar(c)) {
 8003e90:	7afb      	ldrb	r3, [r7, #11]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 feaa 	bl	8004bec <isControlChar>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d005      	beq.n	8003eaa <embeddedCliProcess+0xac>
            onControlInput(cli, c);
 8003e9e:	7afb      	ldrb	r3, [r7, #11]
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 fa86 	bl	80043b4 <onControlInput>
 8003ea8:	e00b      	b.n	8003ec2 <embeddedCliProcess+0xc4>
        } else if (isDisplayableChar(c)) {
 8003eaa:	7afb      	ldrb	r3, [r7, #11]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f000 febd 	bl	8004c2c <isDisplayableChar>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d004      	beq.n	8003ec2 <embeddedCliProcess+0xc4>
            onCharInput(cli, c);
 8003eb8:	7afb      	ldrb	r3, [r7, #11]
 8003eba:	4619      	mov	r1, r3
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 fa27 	bl	8004310 <onCharInput>
        }

        printLiveAutocompletion(cli);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 fd12 	bl	80048ec <printLiveAutocompletion>

        impl->lastChar = c;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	7afa      	ldrb	r2, [r7, #11]
 8003ecc:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    while (fifoBufAvailable(&impl->rxBuffer)) {
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	3310      	adds	r3, #16
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f000 fec0 	bl	8004c5a <fifoBufAvailable>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1b1      	bne.n	8003e44 <embeddedCliProcess+0x46>
    }

    // discard unfinished command if overflow happened
    if (IS_FLAG_SET(impl->flags, CLI_FLAG_OVERFLOW)) {
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d014      	beq.n	8003f18 <embeddedCliProcess+0x11a>
        impl->cmdSize = 0;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	69db      	ldr	r3, [r3, #28]
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	8c12      	ldrh	r2, [r2, #32]
 8003efc:	4413      	add	r3, r2
 8003efe:	2200      	movs	r2, #0
 8003f00:	701a      	strb	r2, [r3, #0]
        UNSET_U8FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8003f08:	f023 0301 	bic.w	r3, r3, #1
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 8003f14:	e000      	b.n	8003f18 <embeddedCliProcess+0x11a>
        return;
 8003f16:	bf00      	nop
    }
}
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
	...

08003f20 <embeddedCliPrint>:

void embeddedCliPrint(EmbeddedCli *cli, const char *string) {
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
    if (cli->writeChar == NULL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d03e      	beq.n	8003fb0 <embeddedCliPrint+0x90>
        return;

    PREPARE_IMPL(cli);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	60fb      	str	r3, [r7, #12]

    // Save cursor position
    uint16_t cursorPosSave = impl->cursorPos;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8003f3c:	817b      	strh	r3, [r7, #10]

    // remove chars for autocompletion and live command
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT))
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8003f44:	f003 0310 	and.w	r3, r3, #16
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d102      	bne.n	8003f52 <embeddedCliPrint+0x32>
        clearCurrentLine(cli);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 fdc1 	bl	8004ad4 <clearCurrentLine>

    // Restore cursor position
    impl->cursorPos = cursorPosSave;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	897a      	ldrh	r2, [r7, #10]
 8003f56:	869a      	strh	r2, [r3, #52]	@ 0x34

    // print provided string
    writeToOutput(cli, string);
 8003f58:	6839      	ldr	r1, [r7, #0]
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 fdef 	bl	8004b3e <writeToOutput>
    writeToOutput(cli, lineBreak);
 8003f60:	4b15      	ldr	r3, [pc, #84]	@ (8003fb8 <embeddedCliPrint+0x98>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4619      	mov	r1, r3
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 fde9 	bl	8004b3e <writeToOutput>

    // print current command back to screen
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT)) {
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8003f72:	f003 0310 	and.w	r3, r3, #16
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d11b      	bne.n	8003fb2 <embeddedCliPrint+0x92>
        writeToOutput(cli, impl->invitation);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4619      	mov	r1, r3
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 fddc 	bl	8004b3e <writeToOutput>
        writeToOutput(cli, impl->cmdBuffer);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 fdd6 	bl	8004b3e <writeToOutput>
        impl->inputLineLength = impl->cmdSize;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8c1a      	ldrh	r2, [r3, #32]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	861a      	strh	r2, [r3, #48]	@ 0x30
        moveCursor(cli, impl->cursorPos, CURSOR_DIRECTION_BACKWARD);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 fdec 	bl	8004b80 <moveCursor>

        printLiveAutocompletion(cli);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 fc9f 	bl	80048ec <printLiveAutocompletion>
 8003fae:	e000      	b.n	8003fb2 <embeddedCliPrint+0x92>
        return;
 8003fb0:	bf00      	nop
    }
}
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	200000f8 	.word	0x200000f8

08003fbc <embeddedCliTokenizeArgs>:

void embeddedCliTokenizeArgs(char *args) {
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b088      	sub	sp, #32
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
    if (args == NULL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d066      	beq.n	8004098 <embeddedCliTokenizeArgs+0xdc>
        return;

    // for now only space, but can add more later
    const char *separators = " ";
 8003fca:	4b35      	ldr	r3, [pc, #212]	@ (80040a0 <embeddedCliTokenizeArgs+0xe4>)
 8003fcc:	60fb      	str	r3, [r7, #12]

    // indicates that arg is quoted so separators are copied as is
    bool quotesEnabled = false;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	77fb      	strb	r3, [r7, #31]
    // indicates that previous char was a slash, so next char is copied as is
    bool escapeActivated = false;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	77bb      	strb	r3, [r7, #30]
    int insertPos = 0;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	61bb      	str	r3, [r7, #24]

    int i = 0;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	617b      	str	r3, [r7, #20]
    char currentChar;
    while ((currentChar = args[i]) != '\0') {
 8003fde:	e047      	b.n	8004070 <embeddedCliTokenizeArgs+0xb4>
        ++i;
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	617b      	str	r3, [r7, #20]

        if (escapeActivated) {
 8003fe6:	7fbb      	ldrb	r3, [r7, #30]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d002      	beq.n	8003ff2 <embeddedCliTokenizeArgs+0x36>
            escapeActivated = false;
 8003fec:	2300      	movs	r3, #0
 8003fee:	77bb      	strb	r3, [r7, #30]
 8003ff0:	e029      	b.n	8004046 <embeddedCliTokenizeArgs+0x8a>
        } else if (currentChar == '\\') {
 8003ff2:	7cfb      	ldrb	r3, [r7, #19]
 8003ff4:	2b5c      	cmp	r3, #92	@ 0x5c
 8003ff6:	d102      	bne.n	8003ffe <embeddedCliTokenizeArgs+0x42>
            escapeActivated = true;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	77bb      	strb	r3, [r7, #30]
            continue;
 8003ffc:	e038      	b.n	8004070 <embeddedCliTokenizeArgs+0xb4>
        } else if (currentChar == '"') {
 8003ffe:	7cfb      	ldrb	r3, [r7, #19]
 8004000:	2b22      	cmp	r3, #34	@ 0x22
 8004002:	d110      	bne.n	8004026 <embeddedCliTokenizeArgs+0x6a>
            quotesEnabled = !quotesEnabled;
 8004004:	7ffb      	ldrb	r3, [r7, #31]
 8004006:	2b00      	cmp	r3, #0
 8004008:	bf14      	ite	ne
 800400a:	2301      	movne	r3, #1
 800400c:	2300      	moveq	r3, #0
 800400e:	b2db      	uxtb	r3, r3
 8004010:	f083 0301 	eor.w	r3, r3, #1
 8004014:	b2db      	uxtb	r3, r3
 8004016:	77fb      	strb	r3, [r7, #31]
 8004018:	7ffb      	ldrb	r3, [r7, #31]
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	77fb      	strb	r3, [r7, #31]
            currentChar = '\0';
 8004020:	2300      	movs	r3, #0
 8004022:	74fb      	strb	r3, [r7, #19]
 8004024:	e00f      	b.n	8004046 <embeddedCliTokenizeArgs+0x8a>
        } else if (!quotesEnabled && strchr(separators, currentChar) != NULL) {
 8004026:	7ffb      	ldrb	r3, [r7, #31]
 8004028:	f083 0301 	eor.w	r3, r3, #1
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d009      	beq.n	8004046 <embeddedCliTokenizeArgs+0x8a>
 8004032:	7cfb      	ldrb	r3, [r7, #19]
 8004034:	4619      	mov	r1, r3
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f009 fb35 	bl	800d6a6 <strchr>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <embeddedCliTokenizeArgs+0x8a>
            currentChar = '\0';
 8004042:	2300      	movs	r3, #0
 8004044:	74fb      	strb	r3, [r7, #19]
        }

        // null chars are only copied once and not copied to the beginning
        if (currentChar != '\0' || (insertPos > 0 && args[insertPos - 1] != '\0')) {
 8004046:	7cfb      	ldrb	r3, [r7, #19]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d109      	bne.n	8004060 <embeddedCliTokenizeArgs+0xa4>
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	2b00      	cmp	r3, #0
 8004050:	dd0e      	ble.n	8004070 <embeddedCliTokenizeArgs+0xb4>
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	3b01      	subs	r3, #1
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	4413      	add	r3, r2
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d007      	beq.n	8004070 <embeddedCliTokenizeArgs+0xb4>
            args[insertPos] = currentChar;
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	4413      	add	r3, r2
 8004066:	7cfa      	ldrb	r2, [r7, #19]
 8004068:	701a      	strb	r2, [r3, #0]
            ++insertPos;
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	3301      	adds	r3, #1
 800406e:	61bb      	str	r3, [r7, #24]
    while ((currentChar = args[i]) != '\0') {
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	4413      	add	r3, r2
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	74fb      	strb	r3, [r7, #19]
 800407a:	7cfb      	ldrb	r3, [r7, #19]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1af      	bne.n	8003fe0 <embeddedCliTokenizeArgs+0x24>
        }
    }

    // make args double null-terminated source buffer must be big enough to contain extra spaces
    args[insertPos] = '\0';
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	4413      	add	r3, r2
 8004086:	2200      	movs	r2, #0
 8004088:	701a      	strb	r2, [r3, #0]
    args[insertPos + 1] = '\0';
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	3301      	adds	r3, #1
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	4413      	add	r3, r2
 8004092:	2200      	movs	r2, #0
 8004094:	701a      	strb	r2, [r3, #0]
 8004096:	e000      	b.n	800409a <embeddedCliTokenizeArgs+0xde>
        return;
 8004098:	bf00      	nop
}
 800409a:	3720      	adds	r7, #32
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	08010408 	.word	0x08010408

080040a4 <embeddedCliGetToken>:

const char *embeddedCliGetToken(const char *tokenizedStr, uint16_t pos) {
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	460b      	mov	r3, r1
 80040ae:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 80040b0:	887b      	ldrh	r3, [r7, #2]
 80040b2:	4619      	mov	r1, r3
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 ff20 	bl	8004efa <getTokenPosition>
 80040ba:	4603      	mov	r3, r0
 80040bc:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 80040be:	89fb      	ldrh	r3, [r7, #14]
 80040c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d003      	beq.n	80040d0 <embeddedCliGetToken+0x2c>
        return &tokenizedStr[i];
 80040c8:	89fb      	ldrh	r3, [r7, #14]
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	4413      	add	r3, r2
 80040ce:	e000      	b.n	80040d2 <embeddedCliGetToken+0x2e>
    else
        return NULL;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <embeddedCliGetTokenVariable>:

char *embeddedCliGetTokenVariable(char *tokenizedStr, uint16_t pos) {
 80040da:	b580      	push	{r7, lr}
 80040dc:	b084      	sub	sp, #16
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
 80040e2:	460b      	mov	r3, r1
 80040e4:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 80040e6:	887b      	ldrh	r3, [r7, #2]
 80040e8:	4619      	mov	r1, r3
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 ff05 	bl	8004efa <getTokenPosition>
 80040f0:	4603      	mov	r3, r0
 80040f2:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 80040f4:	89fb      	ldrh	r3, [r7, #14]
 80040f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d003      	beq.n	8004106 <embeddedCliGetTokenVariable+0x2c>
        return &tokenizedStr[i];
 80040fe:	89fb      	ldrh	r3, [r7, #14]
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	4413      	add	r3, r2
 8004104:	e000      	b.n	8004108 <embeddedCliGetTokenVariable+0x2e>
    else
        return NULL;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <embeddedCliGetTokenCount>:
    }

    return 0;
}

uint16_t embeddedCliGetTokenCount(const char *tokenizedStr) {
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
    if (tokenizedStr == NULL || tokenizedStr[0] == '\0')
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <embeddedCliGetTokenCount+0x16>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <embeddedCliGetTokenCount+0x1a>
        return 0;
 8004126:	2300      	movs	r3, #0
 8004128:	e019      	b.n	800415e <embeddedCliGetTokenCount+0x4e>

    int i = 0;
 800412a:	2300      	movs	r3, #0
 800412c:	60fb      	str	r3, [r7, #12]
    uint16_t tokenCount = 1;
 800412e:	2301      	movs	r3, #1
 8004130:	817b      	strh	r3, [r7, #10]
    while (true) {
        if (tokenizedStr[i] == '\0') {
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	4413      	add	r3, r2
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d109      	bne.n	8004152 <embeddedCliGetTokenCount+0x42>
            if (tokenizedStr[i + 1] == '\0')
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	3301      	adds	r3, #1
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	4413      	add	r3, r2
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d006      	beq.n	800415a <embeddedCliGetTokenCount+0x4a>
                break;
            ++tokenCount;
 800414c:	897b      	ldrh	r3, [r7, #10]
 800414e:	3301      	adds	r3, #1
 8004150:	817b      	strh	r3, [r7, #10]
        }
        ++i;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	3301      	adds	r3, #1
 8004156:	60fb      	str	r3, [r7, #12]
        if (tokenizedStr[i] == '\0') {
 8004158:	e7eb      	b.n	8004132 <embeddedCliGetTokenCount+0x22>
                break;
 800415a:	bf00      	nop
    }

    return tokenCount;
 800415c:	897b      	ldrh	r3, [r7, #10]
}
 800415e:	4618      	mov	r0, r3
 8004160:	3714      	adds	r7, #20
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
	...

0800416c <navigateHistory>:

static void navigateHistory(EmbeddedCli *cli, bool navigateUp) {
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	460b      	mov	r3, r1
 8004176:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	613b      	str	r3, [r7, #16]
    if (impl->history.itemsCount == 0 ||
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	899b      	ldrh	r3, [r3, #12]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d05f      	beq.n	8004246 <navigateHistory+0xda>
 8004186:	78fb      	ldrb	r3, [r7, #3]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d005      	beq.n	8004198 <navigateHistory+0x2c>
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	895a      	ldrh	r2, [r3, #10]
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	899b      	ldrh	r3, [r3, #12]
 8004194:	429a      	cmp	r2, r3
 8004196:	d056      	beq.n	8004246 <navigateHistory+0xda>
        (!navigateUp && impl->history.current == 0))
 8004198:	78fb      	ldrb	r3, [r7, #3]
 800419a:	f083 0301 	eor.w	r3, r3, #1
 800419e:	b2db      	uxtb	r3, r3
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d003      	beq.n	80041ac <navigateHistory+0x40>
        (!navigateUp && impl->history.current == 0))
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	895b      	ldrh	r3, [r3, #10]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d04c      	beq.n	8004246 <navigateHistory+0xda>
        return;

    clearCurrentLine(cli);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 fc91 	bl	8004ad4 <clearCurrentLine>

    writeToOutput(cli, impl->invitation);
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4619      	mov	r1, r3
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 fcc0 	bl	8004b3e <writeToOutput>

    if (navigateUp)
 80041be:	78fb      	ldrb	r3, [r7, #3]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d006      	beq.n	80041d2 <navigateHistory+0x66>
        ++impl->history.current;
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	895b      	ldrh	r3, [r3, #10]
 80041c8:	3301      	adds	r3, #1
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	815a      	strh	r2, [r3, #10]
 80041d0:	e005      	b.n	80041de <navigateHistory+0x72>
    else
        --impl->history.current;
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	895b      	ldrh	r3, [r3, #10]
 80041d6:	3b01      	subs	r3, #1
 80041d8:	b29a      	uxth	r2, r3
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	815a      	strh	r2, [r3, #10]

    const char *item = historyGet(&impl->history, impl->history.current);
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1d1a      	adds	r2, r3, #4
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	895b      	ldrh	r3, [r3, #10]
 80041e6:	4619      	mov	r1, r3
 80041e8:	4610      	mov	r0, r2
 80041ea:	f000 fe0d 	bl	8004e08 <historyGet>
 80041ee:	6178      	str	r0, [r7, #20]
    // simple way to handle empty command the same way as others
    if (item == NULL)
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <navigateHistory+0x8e>
        item = "";
 80041f6:	4b16      	ldr	r3, [pc, #88]	@ (8004250 <navigateHistory+0xe4>)
 80041f8:	617b      	str	r3, [r7, #20]
    uint16_t len = (uint16_t) strlen(item);
 80041fa:	6978      	ldr	r0, [r7, #20]
 80041fc:	f7fc f848 	bl	8000290 <strlen>
 8004200:	4603      	mov	r3, r0
 8004202:	81fb      	strh	r3, [r7, #14]
    memcpy(impl->cmdBuffer, item, len);
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	69db      	ldr	r3, [r3, #28]
 8004208:	89fa      	ldrh	r2, [r7, #14]
 800420a:	6979      	ldr	r1, [r7, #20]
 800420c:	4618      	mov	r0, r3
 800420e:	f009 face 	bl	800d7ae <memcpy>
    impl->cmdBuffer[len] = '\0';
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	69da      	ldr	r2, [r3, #28]
 8004216:	89fb      	ldrh	r3, [r7, #14]
 8004218:	4413      	add	r3, r2
 800421a:	2200      	movs	r2, #0
 800421c:	701a      	strb	r2, [r3, #0]
    impl->cmdSize = len;
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	89fa      	ldrh	r2, [r7, #14]
 8004222:	841a      	strh	r2, [r3, #32]

    writeToOutput(cli, impl->cmdBuffer);
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	69db      	ldr	r3, [r3, #28]
 8004228:	4619      	mov	r1, r3
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 fc87 	bl	8004b3e <writeToOutput>
    impl->inputLineLength = impl->cmdSize;
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	8c1a      	ldrh	r2, [r3, #32]
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	861a      	strh	r2, [r3, #48]	@ 0x30
    impl->cursorPos = 0;
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	2200      	movs	r2, #0
 800423c:	869a      	strh	r2, [r3, #52]	@ 0x34

    printLiveAutocompletion(cli);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 fb54 	bl	80048ec <printLiveAutocompletion>
 8004244:	e000      	b.n	8004248 <navigateHistory+0xdc>
        return;
 8004246:	bf00      	nop
}
 8004248:	3718      	adds	r7, #24
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	0801040c 	.word	0x0801040c

08004254 <onEscapedInput>:

static void onEscapedInput(EmbeddedCli *cli, char c) {
 8004254:	b590      	push	{r4, r7, lr}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	460b      	mov	r3, r1
 800425e:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	60fb      	str	r3, [r7, #12]

    if (c >= 64 && c <= 126) {
 8004266:	78fb      	ldrb	r3, [r7, #3]
 8004268:	2b3f      	cmp	r3, #63	@ 0x3f
 800426a:	d948      	bls.n	80042fe <onEscapedInput+0xaa>
 800426c:	78fb      	ldrb	r3, [r7, #3]
 800426e:	2b7e      	cmp	r3, #126	@ 0x7e
 8004270:	d845      	bhi.n	80042fe <onEscapedInput+0xaa>
        // handle escape sequence
        UNSET_U8FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8004278:	f023 0308 	bic.w	r3, r3, #8
 800427c:	b2da      	uxtb	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

        if (c == 'A' || c == 'B') {
 8004284:	78fb      	ldrb	r3, [r7, #3]
 8004286:	2b41      	cmp	r3, #65	@ 0x41
 8004288:	d002      	beq.n	8004290 <onEscapedInput+0x3c>
 800428a:	78fb      	ldrb	r3, [r7, #3]
 800428c:	2b42      	cmp	r3, #66	@ 0x42
 800428e:	d109      	bne.n	80042a4 <onEscapedInput+0x50>
            // treat \e[..A as cursor up and \e[..B as cursor down
            // there might be extra chars between [ and A/B, just ignore them
            navigateHistory(cli, c == 'A');
 8004290:	78fb      	ldrb	r3, [r7, #3]
 8004292:	2b41      	cmp	r3, #65	@ 0x41
 8004294:	bf0c      	ite	eq
 8004296:	2301      	moveq	r3, #1
 8004298:	2300      	movne	r3, #0
 800429a:	b2db      	uxtb	r3, r3
 800429c:	4619      	mov	r1, r3
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f7ff ff64 	bl	800416c <navigateHistory>
        }

        if (c == 'C' && impl->cursorPos > 0) {
 80042a4:	78fb      	ldrb	r3, [r7, #3]
 80042a6:	2b43      	cmp	r3, #67	@ 0x43
 80042a8:	d10f      	bne.n	80042ca <onEscapedInput+0x76>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00b      	beq.n	80042ca <onEscapedInput+0x76>
            impl->cursorPos--;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80042b6:	3b01      	subs	r3, #1
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	869a      	strh	r2, [r3, #52]	@ 0x34
            writeToOutput(cli, escSeqCursorRight);
 80042be:	4b12      	ldr	r3, [pc, #72]	@ (8004308 <onEscapedInput+0xb4>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4619      	mov	r1, r3
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f000 fc3a 	bl	8004b3e <writeToOutput>
        }

        if (c == 'D' && impl->cursorPos < strlen(impl->cmdBuffer)) {
 80042ca:	78fb      	ldrb	r3, [r7, #3]
 80042cc:	2b44      	cmp	r3, #68	@ 0x44
 80042ce:	d116      	bne.n	80042fe <onEscapedInput+0xaa>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80042d4:	461c      	mov	r4, r3
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	4618      	mov	r0, r3
 80042dc:	f7fb ffd8 	bl	8000290 <strlen>
 80042e0:	4603      	mov	r3, r0
 80042e2:	429c      	cmp	r4, r3
 80042e4:	d20b      	bcs.n	80042fe <onEscapedInput+0xaa>
            impl->cursorPos++;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80042ea:	3301      	adds	r3, #1
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	869a      	strh	r2, [r3, #52]	@ 0x34
            writeToOutput(cli, escSeqCursorLeft);
 80042f2:	4b06      	ldr	r3, [pc, #24]	@ (800430c <onEscapedInput+0xb8>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4619      	mov	r1, r3
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 fc20 	bl	8004b3e <writeToOutput>
        }
    }
}
 80042fe:	bf00      	nop
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	bd90      	pop	{r4, r7, pc}
 8004306:	bf00      	nop
 8004308:	200000fc 	.word	0x200000fc
 800430c:	20000100 	.word	0x20000100

08004310 <onCharInput>:

static void onCharInput(EmbeddedCli *cli, char c) {
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	460b      	mov	r3, r1
 800431a:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	60fb      	str	r3, [r7, #12]

    // have to reserve two extra chars for command ending (used in tokenization)
    if (impl->cmdSize + 2 >= impl->cmdMaxSize)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8c1b      	ldrh	r3, [r3, #32]
 8004326:	3302      	adds	r3, #2
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 800432c:	4293      	cmp	r3, r2
 800432e:	da3b      	bge.n	80043a8 <onCharInput+0x98>
        return;

    size_t insertPos = strlen(impl->cmdBuffer) - impl->cursorPos;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	69db      	ldr	r3, [r3, #28]
 8004334:	4618      	mov	r0, r3
 8004336:	f7fb ffab 	bl	8000290 <strlen>
 800433a:	4602      	mov	r2, r0
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	60bb      	str	r3, [r7, #8]

    memmove(&impl->cmdBuffer[insertPos + 1], &impl->cmdBuffer[insertPos], impl->cursorPos + 1);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	69da      	ldr	r2, [r3, #28]
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	3301      	adds	r3, #1
 800434c:	18d0      	adds	r0, r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	69da      	ldr	r2, [r3, #28]
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	18d1      	adds	r1, r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800435a:	3301      	adds	r3, #1
 800435c:	461a      	mov	r2, r3
 800435e:	f009 f980 	bl	800d662 <memmove>

    ++impl->cmdSize;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	8c1b      	ldrh	r3, [r3, #32]
 8004366:	3301      	adds	r3, #1
 8004368:	b29a      	uxth	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	841a      	strh	r2, [r3, #32]
    ++impl->inputLineLength;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8004372:	3301      	adds	r3, #1
 8004374:	b29a      	uxth	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	861a      	strh	r2, [r3, #48]	@ 0x30
    impl->cmdBuffer[insertPos] = c;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	69da      	ldr	r2, [r3, #28]
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	4413      	add	r3, r2
 8004382:	78fa      	ldrb	r2, [r7, #3]
 8004384:	701a      	strb	r2, [r3, #0]

    if (impl->cursorPos > 0)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800438a:	2b00      	cmp	r3, #0
 800438c:	d005      	beq.n	800439a <onCharInput+0x8a>
        writeToOutput(cli, escSeqInsertChar); // Insert Character
 800438e:	4b08      	ldr	r3, [pc, #32]	@ (80043b0 <onCharInput+0xa0>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4619      	mov	r1, r3
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 fbd2 	bl	8004b3e <writeToOutput>

    cli->writeChar(cli, c);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	78fa      	ldrb	r2, [r7, #3]
 80043a0:	4611      	mov	r1, r2
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	4798      	blx	r3
 80043a6:	e000      	b.n	80043aa <onCharInput+0x9a>
        return;
 80043a8:	bf00      	nop
}
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	2000010c 	.word	0x2000010c

080043b4 <onControlInput>:

static void onControlInput(EmbeddedCli *cli, char c) {
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	460b      	mov	r3, r1
 80043be:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	60fb      	str	r3, [r7, #12]

    // process \r\n and \n\r as single \r\n command
    if ((impl->lastChar == '\r' && c == '\n') ||
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80043cc:	2b0d      	cmp	r3, #13
 80043ce:	d102      	bne.n	80043d6 <onControlInput+0x22>
 80043d0:	78fb      	ldrb	r3, [r7, #3]
 80043d2:	2b0a      	cmp	r3, #10
 80043d4:	d078      	beq.n	80044c8 <onControlInput+0x114>
        (impl->lastChar == '\n' && c == '\r'))
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
    if ((impl->lastChar == '\r' && c == '\n') ||
 80043dc:	2b0a      	cmp	r3, #10
 80043de:	d102      	bne.n	80043e6 <onControlInput+0x32>
        (impl->lastChar == '\n' && c == '\r'))
 80043e0:	78fb      	ldrb	r3, [r7, #3]
 80043e2:	2b0d      	cmp	r3, #13
 80043e4:	d070      	beq.n	80044c8 <onControlInput+0x114>
        return;

    if (c == '\r' || c == '\n') {
 80043e6:	78fb      	ldrb	r3, [r7, #3]
 80043e8:	2b0d      	cmp	r3, #13
 80043ea:	d002      	beq.n	80043f2 <onControlInput+0x3e>
 80043ec:	78fb      	ldrb	r3, [r7, #3]
 80043ee:	2b0a      	cmp	r3, #10
 80043f0:	d129      	bne.n	8004446 <onControlInput+0x92>
        // try to autocomplete command and then process it
        onAutocompleteRequest(cli);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 fadc 	bl	80049b0 <onAutocompleteRequest>

        writeToOutput(cli, lineBreak);
 80043f8:	4b35      	ldr	r3, [pc, #212]	@ (80044d0 <onControlInput+0x11c>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4619      	mov	r1, r3
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 fb9d 	bl	8004b3e <writeToOutput>

        if (impl->cmdSize > 0)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	8c1b      	ldrh	r3, [r3, #32]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d002      	beq.n	8004412 <onControlInput+0x5e>
            parseCommand(cli);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 f865 	bl	80044dc <parseCommand>
        impl->cmdSize = 0;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	69db      	ldr	r3, [r3, #28]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	8c12      	ldrh	r2, [r2, #32]
 8004420:	4413      	add	r3, r2
 8004422:	2200      	movs	r2, #0
 8004424:	701a      	strb	r2, [r3, #0]
        impl->inputLineLength = 0;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	861a      	strh	r2, [r3, #48]	@ 0x30
        impl->history.current = 0;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	815a      	strh	r2, [r3, #10]
        impl->cursorPos = 0;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	869a      	strh	r2, [r3, #52]	@ 0x34

        writeToOutput(cli, impl->invitation);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4619      	mov	r1, r3
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 fb7d 	bl	8004b3e <writeToOutput>
 8004444:	e041      	b.n	80044ca <onControlInput+0x116>
    } else if ((c == '\b' || c == 0x7F) && ((impl->cmdSize - impl->cursorPos) > 0)) {
 8004446:	78fb      	ldrb	r3, [r7, #3]
 8004448:	2b08      	cmp	r3, #8
 800444a:	d002      	beq.n	8004452 <onControlInput+0x9e>
 800444c:	78fb      	ldrb	r3, [r7, #3]
 800444e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004450:	d133      	bne.n	80044ba <onControlInput+0x106>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	8c1b      	ldrh	r3, [r3, #32]
 8004456:	461a      	mov	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	dd2b      	ble.n	80044ba <onControlInput+0x106>
        // remove char from screen
        writeToOutput(cli, escSeqCursorLeft); // Move cursor to left
 8004462:	4b1c      	ldr	r3, [pc, #112]	@ (80044d4 <onControlInput+0x120>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4619      	mov	r1, r3
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 fb68 	bl	8004b3e <writeToOutput>
        writeToOutput(cli, escSeqDeleteChar); // And remove character
 800446e:	4b1a      	ldr	r3, [pc, #104]	@ (80044d8 <onControlInput+0x124>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4619      	mov	r1, r3
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 fb62 	bl	8004b3e <writeToOutput>
        // and from buffer
        size_t insertPos = strlen(impl->cmdBuffer) - impl->cursorPos;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	4618      	mov	r0, r3
 8004480:	f7fb ff06 	bl	8000290 <strlen>
 8004484:	4602      	mov	r2, r0
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	60bb      	str	r3, [r7, #8]
        memmove(&impl->cmdBuffer[insertPos - 1], &impl->cmdBuffer[insertPos], impl->cursorPos + 1);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	69da      	ldr	r2, [r3, #28]
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	3b01      	subs	r3, #1
 8004496:	18d0      	adds	r0, r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	69da      	ldr	r2, [r3, #28]
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	18d1      	adds	r1, r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80044a4:	3301      	adds	r3, #1
 80044a6:	461a      	mov	r2, r3
 80044a8:	f009 f8db 	bl	800d662 <memmove>
        --impl->cmdSize;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	8c1b      	ldrh	r3, [r3, #32]
 80044b0:	3b01      	subs	r3, #1
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	841a      	strh	r2, [r3, #32]
    } else if ((c == '\b' || c == 0x7F) && ((impl->cmdSize - impl->cursorPos) > 0)) {
 80044b8:	e007      	b.n	80044ca <onControlInput+0x116>
    } else if (c == '\t') {
 80044ba:	78fb      	ldrb	r3, [r7, #3]
 80044bc:	2b09      	cmp	r3, #9
 80044be:	d104      	bne.n	80044ca <onControlInput+0x116>
        onAutocompleteRequest(cli);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 fa75 	bl	80049b0 <onAutocompleteRequest>
 80044c6:	e000      	b.n	80044ca <onControlInput+0x116>
        return;
 80044c8:	bf00      	nop
    }

}
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	200000f8 	.word	0x200000f8
 80044d4:	20000100 	.word	0x20000100
 80044d8:	20000110 	.word	0x20000110

080044dc <parseCommand>:

static void parseCommand(EmbeddedCli *cli) {
 80044dc:	b590      	push	{r4, r7, lr}
 80044de:	b08f      	sub	sp, #60	@ 0x3c
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	61bb      	str	r3, [r7, #24]

    bool isEmpty = true;
 80044ea:	2301      	movs	r3, #1
 80044ec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    for (int i = 0; i < impl->cmdSize; ++i) {
 80044f0:	2300      	movs	r3, #0
 80044f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80044f4:	e00d      	b.n	8004512 <parseCommand+0x36>
        if (impl->cmdBuffer[i] != ' ') {
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	69da      	ldr	r2, [r3, #28]
 80044fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044fc:	4413      	add	r3, r2
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	2b20      	cmp	r3, #32
 8004502:	d003      	beq.n	800450c <parseCommand+0x30>
            isEmpty = false;
 8004504:	2300      	movs	r3, #0
 8004506:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            break;
 800450a:	e008      	b.n	800451e <parseCommand+0x42>
    for (int i = 0; i < impl->cmdSize; ++i) {
 800450c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800450e:	3301      	adds	r3, #1
 8004510:	633b      	str	r3, [r7, #48]	@ 0x30
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	8c1b      	ldrh	r3, [r3, #32]
 8004516:	461a      	mov	r2, r3
 8004518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800451a:	4293      	cmp	r3, r2
 800451c:	dbeb      	blt.n	80044f6 <parseCommand+0x1a>
        }
    }
    // do not process empty commands
    if (isEmpty)
 800451e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004522:	2b00      	cmp	r3, #0
 8004524:	f040 80fa 	bne.w	800471c <parseCommand+0x240>
        return;
    // push command to history before buffer is modified
    historyPut(&impl->history, impl->cmdBuffer);
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	1d1a      	adds	r2, r3, #4
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	69db      	ldr	r3, [r3, #28]
 8004530:	4619      	mov	r1, r3
 8004532:	4610      	mov	r0, r2
 8004534:	f000 fc04 	bl	8004d40 <historyPut>

    char *cmdName = NULL;
 8004538:	2300      	movs	r3, #0
 800453a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    char *cmdArgs = NULL;
 800453c:	2300      	movs	r3, #0
 800453e:	62bb      	str	r3, [r7, #40]	@ 0x28
    bool nameFinished = false;
 8004540:	2300      	movs	r3, #0
 8004542:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // find command name and command args inside command buffer
    for (int i = 0; i < impl->cmdSize; ++i) {
 8004546:	2300      	movs	r3, #0
 8004548:	623b      	str	r3, [r7, #32]
 800454a:	e030      	b.n	80045ae <parseCommand+0xd2>
        char c = impl->cmdBuffer[i];
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	69da      	ldr	r2, [r3, #28]
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	4413      	add	r3, r2
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	75fb      	strb	r3, [r7, #23]

        if (c == ' ') {
 8004558:	7dfb      	ldrb	r3, [r7, #23]
 800455a:	2b20      	cmp	r3, #32
 800455c:	d10f      	bne.n	800457e <parseCommand+0xa2>
            // all spaces between name and args are filled with zeros
            // so name is a correct null-terminated string
            if (cmdArgs == NULL)
 800455e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004560:	2b00      	cmp	r3, #0
 8004562:	d105      	bne.n	8004570 <parseCommand+0x94>
                impl->cmdBuffer[i] = '\0';
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	69da      	ldr	r2, [r3, #28]
 8004568:	6a3b      	ldr	r3, [r7, #32]
 800456a:	4413      	add	r3, r2
 800456c:	2200      	movs	r2, #0
 800456e:	701a      	strb	r2, [r3, #0]
            if (cmdName != NULL)
 8004570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004572:	2b00      	cmp	r3, #0
 8004574:	d018      	beq.n	80045a8 <parseCommand+0xcc>
                nameFinished = true;
 8004576:	2301      	movs	r3, #1
 8004578:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800457c:	e014      	b.n	80045a8 <parseCommand+0xcc>

        } else if (cmdName == NULL) {
 800457e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004580:	2b00      	cmp	r3, #0
 8004582:	d105      	bne.n	8004590 <parseCommand+0xb4>
            cmdName = &impl->cmdBuffer[i];
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	69da      	ldr	r2, [r3, #28]
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	4413      	add	r3, r2
 800458c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800458e:	e00b      	b.n	80045a8 <parseCommand+0xcc>
        } else if (cmdArgs == NULL && nameFinished) {
 8004590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004592:	2b00      	cmp	r3, #0
 8004594:	d108      	bne.n	80045a8 <parseCommand+0xcc>
 8004596:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800459a:	2b00      	cmp	r3, #0
 800459c:	d004      	beq.n	80045a8 <parseCommand+0xcc>
            cmdArgs = &impl->cmdBuffer[i];
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	69da      	ldr	r2, [r3, #28]
 80045a2:	6a3b      	ldr	r3, [r7, #32]
 80045a4:	4413      	add	r3, r2
 80045a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    for (int i = 0; i < impl->cmdSize; ++i) {
 80045a8:	6a3b      	ldr	r3, [r7, #32]
 80045aa:	3301      	adds	r3, #1
 80045ac:	623b      	str	r3, [r7, #32]
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	8c1b      	ldrh	r3, [r3, #32]
 80045b2:	461a      	mov	r2, r3
 80045b4:	6a3b      	ldr	r3, [r7, #32]
 80045b6:	4293      	cmp	r3, r2
 80045b8:	dbc8      	blt.n	800454c <parseCommand+0x70>
        }
    }

    // we keep two last bytes in cmd buffer reserved so cmdSize is always by 2
    // less than cmdMaxSize
    impl->cmdBuffer[impl->cmdSize + 1] = '\0';
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	69da      	ldr	r2, [r3, #28]
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	8c1b      	ldrh	r3, [r3, #32]
 80045c2:	3301      	adds	r3, #1
 80045c4:	4413      	add	r3, r2
 80045c6:	2200      	movs	r2, #0
 80045c8:	701a      	strb	r2, [r3, #0]

    if (cmdName == NULL)
 80045ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f000 80a7 	beq.w	8004720 <parseCommand+0x244>
        return;

    // try to find command in bindings
    for (int i = 0; i < impl->bindingsCount; ++i) {
 80045d2:	2300      	movs	r3, #0
 80045d4:	61fb      	str	r3, [r7, #28]
 80045d6:	e072      	b.n	80046be <parseCommand+0x1e2>
        if (strcmp(cmdName, impl->bindings[i].name) == 0) {
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80045dc:	69fa      	ldr	r2, [r7, #28]
 80045de:	4613      	mov	r3, r2
 80045e0:	005b      	lsls	r3, r3, #1
 80045e2:	4413      	add	r3, r2
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	440b      	add	r3, r1
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	4619      	mov	r1, r3
 80045ec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80045ee:	f7fb fdef 	bl	80001d0 <strcmp>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d15f      	bne.n	80046b8 <parseCommand+0x1dc>
            if (impl->bindings[i].binding == NULL)
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80045fc:	69fa      	ldr	r2, [r7, #28]
 80045fe:	4613      	mov	r3, r2
 8004600:	005b      	lsls	r3, r3, #1
 8004602:	4413      	add	r3, r2
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	440b      	add	r3, r1
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d05e      	beq.n	80046cc <parseCommand+0x1f0>
                break;

            if (impl->bindings[i].tokenizeArgs)
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004612:	69fa      	ldr	r2, [r7, #28]
 8004614:	4613      	mov	r3, r2
 8004616:	005b      	lsls	r3, r3, #1
 8004618:	4413      	add	r3, r2
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	440b      	add	r3, r1
 800461e:	7b1b      	ldrb	r3, [r3, #12]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d002      	beq.n	800462a <parseCommand+0x14e>
                embeddedCliTokenizeArgs(cmdArgs);
 8004624:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004626:	f7ff fcc9 	bl	8003fbc <embeddedCliTokenizeArgs>
            // currently, output is blank line, so we can just print directly
            SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8004630:	f043 0310 	orr.w	r3, r3, #16
 8004634:	b2da      	uxtb	r2, r3
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
            // check if help was requested (help is printed when no other options are set)
            if (cmdArgs != NULL && (strcmp(cmdArgs, "-h") == 0 || strcmp(cmdArgs, "--help") == 0)) {
 800463c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800463e:	2b00      	cmp	r3, #0
 8004640:	d01a      	beq.n	8004678 <parseCommand+0x19c>
 8004642:	4939      	ldr	r1, [pc, #228]	@ (8004728 <parseCommand+0x24c>)
 8004644:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004646:	f7fb fdc3 	bl	80001d0 <strcmp>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d006      	beq.n	800465e <parseCommand+0x182>
 8004650:	4936      	ldr	r1, [pc, #216]	@ (800472c <parseCommand+0x250>)
 8004652:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004654:	f7fb fdbc 	bl	80001d0 <strcmp>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10c      	bne.n	8004678 <parseCommand+0x19c>
                printBindingHelp(cli, &impl->bindings[i]);
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004662:	69fa      	ldr	r2, [r7, #28]
 8004664:	4613      	mov	r3, r2
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	4413      	add	r3, r2
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	440b      	add	r3, r1
 800466e:	4619      	mov	r1, r3
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 f85d 	bl	8004730 <printBindingHelp>
 8004676:	e015      	b.n	80046a4 <parseCommand+0x1c8>
            } else {
                impl->bindings[i].binding(cli, cmdArgs, impl->bindings[i].context);
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800467c:	69fa      	ldr	r2, [r7, #28]
 800467e:	4613      	mov	r3, r2
 8004680:	005b      	lsls	r3, r3, #1
 8004682:	4413      	add	r3, r2
 8004684:	00db      	lsls	r3, r3, #3
 8004686:	440b      	add	r3, r1
 8004688:	695c      	ldr	r4, [r3, #20]
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800468e:	69fa      	ldr	r2, [r7, #28]
 8004690:	4613      	mov	r3, r2
 8004692:	005b      	lsls	r3, r3, #1
 8004694:	4413      	add	r3, r2
 8004696:	00db      	lsls	r3, r3, #3
 8004698:	440b      	add	r3, r1
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	461a      	mov	r2, r3
 800469e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	47a0      	blx	r4
            }
            UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80046aa:	f023 0310 	bic.w	r3, r3, #16
 80046ae:	b2da      	uxtb	r2, r3
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
            return;
 80046b6:	e034      	b.n	8004722 <parseCommand+0x246>
    for (int i = 0; i < impl->bindingsCount; ++i) {
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	3301      	adds	r3, #1
 80046bc:	61fb      	str	r3, [r7, #28]
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80046c2:	461a      	mov	r2, r3
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	4293      	cmp	r3, r2
 80046c8:	db86      	blt.n	80045d8 <parseCommand+0xfc>
 80046ca:	e000      	b.n	80046ce <parseCommand+0x1f2>
                break;
 80046cc:	bf00      	nop
        }
    }

    // command not found in bindings or binding was null
    // try to call default callback
    if (cli->onCommand != NULL) {
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d01d      	beq.n	8004712 <parseCommand+0x236>
        CliCommand command;
        command.name = cmdName;
 80046d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046d8:	60fb      	str	r3, [r7, #12]
        command.args = cmdArgs;
 80046da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046dc:	613b      	str	r3, [r7, #16]

        // currently, output is blank line, so we can just print directly
        SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80046e4:	f043 0310 	orr.w	r3, r3, #16
 80046e8:	b2da      	uxtb	r2, r3
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
        cli->onCommand(cli, &command);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f107 020c 	add.w	r2, r7, #12
 80046f8:	4611      	mov	r1, r2
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	4798      	blx	r3
        UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8004704:	f023 0310 	bic.w	r3, r3, #16
 8004708:	b2da      	uxtb	r2, r3
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 8004710:	e007      	b.n	8004722 <parseCommand+0x246>
    } else {
        onUnknownCommand(cli, cmdName);
 8004712:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 fe5f 	bl	80053d8 <onUnknownCommand>
 800471a:	e002      	b.n	8004722 <parseCommand+0x246>
        return;
 800471c:	bf00      	nop
 800471e:	e000      	b.n	8004722 <parseCommand+0x246>
        return;
 8004720:	bf00      	nop
    }
}
 8004722:	373c      	adds	r7, #60	@ 0x3c
 8004724:	46bd      	mov	sp, r7
 8004726:	bd90      	pop	{r4, r7, pc}
 8004728:	08010410 	.word	0x08010410
 800472c:	08010414 	.word	0x08010414

08004730 <printBindingHelp>:

static void printBindingHelp(EmbeddedCli *cli, CliCommandBinding *binding) {
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
    if (binding->help != NULL) {
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d010      	beq.n	8004764 <printBindingHelp+0x34>
        cli->writeChar(cli, '\t');
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2109      	movs	r1, #9
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	4798      	blx	r3
        writeToOutput(cli, binding->help);
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	4619      	mov	r1, r3
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f9f3 	bl	8004b3e <writeToOutput>
        writeToOutput(cli, lineBreak);
 8004758:	4b04      	ldr	r3, [pc, #16]	@ (800476c <printBindingHelp+0x3c>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4619      	mov	r1, r3
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 f9ed 	bl	8004b3e <writeToOutput>
    }
}
 8004764:	bf00      	nop
 8004766:	3708      	adds	r7, #8
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	200000f8 	.word	0x200000f8

08004770 <getAutocompletedCommand>:

static AutocompletedCommand getAutocompletedCommand(EmbeddedCli *cli, const char *prefix) {
 8004770:	b580      	push	{r7, lr}
 8004772:	b08e      	sub	sp, #56	@ 0x38
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
    AutocompletedCommand cmd = {NULL, 0, 0};
 800477c:	2300      	movs	r3, #0
 800477e:	613b      	str	r3, [r7, #16]
 8004780:	2300      	movs	r3, #0
 8004782:	82bb      	strh	r3, [r7, #20]
 8004784:	2300      	movs	r3, #0
 8004786:	82fb      	strh	r3, [r7, #22]

    size_t prefixLen = strlen(prefix);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f7fb fd81 	bl	8000290 <strlen>
 800478e:	6278      	str	r0, [r7, #36]	@ 0x24

    PREPARE_IMPL(cli);
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	623b      	str	r3, [r7, #32]
    if (impl->bindingsCount == 0 || prefixLen == 0)
 8004796:	6a3b      	ldr	r3, [r7, #32]
 8004798:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800479a:	2b00      	cmp	r3, #0
 800479c:	d002      	beq.n	80047a4 <getAutocompletedCommand+0x34>
 800479e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d108      	bne.n	80047b6 <getAutocompletedCommand+0x46>
        return cmd;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	461a      	mov	r2, r3
 80047a8:	f107 0310 	add.w	r3, r7, #16
 80047ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 80047b0:	e882 0003 	stmia.w	r2, {r0, r1}
 80047b4:	e095      	b.n	80048e2 <getAutocompletedCommand+0x172>


    for (int i = 0; i < impl->bindingsCount; ++i) {
 80047b6:	2300      	movs	r3, #0
 80047b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80047ba:	e083      	b.n	80048c4 <getAutocompletedCommand+0x154>
        const char *name = impl->bindings[i].name;
 80047bc:	6a3b      	ldr	r3, [r7, #32]
 80047be:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80047c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80047c2:	4613      	mov	r3, r2
 80047c4:	005b      	lsls	r3, r3, #1
 80047c6:	4413      	add	r3, r2
 80047c8:	00db      	lsls	r3, r3, #3
 80047ca:	440b      	add	r3, r1
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	61fb      	str	r3, [r7, #28]
        size_t len = strlen(name);
 80047d0:	69f8      	ldr	r0, [r7, #28]
 80047d2:	f7fb fd5d 	bl	8000290 <strlen>
 80047d6:	61b8      	str	r0, [r7, #24]

        // unset autocomplete flag
        UNSET_U8FLAG(impl->bindingsFlags[i], BINDING_FLAG_AUTOCOMPLETE);
 80047d8:	6a3b      	ldr	r3, [r7, #32]
 80047da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80047dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047de:	4413      	add	r3, r2
 80047e0:	781a      	ldrb	r2, [r3, #0]
 80047e2:	6a3b      	ldr	r3, [r7, #32]
 80047e4:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80047e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047e8:	440b      	add	r3, r1
 80047ea:	f022 0201 	bic.w	r2, r2, #1
 80047ee:	b2d2      	uxtb	r2, r2
 80047f0:	701a      	strb	r2, [r3, #0]

        if (len < prefixLen)
 80047f2:	69ba      	ldr	r2, [r7, #24]
 80047f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d35e      	bcc.n	80048b8 <getAutocompletedCommand+0x148>
            continue;

        // check if this command is candidate for autocomplete
        bool isCandidate = true;
 80047fa:	2301      	movs	r3, #1
 80047fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        for (size_t j = 0; j < prefixLen; ++j) {
 8004800:	2300      	movs	r3, #0
 8004802:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004804:	e010      	b.n	8004828 <getAutocompletedCommand+0xb8>
            if (prefix[j] != name[j]) {
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800480a:	4413      	add	r3, r2
 800480c:	781a      	ldrb	r2, [r3, #0]
 800480e:	69f9      	ldr	r1, [r7, #28]
 8004810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004812:	440b      	add	r3, r1
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	429a      	cmp	r2, r3
 8004818:	d003      	beq.n	8004822 <getAutocompletedCommand+0xb2>
                isCandidate = false;
 800481a:	2300      	movs	r3, #0
 800481c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                break;
 8004820:	e006      	b.n	8004830 <getAutocompletedCommand+0xc0>
        for (size_t j = 0; j < prefixLen; ++j) {
 8004822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004824:	3301      	adds	r3, #1
 8004826:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004828:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800482a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800482c:	429a      	cmp	r2, r3
 800482e:	d3ea      	bcc.n	8004806 <getAutocompletedCommand+0x96>
            }
        }
        if (!isCandidate)
 8004830:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004834:	f083 0301 	eor.w	r3, r3, #1
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d13e      	bne.n	80048bc <getAutocompletedCommand+0x14c>
            continue;

        impl->bindingsFlags[i] |= BINDING_FLAG_AUTOCOMPLETE;
 800483e:	6a3b      	ldr	r3, [r7, #32]
 8004840:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004842:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004844:	4413      	add	r3, r2
 8004846:	781a      	ldrb	r2, [r3, #0]
 8004848:	6a3b      	ldr	r3, [r7, #32]
 800484a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800484c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800484e:	440b      	add	r3, r1
 8004850:	f042 0201 	orr.w	r2, r2, #1
 8004854:	b2d2      	uxtb	r2, r2
 8004856:	701a      	strb	r2, [r3, #0]

        if (cmd.candidateCount == 0 || len < cmd.autocompletedLen)
 8004858:	8afb      	ldrh	r3, [r7, #22]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d004      	beq.n	8004868 <getAutocompletedCommand+0xf8>
 800485e:	8abb      	ldrh	r3, [r7, #20]
 8004860:	461a      	mov	r2, r3
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	4293      	cmp	r3, r2
 8004866:	d202      	bcs.n	800486e <getAutocompletedCommand+0xfe>
            cmd.autocompletedLen = (uint16_t) len;
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	b29b      	uxth	r3, r3
 800486c:	82bb      	strh	r3, [r7, #20]

        ++cmd.candidateCount;
 800486e:	8afb      	ldrh	r3, [r7, #22]
 8004870:	3301      	adds	r3, #1
 8004872:	b29b      	uxth	r3, r3
 8004874:	82fb      	strh	r3, [r7, #22]

        if (cmd.candidateCount == 1) {
 8004876:	8afb      	ldrh	r3, [r7, #22]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d102      	bne.n	8004882 <getAutocompletedCommand+0x112>
            cmd.firstCandidate = name;
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	613b      	str	r3, [r7, #16]
            continue;
 8004880:	e01d      	b.n	80048be <getAutocompletedCommand+0x14e>
        }

        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 8004882:	6a3b      	ldr	r3, [r7, #32]
 8004884:	8c1b      	ldrh	r3, [r3, #32]
 8004886:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004888:	e010      	b.n	80048ac <getAutocompletedCommand+0x13c>
            if (cmd.firstCandidate[j] != name[j]) {
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800488e:	4413      	add	r3, r2
 8004890:	781a      	ldrb	r2, [r3, #0]
 8004892:	69f9      	ldr	r1, [r7, #28]
 8004894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004896:	440b      	add	r3, r1
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	429a      	cmp	r2, r3
 800489c:	d003      	beq.n	80048a6 <getAutocompletedCommand+0x136>
                cmd.autocompletedLen = (uint16_t) j;
 800489e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	82bb      	strh	r3, [r7, #20]
                break;
 80048a4:	e00b      	b.n	80048be <getAutocompletedCommand+0x14e>
        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 80048a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a8:	3301      	adds	r3, #1
 80048aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048ac:	8abb      	ldrh	r3, [r7, #20]
 80048ae:	461a      	mov	r2, r3
 80048b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d3e9      	bcc.n	800488a <getAutocompletedCommand+0x11a>
 80048b6:	e002      	b.n	80048be <getAutocompletedCommand+0x14e>
            continue;
 80048b8:	bf00      	nop
 80048ba:	e000      	b.n	80048be <getAutocompletedCommand+0x14e>
            continue;
 80048bc:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 80048be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048c0:	3301      	adds	r3, #1
 80048c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80048c4:	6a3b      	ldr	r3, [r7, #32]
 80048c6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80048c8:	461a      	mov	r2, r3
 80048ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048cc:	4293      	cmp	r3, r2
 80048ce:	f6ff af75 	blt.w	80047bc <getAutocompletedCommand+0x4c>
            }
        }
    }

    return cmd;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	461a      	mov	r2, r3
 80048d6:	f107 0310 	add.w	r3, r7, #16
 80048da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80048de:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	3738      	adds	r7, #56	@ 0x38
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
	...

080048ec <printLiveAutocompletion>:

static void printLiveAutocompletion(EmbeddedCli *cli) {
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b088      	sub	sp, #32
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	617b      	str	r3, [r7, #20]

    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED))
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8004900:	f003 0320 	and.w	r3, r3, #32
 8004904:	2b00      	cmp	r3, #0
 8004906:	d04a      	beq.n	800499e <printLiveAutocompletion+0xb2>
        return;

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	69da      	ldr	r2, [r3, #28]
 800490c:	f107 030c 	add.w	r3, r7, #12
 8004910:	6879      	ldr	r1, [r7, #4]
 8004912:	4618      	mov	r0, r3
 8004914:	f7ff ff2c 	bl	8004770 <getAutocompletedCommand>

    if (cmd.candidateCount == 0) {
 8004918:	8a7b      	ldrh	r3, [r7, #18]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d102      	bne.n	8004924 <printLiveAutocompletion+0x38>
        cmd.autocompletedLen = impl->cmdSize;
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	8c1b      	ldrh	r3, [r3, #32]
 8004922:	823b      	strh	r3, [r7, #16]
    }

    // save cursor location
    writeToOutput(cli, escSeqCursorSave);
 8004924:	4b20      	ldr	r3, [pc, #128]	@ (80049a8 <printLiveAutocompletion+0xbc>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4619      	mov	r1, r3
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f907 	bl	8004b3e <writeToOutput>

    moveCursor(cli, impl->cursorPos, CURSOR_DIRECTION_FORWARD);
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8004934:	2201      	movs	r2, #1
 8004936:	4619      	mov	r1, r3
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 f921 	bl	8004b80 <moveCursor>

    // print live autocompletion (or nothing, if it doesn't exist)
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	8c1b      	ldrh	r3, [r3, #32]
 8004942:	61fb      	str	r3, [r7, #28]
 8004944:	e00b      	b.n	800495e <printLiveAutocompletion+0x72>
        cli->writeChar(cli, cmd.firstCandidate[i]);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68f9      	ldr	r1, [r7, #12]
 800494c:	69fa      	ldr	r2, [r7, #28]
 800494e:	440a      	add	r2, r1
 8004950:	7812      	ldrb	r2, [r2, #0]
 8004952:	4611      	mov	r1, r2
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	4798      	blx	r3
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	3301      	adds	r3, #1
 800495c:	61fb      	str	r3, [r7, #28]
 800495e:	8a3b      	ldrh	r3, [r7, #16]
 8004960:	461a      	mov	r2, r3
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	4293      	cmp	r3, r2
 8004966:	d3ee      	bcc.n	8004946 <printLiveAutocompletion+0x5a>
    }
    // replace with spaces previous autocompletion
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 8004968:	8a3b      	ldrh	r3, [r7, #16]
 800496a:	61bb      	str	r3, [r7, #24]
 800496c:	e007      	b.n	800497e <printLiveAutocompletion+0x92>
        cli->writeChar(cli, ' ');
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2120      	movs	r1, #32
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	4798      	blx	r3
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	3301      	adds	r3, #1
 800497c:	61bb      	str	r3, [r7, #24]
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8004982:	461a      	mov	r2, r3
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	4293      	cmp	r3, r2
 8004988:	d3f1      	bcc.n	800496e <printLiveAutocompletion+0x82>
    }
    impl->inputLineLength = cmd.autocompletedLen;
 800498a:	8a3a      	ldrh	r2, [r7, #16]
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	861a      	strh	r2, [r3, #48]	@ 0x30

    // restore cursor
    writeToOutput(cli, escSeqCursorRestore);
 8004990:	4b06      	ldr	r3, [pc, #24]	@ (80049ac <printLiveAutocompletion+0xc0>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4619      	mov	r1, r3
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f8d1 	bl	8004b3e <writeToOutput>
 800499c:	e000      	b.n	80049a0 <printLiveAutocompletion+0xb4>
        return;
 800499e:	bf00      	nop
}
 80049a0:	3720      	adds	r7, #32
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	20000104 	.word	0x20000104
 80049ac:	20000108 	.word	0x20000108

080049b0 <onAutocompleteRequest>:

static void onAutocompleteRequest(EmbeddedCli *cli) {
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b088      	sub	sp, #32
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	61bb      	str	r3, [r7, #24]

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	69da      	ldr	r2, [r3, #28]
 80049c2:	f107 030c 	add.w	r3, r7, #12
 80049c6:	6879      	ldr	r1, [r7, #4]
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7ff fed1 	bl	8004770 <getAutocompletedCommand>

    if (cmd.candidateCount == 0)
 80049ce:	8a7b      	ldrh	r3, [r7, #18]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d078      	beq.n	8004ac6 <onAutocompleteRequest+0x116>
        return;

    if (cmd.candidateCount == 1 || cmd.autocompletedLen > impl->cmdSize) {
 80049d4:	8a7b      	ldrh	r3, [r7, #18]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d004      	beq.n	80049e4 <onAutocompleteRequest+0x34>
 80049da:	8a3a      	ldrh	r2, [r7, #16]
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	8c1b      	ldrh	r3, [r3, #32]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d931      	bls.n	8004a48 <onAutocompleteRequest+0x98>
        // can copy from index cmdSize, but prefix is the same, so copy everything
        memcpy(impl->cmdBuffer, cmd.firstCandidate, cmd.autocompletedLen);
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	69db      	ldr	r3, [r3, #28]
 80049e8:	68f9      	ldr	r1, [r7, #12]
 80049ea:	8a3a      	ldrh	r2, [r7, #16]
 80049ec:	4618      	mov	r0, r3
 80049ee:	f008 fede 	bl	800d7ae <memcpy>
        if (cmd.candidateCount == 1) {
 80049f2:	8a7b      	ldrh	r3, [r7, #18]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d109      	bne.n	8004a0c <onAutocompleteRequest+0x5c>
            impl->cmdBuffer[cmd.autocompletedLen] = ' ';
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	69db      	ldr	r3, [r3, #28]
 80049fc:	8a3a      	ldrh	r2, [r7, #16]
 80049fe:	4413      	add	r3, r2
 8004a00:	2220      	movs	r2, #32
 8004a02:	701a      	strb	r2, [r3, #0]
            ++cmd.autocompletedLen;
 8004a04:	8a3b      	ldrh	r3, [r7, #16]
 8004a06:	3301      	adds	r3, #1
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	823b      	strh	r3, [r7, #16]
        }
        impl->cmdBuffer[cmd.autocompletedLen] = '\0';
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	69db      	ldr	r3, [r3, #28]
 8004a10:	8a3a      	ldrh	r2, [r7, #16]
 8004a12:	4413      	add	r3, r2
 8004a14:	2200      	movs	r2, #0
 8004a16:	701a      	strb	r2, [r3, #0]

        writeToOutput(cli, &impl->cmdBuffer[impl->cmdSize - impl->cursorPos]);
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	69db      	ldr	r3, [r3, #28]
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	8c12      	ldrh	r2, [r2, #32]
 8004a20:	4611      	mov	r1, r2
 8004a22:	69ba      	ldr	r2, [r7, #24]
 8004a24:	8e92      	ldrh	r2, [r2, #52]	@ 0x34
 8004a26:	1a8a      	subs	r2, r1, r2
 8004a28:	4413      	add	r3, r2
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f886 	bl	8004b3e <writeToOutput>
        impl->cmdSize = cmd.autocompletedLen;
 8004a32:	8a3a      	ldrh	r2, [r7, #16]
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	841a      	strh	r2, [r3, #32]
        impl->inputLineLength = impl->cmdSize;
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	8c1a      	ldrh	r2, [r3, #32]
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	861a      	strh	r2, [r3, #48]	@ 0x30
        impl->cursorPos = 0; // Cursor has been moved to the end
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	2200      	movs	r2, #0
 8004a44:	869a      	strh	r2, [r3, #52]	@ 0x34
        return;
 8004a46:	e03f      	b.n	8004ac8 <onAutocompleteRequest+0x118>
    }

    // with multiple candidates when we already completed to common prefix
    // we show all candidates and print input again
    // we need to completely clear current line since it begins with invitation
    clearCurrentLine(cli);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 f843 	bl	8004ad4 <clearCurrentLine>

    for (int i = 0; i < impl->bindingsCount; ++i) {
 8004a4e:	2300      	movs	r3, #0
 8004a50:	61fb      	str	r3, [r7, #28]
 8004a52:	e021      	b.n	8004a98 <onAutocompleteRequest+0xe8>
        // autocomplete flag is set for all candidates by last call to
        // getAutocompletedCommand
        if (!(impl->bindingsFlags[i] & BINDING_FLAG_AUTOCOMPLETE))
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d014      	beq.n	8004a90 <onAutocompleteRequest+0xe0>
            continue;

        const char *name = impl->bindings[i].name;
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004a6a:	69fa      	ldr	r2, [r7, #28]
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	005b      	lsls	r3, r3, #1
 8004a70:	4413      	add	r3, r2
 8004a72:	00db      	lsls	r3, r3, #3
 8004a74:	440b      	add	r3, r1
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	617b      	str	r3, [r7, #20]

        writeToOutput(cli, name);
 8004a7a:	6979      	ldr	r1, [r7, #20]
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 f85e 	bl	8004b3e <writeToOutput>
        writeToOutput(cli, lineBreak);
 8004a82:	4b13      	ldr	r3, [pc, #76]	@ (8004ad0 <onAutocompleteRequest+0x120>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4619      	mov	r1, r3
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 f858 	bl	8004b3e <writeToOutput>
 8004a8e:	e000      	b.n	8004a92 <onAutocompleteRequest+0xe2>
            continue;
 8004a90:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	3301      	adds	r3, #1
 8004a96:	61fb      	str	r3, [r7, #28]
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	dbd7      	blt.n	8004a54 <onAutocompleteRequest+0xa4>
    }

    writeToOutput(cli, impl->invitation);
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f847 	bl	8004b3e <writeToOutput>
    writeToOutput(cli, impl->cmdBuffer);
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	69db      	ldr	r3, [r3, #28]
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f841 	bl	8004b3e <writeToOutput>

    impl->inputLineLength = impl->cmdSize;
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	8c1a      	ldrh	r2, [r3, #32]
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	861a      	strh	r2, [r3, #48]	@ 0x30
 8004ac4:	e000      	b.n	8004ac8 <onAutocompleteRequest+0x118>
        return;
 8004ac6:	bf00      	nop
}
 8004ac8:	3720      	adds	r7, #32
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	200000f8 	.word	0x200000f8

08004ad4 <clearCurrentLine>:

static void clearCurrentLine(EmbeddedCli *cli) {
 8004ad4:	b590      	push	{r4, r7, lr}
 8004ad6:	b087      	sub	sp, #28
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	613b      	str	r3, [r7, #16]
    size_t len = impl->inputLineLength + strlen(impl->invitation);
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8004ae6:	461c      	mov	r4, r3
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7fb fbcf 	bl	8000290 <strlen>
 8004af2:	4603      	mov	r3, r0
 8004af4:	4423      	add	r3, r4
 8004af6:	60fb      	str	r3, [r7, #12]

    cli->writeChar(cli, '\r');
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	210d      	movs	r1, #13
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 8004b02:	2300      	movs	r3, #0
 8004b04:	617b      	str	r3, [r7, #20]
 8004b06:	e007      	b.n	8004b18 <clearCurrentLine+0x44>
        cli->writeChar(cli, ' ');
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2120      	movs	r1, #32
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	3301      	adds	r3, #1
 8004b16:	617b      	str	r3, [r7, #20]
 8004b18:	697a      	ldr	r2, [r7, #20]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d3f3      	bcc.n	8004b08 <clearCurrentLine+0x34>
    }
    cli->writeChar(cli, '\r');
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	210d      	movs	r1, #13
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	4798      	blx	r3
    impl->inputLineLength = 0;
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	861a      	strh	r2, [r3, #48]	@ 0x30

    impl->cursorPos = 0;
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	2200      	movs	r2, #0
 8004b34:	869a      	strh	r2, [r3, #52]	@ 0x34
}
 8004b36:	bf00      	nop
 8004b38:	371c      	adds	r7, #28
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd90      	pop	{r4, r7, pc}

08004b3e <writeToOutput>:

static void writeToOutput(EmbeddedCli *cli, const char *str) {
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b084      	sub	sp, #16
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
 8004b46:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 8004b48:	6838      	ldr	r0, [r7, #0]
 8004b4a:	f7fb fba1 	bl	8000290 <strlen>
 8004b4e:	60b8      	str	r0, [r7, #8]

    for (size_t i = 0; i < len; ++i) {
 8004b50:	2300      	movs	r3, #0
 8004b52:	60fb      	str	r3, [r7, #12]
 8004b54:	e00b      	b.n	8004b6e <writeToOutput+0x30>
        cli->writeChar(cli, str[i]);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	6839      	ldr	r1, [r7, #0]
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	440a      	add	r2, r1
 8004b60:	7812      	ldrb	r2, [r2, #0]
 8004b62:	4611      	mov	r1, r2
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	60fb      	str	r3, [r7, #12]
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d3ef      	bcc.n	8004b56 <writeToOutput+0x18>
    }
}
 8004b76:	bf00      	nop
 8004b78:	bf00      	nop
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <moveCursor>:

static void moveCursor(EmbeddedCli* cli, uint16_t count, bool direction) {
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	460b      	mov	r3, r1
 8004b8a:	807b      	strh	r3, [r7, #2]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	707b      	strb	r3, [r7, #1]
    // Check if we need to send any command
    if (count == 0)
 8004b90:	887b      	ldrh	r3, [r7, #2]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d020      	beq.n	8004bd8 <moveCursor+0x58>
        return;

    // 5 = uint16_t max, 3 = escape sequence, 1 = string termination
    char escBuffer[5 + 3 + 1] = { 0 };
 8004b96:	f107 030c 	add.w	r3, r7, #12
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	601a      	str	r2, [r3, #0]
 8004b9e:	605a      	str	r2, [r3, #4]
 8004ba0:	721a      	strb	r2, [r3, #8]
    char dirChar = direction ? escSeqCursorRight[2] : escSeqCursorLeft[2];
 8004ba2:	787b      	ldrb	r3, [r7, #1]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d004      	beq.n	8004bb2 <moveCursor+0x32>
 8004ba8:	4b0d      	ldr	r3, [pc, #52]	@ (8004be0 <moveCursor+0x60>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	3302      	adds	r3, #2
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	e003      	b.n	8004bba <moveCursor+0x3a>
 8004bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8004be4 <moveCursor+0x64>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	3302      	adds	r3, #2
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	75fb      	strb	r3, [r7, #23]
    sprintf(escBuffer, "\x1B[%u%c", count, dirChar);
 8004bbc:	887a      	ldrh	r2, [r7, #2]
 8004bbe:	7dfb      	ldrb	r3, [r7, #23]
 8004bc0:	f107 000c 	add.w	r0, r7, #12
 8004bc4:	4908      	ldr	r1, [pc, #32]	@ (8004be8 <moveCursor+0x68>)
 8004bc6:	f008 fce7 	bl	800d598 <siprintf>
    writeToOutput(cli, escBuffer);
 8004bca:	f107 030c 	add.w	r3, r7, #12
 8004bce:	4619      	mov	r1, r3
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f7ff ffb4 	bl	8004b3e <writeToOutput>
 8004bd6:	e000      	b.n	8004bda <moveCursor+0x5a>
        return;
 8004bd8:	bf00      	nop
}
 8004bda:	3718      	adds	r7, #24
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	200000fc 	.word	0x200000fc
 8004be4:	20000100 	.word	0x20000100
 8004be8:	0801041c 	.word	0x0801041c

08004bec <isControlChar>:

static bool isControlChar(char c) {
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	71fb      	strb	r3, [r7, #7]
    return c == '\r' || c == '\n' || c == '\b' || c == '\t' || c == 0x7F;
 8004bf6:	79fb      	ldrb	r3, [r7, #7]
 8004bf8:	2b0d      	cmp	r3, #13
 8004bfa:	d00b      	beq.n	8004c14 <isControlChar+0x28>
 8004bfc:	79fb      	ldrb	r3, [r7, #7]
 8004bfe:	2b0a      	cmp	r3, #10
 8004c00:	d008      	beq.n	8004c14 <isControlChar+0x28>
 8004c02:	79fb      	ldrb	r3, [r7, #7]
 8004c04:	2b08      	cmp	r3, #8
 8004c06:	d005      	beq.n	8004c14 <isControlChar+0x28>
 8004c08:	79fb      	ldrb	r3, [r7, #7]
 8004c0a:	2b09      	cmp	r3, #9
 8004c0c:	d002      	beq.n	8004c14 <isControlChar+0x28>
 8004c0e:	79fb      	ldrb	r3, [r7, #7]
 8004c10:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c12:	d101      	bne.n	8004c18 <isControlChar+0x2c>
 8004c14:	2301      	movs	r3, #1
 8004c16:	e000      	b.n	8004c1a <isControlChar+0x2e>
 8004c18:	2300      	movs	r3, #0
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	b2db      	uxtb	r3, r3
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <isDisplayableChar>:

static bool isDisplayableChar(char c) {
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	4603      	mov	r3, r0
 8004c34:	71fb      	strb	r3, [r7, #7]
    return (c >= 32 && c <= 126);
 8004c36:	79fb      	ldrb	r3, [r7, #7]
 8004c38:	2b1f      	cmp	r3, #31
 8004c3a:	d904      	bls.n	8004c46 <isDisplayableChar+0x1a>
 8004c3c:	79fb      	ldrb	r3, [r7, #7]
 8004c3e:	2b7e      	cmp	r3, #126	@ 0x7e
 8004c40:	d801      	bhi.n	8004c46 <isDisplayableChar+0x1a>
 8004c42:	2301      	movs	r3, #1
 8004c44:	e000      	b.n	8004c48 <isDisplayableChar+0x1c>
 8004c46:	2300      	movs	r3, #0
 8004c48:	f003 0301 	and.w	r3, r3, #1
 8004c4c:	b2db      	uxtb	r3, r3
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr

08004c5a <fifoBufAvailable>:

static uint16_t fifoBufAvailable(FifoBuf *buffer) {
 8004c5a:	b480      	push	{r7}
 8004c5c:	b083      	sub	sp, #12
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
    if (buffer->back >= buffer->front)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	88da      	ldrh	r2, [r3, #6]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	889b      	ldrh	r3, [r3, #4]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d306      	bcc.n	8004c7c <fifoBufAvailable+0x22>
        return (uint16_t) (buffer->back - buffer->front);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	88da      	ldrh	r2, [r3, #6]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	889b      	ldrh	r3, [r3, #4]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	e009      	b.n	8004c90 <fifoBufAvailable+0x36>
    else
        return (uint16_t) (buffer->size - buffer->front + buffer->back);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	891a      	ldrh	r2, [r3, #8]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	889b      	ldrh	r3, [r3, #4]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	b29a      	uxth	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	88db      	ldrh	r3, [r3, #6]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	b29b      	uxth	r3, r3
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <fifoBufPop>:

static char fifoBufPop(FifoBuf *buffer) {
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
    char a = '\0';
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	73fb      	strb	r3, [r7, #15]
    if (buffer->front != buffer->back) {
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	889a      	ldrh	r2, [r3, #4]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	88db      	ldrh	r3, [r3, #6]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d014      	beq.n	8004cde <fifoBufPop+0x42>
        a = buffer->buf[buffer->front];
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	8892      	ldrh	r2, [r2, #4]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	73fb      	strb	r3, [r7, #15]
        buffer->front = (uint16_t) (buffer->front + 1) % buffer->size;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	889b      	ldrh	r3, [r3, #4]
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	8912      	ldrh	r2, [r2, #8]
 8004cce:	fbb3 f1f2 	udiv	r1, r3, r2
 8004cd2:	fb01 f202 	mul.w	r2, r1, r2
 8004cd6:	1a9b      	subs	r3, r3, r2
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	809a      	strh	r2, [r3, #4]
    }
    return a;
 8004cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3714      	adds	r7, #20
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <fifoBufPush>:

static bool fifoBufPush(FifoBuf *buffer, char a) {
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	70fb      	strb	r3, [r7, #3]
    uint16_t newBack = (uint16_t) (buffer->back + 1) % buffer->size;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	88db      	ldrh	r3, [r3, #6]
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	8912      	ldrh	r2, [r2, #8]
 8004d04:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d08:	fb01 f202 	mul.w	r2, r1, r2
 8004d0c:	1a9b      	subs	r3, r3, r2
 8004d0e:	81fb      	strh	r3, [r7, #14]
    if (newBack != buffer->front) {
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	889b      	ldrh	r3, [r3, #4]
 8004d14:	89fa      	ldrh	r2, [r7, #14]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d00b      	beq.n	8004d32 <fifoBufPush+0x46>
        buffer->buf[buffer->back] = a;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	88d2      	ldrh	r2, [r2, #6]
 8004d22:	4413      	add	r3, r2
 8004d24:	78fa      	ldrb	r2, [r7, #3]
 8004d26:	701a      	strb	r2, [r3, #0]
        buffer->back = newBack;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	89fa      	ldrh	r2, [r7, #14]
 8004d2c:	80da      	strh	r2, [r3, #6]
        return true;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e000      	b.n	8004d34 <fifoBufPush+0x48>
    }
    return false;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3714      	adds	r7, #20
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <historyPut>:

static bool historyPut(CliHistory *history, const char *str) {
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b088      	sub	sp, #32
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 8004d4a:	6838      	ldr	r0, [r7, #0]
 8004d4c:	f7fb faa0 	bl	8000290 <strlen>
 8004d50:	61b8      	str	r0, [r7, #24]
    // each item is ended with \0 so, need to have that much space at least
    if (history->bufferSize < len + 1)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	889b      	ldrh	r3, [r3, #4]
 8004d56:	461a      	mov	r2, r3
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d201      	bcs.n	8004d64 <historyPut+0x24>
        return false;
 8004d60:	2300      	movs	r3, #0
 8004d62:	e04d      	b.n	8004e00 <historyPut+0xc0>

    // remove str from history (if it's present) so we don't get duplicates
    historyRemove(history, str);
 8004d64:	6839      	ldr	r1, [r7, #0]
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 f86a 	bl	8004e40 <historyRemove>

    size_t usedSize;
    // remove old items if new one can't fit into buffer
    while (history->itemsCount > 0) {
 8004d6c:	e024      	b.n	8004db8 <historyPut+0x78>
        const char *item = historyGet(history, history->itemsCount);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	891b      	ldrh	r3, [r3, #8]
 8004d72:	4619      	mov	r1, r3
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 f847 	bl	8004e08 <historyGet>
 8004d7a:	6178      	str	r0, [r7, #20]
        size_t itemLen = strlen(item);
 8004d7c:	6978      	ldr	r0, [r7, #20]
 8004d7e:	f7fb fa87 	bl	8000290 <strlen>
 8004d82:	6138      	str	r0, [r7, #16]
        usedSize = ((size_t) (item - history->buf)) + itemLen + 1;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	4413      	add	r3, r2
 8004d92:	3301      	adds	r3, #1
 8004d94:	61fb      	str	r3, [r7, #28]

        size_t freeSpace = history->bufferSize - usedSize;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	889b      	ldrh	r3, [r3, #4]
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	60fb      	str	r3, [r7, #12]

        if (freeSpace >= len + 1)
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	3301      	adds	r3, #1
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d20a      	bcs.n	8004dc2 <historyPut+0x82>
            break;

        // space not enough, remove last element
        --history->itemsCount;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	891b      	ldrh	r3, [r3, #8]
 8004db0:	3b01      	subs	r3, #1
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	811a      	strh	r2, [r3, #8]
    while (history->itemsCount > 0) {
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	891b      	ldrh	r3, [r3, #8]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1d6      	bne.n	8004d6e <historyPut+0x2e>
 8004dc0:	e000      	b.n	8004dc4 <historyPut+0x84>
            break;
 8004dc2:	bf00      	nop
    }
    if (history->itemsCount > 0) {
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	891b      	ldrh	r3, [r3, #8]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d00a      	beq.n	8004de2 <historyPut+0xa2>
        // when history not empty, shift elements so new item is first
        memmove(&history->buf[len + 1], history->buf, usedSize);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	18d0      	adds	r0, r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	69fa      	ldr	r2, [r7, #28]
 8004ddc:	4619      	mov	r1, r3
 8004dde:	f008 fc40 	bl	800d662 <memmove>
    }
    memcpy(history->buf, str, len + 1);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6818      	ldr	r0, [r3, #0]
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	3301      	adds	r3, #1
 8004dea:	461a      	mov	r2, r3
 8004dec:	6839      	ldr	r1, [r7, #0]
 8004dee:	f008 fcde 	bl	800d7ae <memcpy>
    ++history->itemsCount;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	891b      	ldrh	r3, [r3, #8]
 8004df6:	3301      	adds	r3, #1
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	811a      	strh	r2, [r3, #8]

    return true;
 8004dfe:	2301      	movs	r3, #1
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3720      	adds	r7, #32
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <historyGet>:

static const char *historyGet(CliHistory *history, uint16_t item) {
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	460b      	mov	r3, r1
 8004e12:	807b      	strh	r3, [r7, #2]
    if (item == 0 || item > history->itemsCount)
 8004e14:	887b      	ldrh	r3, [r7, #2]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d004      	beq.n	8004e24 <historyGet+0x1c>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	891b      	ldrh	r3, [r3, #8]
 8004e1e:	887a      	ldrh	r2, [r7, #2]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d901      	bls.n	8004e28 <historyGet+0x20>
        return NULL;
 8004e24:	2300      	movs	r3, #0
 8004e26:	e007      	b.n	8004e38 <historyGet+0x30>

    // items are stored in the same way (separated by \0 and counted from 1),
    // so can use this call
    return embeddedCliGetToken(history->buf, item);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	887a      	ldrh	r2, [r7, #2]
 8004e2e:	4611      	mov	r1, r2
 8004e30:	4618      	mov	r0, r3
 8004e32:	f7ff f937 	bl	80040a4 <embeddedCliGetToken>
 8004e36:	4603      	mov	r3, r0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3708      	adds	r7, #8
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <historyRemove>:

static void historyRemove(CliHistory *history, const char *str) {
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
    if (str == NULL || history->itemsCount == 0)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d04c      	beq.n	8004eea <historyRemove+0xaa>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	891b      	ldrh	r3, [r3, #8]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d048      	beq.n	8004eea <historyRemove+0xaa>
        return;
    char *item = NULL;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	617b      	str	r3, [r7, #20]
    uint16_t itemPosition;
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	827b      	strh	r3, [r7, #18]
 8004e60:	e013      	b.n	8004e8a <historyRemove+0x4a>
        // items are stored in the same way (separated by \0 and counted from 1),
        // so can use this call
        item = embeddedCliGetTokenVariable(history->buf, itemPosition);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	8a7a      	ldrh	r2, [r7, #18]
 8004e68:	4611      	mov	r1, r2
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7ff f935 	bl	80040da <embeddedCliGetTokenVariable>
 8004e70:	6178      	str	r0, [r7, #20]
        if (strcmp(item, str) == 0) {
 8004e72:	6839      	ldr	r1, [r7, #0]
 8004e74:	6978      	ldr	r0, [r7, #20]
 8004e76:	f7fb f9ab 	bl	80001d0 <strcmp>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00a      	beq.n	8004e96 <historyRemove+0x56>
            break;
        }
        item = NULL;
 8004e80:	2300      	movs	r3, #0
 8004e82:	617b      	str	r3, [r7, #20]
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 8004e84:	8a7b      	ldrh	r3, [r7, #18]
 8004e86:	3301      	adds	r3, #1
 8004e88:	827b      	strh	r3, [r7, #18]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	891b      	ldrh	r3, [r3, #8]
 8004e8e:	8a7a      	ldrh	r2, [r7, #18]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d9e6      	bls.n	8004e62 <historyRemove+0x22>
 8004e94:	e000      	b.n	8004e98 <historyRemove+0x58>
            break;
 8004e96:	bf00      	nop
    }
    if (item == NULL)
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d027      	beq.n	8004eee <historyRemove+0xae>
        return;

    --history->itemsCount;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	891b      	ldrh	r3, [r3, #8]
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	811a      	strh	r2, [r3, #8]
    if (itemPosition == (history->itemsCount + 1)) {
 8004eaa:	8a7a      	ldrh	r2, [r7, #18]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	891b      	ldrh	r3, [r3, #8]
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d01d      	beq.n	8004ef2 <historyRemove+0xb2>
        // if this is a last element, nothing is remaining to move
        return;
    }

    size_t len = strlen(item);
 8004eb6:	6978      	ldr	r0, [r7, #20]
 8004eb8:	f7fb f9ea 	bl	8000290 <strlen>
 8004ebc:	60f8      	str	r0, [r7, #12]
    size_t remaining = (size_t) (history->bufferSize - (item + len + 1 - history->buf));
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	889b      	ldrh	r3, [r3, #4]
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	441a      	add	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	1acb      	subs	r3, r1, r3
 8004ed4:	60bb      	str	r3, [r7, #8]
    // move everything to the right of found item
    memmove(item, &item[len + 1], remaining);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	4413      	add	r3, r2
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	6978      	ldr	r0, [r7, #20]
 8004ee4:	f008 fbbd 	bl	800d662 <memmove>
 8004ee8:	e004      	b.n	8004ef4 <historyRemove+0xb4>
        return;
 8004eea:	bf00      	nop
 8004eec:	e002      	b.n	8004ef4 <historyRemove+0xb4>
        return;
 8004eee:	bf00      	nop
 8004ef0:	e000      	b.n	8004ef4 <historyRemove+0xb4>
        return;
 8004ef2:	bf00      	nop
}
 8004ef4:	3718      	adds	r7, #24
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <getTokenPosition>:

static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos) {
 8004efa:	b480      	push	{r7}
 8004efc:	b085      	sub	sp, #20
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
 8004f02:	460b      	mov	r3, r1
 8004f04:	807b      	strh	r3, [r7, #2]
    if (tokenizedStr == NULL || pos == 0)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d002      	beq.n	8004f12 <getTokenPosition+0x18>
 8004f0c:	887b      	ldrh	r3, [r7, #2]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d102      	bne.n	8004f18 <getTokenPosition+0x1e>
        return CLI_TOKEN_NPOS;
 8004f12:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004f16:	e028      	b.n	8004f6a <getTokenPosition+0x70>
    uint16_t i = 0;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	81fb      	strh	r3, [r7, #14]
    uint16_t tokenCount = 1;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	81bb      	strh	r3, [r7, #12]
    while (true) {
        if (tokenCount == pos)
 8004f20:	89ba      	ldrh	r2, [r7, #12]
 8004f22:	887b      	ldrh	r3, [r7, #2]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d013      	beq.n	8004f50 <getTokenPosition+0x56>
            break;

        if (tokenizedStr[i] == '\0') {
 8004f28:	89fb      	ldrh	r3, [r7, #14]
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d109      	bne.n	8004f48 <getTokenPosition+0x4e>
            ++tokenCount;
 8004f34:	89bb      	ldrh	r3, [r7, #12]
 8004f36:	3301      	adds	r3, #1
 8004f38:	81bb      	strh	r3, [r7, #12]
            if (tokenizedStr[i + 1] == '\0')
 8004f3a:	89fb      	ldrh	r3, [r7, #14]
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	4413      	add	r3, r2
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d005      	beq.n	8004f54 <getTokenPosition+0x5a>
                break;
        }

        ++i;
 8004f48:	89fb      	ldrh	r3, [r7, #14]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	81fb      	strh	r3, [r7, #14]
        if (tokenCount == pos)
 8004f4e:	e7e7      	b.n	8004f20 <getTokenPosition+0x26>
            break;
 8004f50:	bf00      	nop
 8004f52:	e000      	b.n	8004f56 <getTokenPosition+0x5c>
                break;
 8004f54:	bf00      	nop
    }

    if (tokenizedStr[i] != '\0')
 8004f56:	89fb      	ldrh	r3, [r7, #14]
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <getTokenPosition+0x6c>
        return i;
 8004f62:	89fb      	ldrh	r3, [r7, #14]
 8004f64:	e001      	b.n	8004f6a <getTokenPosition+0x70>
    else
        return CLI_TOKEN_NPOS;
 8004f66:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3714      	adds	r7, #20
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <findCategoryIndex>:

/*************************************************
 *                   Helper API                  *
 *************************************************/
static int findCategoryIndex(const char* cat, const char* categories[], int catCount) {
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b086      	sub	sp, #24
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	60f8      	str	r0, [r7, #12]
 8004f7e:	60b9      	str	r1, [r7, #8]
 8004f80:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < catCount; i++) {
 8004f82:	2300      	movs	r3, #0
 8004f84:	617b      	str	r3, [r7, #20]
 8004f86:	e010      	b.n	8004faa <findCategoryIndex+0x34>
        if (strcmp(cat, categories[i]) == 0) {
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	68ba      	ldr	r2, [r7, #8]
 8004f8e:	4413      	add	r3, r2
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4619      	mov	r1, r3
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	f7fb f91b 	bl	80001d0 <strcmp>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d101      	bne.n	8004fa4 <findCategoryIndex+0x2e>
            return i;
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	e008      	b.n	8004fb6 <findCategoryIndex+0x40>
    for (int i = 0; i < catCount; i++) {
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	617b      	str	r3, [r7, #20]
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	dbea      	blt.n	8004f88 <findCategoryIndex+0x12>
        }
    }
    return -1;
 8004fb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3718      	adds	r7, #24
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
	...

08004fc0 <printAlignedColumn>:

static void printAlignedColumn(EmbeddedCli *cli, const char *str, int colWidth) {
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
    int len = strlen(str);
 8004fcc:	68b8      	ldr	r0, [r7, #8]
 8004fce:	f7fb f95f 	bl	8000290 <strlen>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	613b      	str	r3, [r7, #16]
    writeToOutput(cli, str);
 8004fd6:	68b9      	ldr	r1, [r7, #8]
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f7ff fdb0 	bl	8004b3e <writeToOutput>
    for (int i = 0; i < colWidth - len; i++) {
 8004fde:	2300      	movs	r3, #0
 8004fe0:	617b      	str	r3, [r7, #20]
 8004fe2:	e006      	b.n	8004ff2 <printAlignedColumn+0x32>
        writeToOutput(cli, " ");
 8004fe4:	4908      	ldr	r1, [pc, #32]	@ (8005008 <printAlignedColumn+0x48>)
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f7ff fda9 	bl	8004b3e <writeToOutput>
    for (int i = 0; i < colWidth - len; i++) {
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	3301      	adds	r3, #1
 8004ff0:	617b      	str	r3, [r7, #20]
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	dbf2      	blt.n	8004fe4 <printAlignedColumn+0x24>
    }
}
 8004ffe:	bf00      	nop
 8005000:	bf00      	nop
 8005002:	3718      	adds	r7, #24
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	08010408 	.word	0x08010408

0800500c <CMD_Help>:
void CMD_Help(EmbeddedCli *cli, char *tokens, void *context) {
 800500c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005010:	b095      	sub	sp, #84	@ 0x54
 8005012:	af00      	add	r7, sp, #0
 8005014:	60f8      	str	r0, [r7, #12]
 8005016:	60b9      	str	r1, [r7, #8]
 8005018:	607a      	str	r2, [r7, #4]
    UNUSED(context);
    PREPARE_IMPL(cli);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	637b      	str	r3, [r7, #52]	@ 0x34

    if (impl->bindingsCount == 0) {
 8005020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005022:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005024:	2b00      	cmp	r3, #0
 8005026:	d10a      	bne.n	800503e <CMD_Help+0x32>
        writeToOutput(cli, "Help is not available");
 8005028:	498c      	ldr	r1, [pc, #560]	@ (800525c <CMD_Help+0x250>)
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f7ff fd87 	bl	8004b3e <writeToOutput>
        writeToOutput(cli, lineBreak);
 8005030:	4b8b      	ldr	r3, [pc, #556]	@ (8005260 <CMD_Help+0x254>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4619      	mov	r1, r3
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	f7ff fd81 	bl	8004b3e <writeToOutput>
        return;
 800503c:	e1ba      	b.n	80053b4 <CMD_Help+0x3a8>
    }

    uint16_t tokenCount = embeddedCliGetTokenCount(tokens);
 800503e:	68b8      	ldr	r0, [r7, #8]
 8005040:	f7ff f866 	bl	8004110 <embeddedCliGetTokenCount>
 8005044:	4603      	mov	r3, r0
 8005046:	867b      	strh	r3, [r7, #50]	@ 0x32
    if (tokenCount == 0) {
 8005048:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800504a:	2b00      	cmp	r3, #0
 800504c:	f040 80f6 	bne.w	800523c <CMD_Help+0x230>
 8005050:	466b      	mov	r3, sp
 8005052:	461e      	mov	r6, r3
        const int MAX_CAT = 32;
 8005054:	2320      	movs	r3, #32
 8005056:	62bb      	str	r3, [r7, #40]	@ 0x28
        const char* categories[MAX_CAT];
 8005058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800505a:	3b01      	subs	r3, #1
 800505c:	627b      	str	r3, [r7, #36]	@ 0x24
 800505e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005060:	2200      	movs	r2, #0
 8005062:	4698      	mov	r8, r3
 8005064:	4691      	mov	r9, r2
 8005066:	f04f 0200 	mov.w	r2, #0
 800506a:	f04f 0300 	mov.w	r3, #0
 800506e:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8005072:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8005076:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800507a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800507c:	2200      	movs	r2, #0
 800507e:	461c      	mov	r4, r3
 8005080:	4615      	mov	r5, r2
 8005082:	f04f 0200 	mov.w	r2, #0
 8005086:	f04f 0300 	mov.w	r3, #0
 800508a:	016b      	lsls	r3, r5, #5
 800508c:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8005090:	0162      	lsls	r2, r4, #5
 8005092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	3307      	adds	r3, #7
 8005098:	08db      	lsrs	r3, r3, #3
 800509a:	00db      	lsls	r3, r3, #3
 800509c:	ebad 0d03 	sub.w	sp, sp, r3
 80050a0:	466b      	mov	r3, sp
 80050a2:	3303      	adds	r3, #3
 80050a4:	089b      	lsrs	r3, r3, #2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	623b      	str	r3, [r7, #32]
        int catCount = 0;
 80050aa:	2300      	movs	r3, #0
 80050ac:	64fb      	str	r3, [r7, #76]	@ 0x4c

        for (int i = 0; i < impl->bindingsCount; i++) {
 80050ae:	2300      	movs	r3, #0
 80050b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050b2:	e02d      	b.n	8005110 <CMD_Help+0x104>
            const char* cat = impl->bindings[i].category ? impl->bindings[i].category : "Uncategorized";
 80050b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050b6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80050b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050ba:	4613      	mov	r3, r2
 80050bc:	005b      	lsls	r3, r3, #1
 80050be:	4413      	add	r3, r2
 80050c0:	00db      	lsls	r3, r3, #3
 80050c2:	440b      	add	r3, r1
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d009      	beq.n	80050de <CMD_Help+0xd2>
 80050ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050cc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80050ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050d0:	4613      	mov	r3, r2
 80050d2:	005b      	lsls	r3, r3, #1
 80050d4:	4413      	add	r3, r2
 80050d6:	00db      	lsls	r3, r3, #3
 80050d8:	440b      	add	r3, r1
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	e000      	b.n	80050e0 <CMD_Help+0xd4>
 80050de:	4b61      	ldr	r3, [pc, #388]	@ (8005264 <CMD_Help+0x258>)
 80050e0:	61bb      	str	r3, [r7, #24]
            int idx = findCategoryIndex(cat, categories, catCount);
 80050e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80050e4:	6a39      	ldr	r1, [r7, #32]
 80050e6:	69b8      	ldr	r0, [r7, #24]
 80050e8:	f7ff ff45 	bl	8004f76 <findCategoryIndex>
 80050ec:	6178      	str	r0, [r7, #20]
            if (idx < 0 && catCount < MAX_CAT) {
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	da0a      	bge.n	800510a <CMD_Help+0xfe>
 80050f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80050f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050f8:	429a      	cmp	r2, r3
 80050fa:	da06      	bge.n	800510a <CMD_Help+0xfe>
                categories[catCount++] = cat;
 80050fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050fe:	1c5a      	adds	r2, r3, #1
 8005100:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005102:	6a3a      	ldr	r2, [r7, #32]
 8005104:	69b9      	ldr	r1, [r7, #24]
 8005106:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (int i = 0; i < impl->bindingsCount; i++) {
 800510a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800510c:	3301      	adds	r3, #1
 800510e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005112:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005114:	461a      	mov	r2, r3
 8005116:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005118:	4293      	cmp	r3, r2
 800511a:	dbcb      	blt.n	80050b4 <CMD_Help+0xa8>
            }
        }

        for (int c = 0; c < catCount; c++) {
 800511c:	2300      	movs	r3, #0
 800511e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005120:	e085      	b.n	800522e <CMD_Help+0x222>
            writeToOutput(cli, "[");
 8005122:	4951      	ldr	r1, [pc, #324]	@ (8005268 <CMD_Help+0x25c>)
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f7ff fd0a 	bl	8004b3e <writeToOutput>
            writeToOutput(cli, categories[c]);
 800512a:	6a3b      	ldr	r3, [r7, #32]
 800512c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800512e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005132:	4619      	mov	r1, r3
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f7ff fd02 	bl	8004b3e <writeToOutput>
            writeToOutput(cli, "]");
 800513a:	494c      	ldr	r1, [pc, #304]	@ (800526c <CMD_Help+0x260>)
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f7ff fcfe 	bl	8004b3e <writeToOutput>
            writeToOutput(cli, lineBreak);
 8005142:	4b47      	ldr	r3, [pc, #284]	@ (8005260 <CMD_Help+0x254>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4619      	mov	r1, r3
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f7ff fcf8 	bl	8004b3e <writeToOutput>

            for (int i = 0; i < impl->bindingsCount; i++) {
 800514e:	2300      	movs	r3, #0
 8005150:	643b      	str	r3, [r7, #64]	@ 0x40
 8005152:	e05d      	b.n	8005210 <CMD_Help+0x204>
                const char* cmdCat = impl->bindings[i].category ? impl->bindings[i].category : "Uncategorized";
 8005154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005156:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005158:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800515a:	4613      	mov	r3, r2
 800515c:	005b      	lsls	r3, r3, #1
 800515e:	4413      	add	r3, r2
 8005160:	00db      	lsls	r3, r3, #3
 8005162:	440b      	add	r3, r1
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d009      	beq.n	800517e <CMD_Help+0x172>
 800516a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800516c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800516e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005170:	4613      	mov	r3, r2
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	4413      	add	r3, r2
 8005176:	00db      	lsls	r3, r3, #3
 8005178:	440b      	add	r3, r1
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	e000      	b.n	8005180 <CMD_Help+0x174>
 800517e:	4b39      	ldr	r3, [pc, #228]	@ (8005264 <CMD_Help+0x258>)
 8005180:	61fb      	str	r3, [r7, #28]
                if (strcmp(cmdCat, categories[c]) == 0) {
 8005182:	6a3b      	ldr	r3, [r7, #32]
 8005184:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800518a:	4619      	mov	r1, r3
 800518c:	69f8      	ldr	r0, [r7, #28]
 800518e:	f7fb f81f 	bl	80001d0 <strcmp>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d138      	bne.n	800520a <CMD_Help+0x1fe>
                	writeToOutput(cli, "    ");
 8005198:	4935      	ldr	r1, [pc, #212]	@ (8005270 <CMD_Help+0x264>)
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	f7ff fccf 	bl	8004b3e <writeToOutput>
                	printAlignedColumn(cli, impl->bindings[i].name, CMD_NAME_COL_WIDTH);
 80051a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051a2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80051a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051a6:	4613      	mov	r3, r2
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	4413      	add	r3, r2
 80051ac:	00db      	lsls	r3, r3, #3
 80051ae:	440b      	add	r3, r1
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	2210      	movs	r2, #16
 80051b4:	4619      	mov	r1, r3
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f7ff ff02 	bl	8004fc0 <printAlignedColumn>
                	writeToOutput(cli, "| ");
 80051bc:	492d      	ldr	r1, [pc, #180]	@ (8005274 <CMD_Help+0x268>)
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f7ff fcbd 	bl	8004b3e <writeToOutput>
                	if (impl->bindings[i].help) {
 80051c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051c6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80051c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051ca:	4613      	mov	r3, r2
 80051cc:	005b      	lsls	r3, r3, #1
 80051ce:	4413      	add	r3, r2
 80051d0:	00db      	lsls	r3, r3, #3
 80051d2:	440b      	add	r3, r1
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00d      	beq.n	80051f6 <CMD_Help+0x1ea>
                	    writeToOutput(cli, impl->bindings[i].help);
 80051da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051dc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80051de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051e0:	4613      	mov	r3, r2
 80051e2:	005b      	lsls	r3, r3, #1
 80051e4:	4413      	add	r3, r2
 80051e6:	00db      	lsls	r3, r3, #3
 80051e8:	440b      	add	r3, r1
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	4619      	mov	r1, r3
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f7ff fca5 	bl	8004b3e <writeToOutput>
 80051f4:	e003      	b.n	80051fe <CMD_Help+0x1f2>
                	} else {
                	    writeToOutput(cli, "(no help)");
 80051f6:	4920      	ldr	r1, [pc, #128]	@ (8005278 <CMD_Help+0x26c>)
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f7ff fca0 	bl	8004b3e <writeToOutput>
                	}
                	writeToOutput(cli, lineBreak);
 80051fe:	4b18      	ldr	r3, [pc, #96]	@ (8005260 <CMD_Help+0x254>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4619      	mov	r1, r3
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	f7ff fc9a 	bl	8004b3e <writeToOutput>
            for (int i = 0; i < impl->bindingsCount; i++) {
 800520a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800520c:	3301      	adds	r3, #1
 800520e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005212:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005214:	461a      	mov	r2, r3
 8005216:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005218:	4293      	cmp	r3, r2
 800521a:	db9b      	blt.n	8005154 <CMD_Help+0x148>
                }
            }
            writeToOutput(cli, lineBreak);
 800521c:	4b10      	ldr	r3, [pc, #64]	@ (8005260 <CMD_Help+0x254>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4619      	mov	r1, r3
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f7ff fc8b 	bl	8004b3e <writeToOutput>
        for (int c = 0; c < catCount; c++) {
 8005228:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800522a:	3301      	adds	r3, #1
 800522c:	647b      	str	r3, [r7, #68]	@ 0x44
 800522e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005230:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005232:	429a      	cmp	r2, r3
 8005234:	f6ff af75 	blt.w	8005122 <CMD_Help+0x116>
 8005238:	46b5      	mov	sp, r6
 800523a:	e0bb      	b.n	80053b4 <CMD_Help+0x3a8>
        }
    } else if (tokenCount == 1) {
 800523c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800523e:	2b01      	cmp	r3, #1
 8005240:	f040 80ae 	bne.w	80053a0 <CMD_Help+0x394>
        const char *cmdName = embeddedCliGetToken(tokens, 1);
 8005244:	2101      	movs	r1, #1
 8005246:	68b8      	ldr	r0, [r7, #8]
 8005248:	f7fe ff2c 	bl	80040a4 <embeddedCliGetToken>
 800524c:	62f8      	str	r0, [r7, #44]	@ 0x2c
        bool found = false;
 800524e:	2300      	movs	r3, #0
 8005250:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8005254:	2300      	movs	r3, #0
 8005256:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005258:	e08f      	b.n	800537a <CMD_Help+0x36e>
 800525a:	bf00      	nop
 800525c:	08010424 	.word	0x08010424
 8005260:	200000f8 	.word	0x200000f8
 8005264:	0801043c 	.word	0x0801043c
 8005268:	0801044c 	.word	0x0801044c
 800526c:	08010450 	.word	0x08010450
 8005270:	08010454 	.word	0x08010454
 8005274:	0801045c 	.word	0x0801045c
 8005278:	08010460 	.word	0x08010460
            if (strcmp(impl->bindings[i].name, cmdName) == 0) {
 800527c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800527e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005280:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005282:	4613      	mov	r3, r2
 8005284:	005b      	lsls	r3, r3, #1
 8005286:	4413      	add	r3, r2
 8005288:	00db      	lsls	r3, r3, #3
 800528a:	440b      	add	r3, r1
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005290:	4618      	mov	r0, r3
 8005292:	f7fa ff9d 	bl	80001d0 <strcmp>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d16b      	bne.n	8005374 <CMD_Help+0x368>
                found = true;
 800529c:	2301      	movs	r3, #1
 800529e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                writeToOutput(cli, "Command: ");
 80052a2:	4946      	ldr	r1, [pc, #280]	@ (80053bc <CMD_Help+0x3b0>)
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f7ff fc4a 	bl	8004b3e <writeToOutput>
                writeToOutput(cli, impl->bindings[i].name);
 80052aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052ac:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80052ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80052b0:	4613      	mov	r3, r2
 80052b2:	005b      	lsls	r3, r3, #1
 80052b4:	4413      	add	r3, r2
 80052b6:	00db      	lsls	r3, r3, #3
 80052b8:	440b      	add	r3, r1
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	4619      	mov	r1, r3
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f7ff fc3d 	bl	8004b3e <writeToOutput>
                writeToOutput(cli, lineBreak);
 80052c4:	4b3e      	ldr	r3, [pc, #248]	@ (80053c0 <CMD_Help+0x3b4>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4619      	mov	r1, r3
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f7ff fc37 	bl	8004b3e <writeToOutput>

                writeToOutput(cli, "Category: ");
 80052d0:	493c      	ldr	r1, [pc, #240]	@ (80053c4 <CMD_Help+0x3b8>)
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f7ff fc33 	bl	8004b3e <writeToOutput>
                writeToOutput(cli, impl->bindings[i].category ? impl->bindings[i].category : "Uncategorized");
 80052d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052da:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80052dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80052de:	4613      	mov	r3, r2
 80052e0:	005b      	lsls	r3, r3, #1
 80052e2:	4413      	add	r3, r2
 80052e4:	00db      	lsls	r3, r3, #3
 80052e6:	440b      	add	r3, r1
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d009      	beq.n	8005302 <CMD_Help+0x2f6>
 80052ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052f0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80052f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80052f4:	4613      	mov	r3, r2
 80052f6:	005b      	lsls	r3, r3, #1
 80052f8:	4413      	add	r3, r2
 80052fa:	00db      	lsls	r3, r3, #3
 80052fc:	440b      	add	r3, r1
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	e000      	b.n	8005304 <CMD_Help+0x2f8>
 8005302:	4b31      	ldr	r3, [pc, #196]	@ (80053c8 <CMD_Help+0x3bc>)
 8005304:	4619      	mov	r1, r3
 8005306:	68f8      	ldr	r0, [r7, #12]
 8005308:	f7ff fc19 	bl	8004b3e <writeToOutput>
                writeToOutput(cli, lineBreak);
 800530c:	4b2c      	ldr	r3, [pc, #176]	@ (80053c0 <CMD_Help+0x3b4>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4619      	mov	r1, r3
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f7ff fc13 	bl	8004b3e <writeToOutput>

                if (impl->bindings[i].help) {
 8005318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800531a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800531c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800531e:	4613      	mov	r3, r2
 8005320:	005b      	lsls	r3, r3, #1
 8005322:	4413      	add	r3, r2
 8005324:	00db      	lsls	r3, r3, #3
 8005326:	440b      	add	r3, r1
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d017      	beq.n	800535e <CMD_Help+0x352>
                    writeToOutput(cli, "Help: ");
 800532e:	4927      	ldr	r1, [pc, #156]	@ (80053cc <CMD_Help+0x3c0>)
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f7ff fc04 	bl	8004b3e <writeToOutput>
                    writeToOutput(cli, impl->bindings[i].help);
 8005336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005338:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800533a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800533c:	4613      	mov	r3, r2
 800533e:	005b      	lsls	r3, r3, #1
 8005340:	4413      	add	r3, r2
 8005342:	00db      	lsls	r3, r3, #3
 8005344:	440b      	add	r3, r1
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	4619      	mov	r1, r3
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	f7ff fbf7 	bl	8004b3e <writeToOutput>
                    writeToOutput(cli, lineBreak);
 8005350:	4b1b      	ldr	r3, [pc, #108]	@ (80053c0 <CMD_Help+0x3b4>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4619      	mov	r1, r3
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f7ff fbf1 	bl	8004b3e <writeToOutput>
                } else {
                    writeToOutput(cli, "(no help)");
                    writeToOutput(cli, lineBreak);
                }
                break;
 800535c:	e014      	b.n	8005388 <CMD_Help+0x37c>
                    writeToOutput(cli, "(no help)");
 800535e:	491c      	ldr	r1, [pc, #112]	@ (80053d0 <CMD_Help+0x3c4>)
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f7ff fbec 	bl	8004b3e <writeToOutput>
                    writeToOutput(cli, lineBreak);
 8005366:	4b16      	ldr	r3, [pc, #88]	@ (80053c0 <CMD_Help+0x3b4>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4619      	mov	r1, r3
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f7ff fbe6 	bl	8004b3e <writeToOutput>
                break;
 8005372:	e009      	b.n	8005388 <CMD_Help+0x37c>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8005374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005376:	3301      	adds	r3, #1
 8005378:	63bb      	str	r3, [r7, #56]	@ 0x38
 800537a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800537c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800537e:	461a      	mov	r2, r3
 8005380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005382:	4293      	cmp	r3, r2
 8005384:	f6ff af7a 	blt.w	800527c <CMD_Help+0x270>
            }
        }
        if (!found) {
 8005388:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800538c:	f083 0301 	eor.w	r3, r3, #1
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00e      	beq.n	80053b4 <CMD_Help+0x3a8>
            onUnknownCommand(cli, cmdName);
 8005396:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f000 f81d 	bl	80053d8 <onUnknownCommand>
 800539e:	e009      	b.n	80053b4 <CMD_Help+0x3a8>
        }
    } else {
        writeToOutput(cli, "Command \"help\" receives one or zero arguments");
 80053a0:	490c      	ldr	r1, [pc, #48]	@ (80053d4 <CMD_Help+0x3c8>)
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	f7ff fbcb 	bl	8004b3e <writeToOutput>
        writeToOutput(cli, lineBreak);
 80053a8:	4b05      	ldr	r3, [pc, #20]	@ (80053c0 <CMD_Help+0x3b4>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4619      	mov	r1, r3
 80053ae:	68f8      	ldr	r0, [r7, #12]
 80053b0:	f7ff fbc5 	bl	8004b3e <writeToOutput>
    }
}
 80053b4:	3754      	adds	r7, #84	@ 0x54
 80053b6:	46bd      	mov	sp, r7
 80053b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80053bc:	0801046c 	.word	0x0801046c
 80053c0:	200000f8 	.word	0x200000f8
 80053c4:	08010478 	.word	0x08010478
 80053c8:	0801043c 	.word	0x0801043c
 80053cc:	08010484 	.word	0x08010484
 80053d0:	08010460 	.word	0x08010460
 80053d4:	0801048c 	.word	0x0801048c

080053d8 <onUnknownCommand>:

static void onUnknownCommand(EmbeddedCli *cli, const char *name) {
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
    writeToOutput(cli, "Unknown command: \"");
 80053e2:	490b      	ldr	r1, [pc, #44]	@ (8005410 <onUnknownCommand+0x38>)
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f7ff fbaa 	bl	8004b3e <writeToOutput>
    writeToOutput(cli, name);
 80053ea:	6839      	ldr	r1, [r7, #0]
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f7ff fba6 	bl	8004b3e <writeToOutput>
    writeToOutput(cli, "\". Write \"help\" for a list of available commands");
 80053f2:	4908      	ldr	r1, [pc, #32]	@ (8005414 <onUnknownCommand+0x3c>)
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f7ff fba2 	bl	8004b3e <writeToOutput>
    writeToOutput(cli, lineBreak);
 80053fa:	4b07      	ldr	r3, [pc, #28]	@ (8005418 <onUnknownCommand+0x40>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4619      	mov	r1, r3
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f7ff fb9c 	bl	8004b3e <writeToOutput>
}
 8005406:	bf00      	nop
 8005408:	3708      	adds	r7, #8
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	080104bc 	.word	0x080104bc
 8005414:	080104d0 	.word	0x080104d0
 8005418:	200000f8 	.word	0x200000f8

0800541c <SoftTime_Task_Update>:
		SoftTime_Task_Update,                // taskFunction;
		0							//taskTick
	},
};

void SoftTime_Task_Update(void) {
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
    s_RealTimeClock_context.second++;
 8005422:	4b5b      	ldr	r3, [pc, #364]	@ (8005590 <SoftTime_Task_Update+0x174>)
 8005424:	795b      	ldrb	r3, [r3, #5]
 8005426:	3301      	adds	r3, #1
 8005428:	b2da      	uxtb	r2, r3
 800542a:	4b59      	ldr	r3, [pc, #356]	@ (8005590 <SoftTime_Task_Update+0x174>)
 800542c:	715a      	strb	r2, [r3, #5]
    if (s_RealTimeClock_context.second >= 60) {
 800542e:	4b58      	ldr	r3, [pc, #352]	@ (8005590 <SoftTime_Task_Update+0x174>)
 8005430:	795b      	ldrb	r3, [r3, #5]
 8005432:	2b3b      	cmp	r3, #59	@ 0x3b
 8005434:	d97a      	bls.n	800552c <SoftTime_Task_Update+0x110>
        s_RealTimeClock_context.second = 0;
 8005436:	4b56      	ldr	r3, [pc, #344]	@ (8005590 <SoftTime_Task_Update+0x174>)
 8005438:	2200      	movs	r2, #0
 800543a:	715a      	strb	r2, [r3, #5]
        s_RealTimeClock_context.minute++;
 800543c:	4b54      	ldr	r3, [pc, #336]	@ (8005590 <SoftTime_Task_Update+0x174>)
 800543e:	791b      	ldrb	r3, [r3, #4]
 8005440:	3301      	adds	r3, #1
 8005442:	b2da      	uxtb	r2, r3
 8005444:	4b52      	ldr	r3, [pc, #328]	@ (8005590 <SoftTime_Task_Update+0x174>)
 8005446:	711a      	strb	r2, [r3, #4]
        if (s_RealTimeClock_context.minute >= 60) {
 8005448:	4b51      	ldr	r3, [pc, #324]	@ (8005590 <SoftTime_Task_Update+0x174>)
 800544a:	791b      	ldrb	r3, [r3, #4]
 800544c:	2b3b      	cmp	r3, #59	@ 0x3b
 800544e:	d96d      	bls.n	800552c <SoftTime_Task_Update+0x110>
            s_RealTimeClock_context.minute = 0;
 8005450:	4b4f      	ldr	r3, [pc, #316]	@ (8005590 <SoftTime_Task_Update+0x174>)
 8005452:	2200      	movs	r2, #0
 8005454:	711a      	strb	r2, [r3, #4]
            s_RealTimeClock_context.hour++;
 8005456:	4b4e      	ldr	r3, [pc, #312]	@ (8005590 <SoftTime_Task_Update+0x174>)
 8005458:	78db      	ldrb	r3, [r3, #3]
 800545a:	3301      	adds	r3, #1
 800545c:	b2da      	uxtb	r2, r3
 800545e:	4b4c      	ldr	r3, [pc, #304]	@ (8005590 <SoftTime_Task_Update+0x174>)
 8005460:	70da      	strb	r2, [r3, #3]
            if (s_RealTimeClock_context.hour >= 24) {
 8005462:	4b4b      	ldr	r3, [pc, #300]	@ (8005590 <SoftTime_Task_Update+0x174>)
 8005464:	78db      	ldrb	r3, [r3, #3]
 8005466:	2b17      	cmp	r3, #23
 8005468:	d960      	bls.n	800552c <SoftTime_Task_Update+0x110>
                s_RealTimeClock_context.hour = 0;
 800546a:	4b49      	ldr	r3, [pc, #292]	@ (8005590 <SoftTime_Task_Update+0x174>)
 800546c:	2200      	movs	r2, #0
 800546e:	70da      	strb	r2, [r3, #3]
                s_RealTimeClock_context.day++;
 8005470:	4b47      	ldr	r3, [pc, #284]	@ (8005590 <SoftTime_Task_Update+0x174>)
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	3301      	adds	r3, #1
 8005476:	b2da      	uxtb	r2, r3
 8005478:	4b45      	ldr	r3, [pc, #276]	@ (8005590 <SoftTime_Task_Update+0x174>)
 800547a:	701a      	strb	r2, [r3, #0]

                static const uint8_t daysInMonth[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
                uint8_t leapYear = ((s_RealTimeClock_context.year % 4 == 0) &&
 800547c:	4b44      	ldr	r3, [pc, #272]	@ (8005590 <SoftTime_Task_Update+0x174>)
 800547e:	789b      	ldrb	r3, [r3, #2]
 8005480:	f003 0303 	and.w	r3, r3, #3
 8005484:	b2db      	uxtb	r3, r3
                                   ((s_RealTimeClock_context.year % 100 != 0) ||
                                		   (s_RealTimeClock_context.year % 400 == 0))) ? 1 : 0;
 8005486:	2b00      	cmp	r3, #0
 8005488:	d11e      	bne.n	80054c8 <SoftTime_Task_Update+0xac>
                                   ((s_RealTimeClock_context.year % 100 != 0) ||
 800548a:	4b41      	ldr	r3, [pc, #260]	@ (8005590 <SoftTime_Task_Update+0x174>)
 800548c:	789b      	ldrb	r3, [r3, #2]
 800548e:	4a41      	ldr	r2, [pc, #260]	@ (8005594 <SoftTime_Task_Update+0x178>)
 8005490:	fba2 1203 	umull	r1, r2, r2, r3
 8005494:	0952      	lsrs	r2, r2, #5
 8005496:	2164      	movs	r1, #100	@ 0x64
 8005498:	fb01 f202 	mul.w	r2, r1, r2
 800549c:	1a9b      	subs	r3, r3, r2
 800549e:	b2db      	uxtb	r3, r3
                                		   (s_RealTimeClock_context.year % 400 == 0))) ? 1 : 0;
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d10f      	bne.n	80054c4 <SoftTime_Task_Update+0xa8>
 80054a4:	4b3a      	ldr	r3, [pc, #232]	@ (8005590 <SoftTime_Task_Update+0x174>)
 80054a6:	789b      	ldrb	r3, [r3, #2]
 80054a8:	461a      	mov	r2, r3
 80054aa:	4b3a      	ldr	r3, [pc, #232]	@ (8005594 <SoftTime_Task_Update+0x178>)
 80054ac:	fb83 1302 	smull	r1, r3, r3, r2
 80054b0:	11d9      	asrs	r1, r3, #7
 80054b2:	17d3      	asrs	r3, r2, #31
 80054b4:	1acb      	subs	r3, r1, r3
 80054b6:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80054ba:	fb01 f303 	mul.w	r3, r1, r3
 80054be:	1ad3      	subs	r3, r2, r3
                                   ((s_RealTimeClock_context.year % 100 != 0) ||
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d101      	bne.n	80054c8 <SoftTime_Task_Update+0xac>
                                		   (s_RealTimeClock_context.year % 400 == 0))) ? 1 : 0;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e000      	b.n	80054ca <SoftTime_Task_Update+0xae>
 80054c8:	2300      	movs	r3, #0
                uint8_t leapYear = ((s_RealTimeClock_context.year % 4 == 0) &&
 80054ca:	71fb      	strb	r3, [r7, #7]

                uint8_t maxDays =
                		(s_RealTimeClock_context.month == 2) ? (28 + leapYear) : daysInMonth[s_RealTimeClock_context.month - 1];
 80054cc:	4b30      	ldr	r3, [pc, #192]	@ (8005590 <SoftTime_Task_Update+0x174>)
 80054ce:	785b      	ldrb	r3, [r3, #1]
                uint8_t maxDays =
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d103      	bne.n	80054dc <SoftTime_Task_Update+0xc0>
 80054d4:	79fb      	ldrb	r3, [r7, #7]
 80054d6:	331c      	adds	r3, #28
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	e004      	b.n	80054e6 <SoftTime_Task_Update+0xca>
                		(s_RealTimeClock_context.month == 2) ? (28 + leapYear) : daysInMonth[s_RealTimeClock_context.month - 1];
 80054dc:	4b2c      	ldr	r3, [pc, #176]	@ (8005590 <SoftTime_Task_Update+0x174>)
 80054de:	785b      	ldrb	r3, [r3, #1]
 80054e0:	3b01      	subs	r3, #1
                uint8_t maxDays =
 80054e2:	4a2d      	ldr	r2, [pc, #180]	@ (8005598 <SoftTime_Task_Update+0x17c>)
 80054e4:	5cd3      	ldrb	r3, [r2, r3]
 80054e6:	71bb      	strb	r3, [r7, #6]

                if (s_RealTimeClock_context.day > maxDays) {
 80054e8:	4b29      	ldr	r3, [pc, #164]	@ (8005590 <SoftTime_Task_Update+0x174>)
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	79ba      	ldrb	r2, [r7, #6]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d21c      	bcs.n	800552c <SoftTime_Task_Update+0x110>
                    s_RealTimeClock_context.day = 1;
 80054f2:	4b27      	ldr	r3, [pc, #156]	@ (8005590 <SoftTime_Task_Update+0x174>)
 80054f4:	2201      	movs	r2, #1
 80054f6:	701a      	strb	r2, [r3, #0]
                    s_RealTimeClock_context.month++;
 80054f8:	4b25      	ldr	r3, [pc, #148]	@ (8005590 <SoftTime_Task_Update+0x174>)
 80054fa:	785b      	ldrb	r3, [r3, #1]
 80054fc:	3301      	adds	r3, #1
 80054fe:	b2da      	uxtb	r2, r3
 8005500:	4b23      	ldr	r3, [pc, #140]	@ (8005590 <SoftTime_Task_Update+0x174>)
 8005502:	705a      	strb	r2, [r3, #1]
                    if (s_RealTimeClock_context.month > 12) {
 8005504:	4b22      	ldr	r3, [pc, #136]	@ (8005590 <SoftTime_Task_Update+0x174>)
 8005506:	785b      	ldrb	r3, [r3, #1]
 8005508:	2b0c      	cmp	r3, #12
 800550a:	d90f      	bls.n	800552c <SoftTime_Task_Update+0x110>
                        s_RealTimeClock_context.month = 1;
 800550c:	4b20      	ldr	r3, [pc, #128]	@ (8005590 <SoftTime_Task_Update+0x174>)
 800550e:	2201      	movs	r2, #1
 8005510:	705a      	strb	r2, [r3, #1]
                        s_RealTimeClock_context.year++;
 8005512:	4b1f      	ldr	r3, [pc, #124]	@ (8005590 <SoftTime_Task_Update+0x174>)
 8005514:	789b      	ldrb	r3, [r3, #2]
 8005516:	3301      	adds	r3, #1
 8005518:	b2da      	uxtb	r2, r3
 800551a:	4b1d      	ldr	r3, [pc, #116]	@ (8005590 <SoftTime_Task_Update+0x174>)
 800551c:	709a      	strb	r2, [r3, #2]
                        if (s_RealTimeClock_context.year > 99) {
 800551e:	4b1c      	ldr	r3, [pc, #112]	@ (8005590 <SoftTime_Task_Update+0x174>)
 8005520:	789b      	ldrb	r3, [r3, #2]
 8005522:	2b63      	cmp	r3, #99	@ 0x63
 8005524:	d902      	bls.n	800552c <SoftTime_Task_Update+0x110>
                            s_RealTimeClock_context.year = 0;
 8005526:	4b1a      	ldr	r3, [pc, #104]	@ (8005590 <SoftTime_Task_Update+0x174>)
 8005528:	2200      	movs	r2, #0
 800552a:	709a      	strb	r2, [r3, #2]
                }
            }
        }
    }

    s_WorkingTimeClock_context.seconds++;
 800552c:	4b1b      	ldr	r3, [pc, #108]	@ (800559c <SoftTime_Task_Update+0x180>)
 800552e:	799b      	ldrb	r3, [r3, #6]
 8005530:	3301      	adds	r3, #1
 8005532:	b2da      	uxtb	r2, r3
 8005534:	4b19      	ldr	r3, [pc, #100]	@ (800559c <SoftTime_Task_Update+0x180>)
 8005536:	719a      	strb	r2, [r3, #6]
    if (s_WorkingTimeClock_context.seconds >= 60) {
 8005538:	4b18      	ldr	r3, [pc, #96]	@ (800559c <SoftTime_Task_Update+0x180>)
 800553a:	799b      	ldrb	r3, [r3, #6]
 800553c:	2b3b      	cmp	r3, #59	@ 0x3b
 800553e:	d921      	bls.n	8005584 <SoftTime_Task_Update+0x168>
        s_WorkingTimeClock_context.seconds = 0;
 8005540:	4b16      	ldr	r3, [pc, #88]	@ (800559c <SoftTime_Task_Update+0x180>)
 8005542:	2200      	movs	r2, #0
 8005544:	719a      	strb	r2, [r3, #6]
        s_WorkingTimeClock_context.minutes++;
 8005546:	4b15      	ldr	r3, [pc, #84]	@ (800559c <SoftTime_Task_Update+0x180>)
 8005548:	795b      	ldrb	r3, [r3, #5]
 800554a:	3301      	adds	r3, #1
 800554c:	b2da      	uxtb	r2, r3
 800554e:	4b13      	ldr	r3, [pc, #76]	@ (800559c <SoftTime_Task_Update+0x180>)
 8005550:	715a      	strb	r2, [r3, #5]
        if (s_WorkingTimeClock_context.minutes >= 60) {
 8005552:	4b12      	ldr	r3, [pc, #72]	@ (800559c <SoftTime_Task_Update+0x180>)
 8005554:	795b      	ldrb	r3, [r3, #5]
 8005556:	2b3b      	cmp	r3, #59	@ 0x3b
 8005558:	d914      	bls.n	8005584 <SoftTime_Task_Update+0x168>
            s_WorkingTimeClock_context.minutes = 0;
 800555a:	4b10      	ldr	r3, [pc, #64]	@ (800559c <SoftTime_Task_Update+0x180>)
 800555c:	2200      	movs	r2, #0
 800555e:	715a      	strb	r2, [r3, #5]
            s_WorkingTimeClock_context.hours++;
 8005560:	4b0e      	ldr	r3, [pc, #56]	@ (800559c <SoftTime_Task_Update+0x180>)
 8005562:	791b      	ldrb	r3, [r3, #4]
 8005564:	3301      	adds	r3, #1
 8005566:	b2da      	uxtb	r2, r3
 8005568:	4b0c      	ldr	r3, [pc, #48]	@ (800559c <SoftTime_Task_Update+0x180>)
 800556a:	711a      	strb	r2, [r3, #4]
            if (s_WorkingTimeClock_context.hours >= 24) {
 800556c:	4b0b      	ldr	r3, [pc, #44]	@ (800559c <SoftTime_Task_Update+0x180>)
 800556e:	791b      	ldrb	r3, [r3, #4]
 8005570:	2b17      	cmp	r3, #23
 8005572:	d907      	bls.n	8005584 <SoftTime_Task_Update+0x168>
                s_WorkingTimeClock_context.hours = 0;
 8005574:	4b09      	ldr	r3, [pc, #36]	@ (800559c <SoftTime_Task_Update+0x180>)
 8005576:	2200      	movs	r2, #0
 8005578:	711a      	strb	r2, [r3, #4]
                s_WorkingTimeClock_context.days++;
 800557a:	4b08      	ldr	r3, [pc, #32]	@ (800559c <SoftTime_Task_Update+0x180>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	3301      	adds	r3, #1
 8005580:	4a06      	ldr	r2, [pc, #24]	@ (800559c <SoftTime_Task_Update+0x180>)
 8005582:	6013      	str	r3, [r2, #0]
            }
        }
    }
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr
 8005590:	20000114 	.word	0x20000114
 8005594:	51eb851f 	.word	0x51eb851f
 8005598:	080107f4 	.word	0x080107f4
 800559c:	20005a44 	.word	0x20005a44

080055a0 <SoftTime_CreateTask>:

void SoftTime_CreateTask(void) {
 80055a0:	b580      	push	{r7, lr}
 80055a2:	af00      	add	r7, sp, #0
    s_RealTimeClock_context.year = 0;  // 2000
 80055a4:	4b11      	ldr	r3, [pc, #68]	@ (80055ec <SoftTime_CreateTask+0x4c>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	709a      	strb	r2, [r3, #2]
    s_RealTimeClock_context.month = 1; // January
 80055aa:	4b10      	ldr	r3, [pc, #64]	@ (80055ec <SoftTime_CreateTask+0x4c>)
 80055ac:	2201      	movs	r2, #1
 80055ae:	705a      	strb	r2, [r3, #1]
    s_RealTimeClock_context.day = 1;
 80055b0:	4b0e      	ldr	r3, [pc, #56]	@ (80055ec <SoftTime_CreateTask+0x4c>)
 80055b2:	2201      	movs	r2, #1
 80055b4:	701a      	strb	r2, [r3, #0]
    s_RealTimeClock_context.hour = 0;
 80055b6:	4b0d      	ldr	r3, [pc, #52]	@ (80055ec <SoftTime_CreateTask+0x4c>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	70da      	strb	r2, [r3, #3]
    s_RealTimeClock_context.minute = 0;
 80055bc:	4b0b      	ldr	r3, [pc, #44]	@ (80055ec <SoftTime_CreateTask+0x4c>)
 80055be:	2200      	movs	r2, #0
 80055c0:	711a      	strb	r2, [r3, #4]
    s_RealTimeClock_context.second = 0;
 80055c2:	4b0a      	ldr	r3, [pc, #40]	@ (80055ec <SoftTime_CreateTask+0x4c>)
 80055c4:	2200      	movs	r2, #0
 80055c6:	715a      	strb	r2, [r3, #5]

    s_WorkingTimeClock_context.days = 0;
 80055c8:	4b09      	ldr	r3, [pc, #36]	@ (80055f0 <SoftTime_CreateTask+0x50>)
 80055ca:	2200      	movs	r2, #0
 80055cc:	601a      	str	r2, [r3, #0]
    s_WorkingTimeClock_context.hours = 0;
 80055ce:	4b08      	ldr	r3, [pc, #32]	@ (80055f0 <SoftTime_CreateTask+0x50>)
 80055d0:	2200      	movs	r2, #0
 80055d2:	711a      	strb	r2, [r3, #4]
    s_WorkingTimeClock_context.minutes = 0;
 80055d4:	4b06      	ldr	r3, [pc, #24]	@ (80055f0 <SoftTime_CreateTask+0x50>)
 80055d6:	2200      	movs	r2, #0
 80055d8:	715a      	strb	r2, [r3, #5]
    s_WorkingTimeClock_context.seconds = 0;
 80055da:	4b05      	ldr	r3, [pc, #20]	@ (80055f0 <SoftTime_CreateTask+0x50>)
 80055dc:	2200      	movs	r2, #0
 80055de:	719a      	strb	r2, [r3, #6]

    SCH_TASK_CreateTask(&s_SoftTime_task_context.taskHandle, &s_SoftTime_task_context.taskProperty);
 80055e0:	4904      	ldr	r1, [pc, #16]	@ (80055f4 <SoftTime_CreateTask+0x54>)
 80055e2:	4805      	ldr	r0, [pc, #20]	@ (80055f8 <SoftTime_CreateTask+0x58>)
 80055e4:	f007 f8ce 	bl	800c784 <SCH_TASK_CreateTask>
}
 80055e8:	bf00      	nop
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	20000114 	.word	0x20000114
 80055f0:	20005a44 	.word	0x20005a44
 80055f4:	20000120 	.word	0x20000120
 80055f8:	2000011c 	.word	0x2000011c

080055fc <LL_GPIO_SetOutputPin>:
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	683a      	ldr	r2, [r7, #0]
 800560a:	619a      	str	r2, [r3, #24]
}
 800560c:	bf00      	nop
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <MB85RS2MT_Deselect>:
    LL_GPIO_ResetOutputPin(dev->cs_port, dev->cs_pin);
}

// Hàm hỗ trợ - Bỏ chọn FRAM
static inline void MB85RS2MT_Deselect(mb85rs2mt_dev_t *dev)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
    LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685a      	ldr	r2, [r3, #4]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	891b      	ldrh	r3, [r3, #8]
 8005628:	4619      	mov	r1, r3
 800562a:	4610      	mov	r0, r2
 800562c:	f7ff ffe6 	bl	80055fc <LL_GPIO_SetOutputPin>
}
 8005630:	bf00      	nop
 8005632:	3708      	adds	r7, #8
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <MB85RS2MT_Init>:
    }
}

// Khởi tạo FRAM
void MB85RS2MT_Init(mb85rs2mt_dev_t *dev)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
    MB85RS2MT_Deselect(dev);  // CS mặc định ở mức cao
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f7ff ffe9 	bl	8005618 <MB85RS2MT_Deselect>
}
 8005646:	bf00      	nop
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <LL_GPIO_SetOutputPin>:
{
 800564e:	b480      	push	{r7}
 8005650:	b083      	sub	sp, #12
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
 8005656:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	683a      	ldr	r2, [r7, #0]
 800565c:	619a      	str	r2, [r3, #24]
}
 800565e:	bf00      	nop
 8005660:	370c      	adds	r7, #12
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr

0800566a <LL_GPIO_ResetOutputPin>:
{
 800566a:	b480      	push	{r7}
 800566c:	b083      	sub	sp, #12
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
 8005672:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	041a      	lsls	r2, r3, #16
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	619a      	str	r2, [r3, #24]
}
 800567c:	bf00      	nop
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <LED_Status_Init>:
		480									// taskTick
	},
};

void LED_Status_Init(void)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	af00      	add	r7, sp, #0
    s_led_display_status.led_green = 0;
 800568c:	4a0a      	ldr	r2, [pc, #40]	@ (80056b8 <LED_Status_Init+0x30>)
 800568e:	7813      	ldrb	r3, [r2, #0]
 8005690:	f023 0301 	bic.w	r3, r3, #1
 8005694:	7013      	strb	r3, [r2, #0]
    s_led_display_status.led_blue = 0;
 8005696:	4a08      	ldr	r2, [pc, #32]	@ (80056b8 <LED_Status_Init+0x30>)
 8005698:	7813      	ldrb	r3, [r2, #0]
 800569a:	f023 0302 	bic.w	r3, r3, #2
 800569e:	7013      	strb	r3, [r2, #0]
    s_led_display_status.state = EXP_POWERUP;
 80056a0:	4a05      	ldr	r2, [pc, #20]	@ (80056b8 <LED_Status_Init+0x30>)
 80056a2:	7813      	ldrb	r3, [r2, #0]
 80056a4:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 80056a8:	7013      	strb	r3, [r2, #0]
	status_led_led_green_on();
 80056aa:	f000 f8d5 	bl	8005858 <status_led_led_green_on>
	status_led_led_blue_on();
 80056ae:	f000 f8eb 	bl	8005888 <status_led_led_blue_on>



}
 80056b2:	bf00      	nop
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	20005a50 	.word	0x20005a50

080056bc <status_led_update>:
#include "board.h"
#include "main.h"
#include "bmp390.h"

void	status_led_update(void)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	af00      	add	r7, sp, #0
//	bmp390_temp_press_update();
//	UART_Printf(&EXP_UART, "%d %d \n", bmp390_get_press(), bmp390_get_temperature());



	switch (s_led_display_status.state) {
 80056c0:	4b0c      	ldr	r3, [pc, #48]	@ (80056f4 <status_led_update+0x38>)
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	f3c3 0385 	ubfx	r3, r3, #2, #6
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d00c      	beq.n	80056e8 <status_led_update+0x2c>
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	dc0d      	bgt.n	80056ee <status_led_update+0x32>
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d002      	beq.n	80056dc <status_led_update+0x20>
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d003      	beq.n	80056e2 <status_led_update+0x26>
		break;
	case EXP_ERROR:
		status_led_error();
		break;
	default:
		break;
 80056da:	e008      	b.n	80056ee <status_led_update+0x32>
		status_led_powerup();
 80056dc:	f000 f80c 	bl	80056f8 <status_led_powerup>
		break;
 80056e0:	e006      	b.n	80056f0 <status_led_update+0x34>
		status_led_normal();
 80056e2:	f000 f851 	bl	8005788 <status_led_normal>
		break;
 80056e6:	e003      	b.n	80056f0 <status_led_update+0x34>
		status_led_error();
 80056e8:	f000 f870 	bl	80057cc <status_led_error>
		break;
 80056ec:	e000      	b.n	80056f0 <status_led_update+0x34>
		break;
 80056ee:	bf00      	nop
	}
}
 80056f0:	bf00      	nop
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	20005a50 	.word	0x20005a50

080056f8 <status_led_powerup>:

static void status_led_powerup(void)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	af00      	add	r7, sp, #0
	if (s_led_display_status.led_green && s_led_display_status.led_blue) {
 80056fc:	4b21      	ldr	r3, [pc, #132]	@ (8005784 <status_led_powerup+0x8c>)
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	f003 0301 	and.w	r3, r3, #1
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b00      	cmp	r3, #0
 8005708:	d020      	beq.n	800574c <status_led_powerup+0x54>
 800570a:	4b1e      	ldr	r3, [pc, #120]	@ (8005784 <status_led_powerup+0x8c>)
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	b2db      	uxtb	r3, r3
 8005714:	2b00      	cmp	r3, #0
 8005716:	d019      	beq.n	800574c <status_led_powerup+0x54>
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 8005718:	2000      	movs	r0, #0
 800571a:	f007 f81d 	bl	800c758 <SCH_TIM_HasCompleted>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d02d      	beq.n	8005780 <status_led_powerup+0x88>
			s_led_display_status.led_green = 0;
 8005724:	4a17      	ldr	r2, [pc, #92]	@ (8005784 <status_led_powerup+0x8c>)
 8005726:	7813      	ldrb	r3, [r2, #0]
 8005728:	f023 0301 	bic.w	r3, r3, #1
 800572c:	7013      	strb	r3, [r2, #0]
			s_led_display_status.led_blue = 0;
 800572e:	4a15      	ldr	r2, [pc, #84]	@ (8005784 <status_led_powerup+0x8c>)
 8005730:	7813      	ldrb	r3, [r2, #0]
 8005732:	f023 0302 	bic.w	r3, r3, #2
 8005736:	7013      	strb	r3, [r2, #0]
			status_led_led_green_off();
 8005738:	f000 f89a 	bl	8005870 <status_led_led_green_off>
			status_led_led_blue_off();
 800573c:	f000 f8b0 	bl	80058a0 <status_led_led_blue_off>
			SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD);
 8005740:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8005744:	2000      	movs	r0, #0
 8005746:	f006 fff1 	bl	800c72c <SCH_TIM_Start>
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 800574a:	e019      	b.n	8005780 <status_led_powerup+0x88>
		}
	} else {
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 800574c:	2000      	movs	r0, #0
 800574e:	f007 f803 	bl	800c758 <SCH_TIM_HasCompleted>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d013      	beq.n	8005780 <status_led_powerup+0x88>
			s_led_display_status.led_green = 1;
 8005758:	4a0a      	ldr	r2, [pc, #40]	@ (8005784 <status_led_powerup+0x8c>)
 800575a:	7813      	ldrb	r3, [r2, #0]
 800575c:	f043 0301 	orr.w	r3, r3, #1
 8005760:	7013      	strb	r3, [r2, #0]
			s_led_display_status.led_blue = 1;
 8005762:	4a08      	ldr	r2, [pc, #32]	@ (8005784 <status_led_powerup+0x8c>)
 8005764:	7813      	ldrb	r3, [r2, #0]
 8005766:	f043 0302 	orr.w	r3, r3, #2
 800576a:	7013      	strb	r3, [r2, #0]
			status_led_led_green_on();
 800576c:	f000 f874 	bl	8005858 <status_led_led_green_on>
			status_led_led_blue_on();
 8005770:	f000 f88a 	bl	8005888 <status_led_led_blue_on>
			SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD);
 8005774:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8005778:	2000      	movs	r0, #0
 800577a:	f006 ffd7 	bl	800c72c <SCH_TIM_Start>
		}
	}
}
 800577e:	e7ff      	b.n	8005780 <status_led_powerup+0x88>
 8005780:	bf00      	nop
 8005782:	bd80      	pop	{r7, pc}
 8005784:	20005a50 	.word	0x20005a50

08005788 <status_led_normal>:

static void status_led_normal(void)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	af00      	add	r7, sp, #0
	// viết tạm
	LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 800578c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005790:	480d      	ldr	r0, [pc, #52]	@ (80057c8 <status_led_normal+0x40>)
 8005792:	f7ff ff6a 	bl	800566a <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 8005796:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800579a:	480b      	ldr	r0, [pc, #44]	@ (80057c8 <status_led_normal+0x40>)
 800579c:	f7ff ff57 	bl	800564e <LL_GPIO_SetOutputPin>
	LL_mDelay(500);
 80057a0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80057a4:	f006 ff62 	bl	800c66c <LL_mDelay>
	LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 80057a8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80057ac:	4806      	ldr	r0, [pc, #24]	@ (80057c8 <status_led_normal+0x40>)
 80057ae:	f7ff ff5c 	bl	800566a <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 80057b2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80057b6:	4804      	ldr	r0, [pc, #16]	@ (80057c8 <status_led_normal+0x40>)
 80057b8:	f7ff ff49 	bl	800564e <LL_GPIO_SetOutputPin>
	LL_mDelay(500);
 80057bc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80057c0:	f006 ff54 	bl	800c66c <LL_mDelay>
}
 80057c4:	bf00      	nop
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	40021000 	.word	0x40021000

080057cc <status_led_error>:

static void status_led_error(void)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	af00      	add	r7, sp, #0
	if (s_led_display_status.led_green && s_led_display_status.led_blue) {
 80057d0:	4b20      	ldr	r3, [pc, #128]	@ (8005854 <status_led_error+0x88>)
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	f003 0301 	and.w	r3, r3, #1
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d01f      	beq.n	800581e <status_led_error+0x52>
 80057de:	4b1d      	ldr	r3, [pc, #116]	@ (8005854 <status_led_error+0x88>)
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	f003 0302 	and.w	r3, r3, #2
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d018      	beq.n	800581e <status_led_error+0x52>
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 80057ec:	2000      	movs	r0, #0
 80057ee:	f006 ffb3 	bl	800c758 <SCH_TIM_HasCompleted>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d02b      	beq.n	8005850 <status_led_error+0x84>
			s_led_display_status.led_green = 0;
 80057f8:	4a16      	ldr	r2, [pc, #88]	@ (8005854 <status_led_error+0x88>)
 80057fa:	7813      	ldrb	r3, [r2, #0]
 80057fc:	f023 0301 	bic.w	r3, r3, #1
 8005800:	7013      	strb	r3, [r2, #0]
			s_led_display_status.led_blue = 0;
 8005802:	4a14      	ldr	r2, [pc, #80]	@ (8005854 <status_led_error+0x88>)
 8005804:	7813      	ldrb	r3, [r2, #0]
 8005806:	f023 0302 	bic.w	r3, r3, #2
 800580a:	7013      	strb	r3, [r2, #0]
			status_led_led_green_off();
 800580c:	f000 f830 	bl	8005870 <status_led_led_green_off>
			status_led_led_blue_off();
 8005810:	f000 f846 	bl	80058a0 <status_led_led_blue_off>
			SCH_TIM_Start(SCH_TIM_LED, ERROR_PERIOD);
 8005814:	2132      	movs	r1, #50	@ 0x32
 8005816:	2000      	movs	r0, #0
 8005818:	f006 ff88 	bl	800c72c <SCH_TIM_Start>
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 800581c:	e018      	b.n	8005850 <status_led_error+0x84>
		}
	} else {
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 800581e:	2000      	movs	r0, #0
 8005820:	f006 ff9a 	bl	800c758 <SCH_TIM_HasCompleted>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d012      	beq.n	8005850 <status_led_error+0x84>
			s_led_display_status.led_green = 1;
 800582a:	4a0a      	ldr	r2, [pc, #40]	@ (8005854 <status_led_error+0x88>)
 800582c:	7813      	ldrb	r3, [r2, #0]
 800582e:	f043 0301 	orr.w	r3, r3, #1
 8005832:	7013      	strb	r3, [r2, #0]
			s_led_display_status.led_blue = 1;
 8005834:	4a07      	ldr	r2, [pc, #28]	@ (8005854 <status_led_error+0x88>)
 8005836:	7813      	ldrb	r3, [r2, #0]
 8005838:	f043 0302 	orr.w	r3, r3, #2
 800583c:	7013      	strb	r3, [r2, #0]
			status_led_led_green_on();
 800583e:	f000 f80b 	bl	8005858 <status_led_led_green_on>
			status_led_led_blue_on();
 8005842:	f000 f821 	bl	8005888 <status_led_led_blue_on>
			SCH_TIM_Start(SCH_TIM_LED, ERROR_PERIOD);
 8005846:	2132      	movs	r1, #50	@ 0x32
 8005848:	2000      	movs	r0, #0
 800584a:	f006 ff6f 	bl	800c72c <SCH_TIM_Start>
		}
	}
}
 800584e:	e7ff      	b.n	8005850 <status_led_error+0x84>
 8005850:	bf00      	nop
 8005852:	bd80      	pop	{r7, pc}
 8005854:	20005a50 	.word	0x20005a50

08005858 <status_led_led_green_on>:

static void status_led_led_green_on(void)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 800585c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005860:	4802      	ldr	r0, [pc, #8]	@ (800586c <status_led_led_green_on+0x14>)
 8005862:	f7ff fef4 	bl	800564e <LL_GPIO_SetOutputPin>
}
 8005866:	bf00      	nop
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	40021000 	.word	0x40021000

08005870 <status_led_led_green_off>:
static void status_led_led_green_off(void)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 8005874:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005878:	4802      	ldr	r0, [pc, #8]	@ (8005884 <status_led_led_green_off+0x14>)
 800587a:	f7ff fef6 	bl	800566a <LL_GPIO_ResetOutputPin>
}
 800587e:	bf00      	nop
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	40021000 	.word	0x40021000

08005888 <status_led_led_blue_on>:
static void status_led_led_blue_on(void)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 800588c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005890:	4802      	ldr	r0, [pc, #8]	@ (800589c <status_led_led_blue_on+0x14>)
 8005892:	f7ff fedc 	bl	800564e <LL_GPIO_SetOutputPin>
}
 8005896:	bf00      	nop
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	40021000 	.word	0x40021000

080058a0 <status_led_led_blue_off>:
static void status_led_led_blue_off(void)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 80058a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80058a8:	4802      	ldr	r0, [pc, #8]	@ (80058b4 <status_led_led_blue_off+0x14>)
 80058aa:	f7ff fede 	bl	800566a <LL_GPIO_ResetOutputPin>
}
 80058ae:	bf00      	nop
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	40021000 	.word	0x40021000

080058b8 <LED_Status_CreateTask>:

void	LED_Status_CreateTask(void)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&s_task_context.taskHandle, &s_task_context.taskProperty);
 80058bc:	4902      	ldr	r1, [pc, #8]	@ (80058c8 <LED_Status_CreateTask+0x10>)
 80058be:	4803      	ldr	r0, [pc, #12]	@ (80058cc <LED_Status_CreateTask+0x14>)
 80058c0:	f006 ff60 	bl	800c784 <SCH_TASK_CreateTask>
}
 80058c4:	bf00      	nop
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	20000138 	.word	0x20000138
 80058cc:	20000134 	.word	0x20000134

080058d0 <BME280_Write>:
static BME280_calib_t BME280_calib;
static BME280_RawData_t BME280_RawData = {
		.status = I2C_Success,
};

void BME280_Write(uint8_t reg, uint8_t data) {
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	4603      	mov	r3, r0
 80058d8:	460a      	mov	r2, r1
 80058da:	71fb      	strb	r3, [r7, #7]
 80058dc:	4613      	mov	r3, r2
 80058de:	71bb      	strb	r3, [r7, #6]
	BME280_RawData.status = I2C_Write(EXP_I2C_SENSOR_HANDLE, BME280_I2C_ADDR, reg, data);
 80058e0:	79bb      	ldrb	r3, [r7, #6]
 80058e2:	79fa      	ldrb	r2, [r7, #7]
 80058e4:	2177      	movs	r1, #119	@ 0x77
 80058e6:	4805      	ldr	r0, [pc, #20]	@ (80058fc <BME280_Write+0x2c>)
 80058e8:	f7fb fd5f 	bl	80013aa <I2C_Write>
 80058ec:	4603      	mov	r3, r0
 80058ee:	461a      	mov	r2, r3
 80058f0:	4b03      	ldr	r3, [pc, #12]	@ (8005900 <BME280_Write+0x30>)
 80058f2:	729a      	strb	r2, [r3, #10]
}
 80058f4:	bf00      	nop
 80058f6:	3708      	adds	r7, #8
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	40005400 	.word	0x40005400
 8005900:	20005a78 	.word	0x20005a78

08005904 <BME280_Read>:

void BME280_Read(uint8_t reg, uint8_t *pData, uint8_t length) {
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af02      	add	r7, sp, #8
 800590a:	4603      	mov	r3, r0
 800590c:	6039      	str	r1, [r7, #0]
 800590e:	71fb      	strb	r3, [r7, #7]
 8005910:	4613      	mov	r3, r2
 8005912:	71bb      	strb	r3, [r7, #6]
	BME280_RawData.status = I2C_ReadMulti(EXP_I2C_SENSOR_HANDLE, BME280_I2C_ADDR, reg, pData, length);
 8005914:	79bb      	ldrb	r3, [r7, #6]
 8005916:	b29b      	uxth	r3, r3
 8005918:	79fa      	ldrb	r2, [r7, #7]
 800591a:	9300      	str	r3, [sp, #0]
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	2177      	movs	r1, #119	@ 0x77
 8005920:	4805      	ldr	r0, [pc, #20]	@ (8005938 <BME280_Read+0x34>)
 8005922:	f7fb fdd2 	bl	80014ca <I2C_ReadMulti>
 8005926:	4603      	mov	r3, r0
 8005928:	461a      	mov	r2, r3
 800592a:	4b04      	ldr	r3, [pc, #16]	@ (800593c <BME280_Read+0x38>)
 800592c:	729a      	strb	r2, [r3, #10]
}
 800592e:	bf00      	nop
 8005930:	3708      	adds	r7, #8
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	40005400 	.word	0x40005400
 800593c:	20005a78 	.word	0x20005a78

08005940 <BME280_Init>:

I2C_Status_t BME280_Init(void)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
	// reset device
	BME280_Write(BME280_RESET_REG, 0xB6);
 8005946:	21b6      	movs	r1, #182	@ 0xb6
 8005948:	20e0      	movs	r0, #224	@ 0xe0
 800594a:	f7ff ffc1 	bl	80058d0 <BME280_Write>

	// write the humidity oversampling
	// osrs_h[2..0]= 000   001   010   011  100  101&others : oversampling is skipped 1  2  4  8  16
	BME280_Write(BME280_CTRL_HUM_REG, 0x01);
 800594e:	2101      	movs	r1, #1
 8005950:	20f2      	movs	r0, #242	@ 0xf2
 8005952:	f7ff ffbd 	bl	80058d0 <BME280_Write>

	// write the standby time and IIR filter coeff
	BME280_Write(BME280_CONFIG_REG, 0b00010000);
 8005956:	2110      	movs	r1, #16
 8005958:	20f5      	movs	r0, #245	@ 0xf5
 800595a:	f7ff ffb9 	bl	80058d0 <BME280_Write>

	// write the pressure and temp oversampling along with mode to 0xF4
	// osrs_t[2..0]= 000   001   010   011  100  101&others : oversampling is skipped 1  2  4  8  16
	// osrs_p[2..0]= 000   001   010   011  100  101&others : oversampling is skipped 1  2  4  8  16
	// mode[1..0]=	 00   01and10  11 : SleepMode  ForcedMode   NormalMode
	BME280_Write(BME280_CTRL_MEAS_REG, 0b01010111);
 800595e:	2157      	movs	r1, #87	@ 0x57
 8005960:	20f4      	movs	r0, #244	@ 0xf4
 8005962:	f7ff ffb5 	bl	80058d0 <BME280_Write>
	uint8_t ID = 0;
 8005966:	2300      	movs	r3, #0
 8005968:	71fb      	strb	r3, [r7, #7]
	BME280_Read_ID(&ID);
 800596a:	1dfb      	adds	r3, r7, #7
 800596c:	4618      	mov	r0, r3
 800596e:	f000 f80f 	bl	8005990 <BME280_Read_ID>
	if (ID != BME280_ID) BME280_RawData.status = I2C_Error;
 8005972:	79fb      	ldrb	r3, [r7, #7]
 8005974:	2b60      	cmp	r3, #96	@ 0x60
 8005976:	d002      	beq.n	800597e <BME280_Init+0x3e>
 8005978:	4b04      	ldr	r3, [pc, #16]	@ (800598c <BME280_Init+0x4c>)
 800597a:	2201      	movs	r2, #1
 800597c:	729a      	strb	r2, [r3, #10]
	return BME280_RawData.status;
 800597e:	4b03      	ldr	r3, [pc, #12]	@ (800598c <BME280_Init+0x4c>)
 8005980:	7a9b      	ldrb	r3, [r3, #10]
}
 8005982:	4618      	mov	r0, r3
 8005984:	3708      	adds	r7, #8
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	20005a78 	.word	0x20005a78

08005990 <BME280_Read_ID>:

I2C_Status_t BME280_Read_ID(uint8_t *ID) {
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
	BME280_Read(BME280_ID_REG, ID, 1);
 8005998:	2201      	movs	r2, #1
 800599a:	6879      	ldr	r1, [r7, #4]
 800599c:	20d0      	movs	r0, #208	@ 0xd0
 800599e:	f7ff ffb1 	bl	8005904 <BME280_Read>
	return BME280_RawData.status;
 80059a2:	4b03      	ldr	r3, [pc, #12]	@ (80059b0 <BME280_Read_ID+0x20>)
 80059a4:	7a9b      	ldrb	r3, [r3, #10]
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3708      	adds	r7, #8
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	20005a78 	.word	0x20005a78

080059b4 <BME280_Read_CalibrationData>:

void BME280_Read_CalibrationData(void) {
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b088      	sub	sp, #32
 80059b8:	af00      	add	r7, sp, #0
	uint8_t calib[26];
	BME280_Read(BME280_CALIB_REG_1, calib, 26);
 80059ba:	1d3b      	adds	r3, r7, #4
 80059bc:	221a      	movs	r2, #26
 80059be:	4619      	mov	r1, r3
 80059c0:	2088      	movs	r0, #136	@ 0x88
 80059c2:	f7ff ff9f 	bl	8005904 <BME280_Read>

	BME280_calib.dig_T1 = (uint16_t)(calib[1] << 8 | calib[0]);
 80059c6:	797b      	ldrb	r3, [r7, #5]
 80059c8:	b21b      	sxth	r3, r3
 80059ca:	021b      	lsls	r3, r3, #8
 80059cc:	b21a      	sxth	r2, r3
 80059ce:	793b      	ldrb	r3, [r7, #4]
 80059d0:	b21b      	sxth	r3, r3
 80059d2:	4313      	orrs	r3, r2
 80059d4:	b21b      	sxth	r3, r3
 80059d6:	b29a      	uxth	r2, r3
 80059d8:	4b54      	ldr	r3, [pc, #336]	@ (8005b2c <BME280_Read_CalibrationData+0x178>)
 80059da:	801a      	strh	r2, [r3, #0]
	BME280_calib.dig_T2 = (int16_t)(calib[3] << 8 | calib[2]);
 80059dc:	79fb      	ldrb	r3, [r7, #7]
 80059de:	b21b      	sxth	r3, r3
 80059e0:	021b      	lsls	r3, r3, #8
 80059e2:	b21a      	sxth	r2, r3
 80059e4:	79bb      	ldrb	r3, [r7, #6]
 80059e6:	b21b      	sxth	r3, r3
 80059e8:	4313      	orrs	r3, r2
 80059ea:	b21a      	sxth	r2, r3
 80059ec:	4b4f      	ldr	r3, [pc, #316]	@ (8005b2c <BME280_Read_CalibrationData+0x178>)
 80059ee:	805a      	strh	r2, [r3, #2]
	BME280_calib.dig_T3 = (int16_t)(calib[5] << 8 | calib[4]);
 80059f0:	7a7b      	ldrb	r3, [r7, #9]
 80059f2:	b21b      	sxth	r3, r3
 80059f4:	021b      	lsls	r3, r3, #8
 80059f6:	b21a      	sxth	r2, r3
 80059f8:	7a3b      	ldrb	r3, [r7, #8]
 80059fa:	b21b      	sxth	r3, r3
 80059fc:	4313      	orrs	r3, r2
 80059fe:	b21a      	sxth	r2, r3
 8005a00:	4b4a      	ldr	r3, [pc, #296]	@ (8005b2c <BME280_Read_CalibrationData+0x178>)
 8005a02:	809a      	strh	r2, [r3, #4]

	BME280_calib.dig_P1 = (uint16_t)(calib[7] << 8 | calib[6]);
 8005a04:	7afb      	ldrb	r3, [r7, #11]
 8005a06:	b21b      	sxth	r3, r3
 8005a08:	021b      	lsls	r3, r3, #8
 8005a0a:	b21a      	sxth	r2, r3
 8005a0c:	7abb      	ldrb	r3, [r7, #10]
 8005a0e:	b21b      	sxth	r3, r3
 8005a10:	4313      	orrs	r3, r2
 8005a12:	b21b      	sxth	r3, r3
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	4b45      	ldr	r3, [pc, #276]	@ (8005b2c <BME280_Read_CalibrationData+0x178>)
 8005a18:	80da      	strh	r2, [r3, #6]
	BME280_calib.dig_P2 = (int16_t)(calib[9] << 8 | calib[8]);
 8005a1a:	7b7b      	ldrb	r3, [r7, #13]
 8005a1c:	b21b      	sxth	r3, r3
 8005a1e:	021b      	lsls	r3, r3, #8
 8005a20:	b21a      	sxth	r2, r3
 8005a22:	7b3b      	ldrb	r3, [r7, #12]
 8005a24:	b21b      	sxth	r3, r3
 8005a26:	4313      	orrs	r3, r2
 8005a28:	b21a      	sxth	r2, r3
 8005a2a:	4b40      	ldr	r3, [pc, #256]	@ (8005b2c <BME280_Read_CalibrationData+0x178>)
 8005a2c:	811a      	strh	r2, [r3, #8]
	BME280_calib.dig_P3 = (int16_t)(calib[11] << 8 | calib[10]);
 8005a2e:	7bfb      	ldrb	r3, [r7, #15]
 8005a30:	b21b      	sxth	r3, r3
 8005a32:	021b      	lsls	r3, r3, #8
 8005a34:	b21a      	sxth	r2, r3
 8005a36:	7bbb      	ldrb	r3, [r7, #14]
 8005a38:	b21b      	sxth	r3, r3
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	b21a      	sxth	r2, r3
 8005a3e:	4b3b      	ldr	r3, [pc, #236]	@ (8005b2c <BME280_Read_CalibrationData+0x178>)
 8005a40:	815a      	strh	r2, [r3, #10]
	BME280_calib.dig_P4 = (int16_t)(calib[13] << 8 | calib[12]);
 8005a42:	7c7b      	ldrb	r3, [r7, #17]
 8005a44:	b21b      	sxth	r3, r3
 8005a46:	021b      	lsls	r3, r3, #8
 8005a48:	b21a      	sxth	r2, r3
 8005a4a:	7c3b      	ldrb	r3, [r7, #16]
 8005a4c:	b21b      	sxth	r3, r3
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	b21a      	sxth	r2, r3
 8005a52:	4b36      	ldr	r3, [pc, #216]	@ (8005b2c <BME280_Read_CalibrationData+0x178>)
 8005a54:	819a      	strh	r2, [r3, #12]
	BME280_calib.dig_P5 = (int16_t)(calib[15] << 8 | calib[14]);
 8005a56:	7cfb      	ldrb	r3, [r7, #19]
 8005a58:	b21b      	sxth	r3, r3
 8005a5a:	021b      	lsls	r3, r3, #8
 8005a5c:	b21a      	sxth	r2, r3
 8005a5e:	7cbb      	ldrb	r3, [r7, #18]
 8005a60:	b21b      	sxth	r3, r3
 8005a62:	4313      	orrs	r3, r2
 8005a64:	b21a      	sxth	r2, r3
 8005a66:	4b31      	ldr	r3, [pc, #196]	@ (8005b2c <BME280_Read_CalibrationData+0x178>)
 8005a68:	81da      	strh	r2, [r3, #14]
	BME280_calib.dig_P6 = (int16_t)(calib[17] << 8 | calib[16]);
 8005a6a:	7d7b      	ldrb	r3, [r7, #21]
 8005a6c:	b21b      	sxth	r3, r3
 8005a6e:	021b      	lsls	r3, r3, #8
 8005a70:	b21a      	sxth	r2, r3
 8005a72:	7d3b      	ldrb	r3, [r7, #20]
 8005a74:	b21b      	sxth	r3, r3
 8005a76:	4313      	orrs	r3, r2
 8005a78:	b21a      	sxth	r2, r3
 8005a7a:	4b2c      	ldr	r3, [pc, #176]	@ (8005b2c <BME280_Read_CalibrationData+0x178>)
 8005a7c:	821a      	strh	r2, [r3, #16]
	BME280_calib.dig_P7 = (int16_t)(calib[19] << 8 | calib[18]);
 8005a7e:	7dfb      	ldrb	r3, [r7, #23]
 8005a80:	b21b      	sxth	r3, r3
 8005a82:	021b      	lsls	r3, r3, #8
 8005a84:	b21a      	sxth	r2, r3
 8005a86:	7dbb      	ldrb	r3, [r7, #22]
 8005a88:	b21b      	sxth	r3, r3
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	b21a      	sxth	r2, r3
 8005a8e:	4b27      	ldr	r3, [pc, #156]	@ (8005b2c <BME280_Read_CalibrationData+0x178>)
 8005a90:	825a      	strh	r2, [r3, #18]
	BME280_calib.dig_P8 = (int16_t)(calib[21] << 8 | calib[20]);
 8005a92:	7e7b      	ldrb	r3, [r7, #25]
 8005a94:	b21b      	sxth	r3, r3
 8005a96:	021b      	lsls	r3, r3, #8
 8005a98:	b21a      	sxth	r2, r3
 8005a9a:	7e3b      	ldrb	r3, [r7, #24]
 8005a9c:	b21b      	sxth	r3, r3
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	b21a      	sxth	r2, r3
 8005aa2:	4b22      	ldr	r3, [pc, #136]	@ (8005b2c <BME280_Read_CalibrationData+0x178>)
 8005aa4:	829a      	strh	r2, [r3, #20]
	BME280_calib.dig_P9 = (int16_t)(calib[23] << 8 | calib[22]);
 8005aa6:	7efb      	ldrb	r3, [r7, #27]
 8005aa8:	b21b      	sxth	r3, r3
 8005aaa:	021b      	lsls	r3, r3, #8
 8005aac:	b21a      	sxth	r2, r3
 8005aae:	7ebb      	ldrb	r3, [r7, #26]
 8005ab0:	b21b      	sxth	r3, r3
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	b21a      	sxth	r2, r3
 8005ab6:	4b1d      	ldr	r3, [pc, #116]	@ (8005b2c <BME280_Read_CalibrationData+0x178>)
 8005ab8:	82da      	strh	r2, [r3, #22]

	BME280_calib.dig_H1 = calib[25];
 8005aba:	7f7a      	ldrb	r2, [r7, #29]
 8005abc:	4b1b      	ldr	r3, [pc, #108]	@ (8005b2c <BME280_Read_CalibrationData+0x178>)
 8005abe:	761a      	strb	r2, [r3, #24]

	BME280_Read(BME280_CALIB_REG_2, calib, 7);
 8005ac0:	1d3b      	adds	r3, r7, #4
 8005ac2:	2207      	movs	r2, #7
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	20e1      	movs	r0, #225	@ 0xe1
 8005ac8:	f7ff ff1c 	bl	8005904 <BME280_Read>

	BME280_calib.dig_H2 = (int16_t)(calib[1] << 8 | calib[0]);
 8005acc:	797b      	ldrb	r3, [r7, #5]
 8005ace:	b21b      	sxth	r3, r3
 8005ad0:	021b      	lsls	r3, r3, #8
 8005ad2:	b21a      	sxth	r2, r3
 8005ad4:	793b      	ldrb	r3, [r7, #4]
 8005ad6:	b21b      	sxth	r3, r3
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	b21a      	sxth	r2, r3
 8005adc:	4b13      	ldr	r3, [pc, #76]	@ (8005b2c <BME280_Read_CalibrationData+0x178>)
 8005ade:	835a      	strh	r2, [r3, #26]
	BME280_calib.dig_H3 = calib[2];
 8005ae0:	79ba      	ldrb	r2, [r7, #6]
 8005ae2:	4b12      	ldr	r3, [pc, #72]	@ (8005b2c <BME280_Read_CalibrationData+0x178>)
 8005ae4:	771a      	strb	r2, [r3, #28]
	BME280_calib.dig_H4 = (int16_t)((calib[3] << 4) | (calib[4] & 0x0F));
 8005ae6:	79fb      	ldrb	r3, [r7, #7]
 8005ae8:	b21b      	sxth	r3, r3
 8005aea:	011b      	lsls	r3, r3, #4
 8005aec:	b21a      	sxth	r2, r3
 8005aee:	7a3b      	ldrb	r3, [r7, #8]
 8005af0:	b21b      	sxth	r3, r3
 8005af2:	f003 030f 	and.w	r3, r3, #15
 8005af6:	b21b      	sxth	r3, r3
 8005af8:	4313      	orrs	r3, r2
 8005afa:	b21a      	sxth	r2, r3
 8005afc:	4b0b      	ldr	r3, [pc, #44]	@ (8005b2c <BME280_Read_CalibrationData+0x178>)
 8005afe:	83da      	strh	r2, [r3, #30]
	BME280_calib.dig_H5 = (int16_t)((calib[5] << 4) | (calib[4] >> 4));
 8005b00:	7a7b      	ldrb	r3, [r7, #9]
 8005b02:	b21b      	sxth	r3, r3
 8005b04:	011b      	lsls	r3, r3, #4
 8005b06:	b21a      	sxth	r2, r3
 8005b08:	7a3b      	ldrb	r3, [r7, #8]
 8005b0a:	091b      	lsrs	r3, r3, #4
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	b21b      	sxth	r3, r3
 8005b10:	4313      	orrs	r3, r2
 8005b12:	b21a      	sxth	r2, r3
 8005b14:	4b05      	ldr	r3, [pc, #20]	@ (8005b2c <BME280_Read_CalibrationData+0x178>)
 8005b16:	841a      	strh	r2, [r3, #32]
	BME280_calib.dig_H6 = (int8_t)calib[6];
 8005b18:	7abb      	ldrb	r3, [r7, #10]
 8005b1a:	b25a      	sxtb	r2, r3
 8005b1c:	4b03      	ldr	r3, [pc, #12]	@ (8005b2c <BME280_Read_CalibrationData+0x178>)
 8005b1e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 8005b22:	bf00      	nop
 8005b24:	3720      	adds	r7, #32
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	20005a54 	.word	0x20005a54

08005b30 <BME280_Read_RawData>:

void BME280_Read_RawData(BME280_RawData_t *BME280_RawData) {
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
	uint8_t RawData[8];
	BME280_Read(BME280_PRESS_REG, RawData, 8);
 8005b38:	f107 0308 	add.w	r3, r7, #8
 8005b3c:	2208      	movs	r2, #8
 8005b3e:	4619      	mov	r1, r3
 8005b40:	20f7      	movs	r0, #247	@ 0xf7
 8005b42:	f7ff fedf 	bl	8005904 <BME280_Read>
	BME280_RawData->press = ((uint32_t)RawData[0] << 12) | ((uint32_t)RawData[1] << 4) | (RawData[2] >> 4);
 8005b46:	7a3b      	ldrb	r3, [r7, #8]
 8005b48:	031a      	lsls	r2, r3, #12
 8005b4a:	7a7b      	ldrb	r3, [r7, #9]
 8005b4c:	011b      	lsls	r3, r3, #4
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	7aba      	ldrb	r2, [r7, #10]
 8005b52:	0912      	lsrs	r2, r2, #4
 8005b54:	b2d2      	uxtb	r2, r2
 8005b56:	4313      	orrs	r3, r2
 8005b58:	461a      	mov	r2, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	605a      	str	r2, [r3, #4]
	BME280_RawData->temp  = ((uint32_t)RawData[3] << 12) | ((uint32_t)RawData[4] << 4) | (RawData[5] >> 4);
 8005b5e:	7afb      	ldrb	r3, [r7, #11]
 8005b60:	031a      	lsls	r2, r3, #12
 8005b62:	7b3b      	ldrb	r3, [r7, #12]
 8005b64:	011b      	lsls	r3, r3, #4
 8005b66:	4313      	orrs	r3, r2
 8005b68:	7b7a      	ldrb	r2, [r7, #13]
 8005b6a:	0912      	lsrs	r2, r2, #4
 8005b6c:	b2d2      	uxtb	r2, r2
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	461a      	mov	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	601a      	str	r2, [r3, #0]
	BME280_RawData->humi  = ((uint16_t)RawData[6] << 8) | RawData[7];
 8005b76:	7bbb      	ldrb	r3, [r7, #14]
 8005b78:	b21b      	sxth	r3, r3
 8005b7a:	021b      	lsls	r3, r3, #8
 8005b7c:	b21a      	sxth	r2, r3
 8005b7e:	7bfb      	ldrb	r3, [r7, #15]
 8005b80:	b21b      	sxth	r3, r3
 8005b82:	4313      	orrs	r3, r2
 8005b84:	b21a      	sxth	r2, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	811a      	strh	r2, [r3, #8]
}
 8005b8a:	bf00      	nop
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
	...

08005b94 <BME280_Compensate_Temperature>:

int32_t t_fine = 0;

float BME280_Compensate_Temperature(uint32_t adc_T) {
 8005b94:	b480      	push	{r7}
 8005b96:	b087      	sub	sp, #28
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
	int32_t var1, var2;
	var1 = ((((adc_T >> 3) - ((int32_t)BME280_calib.dig_T1 << 1))) *
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	08da      	lsrs	r2, r3, #3
 8005ba0:	4b1f      	ldr	r3, [pc, #124]	@ (8005c20 <BME280_Compensate_Temperature+0x8c>)
 8005ba2:	881b      	ldrh	r3, [r3, #0]
 8005ba4:	005b      	lsls	r3, r3, #1
 8005ba6:	1ad3      	subs	r3, r2, r3
		   ((int32_t)BME280_calib.dig_T2)) >> 11;
 8005ba8:	4a1d      	ldr	r2, [pc, #116]	@ (8005c20 <BME280_Compensate_Temperature+0x8c>)
 8005baa:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
	var1 = ((((adc_T >> 3) - ((int32_t)BME280_calib.dig_T1 << 1))) *
 8005bae:	fb02 f303 	mul.w	r3, r2, r3
		   ((int32_t)BME280_calib.dig_T2)) >> 11;
 8005bb2:	0adb      	lsrs	r3, r3, #11
	var1 = ((((adc_T >> 3) - ((int32_t)BME280_calib.dig_T1 << 1))) *
 8005bb4:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T >> 4) - ((int32_t)BME280_calib.dig_T1)) *
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	091b      	lsrs	r3, r3, #4
 8005bba:	4a19      	ldr	r2, [pc, #100]	@ (8005c20 <BME280_Compensate_Temperature+0x8c>)
 8005bbc:	8812      	ldrh	r2, [r2, #0]
 8005bbe:	1a9b      	subs	r3, r3, r2
			  ((adc_T >> 4) - ((int32_t)BME280_calib.dig_T1))) >> 12) *
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	0912      	lsrs	r2, r2, #4
 8005bc4:	4916      	ldr	r1, [pc, #88]	@ (8005c20 <BME280_Compensate_Temperature+0x8c>)
 8005bc6:	8809      	ldrh	r1, [r1, #0]
 8005bc8:	1a52      	subs	r2, r2, r1
	var2 = (((((adc_T >> 4) - ((int32_t)BME280_calib.dig_T1)) *
 8005bca:	fb02 f303 	mul.w	r3, r2, r3
			  ((adc_T >> 4) - ((int32_t)BME280_calib.dig_T1))) >> 12) *
 8005bce:	0b1b      	lsrs	r3, r3, #12
			((int32_t)BME280_calib.dig_T3)) >> 14;
 8005bd0:	4a13      	ldr	r2, [pc, #76]	@ (8005c20 <BME280_Compensate_Temperature+0x8c>)
 8005bd2:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
			  ((adc_T >> 4) - ((int32_t)BME280_calib.dig_T1))) >> 12) *
 8005bd6:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)BME280_calib.dig_T3)) >> 14;
 8005bda:	0b9b      	lsrs	r3, r3, #14
	var2 = (((((adc_T >> 4) - ((int32_t)BME280_calib.dig_T1)) *
 8005bdc:	613b      	str	r3, [r7, #16]

	t_fine = var1 + var2;
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	4413      	add	r3, r2
 8005be4:	4a0f      	ldr	r2, [pc, #60]	@ (8005c24 <BME280_Compensate_Temperature+0x90>)
 8005be6:	6013      	str	r3, [r2, #0]
	float T = (t_fine * 5 + 128) >> 8;
 8005be8:	4b0e      	ldr	r3, [pc, #56]	@ (8005c24 <BME280_Compensate_Temperature+0x90>)
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	4613      	mov	r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	4413      	add	r3, r2
 8005bf2:	3380      	adds	r3, #128	@ 0x80
 8005bf4:	121b      	asrs	r3, r3, #8
 8005bf6:	ee07 3a90 	vmov	s15, r3
 8005bfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bfe:	edc7 7a03 	vstr	s15, [r7, #12]
	return T / 100.0f;
 8005c02:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c06:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8005c28 <BME280_Compensate_Temperature+0x94>
 8005c0a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005c0e:	eef0 7a66 	vmov.f32	s15, s13
}
 8005c12:	eeb0 0a67 	vmov.f32	s0, s15
 8005c16:	371c      	adds	r7, #28
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr
 8005c20:	20005a54 	.word	0x20005a54
 8005c24:	20005a84 	.word	0x20005a84
 8005c28:	42c80000 	.word	0x42c80000

08005c2c <BME280_Compensate_Pressure>:

float BME280_Compensate_Pressure(uint32_t adc_P) {
 8005c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c30:	b0ca      	sub	sp, #296	@ 0x128
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8005c38:	4baf      	ldr	r3, [pc, #700]	@ (8005ef8 <BME280_Compensate_Pressure+0x2cc>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	17da      	asrs	r2, r3, #31
 8005c3e:	461c      	mov	r4, r3
 8005c40:	4615      	mov	r5, r2
 8005c42:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8005c46:	f145 3bff 	adc.w	fp, r5, #4294967295
 8005c4a:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)BME280_calib.dig_P6;
 8005c4e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8005c52:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005c56:	fb03 f102 	mul.w	r1, r3, r2
 8005c5a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8005c5e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005c62:	fb02 f303 	mul.w	r3, r2, r3
 8005c66:	18ca      	adds	r2, r1, r3
 8005c68:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005c6c:	fba3 8903 	umull	r8, r9, r3, r3
 8005c70:	eb02 0309 	add.w	r3, r2, r9
 8005c74:	4699      	mov	r9, r3
 8005c76:	4ba1      	ldr	r3, [pc, #644]	@ (8005efc <BME280_Compensate_Pressure+0x2d0>)
 8005c78:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8005c7c:	b21b      	sxth	r3, r3
 8005c7e:	17da      	asrs	r2, r3, #31
 8005c80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c84:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005c88:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	fb03 f209 	mul.w	r2, r3, r9
 8005c92:	460b      	mov	r3, r1
 8005c94:	fb08 f303 	mul.w	r3, r8, r3
 8005c98:	4413      	add	r3, r2
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	fba8 1202 	umull	r1, r2, r8, r2
 8005ca0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005ca4:	460a      	mov	r2, r1
 8005ca6:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8005caa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005cae:	4413      	add	r3, r2
 8005cb0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005cb4:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8005cb8:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8005cbc:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1 * (int64_t)BME280_calib.dig_P5) << 17);
 8005cc0:	4b8e      	ldr	r3, [pc, #568]	@ (8005efc <BME280_Compensate_Pressure+0x2d0>)
 8005cc2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005cc6:	b21b      	sxth	r3, r3
 8005cc8:	17da      	asrs	r2, r3, #31
 8005cca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005cce:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8005cd2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005cd6:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8005cda:	462a      	mov	r2, r5
 8005cdc:	fb02 f203 	mul.w	r2, r2, r3
 8005ce0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8005ce4:	4621      	mov	r1, r4
 8005ce6:	fb01 f303 	mul.w	r3, r1, r3
 8005cea:	441a      	add	r2, r3
 8005cec:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005cf0:	4621      	mov	r1, r4
 8005cf2:	fba3 1301 	umull	r1, r3, r3, r1
 8005cf6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d04:	18d3      	adds	r3, r2, r3
 8005d06:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005d0a:	f04f 0000 	mov.w	r0, #0
 8005d0e:	f04f 0100 	mov.w	r1, #0
 8005d12:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8005d16:	462b      	mov	r3, r5
 8005d18:	0459      	lsls	r1, r3, #17
 8005d1a:	4623      	mov	r3, r4
 8005d1c:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8005d20:	4623      	mov	r3, r4
 8005d22:	0458      	lsls	r0, r3, #17
 8005d24:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8005d28:	1814      	adds	r4, r2, r0
 8005d2a:	643c      	str	r4, [r7, #64]	@ 0x40
 8005d2c:	414b      	adcs	r3, r1
 8005d2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d30:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8005d34:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)BME280_calib.dig_P4) << 35);
 8005d38:	4b70      	ldr	r3, [pc, #448]	@ (8005efc <BME280_Compensate_Pressure+0x2d0>)
 8005d3a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8005d3e:	b21b      	sxth	r3, r3
 8005d40:	17da      	asrs	r2, r3, #31
 8005d42:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005d46:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005d4a:	f04f 0000 	mov.w	r0, #0
 8005d4e:	f04f 0100 	mov.w	r1, #0
 8005d52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005d56:	00d9      	lsls	r1, r3, #3
 8005d58:	2000      	movs	r0, #0
 8005d5a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8005d5e:	1814      	adds	r4, r2, r0
 8005d60:	63bc      	str	r4, [r7, #56]	@ 0x38
 8005d62:	414b      	adcs	r3, r1
 8005d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d66:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8005d6a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)BME280_calib.dig_P3) >> 8) +
 8005d6e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8005d72:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005d76:	fb03 f102 	mul.w	r1, r3, r2
 8005d7a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8005d7e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005d82:	fb02 f303 	mul.w	r3, r2, r3
 8005d86:	18ca      	adds	r2, r1, r3
 8005d88:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005d8c:	fba3 1303 	umull	r1, r3, r3, r3
 8005d90:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005d94:	460b      	mov	r3, r1
 8005d96:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005d9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d9e:	18d3      	adds	r3, r2, r3
 8005da0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005da4:	4b55      	ldr	r3, [pc, #340]	@ (8005efc <BME280_Compensate_Pressure+0x2d0>)
 8005da6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005daa:	b21b      	sxth	r3, r3
 8005dac:	17da      	asrs	r2, r3, #31
 8005dae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005db2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005db6:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8005dba:	462b      	mov	r3, r5
 8005dbc:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005dc0:	4642      	mov	r2, r8
 8005dc2:	fb02 f203 	mul.w	r2, r2, r3
 8005dc6:	464b      	mov	r3, r9
 8005dc8:	4621      	mov	r1, r4
 8005dca:	fb01 f303 	mul.w	r3, r1, r3
 8005dce:	4413      	add	r3, r2
 8005dd0:	4622      	mov	r2, r4
 8005dd2:	4641      	mov	r1, r8
 8005dd4:	fba2 1201 	umull	r1, r2, r2, r1
 8005dd8:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8005ddc:	460a      	mov	r2, r1
 8005dde:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8005de2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8005de6:	4413      	add	r3, r2
 8005de8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005dec:	f04f 0000 	mov.w	r0, #0
 8005df0:	f04f 0100 	mov.w	r1, #0
 8005df4:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8005df8:	4623      	mov	r3, r4
 8005dfa:	0a18      	lsrs	r0, r3, #8
 8005dfc:	462b      	mov	r3, r5
 8005dfe:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8005e02:	462b      	mov	r3, r5
 8005e04:	1219      	asrs	r1, r3, #8
		   ((var1 * (int64_t)BME280_calib.dig_P2) << 12);
 8005e06:	4b3d      	ldr	r3, [pc, #244]	@ (8005efc <BME280_Compensate_Pressure+0x2d0>)
 8005e08:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005e0c:	b21b      	sxth	r3, r3
 8005e0e:	17da      	asrs	r2, r3, #31
 8005e10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005e14:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005e18:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005e1c:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8005e20:	464a      	mov	r2, r9
 8005e22:	fb02 f203 	mul.w	r2, r2, r3
 8005e26:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8005e2a:	4644      	mov	r4, r8
 8005e2c:	fb04 f303 	mul.w	r3, r4, r3
 8005e30:	441a      	add	r2, r3
 8005e32:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005e36:	4644      	mov	r4, r8
 8005e38:	fba3 4304 	umull	r4, r3, r3, r4
 8005e3c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005e40:	4623      	mov	r3, r4
 8005e42:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e46:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005e4a:	18d3      	adds	r3, r2, r3
 8005e4c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005e50:	f04f 0200 	mov.w	r2, #0
 8005e54:	f04f 0300 	mov.w	r3, #0
 8005e58:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8005e5c:	464c      	mov	r4, r9
 8005e5e:	0323      	lsls	r3, r4, #12
 8005e60:	4644      	mov	r4, r8
 8005e62:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8005e66:	4644      	mov	r4, r8
 8005e68:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t)BME280_calib.dig_P3) >> 8) +
 8005e6a:	1884      	adds	r4, r0, r2
 8005e6c:	633c      	str	r4, [r7, #48]	@ 0x30
 8005e6e:	eb41 0303 	adc.w	r3, r1, r3
 8005e72:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e74:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8005e78:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)BME280_calib.dig_P1) >> 33;
 8005e7c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8005e80:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8005e84:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8005e88:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8005e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8005efc <BME280_Compensate_Pressure+0x2d0>)
 8005e8e:	88db      	ldrh	r3, [r3, #6]
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	2200      	movs	r2, #0
 8005e94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005e98:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005e9c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005ea0:	462b      	mov	r3, r5
 8005ea2:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005ea6:	4642      	mov	r2, r8
 8005ea8:	fb02 f203 	mul.w	r2, r2, r3
 8005eac:	464b      	mov	r3, r9
 8005eae:	4621      	mov	r1, r4
 8005eb0:	fb01 f303 	mul.w	r3, r1, r3
 8005eb4:	4413      	add	r3, r2
 8005eb6:	4622      	mov	r2, r4
 8005eb8:	4641      	mov	r1, r8
 8005eba:	fba2 1201 	umull	r1, r2, r2, r1
 8005ebe:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8005ec2:	460a      	mov	r2, r1
 8005ec4:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8005ec8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005ecc:	4413      	add	r3, r2
 8005ece:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005ed2:	f04f 0200 	mov.w	r2, #0
 8005ed6:	f04f 0300 	mov.w	r3, #0
 8005eda:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8005ede:	4629      	mov	r1, r5
 8005ee0:	104a      	asrs	r2, r1, #1
 8005ee2:	4629      	mov	r1, r5
 8005ee4:	17cb      	asrs	r3, r1, #31
 8005ee6:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	if (var1 == 0) return 0; // avoid division by zero
 8005eea:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	d108      	bne.n	8005f04 <BME280_Compensate_Pressure+0x2d8>
 8005ef2:	eddf 7a03 	vldr	s15, [pc, #12]	@ 8005f00 <BME280_Compensate_Pressure+0x2d4>
 8005ef6:	e153      	b.n	80061a0 <BME280_Compensate_Pressure+0x574>
 8005ef8:	20005a84 	.word	0x20005a84
 8005efc:	20005a54 	.word	0x20005a54
 8005f00:	00000000 	.word	0x00000000

	p = 1048576 - adc_P;
 8005f04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f08:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f10:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f12:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8005f16:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p << 31) - var2) * 3125) / var1;
 8005f1a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005f1e:	085b      	lsrs	r3, r3, #1
 8005f20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f24:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005f28:	07db      	lsls	r3, r3, #31
 8005f2a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005f2e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8005f32:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8005f36:	4621      	mov	r1, r4
 8005f38:	1a89      	subs	r1, r1, r2
 8005f3a:	67b9      	str	r1, [r7, #120]	@ 0x78
 8005f3c:	4629      	mov	r1, r5
 8005f3e:	eb61 0303 	sbc.w	r3, r1, r3
 8005f42:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005f44:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8005f48:	4622      	mov	r2, r4
 8005f4a:	462b      	mov	r3, r5
 8005f4c:	1891      	adds	r1, r2, r2
 8005f4e:	6239      	str	r1, [r7, #32]
 8005f50:	415b      	adcs	r3, r3
 8005f52:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f54:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f58:	4621      	mov	r1, r4
 8005f5a:	1851      	adds	r1, r2, r1
 8005f5c:	61b9      	str	r1, [r7, #24]
 8005f5e:	4629      	mov	r1, r5
 8005f60:	414b      	adcs	r3, r1
 8005f62:	61fb      	str	r3, [r7, #28]
 8005f64:	f04f 0200 	mov.w	r2, #0
 8005f68:	f04f 0300 	mov.w	r3, #0
 8005f6c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8005f70:	4649      	mov	r1, r9
 8005f72:	018b      	lsls	r3, r1, #6
 8005f74:	4641      	mov	r1, r8
 8005f76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f7a:	4641      	mov	r1, r8
 8005f7c:	018a      	lsls	r2, r1, #6
 8005f7e:	4641      	mov	r1, r8
 8005f80:	1889      	adds	r1, r1, r2
 8005f82:	6139      	str	r1, [r7, #16]
 8005f84:	4649      	mov	r1, r9
 8005f86:	eb43 0101 	adc.w	r1, r3, r1
 8005f8a:	6179      	str	r1, [r7, #20]
 8005f8c:	f04f 0200 	mov.w	r2, #0
 8005f90:	f04f 0300 	mov.w	r3, #0
 8005f94:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8005f98:	4649      	mov	r1, r9
 8005f9a:	008b      	lsls	r3, r1, #2
 8005f9c:	4641      	mov	r1, r8
 8005f9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fa2:	4641      	mov	r1, r8
 8005fa4:	008a      	lsls	r2, r1, #2
 8005fa6:	4610      	mov	r0, r2
 8005fa8:	4619      	mov	r1, r3
 8005faa:	4603      	mov	r3, r0
 8005fac:	4622      	mov	r2, r4
 8005fae:	189b      	adds	r3, r3, r2
 8005fb0:	60bb      	str	r3, [r7, #8]
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	462a      	mov	r2, r5
 8005fb6:	eb42 0303 	adc.w	r3, r2, r3
 8005fba:	60fb      	str	r3, [r7, #12]
 8005fbc:	f04f 0200 	mov.w	r2, #0
 8005fc0:	f04f 0300 	mov.w	r3, #0
 8005fc4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8005fc8:	4649      	mov	r1, r9
 8005fca:	008b      	lsls	r3, r1, #2
 8005fcc:	4641      	mov	r1, r8
 8005fce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fd2:	4641      	mov	r1, r8
 8005fd4:	008a      	lsls	r2, r1, #2
 8005fd6:	4610      	mov	r0, r2
 8005fd8:	4619      	mov	r1, r3
 8005fda:	4603      	mov	r3, r0
 8005fdc:	4622      	mov	r2, r4
 8005fde:	189b      	adds	r3, r3, r2
 8005fe0:	673b      	str	r3, [r7, #112]	@ 0x70
 8005fe2:	462b      	mov	r3, r5
 8005fe4:	460a      	mov	r2, r1
 8005fe6:	eb42 0303 	adc.w	r3, r2, r3
 8005fea:	677b      	str	r3, [r7, #116]	@ 0x74
 8005fec:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8005ff0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8005ff4:	f7fa fef6 	bl	8000de4 <__aeabi_ldivmod>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)BME280_calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8006000:	4b6b      	ldr	r3, [pc, #428]	@ (80061b0 <BME280_Compensate_Pressure+0x584>)
 8006002:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8006006:	b21b      	sxth	r3, r3
 8006008:	17da      	asrs	r2, r3, #31
 800600a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800600c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800600e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8006012:	f04f 0000 	mov.w	r0, #0
 8006016:	f04f 0100 	mov.w	r1, #0
 800601a:	0b50      	lsrs	r0, r2, #13
 800601c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8006020:	1359      	asrs	r1, r3, #13
 8006022:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8006026:	462b      	mov	r3, r5
 8006028:	fb00 f203 	mul.w	r2, r0, r3
 800602c:	4623      	mov	r3, r4
 800602e:	fb03 f301 	mul.w	r3, r3, r1
 8006032:	4413      	add	r3, r2
 8006034:	4622      	mov	r2, r4
 8006036:	fba2 1200 	umull	r1, r2, r2, r0
 800603a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800603e:	460a      	mov	r2, r1
 8006040:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8006044:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006048:	4413      	add	r3, r2
 800604a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800604e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8006052:	f04f 0000 	mov.w	r0, #0
 8006056:	f04f 0100 	mov.w	r1, #0
 800605a:	0b50      	lsrs	r0, r2, #13
 800605c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8006060:	1359      	asrs	r1, r3, #13
 8006062:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8006066:	462b      	mov	r3, r5
 8006068:	fb00 f203 	mul.w	r2, r0, r3
 800606c:	4623      	mov	r3, r4
 800606e:	fb03 f301 	mul.w	r3, r3, r1
 8006072:	4413      	add	r3, r2
 8006074:	4622      	mov	r2, r4
 8006076:	fba2 1200 	umull	r1, r2, r2, r0
 800607a:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800607e:	460a      	mov	r2, r1
 8006080:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8006084:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8006088:	4413      	add	r3, r2
 800608a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800608e:	f04f 0200 	mov.w	r2, #0
 8006092:	f04f 0300 	mov.w	r3, #0
 8006096:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 800609a:	4621      	mov	r1, r4
 800609c:	0e4a      	lsrs	r2, r1, #25
 800609e:	4629      	mov	r1, r5
 80060a0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80060a4:	4629      	mov	r1, r5
 80060a6:	164b      	asrs	r3, r1, #25
 80060a8:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)BME280_calib.dig_P8) * p) >> 19;
 80060ac:	4b40      	ldr	r3, [pc, #256]	@ (80061b0 <BME280_Compensate_Pressure+0x584>)
 80060ae:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80060b2:	b21b      	sxth	r3, r3
 80060b4:	17da      	asrs	r2, r3, #31
 80060b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80060b8:	667a      	str	r2, [r7, #100]	@ 0x64
 80060ba:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80060be:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80060c2:	462a      	mov	r2, r5
 80060c4:	fb02 f203 	mul.w	r2, r2, r3
 80060c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060cc:	4621      	mov	r1, r4
 80060ce:	fb01 f303 	mul.w	r3, r1, r3
 80060d2:	4413      	add	r3, r2
 80060d4:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80060d8:	4621      	mov	r1, r4
 80060da:	fba2 1201 	umull	r1, r2, r2, r1
 80060de:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80060e2:	460a      	mov	r2, r1
 80060e4:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 80060e8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80060ec:	4413      	add	r3, r2
 80060ee:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80060f2:	f04f 0200 	mov.w	r2, #0
 80060f6:	f04f 0300 	mov.w	r3, #0
 80060fa:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 80060fe:	4621      	mov	r1, r4
 8006100:	0cca      	lsrs	r2, r1, #19
 8006102:	4629      	mov	r1, r5
 8006104:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8006108:	4629      	mov	r1, r5
 800610a:	14cb      	asrs	r3, r1, #19
 800610c:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)BME280_calib.dig_P7) << 4);
 8006110:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8006114:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8006118:	1884      	adds	r4, r0, r2
 800611a:	65bc      	str	r4, [r7, #88]	@ 0x58
 800611c:	eb41 0303 	adc.w	r3, r1, r3
 8006120:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006122:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8006126:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800612a:	4621      	mov	r1, r4
 800612c:	1889      	adds	r1, r1, r2
 800612e:	6539      	str	r1, [r7, #80]	@ 0x50
 8006130:	4629      	mov	r1, r5
 8006132:	eb43 0101 	adc.w	r1, r3, r1
 8006136:	6579      	str	r1, [r7, #84]	@ 0x54
 8006138:	f04f 0000 	mov.w	r0, #0
 800613c:	f04f 0100 	mov.w	r1, #0
 8006140:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8006144:	4623      	mov	r3, r4
 8006146:	0a18      	lsrs	r0, r3, #8
 8006148:	462b      	mov	r3, r5
 800614a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800614e:	462b      	mov	r3, r5
 8006150:	1219      	asrs	r1, r3, #8
 8006152:	4b17      	ldr	r3, [pc, #92]	@ (80061b0 <BME280_Compensate_Pressure+0x584>)
 8006154:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8006158:	b21b      	sxth	r3, r3
 800615a:	17da      	asrs	r2, r3, #31
 800615c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800615e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006160:	f04f 0200 	mov.w	r2, #0
 8006164:	f04f 0300 	mov.w	r3, #0
 8006168:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 800616c:	464c      	mov	r4, r9
 800616e:	0123      	lsls	r3, r4, #4
 8006170:	4644      	mov	r4, r8
 8006172:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8006176:	4644      	mov	r4, r8
 8006178:	0122      	lsls	r2, r4, #4
 800617a:	1884      	adds	r4, r0, r2
 800617c:	603c      	str	r4, [r7, #0]
 800617e:	eb41 0303 	adc.w	r3, r1, r3
 8006182:	607b      	str	r3, [r7, #4]
 8006184:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006188:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (float)p / 25600.0f;  // hPa
 800618c:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8006190:	f7fa fdea 	bl	8000d68 <__aeabi_l2f>
 8006194:	ee06 0a90 	vmov	s13, r0
 8006198:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80061b4 <BME280_Compensate_Pressure+0x588>
 800619c:	eec6 7a87 	vdiv.f32	s15, s13, s14
}
 80061a0:	eeb0 0a67 	vmov.f32	s0, s15
 80061a4:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80061a8:	46bd      	mov	sp, r7
 80061aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061ae:	bf00      	nop
 80061b0:	20005a54 	.word	0x20005a54
 80061b4:	46c80000 	.word	0x46c80000

080061b8 <BME280_Compensate_Humidity>:

float BME280_Compensate_Humidity(uint16_t adc_H) {
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
 80061be:	4603      	mov	r3, r0
 80061c0:	80fb      	strh	r3, [r7, #6]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 80061c2:	4b32      	ldr	r3, [pc, #200]	@ (800628c <BME280_Compensate_Humidity+0xd4>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 80061ca:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)BME280_calib.dig_H4) << 20) -
 80061cc:	88fb      	ldrh	r3, [r7, #6]
 80061ce:	039a      	lsls	r2, r3, #14
 80061d0:	4b2f      	ldr	r3, [pc, #188]	@ (8006290 <BME280_Compensate_Humidity+0xd8>)
 80061d2:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80061d6:	051b      	lsls	r3, r3, #20
 80061d8:	1ad2      	subs	r2, r2, r3
					(((int32_t)BME280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 80061da:	4b2d      	ldr	r3, [pc, #180]	@ (8006290 <BME280_Compensate_Humidity+0xd8>)
 80061dc:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80061e0:	4619      	mov	r1, r3
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	fb01 f303 	mul.w	r3, r1, r3
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)BME280_calib.dig_H4) << 20) -
 80061e8:	1ad3      	subs	r3, r2, r3
					(((int32_t)BME280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 80061ea:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80061ee:	13db      	asrs	r3, r3, #15
				 (((((((v_x1_u32r * ((int32_t)BME280_calib.dig_H6)) >> 10) *
 80061f0:	4a27      	ldr	r2, [pc, #156]	@ (8006290 <BME280_Compensate_Humidity+0xd8>)
 80061f2:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 80061f6:	4611      	mov	r1, r2
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	fb01 f202 	mul.w	r2, r1, r2
 80061fe:	1292      	asrs	r2, r2, #10
					  (((v_x1_u32r * ((int32_t)BME280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 8006200:	4923      	ldr	r1, [pc, #140]	@ (8006290 <BME280_Compensate_Humidity+0xd8>)
 8006202:	7f09      	ldrb	r1, [r1, #28]
 8006204:	4608      	mov	r0, r1
 8006206:	68f9      	ldr	r1, [r7, #12]
 8006208:	fb00 f101 	mul.w	r1, r0, r1
 800620c:	12c9      	asrs	r1, r1, #11
 800620e:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
				 (((((((v_x1_u32r * ((int32_t)BME280_calib.dig_H6)) >> 10) *
 8006212:	fb01 f202 	mul.w	r2, r1, r2
					  (((v_x1_u32r * ((int32_t)BME280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 8006216:	1292      	asrs	r2, r2, #10
 8006218:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
					((int32_t)2097152)) * ((int32_t)BME280_calib.dig_H2) + 8192) >> 14));
 800621c:	491c      	ldr	r1, [pc, #112]	@ (8006290 <BME280_Compensate_Humidity+0xd8>)
 800621e:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8006222:	fb01 f202 	mul.w	r2, r1, r2
 8006226:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800622a:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)BME280_calib.dig_H4) << 20) -
 800622c:	fb02 f303 	mul.w	r3, r2, r3
 8006230:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	13db      	asrs	r3, r3, #15
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	13d2      	asrs	r2, r2, #15
 800623a:	fb02 f303 	mul.w	r3, r2, r3
 800623e:	11db      	asrs	r3, r3, #7
							((int32_t)BME280_calib.dig_H1)) >> 4);
 8006240:	4a13      	ldr	r2, [pc, #76]	@ (8006290 <BME280_Compensate_Humidity+0xd8>)
 8006242:	7e12      	ldrb	r2, [r2, #24]
	v_x1_u32r = v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8006244:	fb02 f303 	mul.w	r3, r2, r3
							((int32_t)BME280_calib.dig_H1)) >> 4);
 8006248:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006256:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 800625e:	bfa8      	it	ge
 8006260:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8006264:	60fb      	str	r3, [r7, #12]
	return (float)(v_x1_u32r >> 12) / 1024.0f;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	131b      	asrs	r3, r3, #12
 800626a:	ee07 3a90 	vmov	s15, r3
 800626e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006272:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8006294 <BME280_Compensate_Humidity+0xdc>
 8006276:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800627a:	eef0 7a66 	vmov.f32	s15, s13
}
 800627e:	eeb0 0a67 	vmov.f32	s0, s15
 8006282:	3714      	adds	r7, #20
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr
 800628c:	20005a84 	.word	0x20005a84
 8006290:	20005a54 	.word	0x20005a54
 8006294:	44800000 	.word	0x44800000

08006298 <BME280_Convert_Raw_To_Physical>:

void BME280_Convert_Raw_To_Physical(BME280_RawData_t *RawData, BME280_Data_t *PhyData) {
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
	PhyData->temperature = BME280_Compensate_Temperature(RawData->temp);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7ff fc74 	bl	8005b94 <BME280_Compensate_Temperature>
 80062ac:	eef0 7a40 	vmov.f32	s15, s0
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	edc3 7a00 	vstr	s15, [r3]
	PhyData->pressure = BME280_Compensate_Pressure(RawData->press);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7ff fcb6 	bl	8005c2c <BME280_Compensate_Pressure>
 80062c0:	eef0 7a40 	vmov.f32	s15, s0
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	edc3 7a01 	vstr	s15, [r3, #4]
	PhyData->humidity = BME280_Compensate_Humidity(RawData->humi);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7ff ff70 	bl	80061b8 <BME280_Compensate_Humidity>
 80062d8:	eef0 7a40 	vmov.f32	s15, s0
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80062e2:	bf00      	nop
 80062e4:	3708      	adds	r7, #8
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
	...

080062ec <BME280_Read_Data>:

I2C_Status_t BME280_Read_Data(BME280_Data_t *BME280_Data) {
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
	if (BME280_RawData.status == I2C_Error) BME280_Init();
 80062f4:	4b0a      	ldr	r3, [pc, #40]	@ (8006320 <BME280_Read_Data+0x34>)
 80062f6:	7a9b      	ldrb	r3, [r3, #10]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d101      	bne.n	8006300 <BME280_Read_Data+0x14>
 80062fc:	f7ff fb20 	bl	8005940 <BME280_Init>
	BME280_Read_CalibrationData();
 8006300:	f7ff fb58 	bl	80059b4 <BME280_Read_CalibrationData>
	BME280_Read_RawData(&BME280_RawData);
 8006304:	4806      	ldr	r0, [pc, #24]	@ (8006320 <BME280_Read_Data+0x34>)
 8006306:	f7ff fc13 	bl	8005b30 <BME280_Read_RawData>
	BME280_Convert_Raw_To_Physical(&BME280_RawData, BME280_Data);
 800630a:	6879      	ldr	r1, [r7, #4]
 800630c:	4804      	ldr	r0, [pc, #16]	@ (8006320 <BME280_Read_Data+0x34>)
 800630e:	f7ff ffc3 	bl	8006298 <BME280_Convert_Raw_To_Physical>
	return BME280_RawData.status;
 8006312:	4b03      	ldr	r3, [pc, #12]	@ (8006320 <BME280_Read_Data+0x34>)
 8006314:	7a9b      	ldrb	r3, [r3, #10]
}
 8006316:	4618      	mov	r0, r3
 8006318:	3708      	adds	r7, #8
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	20005a78 	.word	0x20005a78

08006324 <H250_I2C_Read>:

static H250_I2C_RawData_t H250_I2C_RawData = {
		.status = I2C_Success,
};

void H250_I2C_Read(uint8_t reg, uint8_t *pData, uint8_t length) {
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af02      	add	r7, sp, #8
 800632a:	4603      	mov	r3, r0
 800632c:	6039      	str	r1, [r7, #0]
 800632e:	71fb      	strb	r3, [r7, #7]
 8006330:	4613      	mov	r3, r2
 8006332:	71bb      	strb	r3, [r7, #6]
	H250_I2C_RawData.status = I2C_ReadMulti(EXP_I2C_SENSOR_HANDLE, H250_I2C_ADDR, reg, pData, length);
 8006334:	79bb      	ldrb	r3, [r7, #6]
 8006336:	b29b      	uxth	r3, r3
 8006338:	79fa      	ldrb	r2, [r7, #7]
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	2131      	movs	r1, #49	@ 0x31
 8006340:	4805      	ldr	r0, [pc, #20]	@ (8006358 <H250_I2C_Read+0x34>)
 8006342:	f7fb f8c2 	bl	80014ca <I2C_ReadMulti>
 8006346:	4603      	mov	r3, r0
 8006348:	461a      	mov	r2, r3
 800634a:	4b04      	ldr	r3, [pc, #16]	@ (800635c <H250_I2C_Read+0x38>)
 800634c:	71da      	strb	r2, [r3, #7]
}
 800634e:	bf00      	nop
 8006350:	3708      	adds	r7, #8
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	40005400 	.word	0x40005400
 800635c:	20005a88 	.word	0x20005a88

08006360 <H250_I2C_Read_Data>:

I2C_Status_t H250_I2C_Read_Data(H250_I2C_Data_t *H250_I2C_Data)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
	H250_I2C_Read(H250_REG, &H250_I2C_RawData.RxData[0], 7);
 8006368:	2207      	movs	r2, #7
 800636a:	490b      	ldr	r1, [pc, #44]	@ (8006398 <H250_I2C_Read_Data+0x38>)
 800636c:	2052      	movs	r0, #82	@ 0x52
 800636e:	f7ff ffd9 	bl	8006324 <H250_I2C_Read>
	*H250_I2C_Data = (H250_I2C_RawData.RxData[1] << 8) | H250_I2C_RawData.RxData[2];
 8006372:	4b09      	ldr	r3, [pc, #36]	@ (8006398 <H250_I2C_Read_Data+0x38>)
 8006374:	785b      	ldrb	r3, [r3, #1]
 8006376:	b21b      	sxth	r3, r3
 8006378:	021b      	lsls	r3, r3, #8
 800637a:	b21a      	sxth	r2, r3
 800637c:	4b06      	ldr	r3, [pc, #24]	@ (8006398 <H250_I2C_Read_Data+0x38>)
 800637e:	789b      	ldrb	r3, [r3, #2]
 8006380:	b21b      	sxth	r3, r3
 8006382:	4313      	orrs	r3, r2
 8006384:	b21b      	sxth	r3, r3
 8006386:	b29a      	uxth	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	801a      	strh	r2, [r3, #0]
	return H250_I2C_RawData.status;
 800638c:	4b02      	ldr	r3, [pc, #8]	@ (8006398 <H250_I2C_Read_Data+0x38>)
 800638e:	79db      	ldrb	r3, [r3, #7]
}
 8006390:	4618      	mov	r0, r3
 8006392:	3708      	adds	r7, #8
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}
 8006398:	20005a88 	.word	0x20005a88

0800639c <H3LIS331DL_Write>:
H3LIS331DL_RawData_t H3LIS331DL_RawData = {
		.status = I2C_Success,
};

void H3LIS331DL_Write(uint8_t reg, uint8_t data)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	4603      	mov	r3, r0
 80063a4:	460a      	mov	r2, r1
 80063a6:	71fb      	strb	r3, [r7, #7]
 80063a8:	4613      	mov	r3, r2
 80063aa:	71bb      	strb	r3, [r7, #6]
	H3LIS331DL_RawData.status = I2C_Write(EXP_I2C_SENSOR_HANDLE, H3LIS331DL_I2C_ADDR, reg, data);
 80063ac:	79bb      	ldrb	r3, [r7, #6]
 80063ae:	79fa      	ldrb	r2, [r7, #7]
 80063b0:	2118      	movs	r1, #24
 80063b2:	4805      	ldr	r0, [pc, #20]	@ (80063c8 <H3LIS331DL_Write+0x2c>)
 80063b4:	f7fa fff9 	bl	80013aa <I2C_Write>
 80063b8:	4603      	mov	r3, r0
 80063ba:	461a      	mov	r2, r3
 80063bc:	4b03      	ldr	r3, [pc, #12]	@ (80063cc <H3LIS331DL_Write+0x30>)
 80063be:	731a      	strb	r2, [r3, #12]
}
 80063c0:	bf00      	nop
 80063c2:	3708      	adds	r7, #8
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	40005400 	.word	0x40005400
 80063cc:	20005a90 	.word	0x20005a90

080063d0 <H3LIS331DL_Read>:

void H3LIS331DL_Read(uint8_t reg, uint8_t *pData, uint8_t length)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af02      	add	r7, sp, #8
 80063d6:	4603      	mov	r3, r0
 80063d8:	6039      	str	r1, [r7, #0]
 80063da:	71fb      	strb	r3, [r7, #7]
 80063dc:	4613      	mov	r3, r2
 80063de:	71bb      	strb	r3, [r7, #6]
	H3LIS331DL_RawData.status = I2C_ReadMulti(EXP_I2C_SENSOR_HANDLE, H3LIS331DL_I2C_ADDR, reg, pData, length);
 80063e0:	79bb      	ldrb	r3, [r7, #6]
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	79fa      	ldrb	r2, [r7, #7]
 80063e6:	9300      	str	r3, [sp, #0]
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	2118      	movs	r1, #24
 80063ec:	4805      	ldr	r0, [pc, #20]	@ (8006404 <H3LIS331DL_Read+0x34>)
 80063ee:	f7fb f86c 	bl	80014ca <I2C_ReadMulti>
 80063f2:	4603      	mov	r3, r0
 80063f4:	461a      	mov	r2, r3
 80063f6:	4b04      	ldr	r3, [pc, #16]	@ (8006408 <H3LIS331DL_Read+0x38>)
 80063f8:	731a      	strb	r2, [r3, #12]
}
 80063fa:	bf00      	nop
 80063fc:	3708      	adds	r7, #8
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	40005400 	.word	0x40005400
 8006408:	20005a90 	.word	0x20005a90

0800640c <H3LIS331DL_Init>:

I2C_Status_t H3LIS331DL_Init(void)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
	H3LIS331DL_Write(H3LIS331DL_CTRL_REG1, 0x3F);		// 0011 1111 (Normal mode, 1000Hz, enable XYZ)
 8006412:	213f      	movs	r1, #63	@ 0x3f
 8006414:	2020      	movs	r0, #32
 8006416:	f7ff ffc1 	bl	800639c <H3LIS331DL_Write>
	H3LIS331DL_Write(H3LIS331DL_CTRL_REG4, 0x30);		// 0011 0000 (FS = 400g)
 800641a:	2130      	movs	r1, #48	@ 0x30
 800641c:	2023      	movs	r0, #35	@ 0x23
 800641e:	f7ff ffbd 	bl	800639c <H3LIS331DL_Write>
	uint8_t ID = 0;
 8006422:	2300      	movs	r3, #0
 8006424:	71fb      	strb	r3, [r7, #7]
	H3LIS331DL_Read_ID(&ID);
 8006426:	1dfb      	adds	r3, r7, #7
 8006428:	4618      	mov	r0, r3
 800642a:	f000 f80f 	bl	800644c <H3LIS331DL_Read_ID>
	if (ID != H3LIS331DL_ID) H3LIS331DL_RawData.status = I2C_Error;
 800642e:	79fb      	ldrb	r3, [r7, #7]
 8006430:	2b32      	cmp	r3, #50	@ 0x32
 8006432:	d002      	beq.n	800643a <H3LIS331DL_Init+0x2e>
 8006434:	4b04      	ldr	r3, [pc, #16]	@ (8006448 <H3LIS331DL_Init+0x3c>)
 8006436:	2201      	movs	r2, #1
 8006438:	731a      	strb	r2, [r3, #12]
	return H3LIS331DL_RawData.status;
 800643a:	4b03      	ldr	r3, [pc, #12]	@ (8006448 <H3LIS331DL_Init+0x3c>)
 800643c:	7b1b      	ldrb	r3, [r3, #12]
}
 800643e:	4618      	mov	r0, r3
 8006440:	3708      	adds	r7, #8
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	20005a90 	.word	0x20005a90

0800644c <H3LIS331DL_Read_ID>:

I2C_Status_t H3LIS331DL_Read_ID(uint8_t *ID)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b082      	sub	sp, #8
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
	H3LIS331DL_Read(H3LIS331DL_ID_REG, ID, 1);  //ID Device: 0x32
 8006454:	2201      	movs	r2, #1
 8006456:	6879      	ldr	r1, [r7, #4]
 8006458:	200f      	movs	r0, #15
 800645a:	f7ff ffb9 	bl	80063d0 <H3LIS331DL_Read>
	return H3LIS331DL_RawData.status;
 800645e:	4b03      	ldr	r3, [pc, #12]	@ (800646c <H3LIS331DL_Read_ID+0x20>)
 8006460:	7b1b      	ldrb	r3, [r3, #12]
}
 8006462:	4618      	mov	r0, r3
 8006464:	3708      	adds	r7, #8
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	20005a90 	.word	0x20005a90

08006470 <H3LIS331DL_Read_RawData>:

void H3LIS331DL_Read_RawData(H3LIS331DL_RawData_t *RawData)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
	H3LIS331DL_Read(H3LIS331DL_OUT_X_L, RawData->accel_raw, 6);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2206      	movs	r2, #6
 800647c:	4619      	mov	r1, r3
 800647e:	2028      	movs	r0, #40	@ 0x28
 8006480:	f7ff ffa6 	bl	80063d0 <H3LIS331DL_Read>

	// calib to int16
	RawData->acceleration[0] = (int16_t)((RawData->accel_raw[1] << 8) | RawData->accel_raw[0]);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	785b      	ldrb	r3, [r3, #1]
 8006488:	b21b      	sxth	r3, r3
 800648a:	021b      	lsls	r3, r3, #8
 800648c:	b21a      	sxth	r2, r3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	b21b      	sxth	r3, r3
 8006494:	4313      	orrs	r3, r2
 8006496:	b21a      	sxth	r2, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	80da      	strh	r2, [r3, #6]
	RawData->acceleration[1] = (int16_t)((RawData->accel_raw[3] << 8) | RawData->accel_raw[2]);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	78db      	ldrb	r3, [r3, #3]
 80064a0:	b21b      	sxth	r3, r3
 80064a2:	021b      	lsls	r3, r3, #8
 80064a4:	b21a      	sxth	r2, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	789b      	ldrb	r3, [r3, #2]
 80064aa:	b21b      	sxth	r3, r3
 80064ac:	4313      	orrs	r3, r2
 80064ae:	b21a      	sxth	r2, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	811a      	strh	r2, [r3, #8]
	RawData->acceleration[2] = (int16_t)((RawData->accel_raw[5] << 8) | RawData->accel_raw[4]);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	795b      	ldrb	r3, [r3, #5]
 80064b8:	b21b      	sxth	r3, r3
 80064ba:	021b      	lsls	r3, r3, #8
 80064bc:	b21a      	sxth	r2, r3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	791b      	ldrb	r3, [r3, #4]
 80064c2:	b21b      	sxth	r3, r3
 80064c4:	4313      	orrs	r3, r2
 80064c6:	b21a      	sxth	r2, r3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	815a      	strh	r2, [r3, #10]
}
 80064cc:	bf00      	nop
 80064ce:	3708      	adds	r7, #8
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <H3LIS331DL_Get_Accel>:

I2C_Status_t H3LIS331DL_Get_Accel(H3LIS331DL_Data_t *Data)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
	if (H3LIS331DL_RawData.status == I2C_Error) H3LIS331DL_Init();
 80064dc:	4b1c      	ldr	r3, [pc, #112]	@ (8006550 <H3LIS331DL_Get_Accel+0x7c>)
 80064de:	7b1b      	ldrb	r3, [r3, #12]
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d101      	bne.n	80064e8 <H3LIS331DL_Get_Accel+0x14>
 80064e4:	f7ff ff92 	bl	800640c <H3LIS331DL_Init>
	H3LIS331DL_Read_RawData(&H3LIS331DL_RawData);
 80064e8:	4819      	ldr	r0, [pc, #100]	@ (8006550 <H3LIS331DL_Get_Accel+0x7c>)
 80064ea:	f7ff ffc1 	bl	8006470 <H3LIS331DL_Read_RawData>
	Data->x = (float)(H3LIS331DL_RawData.acceleration[0])*12.1875f;
 80064ee:	4b18      	ldr	r3, [pc, #96]	@ (8006550 <H3LIS331DL_Get_Accel+0x7c>)
 80064f0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80064f4:	ee07 3a90 	vmov	s15, r3
 80064f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064fc:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8006554 <H3LIS331DL_Get_Accel+0x80>
 8006500:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	edc3 7a00 	vstr	s15, [r3]
	Data->y = (float)(H3LIS331DL_RawData.acceleration[1])*12.1875f;
 800650a:	4b11      	ldr	r3, [pc, #68]	@ (8006550 <H3LIS331DL_Get_Accel+0x7c>)
 800650c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006510:	ee07 3a90 	vmov	s15, r3
 8006514:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006518:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8006554 <H3LIS331DL_Get_Accel+0x80>
 800651c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	edc3 7a01 	vstr	s15, [r3, #4]
	Data->z = (float)(H3LIS331DL_RawData.acceleration[2])*12.1875f;
 8006526:	4b0a      	ldr	r3, [pc, #40]	@ (8006550 <H3LIS331DL_Get_Accel+0x7c>)
 8006528:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800652c:	ee07 3a90 	vmov	s15, r3
 8006530:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006534:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8006554 <H3LIS331DL_Get_Accel+0x80>
 8006538:	ee67 7a87 	vmul.f32	s15, s15, s14
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	edc3 7a02 	vstr	s15, [r3, #8]
	return H3LIS331DL_RawData.status;
 8006542:	4b03      	ldr	r3, [pc, #12]	@ (8006550 <H3LIS331DL_Get_Accel+0x7c>)
 8006544:	7b1b      	ldrb	r3, [r3, #12]
}
 8006546:	4618      	mov	r0, r3
 8006548:	3708      	adds	r7, #8
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	20005a90 	.word	0x20005a90
 8006554:	41430000 	.word	0x41430000

08006558 <LL_I2C_IsActiveFlag_TXE>:
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	695b      	ldr	r3, [r3, #20]
 8006564:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006568:	2b80      	cmp	r3, #128	@ 0x80
 800656a:	bf0c      	ite	eq
 800656c:	2301      	moveq	r3, #1
 800656e:	2300      	movne	r3, #0
 8006570:	b2db      	uxtb	r3, r3
}
 8006572:	4618      	mov	r0, r3
 8006574:	370c      	adds	r7, #12
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr

0800657e <LL_I2C_IsActiveFlag_RXNE>:
{
 800657e:	b480      	push	{r7}
 8006580:	b083      	sub	sp, #12
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	695b      	ldr	r3, [r3, #20]
 800658a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800658e:	2b40      	cmp	r3, #64	@ 0x40
 8006590:	bf0c      	ite	eq
 8006592:	2301      	moveq	r3, #1
 8006594:	2300      	movne	r3, #0
 8006596:	b2db      	uxtb	r3, r3
}
 8006598:	4618      	mov	r0, r3
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <LL_I2C_IsActiveFlag_SB>:
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	695b      	ldr	r3, [r3, #20]
 80065b0:	f003 0301 	and.w	r3, r3, #1
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	bf0c      	ite	eq
 80065b8:	2301      	moveq	r3, #1
 80065ba:	2300      	movne	r3, #0
 80065bc:	b2db      	uxtb	r3, r3
}
 80065be:	4618      	mov	r0, r3
 80065c0:	370c      	adds	r7, #12
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr

080065ca <LL_I2C_IsActiveFlag_ADDR>:
{
 80065ca:	b480      	push	{r7}
 80065cc:	b083      	sub	sp, #12
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	f003 0302 	and.w	r3, r3, #2
 80065da:	2b02      	cmp	r3, #2
 80065dc:	bf0c      	ite	eq
 80065de:	2301      	moveq	r3, #1
 80065e0:	2300      	movne	r3, #0
 80065e2:	b2db      	uxtb	r3, r3
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	370c      	adds	r7, #12
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <LL_I2C_IsActiveFlag_BUSY>:
{
 80065f0:	b480      	push	{r7}
 80065f2:	b083      	sub	sp, #12
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR2, I2C_SR2_BUSY) == (I2C_SR2_BUSY));
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	699b      	ldr	r3, [r3, #24]
 80065fc:	f003 0302 	and.w	r3, r3, #2
 8006600:	2b02      	cmp	r3, #2
 8006602:	bf0c      	ite	eq
 8006604:	2301      	moveq	r3, #1
 8006606:	2300      	movne	r3, #0
 8006608:	b2db      	uxtb	r3, r3
}
 800660a:	4618      	mov	r0, r3
 800660c:	370c      	adds	r7, #12
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr

08006616 <LL_I2C_ClearFlag_ADDR>:
{
 8006616:	b480      	push	{r7}
 8006618:	b085      	sub	sp, #20
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
  tmpreg = I2Cx->SR1;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	695b      	ldr	r3, [r3, #20]
 8006622:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8006624:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	699b      	ldr	r3, [r3, #24]
 800662a:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800662c:	68fb      	ldr	r3, [r7, #12]
}
 800662e:	bf00      	nop
 8006630:	3714      	adds	r7, #20
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr

0800663a <LL_I2C_AcknowledgeNextData>:
{
 800663a:	b480      	push	{r7}
 800663c:	b083      	sub	sp, #12
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
 8006642:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	431a      	orrs	r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	601a      	str	r2, [r3, #0]
}
 8006654:	bf00      	nop
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <LL_I2C_GenerateStartCondition>:
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	601a      	str	r2, [r3, #0]
}
 8006674:	bf00      	nop
 8006676:	370c      	adds	r7, #12
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <LL_I2C_GenerateStopCondition>:
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	601a      	str	r2, [r3, #0]
}
 8006694:	bf00      	nop
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <LL_I2C_ReceiveData8>:
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	b2db      	uxtb	r3, r3
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	370c      	adds	r7, #12
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr

080066ba <LL_I2C_TransmitData8>:
{
 80066ba:	b480      	push	{r7}
 80066bc:	b083      	sub	sp, #12
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
 80066c2:	460b      	mov	r3, r1
 80066c4:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80066ce:	78fb      	ldrb	r3, [r7, #3]
 80066d0:	431a      	orrs	r2, r3
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	611a      	str	r2, [r3, #16]
}
 80066d6:	bf00      	nop
 80066d8:	370c      	adds	r7, #12
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr

080066e2 <CheckSum>:
#include "stm32f4xx_ll_utils.h"
#include "stm32f4xx_ll_i2c.h"

static K33_RawData_t K33_RawData;

uint8_t CheckSum(uint8_t * buf, uint8_t count) {
 80066e2:	b480      	push	{r7}
 80066e4:	b085      	sub	sp, #20
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
 80066ea:	460b      	mov	r3, r1
 80066ec:	70fb      	strb	r3, [r7, #3]
	uint8_t sum=0;
 80066ee:	2300      	movs	r3, #0
 80066f0:	73fb      	strb	r3, [r7, #15]
	while (count>0) {
 80066f2:	e00a      	b.n	800670a <CheckSum+0x28>
		sum += *buf;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	781a      	ldrb	r2, [r3, #0]
 80066f8:	7bfb      	ldrb	r3, [r7, #15]
 80066fa:	4413      	add	r3, r2
 80066fc:	73fb      	strb	r3, [r7, #15]
		buf++;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	3301      	adds	r3, #1
 8006702:	607b      	str	r3, [r7, #4]
		count--;
 8006704:	78fb      	ldrb	r3, [r7, #3]
 8006706:	3b01      	subs	r3, #1
 8006708:	70fb      	strb	r3, [r7, #3]
	while (count>0) {
 800670a:	78fb      	ldrb	r3, [r7, #3]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d1f1      	bne.n	80066f4 <CheckSum+0x12>
	}
	return sum;
 8006710:	7bfb      	ldrb	r3, [r7, #15]
}
 8006712:	4618      	mov	r0, r3
 8006714:	3714      	adds	r7, #20
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
	...

08006720 <K33_I2C_Read_RAM>:

I2C_Status_t K33_I2C_Read_RAM(uint8_t RAM_Addr, uint8_t *pData, uint8_t NumOfBytes) {
 8006720:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006724:	b089      	sub	sp, #36	@ 0x24
 8006726:	af00      	add	r7, sp, #0
 8006728:	4603      	mov	r3, r0
 800672a:	6039      	str	r1, [r7, #0]
 800672c:	71fb      	strb	r3, [r7, #7]
 800672e:	4613      	mov	r3, r2
 8006730:	71bb      	strb	r3, [r7, #6]
 8006732:	466b      	mov	r3, sp
 8006734:	461e      	mov	r6, r3
	uint8_t NumOfByteWrite = 3;
 8006736:	2303      	movs	r3, #3
 8006738:	75fb      	strb	r3, [r7, #23]
	uint8_t buf[NumOfByteWrite];
 800673a:	7df9      	ldrb	r1, [r7, #23]
 800673c:	460b      	mov	r3, r1
 800673e:	3b01      	subs	r3, #1
 8006740:	613b      	str	r3, [r7, #16]
 8006742:	b2cb      	uxtb	r3, r1
 8006744:	2200      	movs	r2, #0
 8006746:	4698      	mov	r8, r3
 8006748:	4691      	mov	r9, r2
 800674a:	f04f 0200 	mov.w	r2, #0
 800674e:	f04f 0300 	mov.w	r3, #0
 8006752:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006756:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800675a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800675e:	b2cb      	uxtb	r3, r1
 8006760:	2200      	movs	r2, #0
 8006762:	461c      	mov	r4, r3
 8006764:	4615      	mov	r5, r2
 8006766:	f04f 0200 	mov.w	r2, #0
 800676a:	f04f 0300 	mov.w	r3, #0
 800676e:	00eb      	lsls	r3, r5, #3
 8006770:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006774:	00e2      	lsls	r2, r4, #3
 8006776:	460b      	mov	r3, r1
 8006778:	3307      	adds	r3, #7
 800677a:	08db      	lsrs	r3, r3, #3
 800677c:	00db      	lsls	r3, r3, #3
 800677e:	ebad 0d03 	sub.w	sp, sp, r3
 8006782:	466b      	mov	r3, sp
 8006784:	3300      	adds	r3, #0
 8006786:	60fb      	str	r3, [r7, #12]
	buf[0] = (uint8_t)(K33_READ_RAM_CMD | (NumOfBytes & 0x0F));
 8006788:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800678c:	f003 030f 	and.w	r3, r3, #15
 8006790:	b25b      	sxtb	r3, r3
 8006792:	f043 0320 	orr.w	r3, r3, #32
 8006796:	b25b      	sxtb	r3, r3
 8006798:	b2da      	uxtb	r2, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	701a      	strb	r2, [r3, #0]
	buf[1] = (uint8_t)(RAM_Addr & 0xFF00);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	705a      	strb	r2, [r3, #1]
	buf[2] = (uint8_t)(RAM_Addr & 0x00FF);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	79fa      	ldrb	r2, [r7, #7]
 80067a8:	709a      	strb	r2, [r3, #2]

	uint32_t timeout = I2C_TIMEOUT;
 80067aa:	f241 3388 	movw	r3, #5000	@ 0x1388
 80067ae:	61fb      	str	r3, [r7, #28]
	while (LL_I2C_IsActiveFlag_BUSY(K33_I2C_HANDLE) && timeout--);
 80067b0:	bf00      	nop
 80067b2:	4880      	ldr	r0, [pc, #512]	@ (80069b4 <K33_I2C_Read_RAM+0x294>)
 80067b4:	f7ff ff1c 	bl	80065f0 <LL_I2C_IsActiveFlag_BUSY>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d004      	beq.n	80067c8 <K33_I2C_Read_RAM+0xa8>
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	1e5a      	subs	r2, r3, #1
 80067c2:	61fa      	str	r2, [r7, #28]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d1f4      	bne.n	80067b2 <K33_I2C_Read_RAM+0x92>
	if (timeout == 0) return I2C_Error;
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d101      	bne.n	80067d2 <K33_I2C_Read_RAM+0xb2>
 80067ce:	2301      	movs	r3, #1
 80067d0:	e0e9      	b.n	80069a6 <K33_I2C_Read_RAM+0x286>

	LL_I2C_GenerateStartCondition(K33_I2C_HANDLE);
 80067d2:	4878      	ldr	r0, [pc, #480]	@ (80069b4 <K33_I2C_Read_RAM+0x294>)
 80067d4:	f7ff ff44 	bl	8006660 <LL_I2C_GenerateStartCondition>
	timeout = I2C_TIMEOUT;
 80067d8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80067dc:	61fb      	str	r3, [r7, #28]
	while (!LL_I2C_IsActiveFlag_SB(K33_I2C_HANDLE) && timeout--);
 80067de:	bf00      	nop
 80067e0:	4874      	ldr	r0, [pc, #464]	@ (80069b4 <K33_I2C_Read_RAM+0x294>)
 80067e2:	f7ff fedf 	bl	80065a4 <LL_I2C_IsActiveFlag_SB>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d104      	bne.n	80067f6 <K33_I2C_Read_RAM+0xd6>
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	1e5a      	subs	r2, r3, #1
 80067f0:	61fa      	str	r2, [r7, #28]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1f4      	bne.n	80067e0 <K33_I2C_Read_RAM+0xc0>
	if (timeout == 0) return I2C_Error;
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d101      	bne.n	8006800 <K33_I2C_Read_RAM+0xe0>
 80067fc:	2301      	movs	r3, #1
 80067fe:	e0d2      	b.n	80069a6 <K33_I2C_Read_RAM+0x286>

	LL_I2C_TransmitData8(K33_I2C_HANDLE, K33_I2C_ADDR << 1);
 8006800:	21d0      	movs	r1, #208	@ 0xd0
 8006802:	486c      	ldr	r0, [pc, #432]	@ (80069b4 <K33_I2C_Read_RAM+0x294>)
 8006804:	f7ff ff59 	bl	80066ba <LL_I2C_TransmitData8>
	timeout = I2C_TIMEOUT;
 8006808:	f241 3388 	movw	r3, #5000	@ 0x1388
 800680c:	61fb      	str	r3, [r7, #28]
	while (!LL_I2C_IsActiveFlag_ADDR(K33_I2C_HANDLE) && timeout--);
 800680e:	bf00      	nop
 8006810:	4868      	ldr	r0, [pc, #416]	@ (80069b4 <K33_I2C_Read_RAM+0x294>)
 8006812:	f7ff feda 	bl	80065ca <LL_I2C_IsActiveFlag_ADDR>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d104      	bne.n	8006826 <K33_I2C_Read_RAM+0x106>
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	1e5a      	subs	r2, r3, #1
 8006820:	61fa      	str	r2, [r7, #28]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d1f4      	bne.n	8006810 <K33_I2C_Read_RAM+0xf0>
	if (timeout == 0) return I2C_Error;
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d101      	bne.n	8006830 <K33_I2C_Read_RAM+0x110>
 800682c:	2301      	movs	r3, #1
 800682e:	e0ba      	b.n	80069a6 <K33_I2C_Read_RAM+0x286>
	LL_I2C_ClearFlag_ADDR(K33_I2C_HANDLE);
 8006830:	4860      	ldr	r0, [pc, #384]	@ (80069b4 <K33_I2C_Read_RAM+0x294>)
 8006832:	f7ff fef0 	bl	8006616 <LL_I2C_ClearFlag_ADDR>

	for (uint8_t i = 0; i < NumOfByteWrite; i++) {
 8006836:	2300      	movs	r3, #0
 8006838:	76fb      	strb	r3, [r7, #27]
 800683a:	e01d      	b.n	8006878 <K33_I2C_Read_RAM+0x158>
		LL_I2C_TransmitData8(K33_I2C_HANDLE, buf[i]);
 800683c:	7efb      	ldrb	r3, [r7, #27]
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	5cd3      	ldrb	r3, [r2, r3]
 8006842:	4619      	mov	r1, r3
 8006844:	485b      	ldr	r0, [pc, #364]	@ (80069b4 <K33_I2C_Read_RAM+0x294>)
 8006846:	f7ff ff38 	bl	80066ba <LL_I2C_TransmitData8>
		timeout = I2C_TIMEOUT;
 800684a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800684e:	61fb      	str	r3, [r7, #28]
		while (!LL_I2C_IsActiveFlag_TXE(K33_I2C_HANDLE) && timeout--);
 8006850:	bf00      	nop
 8006852:	4858      	ldr	r0, [pc, #352]	@ (80069b4 <K33_I2C_Read_RAM+0x294>)
 8006854:	f7ff fe80 	bl	8006558 <LL_I2C_IsActiveFlag_TXE>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d104      	bne.n	8006868 <K33_I2C_Read_RAM+0x148>
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	1e5a      	subs	r2, r3, #1
 8006862:	61fa      	str	r2, [r7, #28]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1f4      	bne.n	8006852 <K33_I2C_Read_RAM+0x132>
		if (timeout == 0) return I2C_Error;
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d101      	bne.n	8006872 <K33_I2C_Read_RAM+0x152>
 800686e:	2301      	movs	r3, #1
 8006870:	e099      	b.n	80069a6 <K33_I2C_Read_RAM+0x286>
	for (uint8_t i = 0; i < NumOfByteWrite; i++) {
 8006872:	7efb      	ldrb	r3, [r7, #27]
 8006874:	3301      	adds	r3, #1
 8006876:	76fb      	strb	r3, [r7, #27]
 8006878:	7efa      	ldrb	r2, [r7, #27]
 800687a:	7dfb      	ldrb	r3, [r7, #23]
 800687c:	429a      	cmp	r2, r3
 800687e:	d3dd      	bcc.n	800683c <K33_I2C_Read_RAM+0x11c>
	}

	uint8_t CSum_Byte = CheckSum(buf, NumOfByteWrite);
 8006880:	7dfb      	ldrb	r3, [r7, #23]
 8006882:	4619      	mov	r1, r3
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f7ff ff2c 	bl	80066e2 <CheckSum>
 800688a:	4603      	mov	r3, r0
 800688c:	72fb      	strb	r3, [r7, #11]
	LL_I2C_TransmitData8(K33_I2C_HANDLE, CSum_Byte);
 800688e:	7afb      	ldrb	r3, [r7, #11]
 8006890:	4619      	mov	r1, r3
 8006892:	4848      	ldr	r0, [pc, #288]	@ (80069b4 <K33_I2C_Read_RAM+0x294>)
 8006894:	f7ff ff11 	bl	80066ba <LL_I2C_TransmitData8>
	timeout = I2C_TIMEOUT;
 8006898:	f241 3388 	movw	r3, #5000	@ 0x1388
 800689c:	61fb      	str	r3, [r7, #28]
	while (!LL_I2C_IsActiveFlag_TXE(K33_I2C_HANDLE) && timeout--);
 800689e:	bf00      	nop
 80068a0:	4844      	ldr	r0, [pc, #272]	@ (80069b4 <K33_I2C_Read_RAM+0x294>)
 80068a2:	f7ff fe59 	bl	8006558 <LL_I2C_IsActiveFlag_TXE>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d104      	bne.n	80068b6 <K33_I2C_Read_RAM+0x196>
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	1e5a      	subs	r2, r3, #1
 80068b0:	61fa      	str	r2, [r7, #28]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1f4      	bne.n	80068a0 <K33_I2C_Read_RAM+0x180>
	if (timeout == 0) return I2C_Error;
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d101      	bne.n	80068c0 <K33_I2C_Read_RAM+0x1a0>
 80068bc:	2301      	movs	r3, #1
 80068be:	e072      	b.n	80069a6 <K33_I2C_Read_RAM+0x286>

	LL_I2C_GenerateStopCondition(K33_I2C_HANDLE);
 80068c0:	483c      	ldr	r0, [pc, #240]	@ (80069b4 <K33_I2C_Read_RAM+0x294>)
 80068c2:	f7ff fedd 	bl	8006680 <LL_I2C_GenerateStopCondition>

	LL_I2C_GenerateStartCondition(K33_I2C_HANDLE);
 80068c6:	483b      	ldr	r0, [pc, #236]	@ (80069b4 <K33_I2C_Read_RAM+0x294>)
 80068c8:	f7ff feca 	bl	8006660 <LL_I2C_GenerateStartCondition>
	timeout = I2C_TIMEOUT;
 80068cc:	f241 3388 	movw	r3, #5000	@ 0x1388
 80068d0:	61fb      	str	r3, [r7, #28]
	while (!LL_I2C_IsActiveFlag_SB(K33_I2C_HANDLE) && timeout--);
 80068d2:	bf00      	nop
 80068d4:	4837      	ldr	r0, [pc, #220]	@ (80069b4 <K33_I2C_Read_RAM+0x294>)
 80068d6:	f7ff fe65 	bl	80065a4 <LL_I2C_IsActiveFlag_SB>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d104      	bne.n	80068ea <K33_I2C_Read_RAM+0x1ca>
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	1e5a      	subs	r2, r3, #1
 80068e4:	61fa      	str	r2, [r7, #28]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1f4      	bne.n	80068d4 <K33_I2C_Read_RAM+0x1b4>
	if (timeout == 0) return I2C_Error;
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d101      	bne.n	80068f4 <K33_I2C_Read_RAM+0x1d4>
 80068f0:	2301      	movs	r3, #1
 80068f2:	e058      	b.n	80069a6 <K33_I2C_Read_RAM+0x286>

	LL_I2C_TransmitData8(K33_I2C_HANDLE, (K33_I2C_ADDR << 1) | 1);
 80068f4:	21d1      	movs	r1, #209	@ 0xd1
 80068f6:	482f      	ldr	r0, [pc, #188]	@ (80069b4 <K33_I2C_Read_RAM+0x294>)
 80068f8:	f7ff fedf 	bl	80066ba <LL_I2C_TransmitData8>
	timeout = I2C_TIMEOUT;
 80068fc:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006900:	61fb      	str	r3, [r7, #28]
	while (!LL_I2C_IsActiveFlag_ADDR(K33_I2C_HANDLE) && timeout--);
 8006902:	bf00      	nop
 8006904:	482b      	ldr	r0, [pc, #172]	@ (80069b4 <K33_I2C_Read_RAM+0x294>)
 8006906:	f7ff fe60 	bl	80065ca <LL_I2C_IsActiveFlag_ADDR>
 800690a:	4603      	mov	r3, r0
 800690c:	2b00      	cmp	r3, #0
 800690e:	d104      	bne.n	800691a <K33_I2C_Read_RAM+0x1fa>
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	1e5a      	subs	r2, r3, #1
 8006914:	61fa      	str	r2, [r7, #28]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1f4      	bne.n	8006904 <K33_I2C_Read_RAM+0x1e4>
	if (timeout == 0) return I2C_Error;
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d101      	bne.n	8006924 <K33_I2C_Read_RAM+0x204>
 8006920:	2301      	movs	r3, #1
 8006922:	e040      	b.n	80069a6 <K33_I2C_Read_RAM+0x286>
	LL_I2C_ClearFlag_ADDR(K33_I2C_HANDLE);
 8006924:	4823      	ldr	r0, [pc, #140]	@ (80069b4 <K33_I2C_Read_RAM+0x294>)
 8006926:	f7ff fe76 	bl	8006616 <LL_I2C_ClearFlag_ADDR>

	LL_I2C_AcknowledgeNextData(K33_I2C_HANDLE, LL_I2C_ACK);
 800692a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800692e:	4821      	ldr	r0, [pc, #132]	@ (80069b4 <K33_I2C_Read_RAM+0x294>)
 8006930:	f7ff fe83 	bl	800663a <LL_I2C_AcknowledgeNextData>

	for (uint16_t i = 0; i < (NumOfBytes + 2); i++) {
 8006934:	2300      	movs	r3, #0
 8006936:	833b      	strh	r3, [r7, #24]
 8006938:	e02f      	b.n	800699a <K33_I2C_Read_RAM+0x27a>
		timeout = I2C_TIMEOUT;
 800693a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800693e:	61fb      	str	r3, [r7, #28]
		while (!LL_I2C_IsActiveFlag_RXNE(K33_I2C_HANDLE) && timeout--);
 8006940:	bf00      	nop
 8006942:	481c      	ldr	r0, [pc, #112]	@ (80069b4 <K33_I2C_Read_RAM+0x294>)
 8006944:	f7ff fe1b 	bl	800657e <LL_I2C_IsActiveFlag_RXNE>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d104      	bne.n	8006958 <K33_I2C_Read_RAM+0x238>
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	1e5a      	subs	r2, r3, #1
 8006952:	61fa      	str	r2, [r7, #28]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d1f4      	bne.n	8006942 <K33_I2C_Read_RAM+0x222>
		if (timeout == 0) return I2C_Error;
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d101      	bne.n	8006962 <K33_I2C_Read_RAM+0x242>
 800695e:	2301      	movs	r3, #1
 8006960:	e021      	b.n	80069a6 <K33_I2C_Read_RAM+0x286>

		if (i == (NumOfBytes)) {
 8006962:	79bb      	ldrb	r3, [r7, #6]
 8006964:	b29b      	uxth	r3, r3
 8006966:	8b3a      	ldrh	r2, [r7, #24]
 8006968:	429a      	cmp	r2, r3
 800696a:	d103      	bne.n	8006974 <K33_I2C_Read_RAM+0x254>
			LL_I2C_AcknowledgeNextData(K33_I2C_HANDLE, LL_I2C_NACK);
 800696c:	2100      	movs	r1, #0
 800696e:	4811      	ldr	r0, [pc, #68]	@ (80069b4 <K33_I2C_Read_RAM+0x294>)
 8006970:	f7ff fe63 	bl	800663a <LL_I2C_AcknowledgeNextData>
		}
		if (i == (NumOfBytes + 1)) {
 8006974:	8b3a      	ldrh	r2, [r7, #24]
 8006976:	79bb      	ldrb	r3, [r7, #6]
 8006978:	3301      	adds	r3, #1
 800697a:	429a      	cmp	r2, r3
 800697c:	d102      	bne.n	8006984 <K33_I2C_Read_RAM+0x264>
			LL_I2C_GenerateStopCondition(K33_I2C_HANDLE);
 800697e:	480d      	ldr	r0, [pc, #52]	@ (80069b4 <K33_I2C_Read_RAM+0x294>)
 8006980:	f7ff fe7e 	bl	8006680 <LL_I2C_GenerateStopCondition>
		}
		pData[i] = LL_I2C_ReceiveData8(K33_I2C_HANDLE);
 8006984:	8b3b      	ldrh	r3, [r7, #24]
 8006986:	683a      	ldr	r2, [r7, #0]
 8006988:	18d4      	adds	r4, r2, r3
 800698a:	480a      	ldr	r0, [pc, #40]	@ (80069b4 <K33_I2C_Read_RAM+0x294>)
 800698c:	f7ff fe88 	bl	80066a0 <LL_I2C_ReceiveData8>
 8006990:	4603      	mov	r3, r0
 8006992:	7023      	strb	r3, [r4, #0]
	for (uint16_t i = 0; i < (NumOfBytes + 2); i++) {
 8006994:	8b3b      	ldrh	r3, [r7, #24]
 8006996:	3301      	adds	r3, #1
 8006998:	833b      	strh	r3, [r7, #24]
 800699a:	79bb      	ldrb	r3, [r7, #6]
 800699c:	1c5a      	adds	r2, r3, #1
 800699e:	8b3b      	ldrh	r3, [r7, #24]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	daca      	bge.n	800693a <K33_I2C_Read_RAM+0x21a>
	}

	return I2C_Success;
 80069a4:	2300      	movs	r3, #0
 80069a6:	46b5      	mov	sp, r6
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3724      	adds	r7, #36	@ 0x24
 80069ac:	46bd      	mov	sp, r7
 80069ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80069b2:	bf00      	nop
 80069b4:	40005400 	.word	0x40005400

080069b8 <K33_Read_Data>:
	if ((RxData & 0xF0) != 0x10) return I2C_Error;
	K33_RawData.Calib_status = RxData & 0x01;
	return I2C_Success;
}

I2C_Status_t K33_Read_Data(K33_Data_t *K33_Data) {
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
	K33_RawData.status = K33_I2C_Read_RAM(K33_RAM_CO2_ADDR, K33_RawData.RxData, 2);
 80069c0:	2202      	movs	r2, #2
 80069c2:	492c      	ldr	r1, [pc, #176]	@ (8006a74 <K33_Read_Data+0xbc>)
 80069c4:	2008      	movs	r0, #8
 80069c6:	f7ff feab 	bl	8006720 <K33_I2C_Read_RAM>
 80069ca:	4603      	mov	r3, r0
 80069cc:	461a      	mov	r2, r3
 80069ce:	4b29      	ldr	r3, [pc, #164]	@ (8006a74 <K33_Read_Data+0xbc>)
 80069d0:	71da      	strb	r2, [r3, #7]
	if (K33_RawData.status == I2C_Success)
 80069d2:	4b28      	ldr	r3, [pc, #160]	@ (8006a74 <K33_Read_Data+0xbc>)
 80069d4:	79db      	ldrb	r3, [r3, #7]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d119      	bne.n	8006a0e <K33_Read_Data+0x56>
		K33_Data->CO2 = (K33_RawData.RxData[1] << 8) | K33_RawData.RxData[2];
 80069da:	4b26      	ldr	r3, [pc, #152]	@ (8006a74 <K33_Read_Data+0xbc>)
 80069dc:	785b      	ldrb	r3, [r3, #1]
 80069de:	b21b      	sxth	r3, r3
 80069e0:	021b      	lsls	r3, r3, #8
 80069e2:	b21a      	sxth	r2, r3
 80069e4:	4b23      	ldr	r3, [pc, #140]	@ (8006a74 <K33_Read_Data+0xbc>)
 80069e6:	789b      	ldrb	r3, [r3, #2]
 80069e8:	b21b      	sxth	r3, r3
 80069ea:	4313      	orrs	r3, r2
 80069ec:	b21a      	sxth	r2, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	801a      	strh	r2, [r3, #0]
	else return K33_RawData.status;

	K33_RawData.status = K33_I2C_Read_RAM(K33_RAM_TEMP_ADDR, K33_RawData.RxData, 2);
 80069f2:	2202      	movs	r2, #2
 80069f4:	491f      	ldr	r1, [pc, #124]	@ (8006a74 <K33_Read_Data+0xbc>)
 80069f6:	2012      	movs	r0, #18
 80069f8:	f7ff fe92 	bl	8006720 <K33_I2C_Read_RAM>
 80069fc:	4603      	mov	r3, r0
 80069fe:	461a      	mov	r2, r3
 8006a00:	4b1c      	ldr	r3, [pc, #112]	@ (8006a74 <K33_Read_Data+0xbc>)
 8006a02:	71da      	strb	r2, [r3, #7]
	if (K33_RawData.status == I2C_Success)
 8006a04:	4b1b      	ldr	r3, [pc, #108]	@ (8006a74 <K33_Read_Data+0xbc>)
 8006a06:	79db      	ldrb	r3, [r3, #7]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d11d      	bne.n	8006a48 <K33_Read_Data+0x90>
 8006a0c:	e002      	b.n	8006a14 <K33_Read_Data+0x5c>
	else return K33_RawData.status;
 8006a0e:	4b19      	ldr	r3, [pc, #100]	@ (8006a74 <K33_Read_Data+0xbc>)
 8006a10:	79db      	ldrb	r3, [r3, #7]
 8006a12:	e02a      	b.n	8006a6a <K33_Read_Data+0xb2>
		K33_Data->Temp = (K33_RawData.RxData[1] << 8) | K33_RawData.RxData[2];
 8006a14:	4b17      	ldr	r3, [pc, #92]	@ (8006a74 <K33_Read_Data+0xbc>)
 8006a16:	785b      	ldrb	r3, [r3, #1]
 8006a18:	b21b      	sxth	r3, r3
 8006a1a:	021b      	lsls	r3, r3, #8
 8006a1c:	b21a      	sxth	r2, r3
 8006a1e:	4b15      	ldr	r3, [pc, #84]	@ (8006a74 <K33_Read_Data+0xbc>)
 8006a20:	789b      	ldrb	r3, [r3, #2]
 8006a22:	b21b      	sxth	r3, r3
 8006a24:	4313      	orrs	r3, r2
 8006a26:	b21a      	sxth	r2, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	805a      	strh	r2, [r3, #2]
	else return K33_RawData.status;

	K33_RawData.status = K33_I2C_Read_RAM(K33_RAM_RH_ADDR, K33_RawData.RxData, 2);
 8006a2c:	2202      	movs	r2, #2
 8006a2e:	4911      	ldr	r1, [pc, #68]	@ (8006a74 <K33_Read_Data+0xbc>)
 8006a30:	2014      	movs	r0, #20
 8006a32:	f7ff fe75 	bl	8006720 <K33_I2C_Read_RAM>
 8006a36:	4603      	mov	r3, r0
 8006a38:	461a      	mov	r2, r3
 8006a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8006a74 <K33_Read_Data+0xbc>)
 8006a3c:	71da      	strb	r2, [r3, #7]
	if (K33_RawData.status == I2C_Success)
 8006a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a74 <K33_Read_Data+0xbc>)
 8006a40:	79db      	ldrb	r3, [r3, #7]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d10f      	bne.n	8006a66 <K33_Read_Data+0xae>
 8006a46:	e002      	b.n	8006a4e <K33_Read_Data+0x96>
	else return K33_RawData.status;
 8006a48:	4b0a      	ldr	r3, [pc, #40]	@ (8006a74 <K33_Read_Data+0xbc>)
 8006a4a:	79db      	ldrb	r3, [r3, #7]
 8006a4c:	e00d      	b.n	8006a6a <K33_Read_Data+0xb2>
		K33_Data->RH = (K33_RawData.RxData[1] << 8) | K33_RawData.RxData[2];
 8006a4e:	4b09      	ldr	r3, [pc, #36]	@ (8006a74 <K33_Read_Data+0xbc>)
 8006a50:	785b      	ldrb	r3, [r3, #1]
 8006a52:	b21b      	sxth	r3, r3
 8006a54:	021b      	lsls	r3, r3, #8
 8006a56:	b21a      	sxth	r2, r3
 8006a58:	4b06      	ldr	r3, [pc, #24]	@ (8006a74 <K33_Read_Data+0xbc>)
 8006a5a:	789b      	ldrb	r3, [r3, #2]
 8006a5c:	b21b      	sxth	r3, r3
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	b21a      	sxth	r2, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	809a      	strh	r2, [r3, #4]
	return K33_RawData.status;
 8006a66:	4b03      	ldr	r3, [pc, #12]	@ (8006a74 <K33_Read_Data+0xbc>)
 8006a68:	79db      	ldrb	r3, [r3, #7]
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3708      	adds	r7, #8
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	20005aa0 	.word	0x20005aa0

08006a78 <LSM6DSOX_Write>:

static LSM6DSOX_RawData_t LSM6DSOX_RawData = {
	.status = 0,
};

void LSM6DSOX_Write(uint8_t reg, uint8_t data) {
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	4603      	mov	r3, r0
 8006a80:	460a      	mov	r2, r1
 8006a82:	71fb      	strb	r3, [r7, #7]
 8006a84:	4613      	mov	r3, r2
 8006a86:	71bb      	strb	r3, [r7, #6]
	LSM6DSOX_RawData.status = I2C_Write(EXP_I2C_SENSOR_HANDLE, LSM6DSOX_ADDRESS, reg, data);
 8006a88:	79bb      	ldrb	r3, [r7, #6]
 8006a8a:	79fa      	ldrb	r2, [r7, #7]
 8006a8c:	216a      	movs	r1, #106	@ 0x6a
 8006a8e:	4805      	ldr	r0, [pc, #20]	@ (8006aa4 <LSM6DSOX_Write+0x2c>)
 8006a90:	f7fa fc8b 	bl	80013aa <I2C_Write>
 8006a94:	4603      	mov	r3, r0
 8006a96:	461a      	mov	r2, r3
 8006a98:	4b03      	ldr	r3, [pc, #12]	@ (8006aa8 <LSM6DSOX_Write+0x30>)
 8006a9a:	731a      	strb	r2, [r3, #12]
}
 8006a9c:	bf00      	nop
 8006a9e:	3708      	adds	r7, #8
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	40005400 	.word	0x40005400
 8006aa8:	20005aa8 	.word	0x20005aa8

08006aac <LSM6DSOX_Read>:

void LSM6DSOX_Read(uint8_t reg, uint8_t *pData, uint8_t length) {
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af02      	add	r7, sp, #8
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	6039      	str	r1, [r7, #0]
 8006ab6:	71fb      	strb	r3, [r7, #7]
 8006ab8:	4613      	mov	r3, r2
 8006aba:	71bb      	strb	r3, [r7, #6]
	LSM6DSOX_RawData.status = I2C_ReadMulti(EXP_I2C_SENSOR_HANDLE, LSM6DSOX_ADDRESS, reg, pData, length);
 8006abc:	79bb      	ldrb	r3, [r7, #6]
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	79fa      	ldrb	r2, [r7, #7]
 8006ac2:	9300      	str	r3, [sp, #0]
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	216a      	movs	r1, #106	@ 0x6a
 8006ac8:	4805      	ldr	r0, [pc, #20]	@ (8006ae0 <LSM6DSOX_Read+0x34>)
 8006aca:	f7fa fcfe 	bl	80014ca <I2C_ReadMulti>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	4b04      	ldr	r3, [pc, #16]	@ (8006ae4 <LSM6DSOX_Read+0x38>)
 8006ad4:	731a      	strb	r2, [r3, #12]
}
 8006ad6:	bf00      	nop
 8006ad8:	3708      	adds	r7, #8
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	40005400 	.word	0x40005400
 8006ae4:	20005aa8 	.word	0x20005aa8

08006ae8 <LSM6DSOX_Init>:

I2C_Status_t LSM6DSOX_Init(void) {
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
	// Accelerometer: 104 Hz, 8g ~ 78.48 m/s^2
	LSM6DSOX_Write(LSM6DSOX_CTRL1_XL, 0x58);
 8006aee:	2158      	movs	r1, #88	@ 0x58
 8006af0:	2010      	movs	r0, #16
 8006af2:	f7ff ffc1 	bl	8006a78 <LSM6DSOX_Write>
	// Gyroscope: 104 Hz, 500 dps
	LSM6DSOX_Write(LSM6DSOX_CTRL2_G, 0x54);
 8006af6:	2154      	movs	r1, #84	@ 0x54
 8006af8:	2011      	movs	r0, #17
 8006afa:	f7ff ffbd 	bl	8006a78 <LSM6DSOX_Write>
	uint8_t ID = 0;
 8006afe:	2300      	movs	r3, #0
 8006b00:	71fb      	strb	r3, [r7, #7]
	LSM6DSOX_Read_ID(&ID);
 8006b02:	1dfb      	adds	r3, r7, #7
 8006b04:	4618      	mov	r0, r3
 8006b06:	f000 f80f 	bl	8006b28 <LSM6DSOX_Read_ID>
	if (ID != LSM6DSOX_ID) LSM6DSOX_RawData.status = I2C_Error;
 8006b0a:	79fb      	ldrb	r3, [r7, #7]
 8006b0c:	2b6c      	cmp	r3, #108	@ 0x6c
 8006b0e:	d002      	beq.n	8006b16 <LSM6DSOX_Init+0x2e>
 8006b10:	4b04      	ldr	r3, [pc, #16]	@ (8006b24 <LSM6DSOX_Init+0x3c>)
 8006b12:	2201      	movs	r2, #1
 8006b14:	731a      	strb	r2, [r3, #12]
	return LSM6DSOX_RawData.status;
 8006b16:	4b03      	ldr	r3, [pc, #12]	@ (8006b24 <LSM6DSOX_Init+0x3c>)
 8006b18:	7b1b      	ldrb	r3, [r3, #12]
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3708      	adds	r7, #8
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	20005aa8 	.word	0x20005aa8

08006b28 <LSM6DSOX_Read_ID>:

I2C_Status_t LSM6DSOX_Read_ID(uint8_t *ID) {
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
	LSM6DSOX_Read(LSM6DSOX_ID_ADDR, ID, 1);
 8006b30:	2201      	movs	r2, #1
 8006b32:	6879      	ldr	r1, [r7, #4]
 8006b34:	200f      	movs	r0, #15
 8006b36:	f7ff ffb9 	bl	8006aac <LSM6DSOX_Read>
	return LSM6DSOX_RawData.status;
 8006b3a:	4b03      	ldr	r3, [pc, #12]	@ (8006b48 <LSM6DSOX_Read_ID+0x20>)
 8006b3c:	7b1b      	ldrb	r3, [r3, #12]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3708      	adds	r7, #8
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	20005aa8 	.word	0x20005aa8

08006b4c <LSM6DSOX_Read_Data>:

I2C_Status_t LSM6DSOX_Read_Data(LSM6DSOX_Data_t* LSM6DSOX_Data)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b086      	sub	sp, #24
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
	if (LSM6DSOX_RawData.status == I2C_Error) LSM6DSOX_Init();
 8006b54:	4b59      	ldr	r3, [pc, #356]	@ (8006cbc <LSM6DSOX_Read_Data+0x170>)
 8006b56:	7b1b      	ldrb	r3, [r3, #12]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d101      	bne.n	8006b60 <LSM6DSOX_Read_Data+0x14>
 8006b5c:	f7ff ffc4 	bl	8006ae8 <LSM6DSOX_Init>
    LSM6DSOX_Read(LSM6DSOX_OUTX_L_G, LSM6DSOX_RawData.RxData, 12);
 8006b60:	220c      	movs	r2, #12
 8006b62:	4956      	ldr	r1, [pc, #344]	@ (8006cbc <LSM6DSOX_Read_Data+0x170>)
 8006b64:	2022      	movs	r0, #34	@ 0x22
 8006b66:	f7ff ffa1 	bl	8006aac <LSM6DSOX_Read>

    int16_t gx = (int16_t)(LSM6DSOX_RawData.RxData[1] << 8 | LSM6DSOX_RawData.RxData[0]);
 8006b6a:	4b54      	ldr	r3, [pc, #336]	@ (8006cbc <LSM6DSOX_Read_Data+0x170>)
 8006b6c:	785b      	ldrb	r3, [r3, #1]
 8006b6e:	b21b      	sxth	r3, r3
 8006b70:	021b      	lsls	r3, r3, #8
 8006b72:	b21a      	sxth	r2, r3
 8006b74:	4b51      	ldr	r3, [pc, #324]	@ (8006cbc <LSM6DSOX_Read_Data+0x170>)
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	b21b      	sxth	r3, r3
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	82fb      	strh	r3, [r7, #22]
    int16_t gy = (int16_t)(LSM6DSOX_RawData.RxData[3] << 8 | LSM6DSOX_RawData.RxData[2]);
 8006b7e:	4b4f      	ldr	r3, [pc, #316]	@ (8006cbc <LSM6DSOX_Read_Data+0x170>)
 8006b80:	78db      	ldrb	r3, [r3, #3]
 8006b82:	b21b      	sxth	r3, r3
 8006b84:	021b      	lsls	r3, r3, #8
 8006b86:	b21a      	sxth	r2, r3
 8006b88:	4b4c      	ldr	r3, [pc, #304]	@ (8006cbc <LSM6DSOX_Read_Data+0x170>)
 8006b8a:	789b      	ldrb	r3, [r3, #2]
 8006b8c:	b21b      	sxth	r3, r3
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	82bb      	strh	r3, [r7, #20]
    int16_t gz = (int16_t)(LSM6DSOX_RawData.RxData[5] << 8 | LSM6DSOX_RawData.RxData[4]);
 8006b92:	4b4a      	ldr	r3, [pc, #296]	@ (8006cbc <LSM6DSOX_Read_Data+0x170>)
 8006b94:	795b      	ldrb	r3, [r3, #5]
 8006b96:	b21b      	sxth	r3, r3
 8006b98:	021b      	lsls	r3, r3, #8
 8006b9a:	b21a      	sxth	r2, r3
 8006b9c:	4b47      	ldr	r3, [pc, #284]	@ (8006cbc <LSM6DSOX_Read_Data+0x170>)
 8006b9e:	791b      	ldrb	r3, [r3, #4]
 8006ba0:	b21b      	sxth	r3, r3
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	827b      	strh	r3, [r7, #18]
    int16_t ax = (int16_t)(LSM6DSOX_RawData.RxData[7] << 8 | LSM6DSOX_RawData.RxData[6]);
 8006ba6:	4b45      	ldr	r3, [pc, #276]	@ (8006cbc <LSM6DSOX_Read_Data+0x170>)
 8006ba8:	79db      	ldrb	r3, [r3, #7]
 8006baa:	b21b      	sxth	r3, r3
 8006bac:	021b      	lsls	r3, r3, #8
 8006bae:	b21a      	sxth	r2, r3
 8006bb0:	4b42      	ldr	r3, [pc, #264]	@ (8006cbc <LSM6DSOX_Read_Data+0x170>)
 8006bb2:	799b      	ldrb	r3, [r3, #6]
 8006bb4:	b21b      	sxth	r3, r3
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	823b      	strh	r3, [r7, #16]
    int16_t ay = (int16_t)(LSM6DSOX_RawData.RxData[9] << 8 | LSM6DSOX_RawData.RxData[8]);
 8006bba:	4b40      	ldr	r3, [pc, #256]	@ (8006cbc <LSM6DSOX_Read_Data+0x170>)
 8006bbc:	7a5b      	ldrb	r3, [r3, #9]
 8006bbe:	b21b      	sxth	r3, r3
 8006bc0:	021b      	lsls	r3, r3, #8
 8006bc2:	b21a      	sxth	r2, r3
 8006bc4:	4b3d      	ldr	r3, [pc, #244]	@ (8006cbc <LSM6DSOX_Read_Data+0x170>)
 8006bc6:	7a1b      	ldrb	r3, [r3, #8]
 8006bc8:	b21b      	sxth	r3, r3
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	81fb      	strh	r3, [r7, #14]
    int16_t az = (int16_t)(LSM6DSOX_RawData.RxData[11] << 8 | LSM6DSOX_RawData.RxData[10]);
 8006bce:	4b3b      	ldr	r3, [pc, #236]	@ (8006cbc <LSM6DSOX_Read_Data+0x170>)
 8006bd0:	7adb      	ldrb	r3, [r3, #11]
 8006bd2:	b21b      	sxth	r3, r3
 8006bd4:	021b      	lsls	r3, r3, #8
 8006bd6:	b21a      	sxth	r2, r3
 8006bd8:	4b38      	ldr	r3, [pc, #224]	@ (8006cbc <LSM6DSOX_Read_Data+0x170>)
 8006bda:	7a9b      	ldrb	r3, [r3, #10]
 8006bdc:	b21b      	sxth	r3, r3
 8006bde:	4313      	orrs	r3, r2
 8006be0:	81bb      	strh	r3, [r7, #12]

    LSM6DSOX_Data->Gyro.x = gx * GYRO_SENSITIVITY_500DPS;
 8006be2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006be6:	ee07 3a90 	vmov	s15, r3
 8006bea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006bee:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8006cc0 <LSM6DSOX_Read_Data+0x174>
 8006bf2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006bf6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006bfa:	ee17 3a90 	vmov	r3, s15
 8006bfe:	b21a      	sxth	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	80da      	strh	r2, [r3, #6]
    LSM6DSOX_Data->Gyro.y = gy * GYRO_SENSITIVITY_500DPS;
 8006c04:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006c08:	ee07 3a90 	vmov	s15, r3
 8006c0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c10:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8006cc0 <LSM6DSOX_Read_Data+0x174>
 8006c14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006c18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c1c:	ee17 3a90 	vmov	r3, s15
 8006c20:	b21a      	sxth	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	811a      	strh	r2, [r3, #8]
    LSM6DSOX_Data->Gyro.z = gz * GYRO_SENSITIVITY_500DPS;
 8006c26:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006c2a:	ee07 3a90 	vmov	s15, r3
 8006c2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c32:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8006cc0 <LSM6DSOX_Read_Data+0x174>
 8006c36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006c3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c3e:	ee17 3a90 	vmov	r3, s15
 8006c42:	b21a      	sxth	r2, r3
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	815a      	strh	r2, [r3, #10]

    LSM6DSOX_Data->Accel.x = ax * ACCEL_SENSITIVITY_8G;
 8006c48:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006c4c:	ee07 3a90 	vmov	s15, r3
 8006c50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c54:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8006cc4 <LSM6DSOX_Read_Data+0x178>
 8006c58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006c5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c60:	ee17 3a90 	vmov	r3, s15
 8006c64:	b21a      	sxth	r2, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	801a      	strh	r2, [r3, #0]
    LSM6DSOX_Data->Accel.y = ay * ACCEL_SENSITIVITY_8G;
 8006c6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006c6e:	ee07 3a90 	vmov	s15, r3
 8006c72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c76:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8006cc4 <LSM6DSOX_Read_Data+0x178>
 8006c7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006c7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c82:	ee17 3a90 	vmov	r3, s15
 8006c86:	b21a      	sxth	r2, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	805a      	strh	r2, [r3, #2]
    LSM6DSOX_Data->Accel.z = az * ACCEL_SENSITIVITY_8G;
 8006c8c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006c90:	ee07 3a90 	vmov	s15, r3
 8006c94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c98:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8006cc4 <LSM6DSOX_Read_Data+0x178>
 8006c9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006ca0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ca4:	ee17 3a90 	vmov	r3, s15
 8006ca8:	b21a      	sxth	r2, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	809a      	strh	r2, [r3, #4]

    return LSM6DSOX_RawData.status;
 8006cae:	4b03      	ldr	r3, [pc, #12]	@ (8006cbc <LSM6DSOX_Read_Data+0x170>)
 8006cb0:	7b1b      	ldrb	r3, [r3, #12]
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3718      	adds	r7, #24
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	20005aa8 	.word	0x20005aa8
 8006cc0:	3c8f5c29 	.word	0x3c8f5c29
 8006cc4:	397fda40 	.word	0x397fda40

08006cc8 <LL_GPIO_SetOutputPin>:
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	683a      	ldr	r2, [r7, #0]
 8006cd6:	619a      	str	r2, [r3, #24]
}
 8006cd8:	bf00      	nop
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <Sensor_I2C_Init>:
		.CO2 = 0,
		.Temp = 0,
		.RH = 0
};

void  Sensor_I2C_Init(void) {
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b082      	sub	sp, #8
 8006ce8:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(SENSOR1_EN_GPIO_Port, SENSOR1_EN_Pin);
 8006cea:	2120      	movs	r1, #32
 8006cec:	4816      	ldr	r0, [pc, #88]	@ (8006d48 <Sensor_I2C_Init+0x64>)
 8006cee:	f7ff ffeb 	bl	8006cc8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(SENSOR2_EN_GPIO_Port, SENSOR2_EN_Pin);
 8006cf2:	2110      	movs	r1, #16
 8006cf4:	4814      	ldr	r0, [pc, #80]	@ (8006d48 <Sensor_I2C_Init+0x64>)
 8006cf6:	f7ff ffe7 	bl	8006cc8 <LL_GPIO_SetOutputPin>
	I2C_Status_t I2C_status = I2C_Success;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	71fb      	strb	r3, [r7, #7]
	I2C_status = LSM6DSOX_Init();
 8006cfe:	f7ff fef3 	bl	8006ae8 <LSM6DSOX_Init>
 8006d02:	4603      	mov	r3, r0
 8006d04:	71fb      	strb	r3, [r7, #7]
	if (I2C_status == I2C_Error) UART_SendStringRing(EXP_UART_CONSOLE_HANDLE, "LSM6DSOX is error \r\n");
 8006d06:	79fb      	ldrb	r3, [r7, #7]
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d103      	bne.n	8006d14 <Sensor_I2C_Init+0x30>
 8006d0c:	490f      	ldr	r1, [pc, #60]	@ (8006d4c <Sensor_I2C_Init+0x68>)
 8006d0e:	4810      	ldr	r0, [pc, #64]	@ (8006d50 <Sensor_I2C_Init+0x6c>)
 8006d10:	f7fb fb40 	bl	8002394 <UART_SendStringRing>
	I2C_status = BME280_Init();
 8006d14:	f7fe fe14 	bl	8005940 <BME280_Init>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	71fb      	strb	r3, [r7, #7]
	if (I2C_status == I2C_Error) UART_SendStringRing(EXP_UART_CONSOLE_HANDLE, "BME280 is error \r\n");
 8006d1c:	79fb      	ldrb	r3, [r7, #7]
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d103      	bne.n	8006d2a <Sensor_I2C_Init+0x46>
 8006d22:	490c      	ldr	r1, [pc, #48]	@ (8006d54 <Sensor_I2C_Init+0x70>)
 8006d24:	480a      	ldr	r0, [pc, #40]	@ (8006d50 <Sensor_I2C_Init+0x6c>)
 8006d26:	f7fb fb35 	bl	8002394 <UART_SendStringRing>
	I2C_status = H3LIS331DL_Init();
 8006d2a:	f7ff fb6f 	bl	800640c <H3LIS331DL_Init>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	71fb      	strb	r3, [r7, #7]
	if (I2C_status == I2C_Error) UART_SendStringRing(EXP_UART_CONSOLE_HANDLE, "H3LIS331DL is error \r\n");
 8006d32:	79fb      	ldrb	r3, [r7, #7]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d103      	bne.n	8006d40 <Sensor_I2C_Init+0x5c>
 8006d38:	4907      	ldr	r1, [pc, #28]	@ (8006d58 <Sensor_I2C_Init+0x74>)
 8006d3a:	4805      	ldr	r0, [pc, #20]	@ (8006d50 <Sensor_I2C_Init+0x6c>)
 8006d3c:	f7fb fb2a 	bl	8002394 <UART_SendStringRing>

#ifdef H250_UART
	H250_UART_Init(EXP_UART_CO2_HANDLE);
#endif

}
 8006d40:	bf00      	nop
 8006d42:	3708      	adds	r7, #8
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	40020400 	.word	0x40020400
 8006d4c:	08010504 	.word	0x08010504
 8006d50:	40011400 	.word	0x40011400
 8006d54:	0801051c 	.word	0x0801051c
 8006d58:	08010530 	.word	0x08010530

08006d5c <__NVIC_GetPriorityGrouping>:
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006d60:	4b04      	ldr	r3, [pc, #16]	@ (8006d74 <__NVIC_GetPriorityGrouping+0x18>)
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	0a1b      	lsrs	r3, r3, #8
 8006d66:	f003 0307 	and.w	r3, r3, #7
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr
 8006d74:	e000ed00 	.word	0xe000ed00

08006d78 <__NVIC_EnableIRQ>:
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	4603      	mov	r3, r0
 8006d80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	db0b      	blt.n	8006da2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d8a:	79fb      	ldrb	r3, [r7, #7]
 8006d8c:	f003 021f 	and.w	r2, r3, #31
 8006d90:	4907      	ldr	r1, [pc, #28]	@ (8006db0 <__NVIC_EnableIRQ+0x38>)
 8006d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d96:	095b      	lsrs	r3, r3, #5
 8006d98:	2001      	movs	r0, #1
 8006d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8006d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006da2:	bf00      	nop
 8006da4:	370c      	adds	r7, #12
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop
 8006db0:	e000e100 	.word	0xe000e100

08006db4 <__NVIC_SetPriority>:
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	4603      	mov	r3, r0
 8006dbc:	6039      	str	r1, [r7, #0]
 8006dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	db0a      	blt.n	8006dde <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	b2da      	uxtb	r2, r3
 8006dcc:	490c      	ldr	r1, [pc, #48]	@ (8006e00 <__NVIC_SetPriority+0x4c>)
 8006dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dd2:	0112      	lsls	r2, r2, #4
 8006dd4:	b2d2      	uxtb	r2, r2
 8006dd6:	440b      	add	r3, r1
 8006dd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006ddc:	e00a      	b.n	8006df4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	b2da      	uxtb	r2, r3
 8006de2:	4908      	ldr	r1, [pc, #32]	@ (8006e04 <__NVIC_SetPriority+0x50>)
 8006de4:	79fb      	ldrb	r3, [r7, #7]
 8006de6:	f003 030f 	and.w	r3, r3, #15
 8006dea:	3b04      	subs	r3, #4
 8006dec:	0112      	lsls	r2, r2, #4
 8006dee:	b2d2      	uxtb	r2, r2
 8006df0:	440b      	add	r3, r1
 8006df2:	761a      	strb	r2, [r3, #24]
}
 8006df4:	bf00      	nop
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr
 8006e00:	e000e100 	.word	0xe000e100
 8006e04:	e000ed00 	.word	0xe000ed00

08006e08 <NVIC_EncodePriority>:
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b089      	sub	sp, #36	@ 0x24
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f003 0307 	and.w	r3, r3, #7
 8006e1a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	f1c3 0307 	rsb	r3, r3, #7
 8006e22:	2b04      	cmp	r3, #4
 8006e24:	bf28      	it	cs
 8006e26:	2304      	movcs	r3, #4
 8006e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	3304      	adds	r3, #4
 8006e2e:	2b06      	cmp	r3, #6
 8006e30:	d902      	bls.n	8006e38 <NVIC_EncodePriority+0x30>
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	3b03      	subs	r3, #3
 8006e36:	e000      	b.n	8006e3a <NVIC_EncodePriority+0x32>
 8006e38:	2300      	movs	r3, #0
 8006e3a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	fa02 f303 	lsl.w	r3, r2, r3
 8006e46:	43da      	mvns	r2, r3
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	401a      	ands	r2, r3
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006e50:	f04f 31ff 	mov.w	r1, #4294967295
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	fa01 f303 	lsl.w	r3, r1, r3
 8006e5a:	43d9      	mvns	r1, r3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e60:	4313      	orrs	r3, r2
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3724      	adds	r7, #36	@ 0x24
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <LL_ADC_REG_SetSequencerRanks>:
  *         (1) On STM32F4, parameter available only on ADC instance: ADC1.\n
  *         (2) On devices STM32F42x and STM32F43x, limitation: this internal channel is shared between temperature sensor and Vbat, only 1 measurement path must be enabled.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b089      	sub	sp, #36	@ 0x24
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	60f8      	str	r0, [r7, #12]
 8006e76:	60b9      	str	r1, [r7, #8]
 8006e78:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	332c      	adds	r3, #44	@ 0x2c
 8006e7e:	4619      	mov	r1, r3
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e86:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8006e8a:	617a      	str	r2, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e8c:	697a      	ldr	r2, [r7, #20]
 8006e8e:	fa92 f2a2 	rbit	r2, r2
 8006e92:	613a      	str	r2, [r7, #16]
  return result;
 8006e94:	693a      	ldr	r2, [r7, #16]
 8006e96:	61ba      	str	r2, [r7, #24]
  if (value == 0U)
 8006e98:	69ba      	ldr	r2, [r7, #24]
 8006e9a:	2a00      	cmp	r2, #0
 8006e9c:	d101      	bne.n	8006ea2 <LL_ADC_REG_SetSequencerRanks+0x34>
    return 32U;
 8006e9e:	2220      	movs	r2, #32
 8006ea0:	e003      	b.n	8006eaa <LL_ADC_REG_SetSequencerRanks+0x3c>
  return __builtin_clz(value);
 8006ea2:	69ba      	ldr	r2, [r7, #24]
 8006ea4:	fab2 f282 	clz	r2, r2
 8006ea8:	b2d2      	uxtb	r2, r2
 8006eaa:	40d3      	lsrs	r3, r2
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	440b      	add	r3, r1
 8006eb0:	61fb      	str	r3, [r7, #28]

  MODIFY_REG(*preg,
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	f003 031f 	and.w	r3, r3, #31
 8006ebc:	211f      	movs	r1, #31
 8006ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8006ec2:	43db      	mvns	r3, r3
 8006ec4:	401a      	ands	r2, r3
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f003 011f 	and.w	r1, r3, #31
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	f003 031f 	and.w	r3, r3, #31
 8006ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ed6:	431a      	orrs	r2, r3
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006edc:	bf00      	nop
 8006ede:	3724      	adds	r7, #36	@ 0x24
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <LL_ADC_REG_SetFlagEndOfConversion>:
  *         @arg @ref LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV
  *         @arg @ref LL_ADC_REG_FLAG_EOC_UNITARY_CONV
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetFlagEndOfConversion(ADC_TypeDef *ADCx, uint32_t EocSelection)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	431a      	orrs	r2, r3
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	609a      	str	r2, [r3, #8]
}
 8006f02:	bf00      	nop
 8006f04:	370c      	adds	r7, #12
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr

08006f0e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_144CYCLES
  *         @arg @ref LL_ADC_SAMPLINGTIME_480CYCLES
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006f0e:	b480      	push	{r7}
 8006f10:	b08f      	sub	sp, #60	@ 0x3c
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	60f8      	str	r0, [r7, #12]
 8006f16:	60b9      	str	r1, [r7, #8]
 8006f18:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	330c      	adds	r3, #12
 8006f1e:	4619      	mov	r1, r3
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f26:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006f2a:	617a      	str	r2, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f2c:	697a      	ldr	r2, [r7, #20]
 8006f2e:	fa92 f2a2 	rbit	r2, r2
 8006f32:	613a      	str	r2, [r7, #16]
  return result;
 8006f34:	693a      	ldr	r2, [r7, #16]
 8006f36:	61ba      	str	r2, [r7, #24]
  if (value == 0U)
 8006f38:	69ba      	ldr	r2, [r7, #24]
 8006f3a:	2a00      	cmp	r2, #0
 8006f3c:	d101      	bne.n	8006f42 <LL_ADC_SetChannelSamplingTime+0x34>
    return 32U;
 8006f3e:	2220      	movs	r2, #32
 8006f40:	e003      	b.n	8006f4a <LL_ADC_SetChannelSamplingTime+0x3c>
  return __builtin_clz(value);
 8006f42:	69ba      	ldr	r2, [r7, #24]
 8006f44:	fab2 f282 	clz	r2, r2
 8006f48:	b2d2      	uxtb	r2, r2
 8006f4a:	40d3      	lsrs	r3, r2
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	440b      	add	r3, r1
 8006f50:	637b      	str	r3, [r7, #52]	@ 0x34

  MODIFY_REG(*preg,
 8006f52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 8006f5c:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8006f60:	6239      	str	r1, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f62:	6a39      	ldr	r1, [r7, #32]
 8006f64:	fa91 f1a1 	rbit	r1, r1
 8006f68:	61f9      	str	r1, [r7, #28]
  return result;
 8006f6a:	69f9      	ldr	r1, [r7, #28]
 8006f6c:	6279      	str	r1, [r7, #36]	@ 0x24
  if (value == 0U)
 8006f6e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f70:	2900      	cmp	r1, #0
 8006f72:	d101      	bne.n	8006f78 <LL_ADC_SetChannelSamplingTime+0x6a>
    return 32U;
 8006f74:	2120      	movs	r1, #32
 8006f76:	e003      	b.n	8006f80 <LL_ADC_SetChannelSamplingTime+0x72>
  return __builtin_clz(value);
 8006f78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f7a:	fab1 f181 	clz	r1, r1
 8006f7e:	b2c9      	uxtb	r1, r1
 8006f80:	40cb      	lsrs	r3, r1
 8006f82:	2107      	movs	r1, #7
 8006f84:	fa01 f303 	lsl.w	r3, r1, r3
 8006f88:	43db      	mvns	r3, r3
 8006f8a:	401a      	ands	r2, r3
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 8006f92:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8006f96:	62f9      	str	r1, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f98:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f9a:	fa91 f1a1 	rbit	r1, r1
 8006f9e:	62b9      	str	r1, [r7, #40]	@ 0x28
  return result;
 8006fa0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006fa2:	6339      	str	r1, [r7, #48]	@ 0x30
  if (value == 0U)
 8006fa4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006fa6:	2900      	cmp	r1, #0
 8006fa8:	d101      	bne.n	8006fae <LL_ADC_SetChannelSamplingTime+0xa0>
    return 32U;
 8006faa:	2120      	movs	r1, #32
 8006fac:	e003      	b.n	8006fb6 <LL_ADC_SetChannelSamplingTime+0xa8>
  return __builtin_clz(value);
 8006fae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006fb0:	fab1 f181 	clz	r1, r1
 8006fb4:	b2c9      	uxtb	r1, r1
 8006fb6:	40cb      	lsrs	r3, r1
 8006fb8:	6879      	ldr	r1, [r7, #4]
 8006fba:	fa01 f303 	lsl.w	r3, r1, r3
 8006fbe:	431a      	orrs	r2, r3
 8006fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fc2:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8006fc4:	bf00      	nop
 8006fc6:	373c      	adds	r7, #60	@ 0x3c
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b085      	sub	sp, #20
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8006fdc:	4a0d      	ldr	r2, [pc, #52]	@ (8007014 <LL_DMA_SetDataTransferDirection+0x44>)
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	4413      	add	r3, r2
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006ff0:	4908      	ldr	r1, [pc, #32]	@ (8007014 <LL_DMA_SetDataTransferDirection+0x44>)
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	440b      	add	r3, r1
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	440b      	add	r3, r1
 8006ffe:	4619      	mov	r1, r3
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4313      	orrs	r3, r2
 8007004:	600b      	str	r3, [r1, #0]
}
 8007006:	bf00      	nop
 8007008:	3714      	adds	r7, #20
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	08010800 	.word	0x08010800

08007018 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 8007018:	b480      	push	{r7}
 800701a:	b085      	sub	sp, #20
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8007024:	4a0d      	ldr	r2, [pc, #52]	@ (800705c <LL_DMA_SetMode+0x44>)
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	4413      	add	r3, r2
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	461a      	mov	r2, r3
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	4413      	add	r3, r2
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 8007038:	4908      	ldr	r1, [pc, #32]	@ (800705c <LL_DMA_SetMode+0x44>)
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	440b      	add	r3, r1
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	4619      	mov	r1, r3
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	440b      	add	r3, r1
 8007046:	4619      	mov	r1, r3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4313      	orrs	r3, r2
 800704c:	600b      	str	r3, [r1, #0]
}
 800704e:	bf00      	nop
 8007050:	3714      	adds	r7, #20
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr
 800705a:	bf00      	nop
 800705c:	08010800 	.word	0x08010800

08007060 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8007060:	b480      	push	{r7}
 8007062:	b085      	sub	sp, #20
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 800706c:	4a0d      	ldr	r2, [pc, #52]	@ (80070a4 <LL_DMA_SetPeriphIncMode+0x44>)
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	4413      	add	r3, r2
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	461a      	mov	r2, r3
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	4413      	add	r3, r2
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007080:	4908      	ldr	r1, [pc, #32]	@ (80070a4 <LL_DMA_SetPeriphIncMode+0x44>)
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	440b      	add	r3, r1
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	4619      	mov	r1, r3
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	440b      	add	r3, r1
 800708e:	4619      	mov	r1, r3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4313      	orrs	r3, r2
 8007094:	600b      	str	r3, [r1, #0]
}
 8007096:	bf00      	nop
 8007098:	3714      	adds	r7, #20
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	08010800 	.word	0x08010800

080070a8 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b085      	sub	sp, #20
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 80070b4:	4a0d      	ldr	r2, [pc, #52]	@ (80070ec <LL_DMA_SetMemoryIncMode+0x44>)
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	4413      	add	r3, r2
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	461a      	mov	r2, r3
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	4413      	add	r3, r2
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80070c8:	4908      	ldr	r1, [pc, #32]	@ (80070ec <LL_DMA_SetMemoryIncMode+0x44>)
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	440b      	add	r3, r1
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	4619      	mov	r1, r3
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	440b      	add	r3, r1
 80070d6:	4619      	mov	r1, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4313      	orrs	r3, r2
 80070dc:	600b      	str	r3, [r1, #0]
}
 80070de:	bf00      	nop
 80070e0:	3714      	adds	r7, #20
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop
 80070ec:	08010800 	.word	0x08010800

080070f0 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 80070fc:	4a0d      	ldr	r2, [pc, #52]	@ (8007134 <LL_DMA_SetPeriphSize+0x44>)
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	4413      	add	r3, r2
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	461a      	mov	r2, r3
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	4413      	add	r3, r2
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8007110:	4908      	ldr	r1, [pc, #32]	@ (8007134 <LL_DMA_SetPeriphSize+0x44>)
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	440b      	add	r3, r1
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	4619      	mov	r1, r3
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	440b      	add	r3, r1
 800711e:	4619      	mov	r1, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4313      	orrs	r3, r2
 8007124:	600b      	str	r3, [r1, #0]
}
 8007126:	bf00      	nop
 8007128:	3714      	adds	r7, #20
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
 8007134:	08010800 	.word	0x08010800

08007138 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8007144:	4a0d      	ldr	r2, [pc, #52]	@ (800717c <LL_DMA_SetMemorySize+0x44>)
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	4413      	add	r3, r2
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	461a      	mov	r2, r3
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	4413      	add	r3, r2
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 8007158:	4908      	ldr	r1, [pc, #32]	@ (800717c <LL_DMA_SetMemorySize+0x44>)
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	440b      	add	r3, r1
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	4619      	mov	r1, r3
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	440b      	add	r3, r1
 8007166:	4619      	mov	r1, r3
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4313      	orrs	r3, r2
 800716c:	600b      	str	r3, [r1, #0]
}
 800716e:	bf00      	nop
 8007170:	3714      	adds	r7, #20
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr
 800717a:	bf00      	nop
 800717c:	08010800 	.word	0x08010800

08007180 <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 8007180:	b480      	push	{r7}
 8007182:	b085      	sub	sp, #20
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 800718c:	4a0d      	ldr	r2, [pc, #52]	@ (80071c4 <LL_DMA_SetStreamPriorityLevel+0x44>)
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	4413      	add	r3, r2
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	461a      	mov	r2, r3
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	4413      	add	r3, r2
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80071a0:	4908      	ldr	r1, [pc, #32]	@ (80071c4 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	440b      	add	r3, r1
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	4619      	mov	r1, r3
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	440b      	add	r3, r1
 80071ae:	4619      	mov	r1, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	600b      	str	r3, [r1, #0]
}
 80071b6:	bf00      	nop
 80071b8:	3714      	adds	r7, #20
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr
 80071c2:	bf00      	nop
 80071c4:	08010800 	.word	0x08010800

080071c8 <LL_DMA_SetChannelSelection>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b085      	sub	sp, #20
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 80071d4:	4a0d      	ldr	r2, [pc, #52]	@ (800720c <LL_DMA_SetChannelSelection+0x44>)
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	4413      	add	r3, r2
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	461a      	mov	r2, r3
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	4413      	add	r3, r2
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80071e8:	4908      	ldr	r1, [pc, #32]	@ (800720c <LL_DMA_SetChannelSelection+0x44>)
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	440b      	add	r3, r1
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	4619      	mov	r1, r3
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	440b      	add	r3, r1
 80071f6:	4619      	mov	r1, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	600b      	str	r3, [r1, #0]
}
 80071fe:	bf00      	nop
 8007200:	3714      	adds	r7, #20
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr
 800720a:	bf00      	nop
 800720c:	08010800 	.word	0x08010800

08007210 <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 800721a:	4a0c      	ldr	r2, [pc, #48]	@ (800724c <LL_DMA_DisableFifoMode+0x3c>)
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	4413      	add	r3, r2
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	461a      	mov	r2, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	4413      	add	r3, r2
 8007228:	695b      	ldr	r3, [r3, #20]
 800722a:	4908      	ldr	r1, [pc, #32]	@ (800724c <LL_DMA_DisableFifoMode+0x3c>)
 800722c:	683a      	ldr	r2, [r7, #0]
 800722e:	440a      	add	r2, r1
 8007230:	7812      	ldrb	r2, [r2, #0]
 8007232:	4611      	mov	r1, r2
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	440a      	add	r2, r1
 8007238:	f023 0304 	bic.w	r3, r3, #4
 800723c:	6153      	str	r3, [r2, #20]
}
 800723e:	bf00      	nop
 8007240:	370c      	adds	r7, #12
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	08010800 	.word	0x08010800

08007250 <LL_I2C_Enable>:
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f043 0201 	orr.w	r2, r3, #1
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	601a      	str	r2, [r3, #0]
}
 8007264:	bf00      	nop
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <LL_I2C_EnableClockStretching>:
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	601a      	str	r2, [r3, #0]
}
 8007284:	bf00      	nop
 8007286:	370c      	adds	r7, #12
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <LL_I2C_DisableGeneralCall>:
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	601a      	str	r2, [r3, #0]
}
 80072a4:	bf00      	nop
 80072a6:	370c      	adds	r7, #12
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <LL_I2C_SetOwnAddress2>:
{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	f023 02fe 	bic.w	r2, r3, #254	@ 0xfe
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	431a      	orrs	r2, r3
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	60da      	str	r2, [r3, #12]
}
 80072ca:	bf00      	nop
 80072cc:	370c      	adds	r7, #12
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr

080072d6 <LL_I2C_DisableOwnAddress2>:
{
 80072d6:	b480      	push	{r7}
 80072d8:	b083      	sub	sp, #12
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	f023 0201 	bic.w	r2, r3, #1
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	60da      	str	r2, [r3, #12]
}
 80072ea:	bf00      	nop
 80072ec:	370c      	adds	r7, #12
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr

080072f6 <LL_I2C_EnableIT_EVT>:
{
 80072f6:	b480      	push	{r7}
 80072f8:	b083      	sub	sp, #12
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	605a      	str	r2, [r3, #4]
}
 800730a:	bf00      	nop
 800730c:	370c      	adds	r7, #12
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr
	...

08007318 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8007318:	b480      	push	{r7}
 800731a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800731c:	4b05      	ldr	r3, [pc, #20]	@ (8007334 <LL_RCC_HSE_Enable+0x1c>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a04      	ldr	r2, [pc, #16]	@ (8007334 <LL_RCC_HSE_Enable+0x1c>)
 8007322:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007326:	6013      	str	r3, [r2, #0]
}
 8007328:	bf00      	nop
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop
 8007334:	40023800 	.word	0x40023800

08007338 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8007338:	b480      	push	{r7}
 800733a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 800733c:	4b07      	ldr	r3, [pc, #28]	@ (800735c <LL_RCC_HSE_IsReady+0x24>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007344:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007348:	bf0c      	ite	eq
 800734a:	2301      	moveq	r3, #1
 800734c:	2300      	movne	r3, #0
 800734e:	b2db      	uxtb	r3, r3
}
 8007350:	4618      	mov	r0, r3
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr
 800735a:	bf00      	nop
 800735c:	40023800 	.word	0x40023800

08007360 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8007368:	4b06      	ldr	r3, [pc, #24]	@ (8007384 <LL_RCC_SetSysClkSource+0x24>)
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	f023 0203 	bic.w	r2, r3, #3
 8007370:	4904      	ldr	r1, [pc, #16]	@ (8007384 <LL_RCC_SetSysClkSource+0x24>)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4313      	orrs	r3, r2
 8007376:	608b      	str	r3, [r1, #8]
}
 8007378:	bf00      	nop
 800737a:	370c      	adds	r7, #12
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr
 8007384:	40023800 	.word	0x40023800

08007388 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8007388:	b480      	push	{r7}
 800738a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800738c:	4b04      	ldr	r3, [pc, #16]	@ (80073a0 <LL_RCC_GetSysClkSource+0x18>)
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	f003 030c 	and.w	r3, r3, #12
}
 8007394:	4618      	mov	r0, r3
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop
 80073a0:	40023800 	.word	0x40023800

080073a4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80073ac:	4b06      	ldr	r3, [pc, #24]	@ (80073c8 <LL_RCC_SetAHBPrescaler+0x24>)
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80073b4:	4904      	ldr	r1, [pc, #16]	@ (80073c8 <LL_RCC_SetAHBPrescaler+0x24>)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	608b      	str	r3, [r1, #8]
}
 80073bc:	bf00      	nop
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr
 80073c8:	40023800 	.word	0x40023800

080073cc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80073d4:	4b06      	ldr	r3, [pc, #24]	@ (80073f0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80073dc:	4904      	ldr	r1, [pc, #16]	@ (80073f0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	608b      	str	r3, [r1, #8]
}
 80073e4:	bf00      	nop
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr
 80073f0:	40023800 	.word	0x40023800

080073f4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80073fc:	4b06      	ldr	r3, [pc, #24]	@ (8007418 <LL_RCC_SetAPB2Prescaler+0x24>)
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007404:	4904      	ldr	r1, [pc, #16]	@ (8007418 <LL_RCC_SetAPB2Prescaler+0x24>)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	4313      	orrs	r3, r2
 800740a:	608b      	str	r3, [r1, #8]
}
 800740c:	bf00      	nop
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr
 8007418:	40023800 	.word	0x40023800

0800741c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800741c:	b480      	push	{r7}
 800741e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8007420:	4b05      	ldr	r3, [pc, #20]	@ (8007438 <LL_RCC_PLL_Enable+0x1c>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a04      	ldr	r2, [pc, #16]	@ (8007438 <LL_RCC_PLL_Enable+0x1c>)
 8007426:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800742a:	6013      	str	r3, [r2, #0]
}
 800742c:	bf00      	nop
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr
 8007436:	bf00      	nop
 8007438:	40023800 	.word	0x40023800

0800743c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800743c:	b480      	push	{r7}
 800743e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8007440:	4b07      	ldr	r3, [pc, #28]	@ (8007460 <LL_RCC_PLL_IsReady+0x24>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007448:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800744c:	bf0c      	ite	eq
 800744e:	2301      	moveq	r3, #1
 8007450:	2300      	movne	r3, #0
 8007452:	b2db      	uxtb	r3, r3
}
 8007454:	4618      	mov	r0, r3
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop
 8007460:	40023800 	.word	0x40023800

08007464 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	607a      	str	r2, [r7, #4]
 8007470:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8007472:	4b0d      	ldr	r3, [pc, #52]	@ (80074a8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8007474:	685a      	ldr	r2, [r3, #4]
 8007476:	4b0d      	ldr	r3, [pc, #52]	@ (80074ac <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8007478:	4013      	ands	r3, r2
 800747a:	68f9      	ldr	r1, [r7, #12]
 800747c:	68ba      	ldr	r2, [r7, #8]
 800747e:	4311      	orrs	r1, r2
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	0192      	lsls	r2, r2, #6
 8007484:	430a      	orrs	r2, r1
 8007486:	4908      	ldr	r1, [pc, #32]	@ (80074a8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8007488:	4313      	orrs	r3, r2
 800748a:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 800748c:	4b06      	ldr	r3, [pc, #24]	@ (80074a8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007494:	4904      	ldr	r1, [pc, #16]	@ (80074a8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	4313      	orrs	r3, r2
 800749a:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 800749c:	bf00      	nop
 800749e:	3714      	adds	r7, #20
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr
 80074a8:	40023800 	.word	0x40023800
 80074ac:	ffbf8000 	.word	0xffbf8000

080074b0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b085      	sub	sp, #20
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80074b8:	4b08      	ldr	r3, [pc, #32]	@ (80074dc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80074ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80074bc:	4907      	ldr	r1, [pc, #28]	@ (80074dc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4313      	orrs	r3, r2
 80074c2:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80074c4:	4b05      	ldr	r3, [pc, #20]	@ (80074dc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80074c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	4013      	ands	r3, r2
 80074cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80074ce:	68fb      	ldr	r3, [r7, #12]
}
 80074d0:	bf00      	nop
 80074d2:	3714      	adds	r7, #20
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr
 80074dc:	40023800 	.word	0x40023800

080074e0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b085      	sub	sp, #20
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80074e8:	4b08      	ldr	r3, [pc, #32]	@ (800750c <LL_APB1_GRP1_EnableClock+0x2c>)
 80074ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80074ec:	4907      	ldr	r1, [pc, #28]	@ (800750c <LL_APB1_GRP1_EnableClock+0x2c>)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80074f4:	4b05      	ldr	r3, [pc, #20]	@ (800750c <LL_APB1_GRP1_EnableClock+0x2c>)
 80074f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4013      	ands	r3, r2
 80074fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80074fe:	68fb      	ldr	r3, [r7, #12]
}
 8007500:	bf00      	nop
 8007502:	3714      	adds	r7, #20
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr
 800750c:	40023800 	.word	0x40023800

08007510 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8007510:	b480      	push	{r7}
 8007512:	b085      	sub	sp, #20
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8007518:	4b08      	ldr	r3, [pc, #32]	@ (800753c <LL_APB2_GRP1_EnableClock+0x2c>)
 800751a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800751c:	4907      	ldr	r1, [pc, #28]	@ (800753c <LL_APB2_GRP1_EnableClock+0x2c>)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4313      	orrs	r3, r2
 8007522:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8007524:	4b05      	ldr	r3, [pc, #20]	@ (800753c <LL_APB2_GRP1_EnableClock+0x2c>)
 8007526:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4013      	ands	r3, r2
 800752c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800752e:	68fb      	ldr	r3, [r7, #12]
}
 8007530:	bf00      	nop
 8007532:	3714      	adds	r7, #20
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr
 800753c:	40023800 	.word	0x40023800

08007540 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8007548:	4b06      	ldr	r3, [pc, #24]	@ (8007564 <LL_FLASH_SetLatency+0x24>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f023 0207 	bic.w	r2, r3, #7
 8007550:	4904      	ldr	r1, [pc, #16]	@ (8007564 <LL_FLASH_SetLatency+0x24>)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4313      	orrs	r3, r2
 8007556:	600b      	str	r3, [r1, #0]
}
 8007558:	bf00      	nop
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr
 8007564:	40023c00 	.word	0x40023c00

08007568 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8007568:	b480      	push	{r7}
 800756a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800756c:	4b04      	ldr	r3, [pc, #16]	@ (8007580 <LL_FLASH_GetLatency+0x18>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 0307 	and.w	r3, r3, #7
}
 8007574:	4618      	mov	r0, r3
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr
 800757e:	bf00      	nop
 8007580:	40023c00 	.word	0x40023c00

08007584 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 800758c:	4b06      	ldr	r3, [pc, #24]	@ (80075a8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007594:	4904      	ldr	r1, [pc, #16]	@ (80075a8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4313      	orrs	r3, r2
 800759a:	600b      	str	r3, [r1, #0]
}
 800759c:	bf00      	nop
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr
 80075a8:	40007000 	.word	0x40007000

080075ac <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 80075ac:	b480      	push	{r7}
 80075ae:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 80075b0:	4b07      	ldr	r3, [pc, #28]	@ (80075d0 <LL_PWR_IsActiveFlag_VOS+0x24>)
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80075b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80075bc:	bf0c      	ite	eq
 80075be:	2301      	moveq	r3, #1
 80075c0:	2300      	movne	r3, #0
 80075c2:	b2db      	uxtb	r3, r3
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	40007000 	.word	0x40007000

080075d4 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	601a      	str	r2, [r3, #0]
}
 80075e8:	bf00      	nop
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	f023 0210 	bic.w	r2, r3, #16
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	431a      	orrs	r2, r3
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	605a      	str	r2, [r3, #4]
}
 800760e:	bf00      	nop
 8007610:	370c      	adds	r7, #12
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr

0800761a <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 800761a:	b480      	push	{r7}
 800761c:	b083      	sub	sp, #12
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	601a      	str	r2, [r3, #0]
}
 800762e:	bf00      	nop
 8007630:	370c      	adds	r7, #12
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr
	...

0800763c <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 800763c:	b480      	push	{r7}
 800763e:	b085      	sub	sp, #20
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	2b01      	cmp	r3, #1
 800764a:	d01c      	beq.n	8007686 <LL_TIM_OC_DisableFast+0x4a>
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	2b04      	cmp	r3, #4
 8007650:	d017      	beq.n	8007682 <LL_TIM_OC_DisableFast+0x46>
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	2b10      	cmp	r3, #16
 8007656:	d012      	beq.n	800767e <LL_TIM_OC_DisableFast+0x42>
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	2b40      	cmp	r3, #64	@ 0x40
 800765c:	d00d      	beq.n	800767a <LL_TIM_OC_DisableFast+0x3e>
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007664:	d007      	beq.n	8007676 <LL_TIM_OC_DisableFast+0x3a>
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800766c:	d101      	bne.n	8007672 <LL_TIM_OC_DisableFast+0x36>
 800766e:	2305      	movs	r3, #5
 8007670:	e00a      	b.n	8007688 <LL_TIM_OC_DisableFast+0x4c>
 8007672:	2306      	movs	r3, #6
 8007674:	e008      	b.n	8007688 <LL_TIM_OC_DisableFast+0x4c>
 8007676:	2304      	movs	r3, #4
 8007678:	e006      	b.n	8007688 <LL_TIM_OC_DisableFast+0x4c>
 800767a:	2303      	movs	r3, #3
 800767c:	e004      	b.n	8007688 <LL_TIM_OC_DisableFast+0x4c>
 800767e:	2302      	movs	r3, #2
 8007680:	e002      	b.n	8007688 <LL_TIM_OC_DisableFast+0x4c>
 8007682:	2301      	movs	r3, #1
 8007684:	e000      	b.n	8007688 <LL_TIM_OC_DisableFast+0x4c>
 8007686:	2300      	movs	r3, #0
 8007688:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	3318      	adds	r3, #24
 800768e:	4619      	mov	r1, r3
 8007690:	7bfb      	ldrb	r3, [r7, #15]
 8007692:	4a0b      	ldr	r2, [pc, #44]	@ (80076c0 <LL_TIM_OC_DisableFast+0x84>)
 8007694:	5cd3      	ldrb	r3, [r2, r3]
 8007696:	440b      	add	r3, r1
 8007698:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	7bfb      	ldrb	r3, [r7, #15]
 80076a0:	4908      	ldr	r1, [pc, #32]	@ (80076c4 <LL_TIM_OC_DisableFast+0x88>)
 80076a2:	5ccb      	ldrb	r3, [r1, r3]
 80076a4:	4619      	mov	r1, r3
 80076a6:	2304      	movs	r3, #4
 80076a8:	408b      	lsls	r3, r1
 80076aa:	43db      	mvns	r3, r3
 80076ac:	401a      	ands	r2, r3
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	601a      	str	r2, [r3, #0]

}
 80076b2:	bf00      	nop
 80076b4:	3714      	adds	r7, #20
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop
 80076c0:	08010808 	.word	0x08010808
 80076c4:	08010810 	.word	0x08010810

080076c8 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b085      	sub	sp, #20
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d01c      	beq.n	8007712 <LL_TIM_OC_EnablePreload+0x4a>
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	2b04      	cmp	r3, #4
 80076dc:	d017      	beq.n	800770e <LL_TIM_OC_EnablePreload+0x46>
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	2b10      	cmp	r3, #16
 80076e2:	d012      	beq.n	800770a <LL_TIM_OC_EnablePreload+0x42>
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	2b40      	cmp	r3, #64	@ 0x40
 80076e8:	d00d      	beq.n	8007706 <LL_TIM_OC_EnablePreload+0x3e>
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076f0:	d007      	beq.n	8007702 <LL_TIM_OC_EnablePreload+0x3a>
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076f8:	d101      	bne.n	80076fe <LL_TIM_OC_EnablePreload+0x36>
 80076fa:	2305      	movs	r3, #5
 80076fc:	e00a      	b.n	8007714 <LL_TIM_OC_EnablePreload+0x4c>
 80076fe:	2306      	movs	r3, #6
 8007700:	e008      	b.n	8007714 <LL_TIM_OC_EnablePreload+0x4c>
 8007702:	2304      	movs	r3, #4
 8007704:	e006      	b.n	8007714 <LL_TIM_OC_EnablePreload+0x4c>
 8007706:	2303      	movs	r3, #3
 8007708:	e004      	b.n	8007714 <LL_TIM_OC_EnablePreload+0x4c>
 800770a:	2302      	movs	r3, #2
 800770c:	e002      	b.n	8007714 <LL_TIM_OC_EnablePreload+0x4c>
 800770e:	2301      	movs	r3, #1
 8007710:	e000      	b.n	8007714 <LL_TIM_OC_EnablePreload+0x4c>
 8007712:	2300      	movs	r3, #0
 8007714:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	3318      	adds	r3, #24
 800771a:	4619      	mov	r1, r3
 800771c:	7bfb      	ldrb	r3, [r7, #15]
 800771e:	4a0a      	ldr	r2, [pc, #40]	@ (8007748 <LL_TIM_OC_EnablePreload+0x80>)
 8007720:	5cd3      	ldrb	r3, [r2, r3]
 8007722:	440b      	add	r3, r1
 8007724:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	7bfb      	ldrb	r3, [r7, #15]
 800772c:	4907      	ldr	r1, [pc, #28]	@ (800774c <LL_TIM_OC_EnablePreload+0x84>)
 800772e:	5ccb      	ldrb	r3, [r1, r3]
 8007730:	4619      	mov	r1, r3
 8007732:	2308      	movs	r3, #8
 8007734:	408b      	lsls	r3, r1
 8007736:	431a      	orrs	r2, r3
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	601a      	str	r2, [r3, #0]
}
 800773c:	bf00      	nop
 800773e:	3714      	adds	r7, #20
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr
 8007748:	08010808 	.word	0x08010808
 800774c:	08010810 	.word	0x08010810

08007750 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007762:	f023 0307 	bic.w	r3, r3, #7
 8007766:	683a      	ldr	r2, [r7, #0]
 8007768:	431a      	orrs	r2, r3
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	609a      	str	r2, [r3, #8]
}
 800776e:	bf00      	nop
 8007770:	370c      	adds	r7, #12
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr

0800777a <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 800777a:	b480      	push	{r7}
 800777c:	b083      	sub	sp, #12
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
 8007782:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	431a      	orrs	r2, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	605a      	str	r2, [r3, #4]
}
 8007794:	bf00      	nop
 8007796:	370c      	adds	r7, #12
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	609a      	str	r2, [r3, #8]
}
 80077b4:	bf00      	nop
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <LL_USART_Enable>:
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	60da      	str	r2, [r3, #12]
}
 80077d4:	bf00      	nop
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <LL_USART_ConfigAsyncMode>:
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	691b      	ldr	r3, [r3, #16]
 80077ec:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	695b      	ldr	r3, [r3, #20]
 80077f8:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	615a      	str	r2, [r3, #20]
}
 8007800:	bf00      	nop
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <LL_GPIO_SetOutputPin>:
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	683a      	ldr	r2, [r7, #0]
 800781a:	619a      	str	r2, [r3, #24]
}
 800781c:	bf00      	nop
 800781e:	370c      	adds	r7, #12
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <LL_GPIO_ResetOutputPin>:
{
 8007828:	b480      	push	{r7}
 800782a:	b083      	sub	sp, #12
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	041a      	lsls	r2, r3, #16
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	619a      	str	r2, [r3, #24]
}
 800783a:	bf00      	nop
 800783c:	370c      	adds	r7, #12
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr
	...

08007848 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800784c:	f002 fca6 	bl	800a19c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007850:	f000 f840 	bl	80078d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007854:	f000 fe00 	bl	8008458 <MX_GPIO_Init>
  MX_DMA_Init();
 8007858:	f000 fde6 	bl	8008428 <MX_DMA_Init>
  MX_SPI1_Init();
 800785c:	f000 fa80 	bl	8007d60 <MX_SPI1_Init>
  MX_ADC1_Init();
 8007860:	f000 f886 	bl	8007970 <MX_ADC1_Init>
  MX_TIM1_Init();
 8007864:	f000 fb7e 	bl	8007f64 <MX_TIM1_Init>
  MX_TIM3_Init();
 8007868:	f000 fc14 	bl	8008094 <MX_TIM3_Init>
  MX_I2C2_Init();
 800786c:	f000 f9fa 	bl	8007c64 <MX_I2C2_Init>
  MX_SPI3_Init();
 8007870:	f000 fb22 	bl	8007eb8 <MX_SPI3_Init>
  MX_SPI2_Init();
 8007874:	f000 faca 	bl	8007e0c <MX_SPI2_Init>
  MX_USART6_UART_Init();
 8007878:	f000 fd76 	bl	8008368 <MX_USART6_UART_Init>
  MX_TIM4_Init();
 800787c:	f000 fc3a 	bl	80080f4 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8007880:	f000 fcb2 	bl	80081e8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8007884:	f000 f996 	bl	8007bb4 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8007888:	f000 fd0e 	bl	80082a8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Initialize for device
  MB85RS2MT_Init(&fram);
 800788c:	480f      	ldr	r0, [pc, #60]	@ (80078cc <main+0x84>)
 800788e:	f7fd fed3 	bl	8005638 <MB85RS2MT_Init>
//  adg1414_init(&exp_adg1414);

  Ex_Watchdog_Init();
 8007892:	f002 fc3b 	bl	800a10c <Ex_Watchdog_Init>
  LED_Status_Init();
 8007896:	f7fd fef7 	bl	8005688 <LED_Status_Init>
  CLI_Command_Init(EXP_UART_CONSOLE_HANDLE);
 800789a:	480d      	ldr	r0, [pc, #52]	@ (80078d0 <main+0x88>)
 800789c:	f7fa fe3e 	bl	800251c <CLI_Command_Init>
  NTC_DMA_ADC_Init();
 80078a0:	f001 ff6e 	bl	8009780 <NTC_DMA_ADC_Init>
  Sensor_I2C_Init();
 80078a4:	f7ff fa1e 	bl	8006ce4 <Sensor_I2C_Init>
  SCH_Initialize();
 80078a8:	f004 ff16 	bl	800c6d8 <SCH_Initialize>

  // Create task scheduler
  Ex_Watchdog_CreateTask();
 80078ac:	f002 fc3a 	bl	800a124 <Ex_Watchdog_CreateTask>
  LED_Status_CreateTask();
 80078b0:	f7fe f802 	bl	80058b8 <LED_Status_CreateTask>
  CLI_Command_CreateTask();
 80078b4:	f7fa fe42 	bl	800253c <CLI_Command_CreateTask>
  Temperature_GetSet_CreateTask();
 80078b8:	f002 f96c 	bl	8009b94 <Temperature_GetSet_CreateTask>
  SoftTime_CreateTask();
 80078bc:	f7fd fe70 	bl	80055a0 <SoftTime_CreateTask>
  SCH_StartSchedular();
 80078c0:	f005 f834 	bl	800c92c <SCH_StartSchedular>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SCH_HandleScheduledTask();
 80078c4:	f005 f838 	bl	800c938 <SCH_HandleScheduledTask>
 80078c8:	e7fc      	b.n	80078c4 <main+0x7c>
 80078ca:	bf00      	nop
 80078cc:	200000d8 	.word	0x200000d8
 80078d0:	40011400 	.word	0x40011400

080078d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80078d8:	2000      	movs	r0, #0
 80078da:	f7ff fe31 	bl	8007540 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 80078de:	bf00      	nop
 80078e0:	f7ff fe42 	bl	8007568 <LL_FLASH_GetLatency>
 80078e4:	4603      	mov	r3, r0
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d1fa      	bne.n	80078e0 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80078ea:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80078ee:	f7ff fe49 	bl	8007584 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 80078f2:	f7ff fd11 	bl	8007318 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 80078f6:	bf00      	nop
 80078f8:	f7ff fd1e 	bl	8007338 <LL_RCC_HSE_IsReady>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d1fa      	bne.n	80078f8 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 72, LL_RCC_PLLP_DIV_6);
 8007902:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007906:	2248      	movs	r2, #72	@ 0x48
 8007908:	2104      	movs	r1, #4
 800790a:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800790e:	f7ff fda9 	bl	8007464 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8007912:	f7ff fd83 	bl	800741c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8007916:	bf00      	nop
 8007918:	f7ff fd90 	bl	800743c <LL_RCC_PLL_IsReady>
 800791c:	4603      	mov	r3, r0
 800791e:	2b01      	cmp	r3, #1
 8007920:	d1fa      	bne.n	8007918 <SystemClock_Config+0x44>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8007922:	bf00      	nop
 8007924:	f7ff fe42 	bl	80075ac <LL_PWR_IsActiveFlag_VOS>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d0fa      	beq.n	8007924 <SystemClock_Config+0x50>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800792e:	2000      	movs	r0, #0
 8007930:	f7ff fd38 	bl	80073a4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8007934:	2000      	movs	r0, #0
 8007936:	f7ff fd49 	bl	80073cc <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800793a:	2000      	movs	r0, #0
 800793c:	f7ff fd5a 	bl	80073f4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8007940:	2002      	movs	r0, #2
 8007942:	f7ff fd0d 	bl	8007360 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8007946:	bf00      	nop
 8007948:	f7ff fd1e 	bl	8007388 <LL_RCC_GetSysClkSource>
 800794c:	4603      	mov	r3, r0
 800794e:	2b08      	cmp	r3, #8
 8007950:	d1fa      	bne.n	8007948 <SystemClock_Config+0x74>
  {

  }
  LL_SetSystemCoreClock(24000000);
 8007952:	4806      	ldr	r0, [pc, #24]	@ (800796c <SystemClock_Config+0x98>)
 8007954:	f004 feb0 	bl	800c6b8 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8007958:	200f      	movs	r0, #15
 800795a:	f002 fc41 	bl	800a1e0 <HAL_InitTick>
 800795e:	4603      	mov	r3, r0
 8007960:	2b00      	cmp	r3, #0
 8007962:	d001      	beq.n	8007968 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8007964:	f000 fe62 	bl	800862c <Error_Handler>
  }
}
 8007968:	bf00      	nop
 800796a:	bd80      	pop	{r7, pc}
 800796c:	016e3600 	.word	0x016e3600

08007970 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b092      	sub	sp, #72	@ 0x48
 8007974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8007976:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800797a:	2200      	movs	r2, #0
 800797c:	601a      	str	r2, [r3, #0]
 800797e:	605a      	str	r2, [r3, #4]
 8007980:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8007982:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007986:	2200      	movs	r2, #0
 8007988:	601a      	str	r2, [r3, #0]
 800798a:	605a      	str	r2, [r3, #4]
 800798c:	609a      	str	r2, [r3, #8]
 800798e:	60da      	str	r2, [r3, #12]
 8007990:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8007992:	f107 0318 	add.w	r3, r7, #24
 8007996:	2200      	movs	r2, #0
 8007998:	601a      	str	r2, [r3, #0]
 800799a:	605a      	str	r2, [r3, #4]
 800799c:	609a      	str	r2, [r3, #8]
 800799e:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079a0:	463b      	mov	r3, r7
 80079a2:	2200      	movs	r2, #0
 80079a4:	601a      	str	r2, [r3, #0]
 80079a6:	605a      	str	r2, [r3, #4]
 80079a8:	609a      	str	r2, [r3, #8]
 80079aa:	60da      	str	r2, [r3, #12]
 80079ac:	611a      	str	r2, [r3, #16]
 80079ae:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 80079b0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80079b4:	f7ff fdac 	bl	8007510 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80079b8:	2004      	movs	r0, #4
 80079ba:	f7ff fd79 	bl	80074b0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80079be:	2001      	movs	r0, #1
 80079c0:	f7ff fd76 	bl	80074b0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80079c4:	2002      	movs	r0, #2
 80079c6:	f7ff fd73 	bl	80074b0 <LL_AHB1_GRP1_EnableClock>
  PC4   ------> ADC1_IN14
  PC5   ------> ADC1_IN15
  PB0   ------> ADC1_IN8
  PB1   ------> ADC1_IN9
  */
  GPIO_InitStruct.Pin = ADC_TEMP1_Pin|ADC_TEMP2_Pin|ADC_TEMP3_Pin|ADC_TEMP4_Pin
 80079ca:	233f      	movs	r3, #63	@ 0x3f
 80079cc:	603b      	str	r3, [r7, #0]
                          |ADC_TEMP5_Pin|ADC_TEMP6_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80079ce:	2303      	movs	r3, #3
 80079d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80079d2:	2300      	movs	r3, #0
 80079d4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80079d6:	463b      	mov	r3, r7
 80079d8:	4619      	mov	r1, r3
 80079da:	4869      	ldr	r0, [pc, #420]	@ (8007b80 <MX_ADC1_Init+0x210>)
 80079dc:	f003 fc71 	bl	800b2c2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = ADC_TEC_Pin;
 80079e0:	2310      	movs	r3, #16
 80079e2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80079e4:	2303      	movs	r3, #3
 80079e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80079e8:	2300      	movs	r3, #0
 80079ea:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(ADC_TEC_GPIO_Port, &GPIO_InitStruct);
 80079ec:	463b      	mov	r3, r7
 80079ee:	4619      	mov	r1, r3
 80079f0:	4864      	ldr	r0, [pc, #400]	@ (8007b84 <MX_ADC1_Init+0x214>)
 80079f2:	f003 fc66 	bl	800b2c2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = ADC_TEMP7_Pin|ADC_TEMP8_Pin;
 80079f6:	2303      	movs	r3, #3
 80079f8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80079fa:	2303      	movs	r3, #3
 80079fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80079fe:	2300      	movs	r3, #0
 8007a00:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a02:	463b      	mov	r3, r7
 8007a04:	4619      	mov	r1, r3
 8007a06:	4860      	ldr	r0, [pc, #384]	@ (8007b88 <MX_ADC1_Init+0x218>)
 8007a08:	f003 fc5b 	bl	800b2c2 <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_0, LL_DMA_CHANNEL_0);
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	2100      	movs	r1, #0
 8007a10:	485e      	ldr	r0, [pc, #376]	@ (8007b8c <MX_ADC1_Init+0x21c>)
 8007a12:	f7ff fbd9 	bl	80071c8 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_0, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8007a16:	2200      	movs	r2, #0
 8007a18:	2100      	movs	r1, #0
 8007a1a:	485c      	ldr	r0, [pc, #368]	@ (8007b8c <MX_ADC1_Init+0x21c>)
 8007a1c:	f7ff fad8 	bl	8006fd0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_0, LL_DMA_PRIORITY_MEDIUM);
 8007a20:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8007a24:	2100      	movs	r1, #0
 8007a26:	4859      	ldr	r0, [pc, #356]	@ (8007b8c <MX_ADC1_Init+0x21c>)
 8007a28:	f7ff fbaa 	bl	8007180 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MODE_CIRCULAR);
 8007a2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007a30:	2100      	movs	r1, #0
 8007a32:	4856      	ldr	r0, [pc, #344]	@ (8007b8c <MX_ADC1_Init+0x21c>)
 8007a34:	f7ff faf0 	bl	8007018 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_PERIPH_NOINCREMENT);
 8007a38:	2200      	movs	r2, #0
 8007a3a:	2100      	movs	r1, #0
 8007a3c:	4853      	ldr	r0, [pc, #332]	@ (8007b8c <MX_ADC1_Init+0x21c>)
 8007a3e:	f7ff fb0f 	bl	8007060 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MEMORY_INCREMENT);
 8007a42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007a46:	2100      	movs	r1, #0
 8007a48:	4850      	ldr	r0, [pc, #320]	@ (8007b8c <MX_ADC1_Init+0x21c>)
 8007a4a:	f7ff fb2d 	bl	80070a8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_0, LL_DMA_PDATAALIGN_HALFWORD);
 8007a4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007a52:	2100      	movs	r1, #0
 8007a54:	484d      	ldr	r0, [pc, #308]	@ (8007b8c <MX_ADC1_Init+0x21c>)
 8007a56:	f7ff fb4b 	bl	80070f0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_0, LL_DMA_MDATAALIGN_HALFWORD);
 8007a5a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007a5e:	2100      	movs	r1, #0
 8007a60:	484a      	ldr	r0, [pc, #296]	@ (8007b8c <MX_ADC1_Init+0x21c>)
 8007a62:	f7ff fb69 	bl	8007138 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_0);
 8007a66:	2100      	movs	r1, #0
 8007a68:	4848      	ldr	r0, [pc, #288]	@ (8007b8c <MX_ADC1_Init+0x21c>)
 8007a6a:	f7ff fbd1 	bl	8007210 <LL_DMA_DisableFifoMode>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8007a72:	2300      	movs	r3, #0
 8007a74:	643b      	str	r3, [r7, #64]	@ 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8007a76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007a7a:	647b      	str	r3, [r7, #68]	@ 0x44
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8007a7c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8007a80:	4619      	mov	r1, r3
 8007a82:	4843      	ldr	r0, [pc, #268]	@ (8007b90 <MX_ADC1_Init+0x220>)
 8007a84:	f003 fa64 	bl	800af50 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS;
 8007a8c:	f44f 03e0 	mov.w	r3, #7340032	@ 0x700000
 8007a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8007a92:	2300      	movs	r3, #0
 8007a94:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8007a96:	2302      	movs	r3, #2
 8007a98:	637b      	str	r3, [r7, #52]	@ 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8007a9a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007a9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8007aa0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	483a      	ldr	r0, [pc, #232]	@ (8007b90 <MX_ADC1_Init+0x220>)
 8007aa8:	f003 fa7e 	bl	800afa8 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV);
 8007aac:	2100      	movs	r1, #0
 8007aae:	4838      	ldr	r0, [pc, #224]	@ (8007b90 <MX_ADC1_Init+0x220>)
 8007ab0:	f7ff fa1a 	bl	8006ee8 <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8007abc:	f107 0318 	add.w	r3, r7, #24
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	4834      	ldr	r0, [pc, #208]	@ (8007b94 <MX_ADC1_Init+0x224>)
 8007ac4:	f003 f9fc 	bl	800aec0 <LL_ADC_CommonInit>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_10);
 8007ac8:	220a      	movs	r2, #10
 8007aca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007ace:	4830      	ldr	r0, [pc, #192]	@ (8007b90 <MX_ADC1_Init+0x220>)
 8007ad0:	f7ff f9cd 	bl	8006e6e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_15CYCLES);
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	210a      	movs	r1, #10
 8007ad8:	482d      	ldr	r0, [pc, #180]	@ (8007b90 <MX_ADC1_Init+0x220>)
 8007ada:	f7ff fa18 	bl	8006f0e <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_11);
 8007ade:	4a2e      	ldr	r2, [pc, #184]	@ (8007b98 <MX_ADC1_Init+0x228>)
 8007ae0:	f240 2105 	movw	r1, #517	@ 0x205
 8007ae4:	482a      	ldr	r0, [pc, #168]	@ (8007b90 <MX_ADC1_Init+0x220>)
 8007ae6:	f7ff f9c2 	bl	8006e6e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_15CYCLES);
 8007aea:	2201      	movs	r2, #1
 8007aec:	492a      	ldr	r1, [pc, #168]	@ (8007b98 <MX_ADC1_Init+0x228>)
 8007aee:	4828      	ldr	r0, [pc, #160]	@ (8007b90 <MX_ADC1_Init+0x220>)
 8007af0:	f7ff fa0d 	bl	8006f0e <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_12);
 8007af4:	4a29      	ldr	r2, [pc, #164]	@ (8007b9c <MX_ADC1_Init+0x22c>)
 8007af6:	f240 210a 	movw	r1, #522	@ 0x20a
 8007afa:	4825      	ldr	r0, [pc, #148]	@ (8007b90 <MX_ADC1_Init+0x220>)
 8007afc:	f7ff f9b7 	bl	8006e6e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_12, LL_ADC_SAMPLINGTIME_15CYCLES);
 8007b00:	2201      	movs	r2, #1
 8007b02:	4926      	ldr	r1, [pc, #152]	@ (8007b9c <MX_ADC1_Init+0x22c>)
 8007b04:	4822      	ldr	r0, [pc, #136]	@ (8007b90 <MX_ADC1_Init+0x220>)
 8007b06:	f7ff fa02 	bl	8006f0e <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_13);
 8007b0a:	4a25      	ldr	r2, [pc, #148]	@ (8007ba0 <MX_ADC1_Init+0x230>)
 8007b0c:	f240 210f 	movw	r1, #527	@ 0x20f
 8007b10:	481f      	ldr	r0, [pc, #124]	@ (8007b90 <MX_ADC1_Init+0x220>)
 8007b12:	f7ff f9ac 	bl	8006e6e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_13, LL_ADC_SAMPLINGTIME_15CYCLES);
 8007b16:	2201      	movs	r2, #1
 8007b18:	4921      	ldr	r1, [pc, #132]	@ (8007ba0 <MX_ADC1_Init+0x230>)
 8007b1a:	481d      	ldr	r0, [pc, #116]	@ (8007b90 <MX_ADC1_Init+0x220>)
 8007b1c:	f7ff f9f7 	bl	8006f0e <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_14);
 8007b20:	4a20      	ldr	r2, [pc, #128]	@ (8007ba4 <MX_ADC1_Init+0x234>)
 8007b22:	f44f 7105 	mov.w	r1, #532	@ 0x214
 8007b26:	481a      	ldr	r0, [pc, #104]	@ (8007b90 <MX_ADC1_Init+0x220>)
 8007b28:	f7ff f9a1 	bl	8006e6e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_14, LL_ADC_SAMPLINGTIME_15CYCLES);
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	491d      	ldr	r1, [pc, #116]	@ (8007ba4 <MX_ADC1_Init+0x234>)
 8007b30:	4817      	ldr	r0, [pc, #92]	@ (8007b90 <MX_ADC1_Init+0x220>)
 8007b32:	f7ff f9ec 	bl	8006f0e <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_15);
 8007b36:	4a1c      	ldr	r2, [pc, #112]	@ (8007ba8 <MX_ADC1_Init+0x238>)
 8007b38:	f240 2119 	movw	r1, #537	@ 0x219
 8007b3c:	4814      	ldr	r0, [pc, #80]	@ (8007b90 <MX_ADC1_Init+0x220>)
 8007b3e:	f7ff f996 	bl	8006e6e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_15, LL_ADC_SAMPLINGTIME_15CYCLES);
 8007b42:	2201      	movs	r2, #1
 8007b44:	4918      	ldr	r1, [pc, #96]	@ (8007ba8 <MX_ADC1_Init+0x238>)
 8007b46:	4812      	ldr	r0, [pc, #72]	@ (8007b90 <MX_ADC1_Init+0x220>)
 8007b48:	f7ff f9e1 	bl	8006f0e <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_7, LL_ADC_CHANNEL_8);
 8007b4c:	4a17      	ldr	r2, [pc, #92]	@ (8007bac <MX_ADC1_Init+0x23c>)
 8007b4e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007b52:	480f      	ldr	r0, [pc, #60]	@ (8007b90 <MX_ADC1_Init+0x220>)
 8007b54:	f7ff f98b 	bl	8006e6e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_8, LL_ADC_SAMPLINGTIME_15CYCLES);
 8007b58:	2201      	movs	r2, #1
 8007b5a:	4914      	ldr	r1, [pc, #80]	@ (8007bac <MX_ADC1_Init+0x23c>)
 8007b5c:	480c      	ldr	r0, [pc, #48]	@ (8007b90 <MX_ADC1_Init+0x220>)
 8007b5e:	f7ff f9d6 	bl	8006f0e <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_8, LL_ADC_CHANNEL_9);
 8007b62:	4a13      	ldr	r2, [pc, #76]	@ (8007bb0 <MX_ADC1_Init+0x240>)
 8007b64:	f240 1105 	movw	r1, #261	@ 0x105
 8007b68:	4809      	ldr	r0, [pc, #36]	@ (8007b90 <MX_ADC1_Init+0x220>)
 8007b6a:	f7ff f980 	bl	8006e6e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_9, LL_ADC_SAMPLINGTIME_15CYCLES);
 8007b6e:	2201      	movs	r2, #1
 8007b70:	490f      	ldr	r1, [pc, #60]	@ (8007bb0 <MX_ADC1_Init+0x240>)
 8007b72:	4807      	ldr	r0, [pc, #28]	@ (8007b90 <MX_ADC1_Init+0x220>)
 8007b74:	f7ff f9cb 	bl	8006f0e <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8007b78:	bf00      	nop
 8007b7a:	3748      	adds	r7, #72	@ 0x48
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}
 8007b80:	40020800 	.word	0x40020800
 8007b84:	40020000 	.word	0x40020000
 8007b88:	40020400 	.word	0x40020400
 8007b8c:	40026400 	.word	0x40026400
 8007b90:	40012000 	.word	0x40012000
 8007b94:	40012300 	.word	0x40012300
 8007b98:	0030000b 	.word	0x0030000b
 8007b9c:	0060000c 	.word	0x0060000c
 8007ba0:	0090000d 	.word	0x0090000d
 8007ba4:	00c0000e 	.word	0x00c0000e
 8007ba8:	00f0000f 	.word	0x00f0000f
 8007bac:	03800008 	.word	0x03800008
 8007bb0:	03b00009 	.word	0x03b00009

08007bb4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b08c      	sub	sp, #48	@ 0x30
 8007bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8007bba:	f107 0318 	add.w	r3, r7, #24
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	601a      	str	r2, [r3, #0]
 8007bc2:	605a      	str	r2, [r3, #4]
 8007bc4:	609a      	str	r2, [r3, #8]
 8007bc6:	60da      	str	r2, [r3, #12]
 8007bc8:	611a      	str	r2, [r3, #16]
 8007bca:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007bcc:	463b      	mov	r3, r7
 8007bce:	2200      	movs	r2, #0
 8007bd0:	601a      	str	r2, [r3, #0]
 8007bd2:	605a      	str	r2, [r3, #4]
 8007bd4:	609a      	str	r2, [r3, #8]
 8007bd6:	60da      	str	r2, [r3, #12]
 8007bd8:	611a      	str	r2, [r3, #16]
 8007bda:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8007bdc:	2002      	movs	r0, #2
 8007bde:	f7ff fc67 	bl	80074b0 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = SENSOR_SCL_Pin|SENSOR_SDA_Pin;
 8007be2:	23c0      	movs	r3, #192	@ 0xc0
 8007be4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007be6:	2302      	movs	r3, #2
 8007be8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007bea:	2303      	movs	r3, #3
 8007bec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8007bf6:	2304      	movs	r3, #4
 8007bf8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007bfa:	463b      	mov	r3, r7
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	4816      	ldr	r0, [pc, #88]	@ (8007c58 <MX_I2C1_Init+0xa4>)
 8007c00:	f003 fb5f 	bl	800b2c2 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8007c04:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8007c08:	f7ff fc6a 	bl	80074e0 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 8007c0c:	4813      	ldr	r0, [pc, #76]	@ (8007c5c <MX_I2C1_Init+0xa8>)
 8007c0e:	f7ff fb62 	bl	80072d6 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8007c12:	4812      	ldr	r0, [pc, #72]	@ (8007c5c <MX_I2C1_Init+0xa8>)
 8007c14:	f7ff fb3c 	bl	8007290 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8007c18:	4810      	ldr	r0, [pc, #64]	@ (8007c5c <MX_I2C1_Init+0xa8>)
 8007c1a:	f7ff fb29 	bl	8007270 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8007c22:	4b0f      	ldr	r3, [pc, #60]	@ (8007c60 <MX_I2C1_Init+0xac>)
 8007c24:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8007c26:	2300      	movs	r3, #0
 8007c28:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8007c2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c32:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8007c34:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8007c3a:	f107 0318 	add.w	r3, r7, #24
 8007c3e:	4619      	mov	r1, r3
 8007c40:	4806      	ldr	r0, [pc, #24]	@ (8007c5c <MX_I2C1_Init+0xa8>)
 8007c42:	f003 fd15 	bl	800b670 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 8007c46:	2100      	movs	r1, #0
 8007c48:	4804      	ldr	r0, [pc, #16]	@ (8007c5c <MX_I2C1_Init+0xa8>)
 8007c4a:	f7ff fb31 	bl	80072b0 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007c4e:	bf00      	nop
 8007c50:	3730      	adds	r7, #48	@ 0x30
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop
 8007c58:	40020400 	.word	0x40020400
 8007c5c:	40005400 	.word	0x40005400
 8007c60:	000186a0 	.word	0x000186a0

08007c64 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b08c      	sub	sp, #48	@ 0x30
 8007c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C2_Init 0 */

  /* USER CODE END I2C2_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8007c6a:	f107 0318 	add.w	r3, r7, #24
 8007c6e:	2200      	movs	r2, #0
 8007c70:	601a      	str	r2, [r3, #0]
 8007c72:	605a      	str	r2, [r3, #4]
 8007c74:	609a      	str	r2, [r3, #8]
 8007c76:	60da      	str	r2, [r3, #12]
 8007c78:	611a      	str	r2, [r3, #16]
 8007c7a:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c7c:	463b      	mov	r3, r7
 8007c7e:	2200      	movs	r2, #0
 8007c80:	601a      	str	r2, [r3, #0]
 8007c82:	605a      	str	r2, [r3, #4]
 8007c84:	609a      	str	r2, [r3, #8]
 8007c86:	60da      	str	r2, [r3, #12]
 8007c88:	611a      	str	r2, [r3, #16]
 8007c8a:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8007c8c:	2002      	movs	r0, #2
 8007c8e:	f7ff fc0f 	bl	80074b0 <LL_AHB1_GRP1_EnableClock>
  /**I2C2 GPIO Configuration
  PB10   ------> I2C2_SCL
  PB11   ------> I2C2_SDA
  */
  GPIO_InitStruct.Pin = EXP_SCL_Pin|EXP_SDA_Pin;
 8007c92:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007c96:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007c98:	2302      	movs	r3, #2
 8007c9a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007c9c:	2303      	movs	r3, #3
 8007c9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8007ca8:	2304      	movs	r3, #4
 8007caa:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007cac:	463b      	mov	r3, r7
 8007cae:	4619      	mov	r1, r3
 8007cb0:	4828      	ldr	r0, [pc, #160]	@ (8007d54 <MX_I2C2_Init+0xf0>)
 8007cb2:	f003 fb06 	bl	800b2c2 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
 8007cb6:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8007cba:	f7ff fc11 	bl	80074e0 <LL_APB1_GRP1_EnableClock>

  /* I2C2 interrupt Init */
  NVIC_SetPriority(I2C2_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007cbe:	f7ff f84d 	bl	8006d5c <__NVIC_GetPriorityGrouping>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	2100      	movs	r1, #0
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f7ff f89d 	bl	8006e08 <NVIC_EncodePriority>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	2021      	movs	r0, #33	@ 0x21
 8007cd4:	f7ff f86e 	bl	8006db4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C2_EV_IRQn);
 8007cd8:	2021      	movs	r0, #33	@ 0x21
 8007cda:	f7ff f84d 	bl	8006d78 <__NVIC_EnableIRQ>
  NVIC_SetPriority(I2C2_ER_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007cde:	f7ff f83d 	bl	8006d5c <__NVIC_GetPriorityGrouping>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	2100      	movs	r1, #0
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f7ff f88d 	bl	8006e08 <NVIC_EncodePriority>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	2022      	movs	r0, #34	@ 0x22
 8007cf4:	f7ff f85e 	bl	8006db4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C2_ER_IRQn);
 8007cf8:	2022      	movs	r0, #34	@ 0x22
 8007cfa:	f7ff f83d 	bl	8006d78 <__NVIC_EnableIRQ>

  /* USER CODE END I2C2_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C2);
 8007cfe:	4816      	ldr	r0, [pc, #88]	@ (8007d58 <MX_I2C2_Init+0xf4>)
 8007d00:	f7ff fae9 	bl	80072d6 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C2);
 8007d04:	4814      	ldr	r0, [pc, #80]	@ (8007d58 <MX_I2C2_Init+0xf4>)
 8007d06:	f7ff fac3 	bl	8007290 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C2);
 8007d0a:	4813      	ldr	r0, [pc, #76]	@ (8007d58 <MX_I2C2_Init+0xf4>)
 8007d0c:	f7ff fab0 	bl	8007270 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8007d10:	2300      	movs	r3, #0
 8007d12:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8007d14:	4b11      	ldr	r3, [pc, #68]	@ (8007d5c <MX_I2C2_Init+0xf8>)
 8007d16:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 36;
 8007d1c:	2324      	movs	r3, #36	@ 0x24
 8007d1e:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8007d20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d24:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8007d26:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_I2C_Init(I2C2, &I2C_InitStruct);
 8007d2c:	f107 0318 	add.w	r3, r7, #24
 8007d30:	4619      	mov	r1, r3
 8007d32:	4809      	ldr	r0, [pc, #36]	@ (8007d58 <MX_I2C2_Init+0xf4>)
 8007d34:	f003 fc9c 	bl	800b670 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C2, 0);
 8007d38:	2100      	movs	r1, #0
 8007d3a:	4807      	ldr	r0, [pc, #28]	@ (8007d58 <MX_I2C2_Init+0xf4>)
 8007d3c:	f7ff fab8 	bl	80072b0 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C2_Init 2 */
  LL_I2C_EnableIT_EVT(I2C2);
 8007d40:	4805      	ldr	r0, [pc, #20]	@ (8007d58 <MX_I2C2_Init+0xf4>)
 8007d42:	f7ff fad8 	bl	80072f6 <LL_I2C_EnableIT_EVT>
  //  LL_I2C_EnableIT_ERR(I2C2);
  LL_I2C_Enable(I2C2);
 8007d46:	4804      	ldr	r0, [pc, #16]	@ (8007d58 <MX_I2C2_Init+0xf4>)
 8007d48:	f7ff fa82 	bl	8007250 <LL_I2C_Enable>
  /* USER CODE END I2C2_Init 2 */

}
 8007d4c:	bf00      	nop
 8007d4e:	3730      	adds	r7, #48	@ 0x30
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}
 8007d54:	40020400 	.word	0x40020400
 8007d58:	40005800 	.word	0x40005800
 8007d5c:	000186a0 	.word	0x000186a0

08007d60 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b090      	sub	sp, #64	@ 0x40
 8007d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8007d66:	f107 0318 	add.w	r3, r7, #24
 8007d6a:	2228      	movs	r2, #40	@ 0x28
 8007d6c:	2100      	movs	r1, #0
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f005 fc91 	bl	800d696 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d74:	463b      	mov	r3, r7
 8007d76:	2200      	movs	r2, #0
 8007d78:	601a      	str	r2, [r3, #0]
 8007d7a:	605a      	str	r2, [r3, #4]
 8007d7c:	609a      	str	r2, [r3, #8]
 8007d7e:	60da      	str	r2, [r3, #12]
 8007d80:	611a      	str	r2, [r3, #16]
 8007d82:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8007d84:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8007d88:	f7ff fbc2 	bl	8007510 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8007d8c:	2001      	movs	r0, #1
 8007d8e:	f7ff fb8f 	bl	80074b0 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LASRR_SCK_Pin|LASER_MISO_Pin|LASER_MOSI_Pin;
 8007d92:	23e0      	movs	r3, #224	@ 0xe0
 8007d94:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007d96:	2302      	movs	r3, #2
 8007d98:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007d9a:	2303      	movs	r3, #3
 8007d9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007da2:	2300      	movs	r3, #0
 8007da4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8007da6:	2305      	movs	r3, #5
 8007da8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007daa:	463b      	mov	r3, r7
 8007dac:	4619      	mov	r1, r3
 8007dae:	4815      	ldr	r0, [pc, #84]	@ (8007e04 <MX_SPI1_Init+0xa4>)
 8007db0:	f003 fa87 	bl	800b2c2 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8007db4:	2300      	movs	r3, #0
 8007db6:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8007db8:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8007dbc:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8007dca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32;
 8007dd0:	2320      	movs	r3, #32
 8007dd2:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8007ddc:	230a      	movs	r3, #10
 8007dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8007de0:	f107 0318 	add.w	r3, r7, #24
 8007de4:	4619      	mov	r1, r3
 8007de6:	4808      	ldr	r0, [pc, #32]	@ (8007e08 <MX_SPI1_Init+0xa8>)
 8007de8:	f003 fdd1 	bl	800b98e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8007dec:	2100      	movs	r1, #0
 8007dee:	4806      	ldr	r0, [pc, #24]	@ (8007e08 <MX_SPI1_Init+0xa8>)
 8007df0:	f7ff fc00 	bl	80075f4 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */
  LL_SPI_Enable(SPI1);
 8007df4:	4804      	ldr	r0, [pc, #16]	@ (8007e08 <MX_SPI1_Init+0xa8>)
 8007df6:	f7ff fbed 	bl	80075d4 <LL_SPI_Enable>
  /* USER CODE END SPI1_Init 2 */

}
 8007dfa:	bf00      	nop
 8007dfc:	3740      	adds	r7, #64	@ 0x40
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
 8007e02:	bf00      	nop
 8007e04:	40020000 	.word	0x40020000
 8007e08:	40013000 	.word	0x40013000

08007e0c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b090      	sub	sp, #64	@ 0x40
 8007e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8007e12:	f107 0318 	add.w	r3, r7, #24
 8007e16:	2228      	movs	r2, #40	@ 0x28
 8007e18:	2100      	movs	r1, #0
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f005 fc3b 	bl	800d696 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e20:	463b      	mov	r3, r7
 8007e22:	2200      	movs	r2, #0
 8007e24:	601a      	str	r2, [r3, #0]
 8007e26:	605a      	str	r2, [r3, #4]
 8007e28:	609a      	str	r2, [r3, #8]
 8007e2a:	60da      	str	r2, [r3, #12]
 8007e2c:	611a      	str	r2, [r3, #16]
 8007e2e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8007e30:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8007e34:	f7ff fb54 	bl	80074e0 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8007e38:	2002      	movs	r0, #2
 8007e3a:	f7ff fb39 	bl	80074b0 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = PHOTO_SCK_Pin|PHOTO_MISO_Pin|PHOTO_MOSI_Pin;
 8007e3e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8007e42:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007e44:	2302      	movs	r3, #2
 8007e46:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007e48:	2303      	movs	r3, #3
 8007e4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007e50:	2300      	movs	r3, #0
 8007e52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8007e54:	2305      	movs	r3, #5
 8007e56:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007e58:	463b      	mov	r3, r7
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	4814      	ldr	r0, [pc, #80]	@ (8007eb0 <MX_SPI2_Init+0xa4>)
 8007e5e:	f003 fa30 	bl	800b2c2 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8007e62:	2300      	movs	r3, #0
 8007e64:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8007e66:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8007e6a:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8007e70:	2300      	movs	r3, #0
 8007e72:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8007e74:	2301      	movs	r3, #1
 8007e76:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8007e78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8007e7e:	2318      	movs	r3, #24
 8007e80:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8007e82:	2300      	movs	r3, #0
 8007e84:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8007e86:	2300      	movs	r3, #0
 8007e88:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8007e8a:	230a      	movs	r3, #10
 8007e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8007e8e:	f107 0318 	add.w	r3, r7, #24
 8007e92:	4619      	mov	r1, r3
 8007e94:	4807      	ldr	r0, [pc, #28]	@ (8007eb4 <MX_SPI2_Init+0xa8>)
 8007e96:	f003 fd7a 	bl	800b98e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8007e9a:	2100      	movs	r1, #0
 8007e9c:	4805      	ldr	r0, [pc, #20]	@ (8007eb4 <MX_SPI2_Init+0xa8>)
 8007e9e:	f7ff fba9 	bl	80075f4 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */
  LL_SPI_Enable(SPI2);
 8007ea2:	4804      	ldr	r0, [pc, #16]	@ (8007eb4 <MX_SPI2_Init+0xa8>)
 8007ea4:	f7ff fb96 	bl	80075d4 <LL_SPI_Enable>
  /* USER CODE END SPI2_Init 2 */

}
 8007ea8:	bf00      	nop
 8007eaa:	3740      	adds	r7, #64	@ 0x40
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}
 8007eb0:	40020400 	.word	0x40020400
 8007eb4:	40003800 	.word	0x40003800

08007eb8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b090      	sub	sp, #64	@ 0x40
 8007ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8007ebe:	f107 0318 	add.w	r3, r7, #24
 8007ec2:	2228      	movs	r2, #40	@ 0x28
 8007ec4:	2100      	movs	r1, #0
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f005 fbe5 	bl	800d696 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ecc:	463b      	mov	r3, r7
 8007ece:	2200      	movs	r2, #0
 8007ed0:	601a      	str	r2, [r3, #0]
 8007ed2:	605a      	str	r2, [r3, #4]
 8007ed4:	609a      	str	r2, [r3, #8]
 8007ed6:	60da      	str	r2, [r3, #12]
 8007ed8:	611a      	str	r2, [r3, #16]
 8007eda:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8007edc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8007ee0:	f7ff fafe 	bl	80074e0 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8007ee4:	2004      	movs	r0, #4
 8007ee6:	f7ff fae3 	bl	80074b0 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PC10   ------> SPI3_SCK
  PC11   ------> SPI3_MISO
  PC12   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = TEC_SCK_Pin|TEC_MISO_Pin|TEC_MOSI_Pin;
 8007eea:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8007eee:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007ef0:	2302      	movs	r3, #2
 8007ef2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007ef4:	2303      	movs	r3, #3
 8007ef6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007efc:	2300      	movs	r3, #0
 8007efe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8007f00:	2306      	movs	r3, #6
 8007f02:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007f04:	463b      	mov	r3, r7
 8007f06:	4619      	mov	r1, r3
 8007f08:	4814      	ldr	r0, [pc, #80]	@ (8007f5c <MX_SPI3_Init+0xa4>)
 8007f0a:	f003 f9da 	bl	800b2c2 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8007f12:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8007f16:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8007f20:	2300      	movs	r3, #0
 8007f22:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8007f24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8007f2a:	2318      	movs	r3, #24
 8007f2c:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8007f32:	2300      	movs	r3, #0
 8007f34:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8007f36:	230a      	movs	r3, #10
 8007f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8007f3a:	f107 0318 	add.w	r3, r7, #24
 8007f3e:	4619      	mov	r1, r3
 8007f40:	4807      	ldr	r0, [pc, #28]	@ (8007f60 <MX_SPI3_Init+0xa8>)
 8007f42:	f003 fd24 	bl	800b98e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8007f46:	2100      	movs	r1, #0
 8007f48:	4805      	ldr	r0, [pc, #20]	@ (8007f60 <MX_SPI3_Init+0xa8>)
 8007f4a:	f7ff fb53 	bl	80075f4 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */
  LL_SPI_Enable(SPI3);
 8007f4e:	4804      	ldr	r0, [pc, #16]	@ (8007f60 <MX_SPI3_Init+0xa8>)
 8007f50:	f7ff fb40 	bl	80075d4 <LL_SPI_Enable>
  /* USER CODE END SPI3_Init 2 */

}
 8007f54:	bf00      	nop
 8007f56:	3740      	adds	r7, #64	@ 0x40
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	40020800 	.word	0x40020800
 8007f60:	40003c00 	.word	0x40003c00

08007f64 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b09a      	sub	sp, #104	@ 0x68
 8007f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8007f6a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8007f6e:	2200      	movs	r2, #0
 8007f70:	601a      	str	r2, [r3, #0]
 8007f72:	605a      	str	r2, [r3, #4]
 8007f74:	609a      	str	r2, [r3, #8]
 8007f76:	60da      	str	r2, [r3, #12]
 8007f78:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8007f7a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8007f7e:	2220      	movs	r2, #32
 8007f80:	2100      	movs	r1, #0
 8007f82:	4618      	mov	r0, r3
 8007f84:	f005 fb87 	bl	800d696 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8007f88:	f107 031c 	add.w	r3, r7, #28
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	601a      	str	r2, [r3, #0]
 8007f90:	605a      	str	r2, [r3, #4]
 8007f92:	609a      	str	r2, [r3, #8]
 8007f94:	60da      	str	r2, [r3, #12]
 8007f96:	611a      	str	r2, [r3, #16]
 8007f98:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f9a:	1d3b      	adds	r3, r7, #4
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	601a      	str	r2, [r3, #0]
 8007fa0:	605a      	str	r2, [r3, #4]
 8007fa2:	609a      	str	r2, [r3, #8]
 8007fa4:	60da      	str	r2, [r3, #12]
 8007fa6:	611a      	str	r2, [r3, #16]
 8007fa8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8007faa:	2001      	movs	r0, #1
 8007fac:	f7ff fab0 	bl	8007510 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 83;
 8007fb0:	2353      	movs	r3, #83	@ 0x53
 8007fb2:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	65bb      	str	r3, [r7, #88]	@ 0x58
  TIM_InitStruct.Autoreload = 9999;
 8007fba:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007fbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	663b      	str	r3, [r7, #96]	@ 0x60
  TIM_InitStruct.RepetitionCounter = 0;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	667b      	str	r3, [r7, #100]	@ 0x64
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8007fc8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8007fcc:	4619      	mov	r1, r3
 8007fce:	482f      	ldr	r0, [pc, #188]	@ (800808c <MX_TIM1_Init+0x128>)
 8007fd0:	f003 fda2 	bl	800bb18 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8007fd4:	482d      	ldr	r0, [pc, #180]	@ (800808c <MX_TIM1_Init+0x128>)
 8007fd6:	f7ff fb20 	bl	800761a <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8007fda:	2100      	movs	r1, #0
 8007fdc:	482b      	ldr	r0, [pc, #172]	@ (800808c <MX_TIM1_Init+0x128>)
 8007fde:	f7ff fbb7 	bl	8007750 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8007fe2:	2101      	movs	r1, #1
 8007fe4:	4829      	ldr	r0, [pc, #164]	@ (800808c <MX_TIM1_Init+0x128>)
 8007fe6:	f7ff fb6f 	bl	80076c8 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8007fea:	2360      	movs	r3, #96	@ 0x60
 8007fec:	637b      	str	r3, [r7, #52]	@ 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	63bb      	str	r3, [r7, #56]	@ 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  TIM_OC_InitStruct.CompareValue = 0;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8007ffe:	2300      	movs	r3, #0
 8008000:	64bb      	str	r3, [r7, #72]	@ 0x48
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8008002:	2300      	movs	r3, #0
 8008004:	64fb      	str	r3, [r7, #76]	@ 0x4c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8008006:	2300      	movs	r3, #0
 8008008:	653b      	str	r3, [r7, #80]	@ 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800800a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800800e:	461a      	mov	r2, r3
 8008010:	2101      	movs	r1, #1
 8008012:	481e      	ldr	r0, [pc, #120]	@ (800808c <MX_TIM1_Init+0x128>)
 8008014:	f003 fe1a 	bl	800bc4c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8008018:	2101      	movs	r1, #1
 800801a:	481c      	ldr	r0, [pc, #112]	@ (800808c <MX_TIM1_Init+0x128>)
 800801c:	f7ff fb0e 	bl	800763c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8008020:	2100      	movs	r1, #0
 8008022:	481a      	ldr	r0, [pc, #104]	@ (800808c <MX_TIM1_Init+0x128>)
 8008024:	f7ff fba9 	bl	800777a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8008028:	4818      	ldr	r0, [pc, #96]	@ (800808c <MX_TIM1_Init+0x128>)
 800802a:	f7ff fbb9 	bl	80077a0 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 800802e:	2300      	movs	r3, #0
 8008030:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8008032:	2300      	movs	r3, #0
 8008034:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8008036:	2300      	movs	r3, #0
 8008038:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 800803a:	2300      	movs	r3, #0
 800803c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8008040:	2300      	movs	r3, #0
 8008042:	857b      	strh	r3, [r7, #42]	@ 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8008044:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008048:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 800804a:	2300      	movs	r3, #0
 800804c:	633b      	str	r3, [r7, #48]	@ 0x30
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 800804e:	f107 031c 	add.w	r3, r7, #28
 8008052:	4619      	mov	r1, r3
 8008054:	480d      	ldr	r0, [pc, #52]	@ (800808c <MX_TIM1_Init+0x128>)
 8008056:	f003 fe3a 	bl	800bcce <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 800805a:	2010      	movs	r0, #16
 800805c:	f7ff fa28 	bl	80074b0 <LL_AHB1_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PE9   ------> TIM1_CH1
  */
  GPIO_InitStruct.Pin = IR_LED_PWM_Pin;
 8008060:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008064:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8008066:	2302      	movs	r3, #2
 8008068:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800806a:	2300      	movs	r3, #0
 800806c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800806e:	2300      	movs	r3, #0
 8008070:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008072:	2300      	movs	r3, #0
 8008074:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8008076:	2301      	movs	r3, #1
 8008078:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(IR_LED_PWM_GPIO_Port, &GPIO_InitStruct);
 800807a:	1d3b      	adds	r3, r7, #4
 800807c:	4619      	mov	r1, r3
 800807e:	4804      	ldr	r0, [pc, #16]	@ (8008090 <MX_TIM1_Init+0x12c>)
 8008080:	f003 f91f 	bl	800b2c2 <LL_GPIO_Init>

}
 8008084:	bf00      	nop
 8008086:	3768      	adds	r7, #104	@ 0x68
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}
 800808c:	40010000 	.word	0x40010000
 8008090:	40021000 	.word	0x40021000

08008094 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b086      	sub	sp, #24
 8008098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800809a:	1d3b      	adds	r3, r7, #4
 800809c:	2200      	movs	r2, #0
 800809e:	601a      	str	r2, [r3, #0]
 80080a0:	605a      	str	r2, [r3, #4]
 80080a2:	609a      	str	r2, [r3, #8]
 80080a4:	60da      	str	r2, [r3, #12]
 80080a6:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80080a8:	2002      	movs	r0, #2
 80080aa:	f7ff fa19 	bl	80074e0 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 83;
 80080ae:	2353      	movs	r3, #83	@ 0x53
 80080b0:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80080b2:	2300      	movs	r3, #0
 80080b4:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 9999;
 80080b6:	f242 730f 	movw	r3, #9999	@ 0x270f
 80080ba:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80080bc:	2300      	movs	r3, #0
 80080be:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80080c0:	1d3b      	adds	r3, r7, #4
 80080c2:	4619      	mov	r1, r3
 80080c4:	480a      	ldr	r0, [pc, #40]	@ (80080f0 <MX_TIM3_Init+0x5c>)
 80080c6:	f003 fd27 	bl	800bb18 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 80080ca:	4809      	ldr	r0, [pc, #36]	@ (80080f0 <MX_TIM3_Init+0x5c>)
 80080cc:	f7ff faa5 	bl	800761a <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 80080d0:	2100      	movs	r1, #0
 80080d2:	4807      	ldr	r0, [pc, #28]	@ (80080f0 <MX_TIM3_Init+0x5c>)
 80080d4:	f7ff fb3c 	bl	8007750 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 80080d8:	2100      	movs	r1, #0
 80080da:	4805      	ldr	r0, [pc, #20]	@ (80080f0 <MX_TIM3_Init+0x5c>)
 80080dc:	f7ff fb4d 	bl	800777a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80080e0:	4803      	ldr	r0, [pc, #12]	@ (80080f0 <MX_TIM3_Init+0x5c>)
 80080e2:	f7ff fb5d 	bl	80077a0 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80080e6:	bf00      	nop
 80080e8:	3718      	adds	r7, #24
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
 80080ee:	bf00      	nop
 80080f0:	40000400 	.word	0x40000400

080080f4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b08a      	sub	sp, #40	@ 0x28
 80080f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80080fa:	f107 0320 	add.w	r3, r7, #32
 80080fe:	2200      	movs	r2, #0
 8008100:	601a      	str	r2, [r3, #0]
 8008102:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008104:	1d3b      	adds	r3, r7, #4
 8008106:	2200      	movs	r2, #0
 8008108:	601a      	str	r2, [r3, #0]
 800810a:	605a      	str	r2, [r3, #4]
 800810c:	609a      	str	r2, [r3, #8]
 800810e:	60da      	str	r2, [r3, #12]
 8008110:	611a      	str	r2, [r3, #16]
 8008112:	615a      	str	r2, [r3, #20]
 8008114:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8008116:	4b32      	ldr	r3, [pc, #200]	@ (80081e0 <MX_TIM4_Init+0xec>)
 8008118:	4a32      	ldr	r2, [pc, #200]	@ (80081e4 <MX_TIM4_Init+0xf0>)
 800811a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800811c:	4b30      	ldr	r3, [pc, #192]	@ (80081e0 <MX_TIM4_Init+0xec>)
 800811e:	2200      	movs	r2, #0
 8008120:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008122:	4b2f      	ldr	r3, [pc, #188]	@ (80081e0 <MX_TIM4_Init+0xec>)
 8008124:	2200      	movs	r2, #0
 8008126:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8008128:	4b2d      	ldr	r3, [pc, #180]	@ (80081e0 <MX_TIM4_Init+0xec>)
 800812a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800812e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008130:	4b2b      	ldr	r3, [pc, #172]	@ (80081e0 <MX_TIM4_Init+0xec>)
 8008132:	2200      	movs	r2, #0
 8008134:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008136:	4b2a      	ldr	r3, [pc, #168]	@ (80081e0 <MX_TIM4_Init+0xec>)
 8008138:	2200      	movs	r2, #0
 800813a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 800813c:	4828      	ldr	r0, [pc, #160]	@ (80081e0 <MX_TIM4_Init+0xec>)
 800813e:	f002 fb15 	bl	800a76c <HAL_TIM_OC_Init>
 8008142:	4603      	mov	r3, r0
 8008144:	2b00      	cmp	r3, #0
 8008146:	d001      	beq.n	800814c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8008148:	f000 fa70 	bl	800862c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800814c:	2300      	movs	r3, #0
 800814e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008150:	2300      	movs	r3, #0
 8008152:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8008154:	f107 0320 	add.w	r3, r7, #32
 8008158:	4619      	mov	r1, r3
 800815a:	4821      	ldr	r0, [pc, #132]	@ (80081e0 <MX_TIM4_Init+0xec>)
 800815c:	f002 fe0e 	bl	800ad7c <HAL_TIMEx_MasterConfigSynchronization>
 8008160:	4603      	mov	r3, r0
 8008162:	2b00      	cmp	r3, #0
 8008164:	d001      	beq.n	800816a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8008166:	f000 fa61 	bl	800862c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800816a:	2300      	movs	r3, #0
 800816c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800816e:	2300      	movs	r3, #0
 8008170:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008172:	2300      	movs	r3, #0
 8008174:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008176:	2300      	movs	r3, #0
 8008178:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800817a:	1d3b      	adds	r3, r7, #4
 800817c:	2200      	movs	r2, #0
 800817e:	4619      	mov	r1, r3
 8008180:	4817      	ldr	r0, [pc, #92]	@ (80081e0 <MX_TIM4_Init+0xec>)
 8008182:	f002 fb43 	bl	800a80c <HAL_TIM_OC_ConfigChannel>
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d001      	beq.n	8008190 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800818c:	f000 fa4e 	bl	800862c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008190:	1d3b      	adds	r3, r7, #4
 8008192:	2204      	movs	r2, #4
 8008194:	4619      	mov	r1, r3
 8008196:	4812      	ldr	r0, [pc, #72]	@ (80081e0 <MX_TIM4_Init+0xec>)
 8008198:	f002 fb38 	bl	800a80c <HAL_TIM_OC_ConfigChannel>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d001      	beq.n	80081a6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80081a2:	f000 fa43 	bl	800862c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80081a6:	1d3b      	adds	r3, r7, #4
 80081a8:	2208      	movs	r2, #8
 80081aa:	4619      	mov	r1, r3
 80081ac:	480c      	ldr	r0, [pc, #48]	@ (80081e0 <MX_TIM4_Init+0xec>)
 80081ae:	f002 fb2d 	bl	800a80c <HAL_TIM_OC_ConfigChannel>
 80081b2:	4603      	mov	r3, r0
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d001      	beq.n	80081bc <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 80081b8:	f000 fa38 	bl	800862c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80081bc:	1d3b      	adds	r3, r7, #4
 80081be:	220c      	movs	r2, #12
 80081c0:	4619      	mov	r1, r3
 80081c2:	4807      	ldr	r0, [pc, #28]	@ (80081e0 <MX_TIM4_Init+0xec>)
 80081c4:	f002 fb22 	bl	800a80c <HAL_TIM_OC_ConfigChannel>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d001      	beq.n	80081d2 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 80081ce:	f000 fa2d 	bl	800862c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80081d2:	4803      	ldr	r0, [pc, #12]	@ (80081e0 <MX_TIM4_Init+0xec>)
 80081d4:	f000 fa7a 	bl	80086cc <HAL_TIM_MspPostInit>

}
 80081d8:	bf00      	nop
 80081da:	3728      	adds	r7, #40	@ 0x28
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	20005ae8 	.word	0x20005ae8
 80081e4:	40000800 	.word	0x40000800

080081e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b08e      	sub	sp, #56	@ 0x38
 80081ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80081ee:	f107 031c 	add.w	r3, r7, #28
 80081f2:	2200      	movs	r2, #0
 80081f4:	601a      	str	r2, [r3, #0]
 80081f6:	605a      	str	r2, [r3, #4]
 80081f8:	609a      	str	r2, [r3, #8]
 80081fa:	60da      	str	r2, [r3, #12]
 80081fc:	611a      	str	r2, [r3, #16]
 80081fe:	615a      	str	r2, [r3, #20]
 8008200:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008202:	1d3b      	adds	r3, r7, #4
 8008204:	2200      	movs	r2, #0
 8008206:	601a      	str	r2, [r3, #0]
 8008208:	605a      	str	r2, [r3, #4]
 800820a:	609a      	str	r2, [r3, #8]
 800820c:	60da      	str	r2, [r3, #12]
 800820e:	611a      	str	r2, [r3, #16]
 8008210:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8008212:	2010      	movs	r0, #16
 8008214:	f7ff f97c 	bl	8007510 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8008218:	2001      	movs	r0, #1
 800821a:	f7ff f949 	bl	80074b0 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = EXP_RS485_TX_Pin|EXP_RS485_RX_Pin;
 800821e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8008222:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8008224:	2302      	movs	r3, #2
 8008226:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8008228:	2303      	movs	r3, #3
 800822a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800822c:	2300      	movs	r3, #0
 800822e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008230:	2300      	movs	r3, #0
 8008232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8008234:	2307      	movs	r3, #7
 8008236:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008238:	1d3b      	adds	r3, r7, #4
 800823a:	4619      	mov	r1, r3
 800823c:	4818      	ldr	r0, [pc, #96]	@ (80082a0 <MX_USART1_UART_Init+0xb8>)
 800823e:	f003 f840 	bl	800b2c2 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8008242:	f7fe fd8b 	bl	8006d5c <__NVIC_GetPriorityGrouping>
 8008246:	4603      	mov	r3, r0
 8008248:	2200      	movs	r2, #0
 800824a:	2100      	movs	r1, #0
 800824c:	4618      	mov	r0, r3
 800824e:	f7fe fddb 	bl	8006e08 <NVIC_EncodePriority>
 8008252:	4603      	mov	r3, r0
 8008254:	4619      	mov	r1, r3
 8008256:	2025      	movs	r0, #37	@ 0x25
 8008258:	f7fe fdac 	bl	8006db4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 800825c:	2025      	movs	r0, #37	@ 0x25
 800825e:	f7fe fd8b 	bl	8006d78 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8008262:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8008266:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8008268:	2300      	movs	r3, #0
 800826a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800826c:	2300      	movs	r3, #0
 800826e:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8008270:	2300      	movs	r3, #0
 8008272:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8008274:	230c      	movs	r3, #12
 8008276:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8008278:	2300      	movs	r3, #0
 800827a:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800827c:	2300      	movs	r3, #0
 800827e:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8008280:	f107 031c 	add.w	r3, r7, #28
 8008284:	4619      	mov	r1, r3
 8008286:	4807      	ldr	r0, [pc, #28]	@ (80082a4 <MX_USART1_UART_Init+0xbc>)
 8008288:	f004 f970 	bl	800c56c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 800828c:	4805      	ldr	r0, [pc, #20]	@ (80082a4 <MX_USART1_UART_Init+0xbc>)
 800828e:	f7ff faa7 	bl	80077e0 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8008292:	4804      	ldr	r0, [pc, #16]	@ (80082a4 <MX_USART1_UART_Init+0xbc>)
 8008294:	f7ff fa94 	bl	80077c0 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008298:	bf00      	nop
 800829a:	3738      	adds	r7, #56	@ 0x38
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}
 80082a0:	40020000 	.word	0x40020000
 80082a4:	40011000 	.word	0x40011000

080082a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b08e      	sub	sp, #56	@ 0x38
 80082ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80082ae:	f107 031c 	add.w	r3, r7, #28
 80082b2:	2200      	movs	r2, #0
 80082b4:	601a      	str	r2, [r3, #0]
 80082b6:	605a      	str	r2, [r3, #4]
 80082b8:	609a      	str	r2, [r3, #8]
 80082ba:	60da      	str	r2, [r3, #12]
 80082bc:	611a      	str	r2, [r3, #16]
 80082be:	615a      	str	r2, [r3, #20]
 80082c0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082c2:	1d3b      	adds	r3, r7, #4
 80082c4:	2200      	movs	r2, #0
 80082c6:	601a      	str	r2, [r3, #0]
 80082c8:	605a      	str	r2, [r3, #4]
 80082ca:	609a      	str	r2, [r3, #8]
 80082cc:	60da      	str	r2, [r3, #12]
 80082ce:	611a      	str	r2, [r3, #16]
 80082d0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80082d2:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80082d6:	f7ff f903 	bl	80074e0 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80082da:	2001      	movs	r0, #1
 80082dc:	f7ff f8e8 	bl	80074b0 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = H250_UART_TX_Pin|H250_UART_RX_Pin;
 80082e0:	230c      	movs	r3, #12
 80082e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80082e4:	2302      	movs	r3, #2
 80082e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80082e8:	2303      	movs	r3, #3
 80082ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80082ec:	2300      	movs	r3, #0
 80082ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80082f0:	2300      	movs	r3, #0
 80082f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80082f4:	2307      	movs	r3, #7
 80082f6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082f8:	1d3b      	adds	r3, r7, #4
 80082fa:	4619      	mov	r1, r3
 80082fc:	4818      	ldr	r0, [pc, #96]	@ (8008360 <MX_USART2_UART_Init+0xb8>)
 80082fe:	f002 ffe0 	bl	800b2c2 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8008302:	f7fe fd2b 	bl	8006d5c <__NVIC_GetPriorityGrouping>
 8008306:	4603      	mov	r3, r0
 8008308:	2200      	movs	r2, #0
 800830a:	2100      	movs	r1, #0
 800830c:	4618      	mov	r0, r3
 800830e:	f7fe fd7b 	bl	8006e08 <NVIC_EncodePriority>
 8008312:	4603      	mov	r3, r0
 8008314:	4619      	mov	r1, r3
 8008316:	2026      	movs	r0, #38	@ 0x26
 8008318:	f7fe fd4c 	bl	8006db4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 800831c:	2026      	movs	r0, #38	@ 0x26
 800831e:	f7fe fd2b 	bl	8006d78 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8008322:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8008326:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8008328:	2300      	movs	r3, #0
 800832a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800832c:	2300      	movs	r3, #0
 800832e:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8008330:	2300      	movs	r3, #0
 8008332:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8008334:	230c      	movs	r3, #12
 8008336:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8008338:	2300      	movs	r3, #0
 800833a:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800833c:	2300      	movs	r3, #0
 800833e:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8008340:	f107 031c 	add.w	r3, r7, #28
 8008344:	4619      	mov	r1, r3
 8008346:	4807      	ldr	r0, [pc, #28]	@ (8008364 <MX_USART2_UART_Init+0xbc>)
 8008348:	f004 f910 	bl	800c56c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 800834c:	4805      	ldr	r0, [pc, #20]	@ (8008364 <MX_USART2_UART_Init+0xbc>)
 800834e:	f7ff fa47 	bl	80077e0 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8008352:	4804      	ldr	r0, [pc, #16]	@ (8008364 <MX_USART2_UART_Init+0xbc>)
 8008354:	f7ff fa34 	bl	80077c0 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008358:	bf00      	nop
 800835a:	3738      	adds	r7, #56	@ 0x38
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}
 8008360:	40020000 	.word	0x40020000
 8008364:	40004400 	.word	0x40004400

08008368 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b08e      	sub	sp, #56	@ 0x38
 800836c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800836e:	f107 031c 	add.w	r3, r7, #28
 8008372:	2200      	movs	r2, #0
 8008374:	601a      	str	r2, [r3, #0]
 8008376:	605a      	str	r2, [r3, #4]
 8008378:	609a      	str	r2, [r3, #8]
 800837a:	60da      	str	r2, [r3, #12]
 800837c:	611a      	str	r2, [r3, #16]
 800837e:	615a      	str	r2, [r3, #20]
 8008380:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008382:	1d3b      	adds	r3, r7, #4
 8008384:	2200      	movs	r2, #0
 8008386:	601a      	str	r2, [r3, #0]
 8008388:	605a      	str	r2, [r3, #4]
 800838a:	609a      	str	r2, [r3, #8]
 800838c:	60da      	str	r2, [r3, #12]
 800838e:	611a      	str	r2, [r3, #16]
 8008390:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8008392:	2020      	movs	r0, #32
 8008394:	f7ff f8bc 	bl	8007510 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8008398:	2004      	movs	r0, #4
 800839a:	f7ff f889 	bl	80074b0 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = EXP_UART_TX_Pin|EXP_UART_RX_Pin;
 800839e:	23c0      	movs	r3, #192	@ 0xc0
 80083a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80083a2:	2302      	movs	r3, #2
 80083a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80083a6:	2303      	movs	r3, #3
 80083a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80083aa:	2300      	movs	r3, #0
 80083ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80083ae:	2300      	movs	r3, #0
 80083b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80083b2:	2308      	movs	r3, #8
 80083b4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80083b6:	1d3b      	adds	r3, r7, #4
 80083b8:	4619      	mov	r1, r3
 80083ba:	4819      	ldr	r0, [pc, #100]	@ (8008420 <MX_USART6_UART_Init+0xb8>)
 80083bc:	f002 ff81 	bl	800b2c2 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80083c0:	f7fe fccc 	bl	8006d5c <__NVIC_GetPriorityGrouping>
 80083c4:	4603      	mov	r3, r0
 80083c6:	2200      	movs	r2, #0
 80083c8:	2100      	movs	r1, #0
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7fe fd1c 	bl	8006e08 <NVIC_EncodePriority>
 80083d0:	4603      	mov	r3, r0
 80083d2:	4619      	mov	r1, r3
 80083d4:	2047      	movs	r0, #71	@ 0x47
 80083d6:	f7fe fced 	bl	8006db4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 80083da:	2047      	movs	r0, #71	@ 0x47
 80083dc:	f7fe fccc 	bl	8006d78 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80083e0:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80083e4:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80083e6:	2300      	movs	r3, #0
 80083e8:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80083ea:	2300      	movs	r3, #0
 80083ec:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80083ee:	2300      	movs	r3, #0
 80083f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80083f2:	230c      	movs	r3, #12
 80083f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80083f6:	2300      	movs	r3, #0
 80083f8:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80083fa:	2300      	movs	r3, #0
 80083fc:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 80083fe:	f107 031c 	add.w	r3, r7, #28
 8008402:	4619      	mov	r1, r3
 8008404:	4807      	ldr	r0, [pc, #28]	@ (8008424 <MX_USART6_UART_Init+0xbc>)
 8008406:	f004 f8b1 	bl	800c56c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 800840a:	4806      	ldr	r0, [pc, #24]	@ (8008424 <MX_USART6_UART_Init+0xbc>)
 800840c:	f7ff f9e8 	bl	80077e0 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8008410:	4804      	ldr	r0, [pc, #16]	@ (8008424 <MX_USART6_UART_Init+0xbc>)
 8008412:	f7ff f9d5 	bl	80077c0 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8008416:	bf00      	nop
 8008418:	3738      	adds	r7, #56	@ 0x38
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	40020800 	.word	0x40020800
 8008424:	40011400 	.word	0x40011400

08008428 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 800842c:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8008430:	f7ff f83e 	bl	80074b0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8008434:	f7fe fc92 	bl	8006d5c <__NVIC_GetPriorityGrouping>
 8008438:	4603      	mov	r3, r0
 800843a:	2200      	movs	r2, #0
 800843c:	2100      	movs	r1, #0
 800843e:	4618      	mov	r0, r3
 8008440:	f7fe fce2 	bl	8006e08 <NVIC_EncodePriority>
 8008444:	4603      	mov	r3, r0
 8008446:	4619      	mov	r1, r3
 8008448:	2038      	movs	r0, #56	@ 0x38
 800844a:	f7fe fcb3 	bl	8006db4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800844e:	2038      	movs	r0, #56	@ 0x38
 8008450:	f7fe fc92 	bl	8006d78 <__NVIC_EnableIRQ>

}
 8008454:	bf00      	nop
 8008456:	bd80      	pop	{r7, pc}

08008458 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b086      	sub	sp, #24
 800845c:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800845e:	463b      	mov	r3, r7
 8008460:	2200      	movs	r2, #0
 8008462:	601a      	str	r2, [r3, #0]
 8008464:	605a      	str	r2, [r3, #4]
 8008466:	609a      	str	r2, [r3, #8]
 8008468:	60da      	str	r2, [r3, #12]
 800846a:	611a      	str	r2, [r3, #16]
 800846c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 800846e:	2010      	movs	r0, #16
 8008470:	f7ff f81e 	bl	80074b0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8008474:	2004      	movs	r0, #4
 8008476:	f7ff f81b 	bl	80074b0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800847a:	2080      	movs	r0, #128	@ 0x80
 800847c:	f7ff f818 	bl	80074b0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8008480:	2001      	movs	r0, #1
 8008482:	f7ff f815 	bl	80074b0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8008486:	2002      	movs	r0, #2
 8008488:	f7ff f812 	bl	80074b0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800848c:	2008      	movs	r0, #8
 800848e:	f7ff f80f 	bl	80074b0 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, TEC_3_SWEN_Pin|TEC_4_SWEN_Pin|TEC_2_SWEN_Pin|TEC_1_SWEN_Pin
 8008492:	f640 417c 	movw	r1, #3196	@ 0xc7c
 8008496:	4860      	ldr	r0, [pc, #384]	@ (8008618 <MX_GPIO_Init+0x1c0>)
 8008498:	f7ff f9c6 	bl	8007828 <LL_GPIO_ResetOutputPin>
                          |TEC_1_EN_Pin|LED_G_Pin|LED_B_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, TEC_2_EN_Pin|TEC_3_EN_Pin|TEC_4_EN_Pin);
 800849c:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80084a0:	485e      	ldr	r0, [pc, #376]	@ (800861c <MX_GPIO_Init+0x1c4>)
 80084a2:	f7ff f9c1 	bl	8007828 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 80084a6:	2102      	movs	r1, #2
 80084a8:	485d      	ldr	r0, [pc, #372]	@ (8008620 <MX_GPIO_Init+0x1c8>)
 80084aa:	f7ff f9bd 	bl	8007828 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, EXP_RS485_NRE_Pin|FRAM_CS_Pin|EF_5_EN_Pin|TEC_ADC_CS_Pin);
 80084ae:	f44f 719a 	mov.w	r1, #308	@ 0x134
 80084b2:	485c      	ldr	r0, [pc, #368]	@ (8008624 <MX_GPIO_Init+0x1cc>)
 80084b4:	f7ff f9b8 	bl	8007828 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, SENSOR2_EN_Pin|SENSOR1_EN_Pin);
 80084b8:	2130      	movs	r1, #48	@ 0x30
 80084ba:	485b      	ldr	r0, [pc, #364]	@ (8008628 <MX_GPIO_Init+0x1d0>)
 80084bc:	f7ff f9b4 	bl	8007828 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOE, LASER_DAC_CS_Pin|LASER_SW_EXT_CS_Pin|LASER_SW_INT_CS_Pin|LASER_DAC_LATCH_Pin
 80084c0:	f24f 0103 	movw	r1, #61443	@ 0xf003
 80084c4:	4854      	ldr	r0, [pc, #336]	@ (8008618 <MX_GPIO_Init+0x1c0>)
 80084c6:	f7ff f9a1 	bl	800780c <LL_GPIO_SetOutputPin>
                          |TEC_2_CS_Pin|TEC_1_CS_Pin);

  /**/
  LL_GPIO_SetOutputPin(GPIOB, EXP_RS485_DE_Pin|TEC_4_CS_Pin|TEC_3_CS_Pin);
 80084ca:	f44f 5198 	mov.w	r1, #4864	@ 0x1300
 80084ce:	4856      	ldr	r0, [pc, #344]	@ (8008628 <MX_GPIO_Init+0x1d0>)
 80084d0:	f7ff f99c 	bl	800780c <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOD, PHOTO_PD_CS_Pin|PHOTO_ADC_CS_Pin|PHOTO_ADC_CONV_Pin);
 80084d4:	f44f 6160 	mov.w	r1, #3584	@ 0xe00
 80084d8:	4852      	ldr	r0, [pc, #328]	@ (8008624 <MX_GPIO_Init+0x1cc>)
 80084da:	f7ff f997 	bl	800780c <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = TEC_3_SWEN_Pin|TEC_1_SWEN_Pin;
 80084de:	2324      	movs	r3, #36	@ 0x24
 80084e0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80084e2:	2301      	movs	r3, #1
 80084e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80084e6:	2300      	movs	r3, #0
 80084e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80084ea:	2300      	movs	r3, #0
 80084ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80084ee:	2302      	movs	r3, #2
 80084f0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80084f2:	463b      	mov	r3, r7
 80084f4:	4619      	mov	r1, r3
 80084f6:	4848      	ldr	r0, [pc, #288]	@ (8008618 <MX_GPIO_Init+0x1c0>)
 80084f8:	f002 fee3 	bl	800b2c2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEC_4_SWEN_Pin|TEC_2_SWEN_Pin|TEC_1_EN_Pin|LED_G_Pin
 80084fc:	f64f 435b 	movw	r3, #64603	@ 0xfc5b
 8008500:	603b      	str	r3, [r7, #0]
                          |LED_B_Pin|LASER_DAC_CS_Pin|LASER_SW_EXT_CS_Pin|LASER_SW_INT_CS_Pin
                          |LASER_DAC_LATCH_Pin|TEC_2_CS_Pin|TEC_1_CS_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8008502:	2301      	movs	r3, #1
 8008504:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8008506:	2300      	movs	r3, #0
 8008508:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800850a:	2300      	movs	r3, #0
 800850c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800850e:	2300      	movs	r3, #0
 8008510:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008512:	463b      	mov	r3, r7
 8008514:	4619      	mov	r1, r3
 8008516:	4840      	ldr	r0, [pc, #256]	@ (8008618 <MX_GPIO_Init+0x1c0>)
 8008518:	f002 fed3 	bl	800b2c2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEC_2_EN_Pin|TEC_3_EN_Pin|TEC_4_EN_Pin;
 800851c:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8008520:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8008522:	2301      	movs	r3, #1
 8008524:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8008526:	2300      	movs	r3, #0
 8008528:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800852a:	2300      	movs	r3, #0
 800852c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800852e:	2300      	movs	r3, #0
 8008530:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008532:	463b      	mov	r3, r7
 8008534:	4619      	mov	r1, r3
 8008536:	4839      	ldr	r0, [pc, #228]	@ (800861c <MX_GPIO_Init+0x1c4>)
 8008538:	f002 fec3 	bl	800b2c2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = WD_DONE_Pin;
 800853c:	2302      	movs	r3, #2
 800853e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8008540:	2301      	movs	r3, #1
 8008542:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8008544:	2300      	movs	r3, #0
 8008546:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008548:	2300      	movs	r3, #0
 800854a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800854c:	2300      	movs	r3, #0
 800854e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(WD_DONE_GPIO_Port, &GPIO_InitStruct);
 8008550:	463b      	mov	r3, r7
 8008552:	4619      	mov	r1, r3
 8008554:	4832      	ldr	r0, [pc, #200]	@ (8008620 <MX_GPIO_Init+0x1c8>)
 8008556:	f002 feb4 	bl	800b2c2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EF_12_AUX_Pin;
 800855a:	2380      	movs	r3, #128	@ 0x80
 800855c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800855e:	2300      	movs	r3, #0
 8008560:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008562:	2300      	movs	r3, #0
 8008564:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(EF_12_AUX_GPIO_Port, &GPIO_InitStruct);
 8008566:	463b      	mov	r3, r7
 8008568:	4619      	mov	r1, r3
 800856a:	482b      	ldr	r0, [pc, #172]	@ (8008618 <MX_GPIO_Init+0x1c0>)
 800856c:	f002 fea9 	bl	800b2c2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EXP_RS485_DE_Pin|SENSOR2_EN_Pin|SENSOR1_EN_Pin|TEC_4_CS_Pin
 8008570:	f241 3330 	movw	r3, #4912	@ 0x1330
 8008574:	603b      	str	r3, [r7, #0]
                          |TEC_3_CS_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8008576:	2301      	movs	r3, #1
 8008578:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800857a:	2300      	movs	r3, #0
 800857c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800857e:	2300      	movs	r3, #0
 8008580:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008582:	2300      	movs	r3, #0
 8008584:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008586:	463b      	mov	r3, r7
 8008588:	4619      	mov	r1, r3
 800858a:	4827      	ldr	r0, [pc, #156]	@ (8008628 <MX_GPIO_Init+0x1d0>)
 800858c:	f002 fe99 	bl	800b2c2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EXP_RS485_NRE_Pin|PHOTO_PD_CS_Pin|PHOTO_ADC_CS_Pin|PHOTO_ADC_CONV_Pin
 8008590:	f640 7334 	movw	r3, #3892	@ 0xf34
 8008594:	603b      	str	r3, [r7, #0]
                          |FRAM_CS_Pin|EF_5_EN_Pin|TEC_ADC_CS_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8008596:	2301      	movs	r3, #1
 8008598:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800859a:	2300      	movs	r3, #0
 800859c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800859e:	2300      	movs	r3, #0
 80085a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80085a2:	2300      	movs	r3, #0
 80085a4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80085a6:	463b      	mov	r3, r7
 80085a8:	4619      	mov	r1, r3
 80085aa:	481e      	ldr	r0, [pc, #120]	@ (8008624 <MX_GPIO_Init+0x1cc>)
 80085ac:	f002 fe89 	bl	800b2c2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = PHOTO_ADC_EOC_Pin;
 80085b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80085b4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80085b6:	2300      	movs	r3, #0
 80085b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80085ba:	2301      	movs	r3, #1
 80085bc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(PHOTO_ADC_EOC_GPIO_Port, &GPIO_InitStruct);
 80085be:	463b      	mov	r3, r7
 80085c0:	4619      	mov	r1, r3
 80085c2:	4816      	ldr	r0, [pc, #88]	@ (800861c <MX_GPIO_Init+0x1c4>)
 80085c4:	f002 fe7d 	bl	800b2c2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = IRQ1_Pin;
 80085c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80085cc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80085ce:	2300      	movs	r3, #0
 80085d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80085d2:	2300      	movs	r3, #0
 80085d4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(IRQ1_GPIO_Port, &GPIO_InitStruct);
 80085d6:	463b      	mov	r3, r7
 80085d8:	4619      	mov	r1, r3
 80085da:	4810      	ldr	r0, [pc, #64]	@ (800861c <MX_GPIO_Init+0x1c4>)
 80085dc:	f002 fe71 	bl	800b2c2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = IRQ0_Pin;
 80085e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80085e4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80085e6:	2300      	movs	r3, #0
 80085e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80085ea:	2300      	movs	r3, #0
 80085ec:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(IRQ0_GPIO_Port, &GPIO_InitStruct);
 80085ee:	463b      	mov	r3, r7
 80085f0:	4619      	mov	r1, r3
 80085f2:	480b      	ldr	r0, [pc, #44]	@ (8008620 <MX_GPIO_Init+0x1c8>)
 80085f4:	f002 fe65 	bl	800b2c2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = FF_5_AUX_Pin;
 80085f8:	2308      	movs	r3, #8
 80085fa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80085fc:	2300      	movs	r3, #0
 80085fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008600:	2300      	movs	r3, #0
 8008602:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(FF_5_AUX_GPIO_Port, &GPIO_InitStruct);
 8008604:	463b      	mov	r3, r7
 8008606:	4619      	mov	r1, r3
 8008608:	4806      	ldr	r0, [pc, #24]	@ (8008624 <MX_GPIO_Init+0x1cc>)
 800860a:	f002 fe5a 	bl	800b2c2 <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800860e:	bf00      	nop
 8008610:	3718      	adds	r7, #24
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	40021000 	.word	0x40021000
 800861c:	40020800 	.word	0x40020800
 8008620:	40020000 	.word	0x40020000
 8008624:	40020c00 	.word	0x40020c00
 8008628:	40020400 	.word	0x40020400

0800862c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800862c:	b480      	push	{r7}
 800862e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008630:	b672      	cpsid	i
}
 8008632:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008634:	bf00      	nop
 8008636:	e7fd      	b.n	8008634 <Error_Handler+0x8>

08008638 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800863e:	2300      	movs	r3, #0
 8008640:	607b      	str	r3, [r7, #4]
 8008642:	4b10      	ldr	r3, [pc, #64]	@ (8008684 <HAL_MspInit+0x4c>)
 8008644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008646:	4a0f      	ldr	r2, [pc, #60]	@ (8008684 <HAL_MspInit+0x4c>)
 8008648:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800864c:	6453      	str	r3, [r2, #68]	@ 0x44
 800864e:	4b0d      	ldr	r3, [pc, #52]	@ (8008684 <HAL_MspInit+0x4c>)
 8008650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008652:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008656:	607b      	str	r3, [r7, #4]
 8008658:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800865a:	2300      	movs	r3, #0
 800865c:	603b      	str	r3, [r7, #0]
 800865e:	4b09      	ldr	r3, [pc, #36]	@ (8008684 <HAL_MspInit+0x4c>)
 8008660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008662:	4a08      	ldr	r2, [pc, #32]	@ (8008684 <HAL_MspInit+0x4c>)
 8008664:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008668:	6413      	str	r3, [r2, #64]	@ 0x40
 800866a:	4b06      	ldr	r3, [pc, #24]	@ (8008684 <HAL_MspInit+0x4c>)
 800866c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800866e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008672:	603b      	str	r3, [r7, #0]
 8008674:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008676:	bf00      	nop
 8008678:	370c      	adds	r7, #12
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr
 8008682:	bf00      	nop
 8008684:	40023800 	.word	0x40023800

08008688 <HAL_TIM_OC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_oc: TIM_OC handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8008688:	b480      	push	{r7}
 800868a:	b085      	sub	sp, #20
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM4)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a0b      	ldr	r2, [pc, #44]	@ (80086c4 <HAL_TIM_OC_MspInit+0x3c>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d10d      	bne.n	80086b6 <HAL_TIM_OC_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800869a:	2300      	movs	r3, #0
 800869c:	60fb      	str	r3, [r7, #12]
 800869e:	4b0a      	ldr	r3, [pc, #40]	@ (80086c8 <HAL_TIM_OC_MspInit+0x40>)
 80086a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086a2:	4a09      	ldr	r2, [pc, #36]	@ (80086c8 <HAL_TIM_OC_MspInit+0x40>)
 80086a4:	f043 0304 	orr.w	r3, r3, #4
 80086a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80086aa:	4b07      	ldr	r3, [pc, #28]	@ (80086c8 <HAL_TIM_OC_MspInit+0x40>)
 80086ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086ae:	f003 0304 	and.w	r3, r3, #4
 80086b2:	60fb      	str	r3, [r7, #12]
 80086b4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 80086b6:	bf00      	nop
 80086b8:	3714      	adds	r7, #20
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr
 80086c2:	bf00      	nop
 80086c4:	40000800 	.word	0x40000800
 80086c8:	40023800 	.word	0x40023800

080086cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b088      	sub	sp, #32
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086d4:	f107 030c 	add.w	r3, r7, #12
 80086d8:	2200      	movs	r2, #0
 80086da:	601a      	str	r2, [r3, #0]
 80086dc:	605a      	str	r2, [r3, #4]
 80086de:	609a      	str	r2, [r3, #8]
 80086e0:	60da      	str	r2, [r3, #12]
 80086e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a12      	ldr	r2, [pc, #72]	@ (8008734 <HAL_TIM_MspPostInit+0x68>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d11e      	bne.n	800872c <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80086ee:	2300      	movs	r3, #0
 80086f0:	60bb      	str	r3, [r7, #8]
 80086f2:	4b11      	ldr	r3, [pc, #68]	@ (8008738 <HAL_TIM_MspPostInit+0x6c>)
 80086f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086f6:	4a10      	ldr	r2, [pc, #64]	@ (8008738 <HAL_TIM_MspPostInit+0x6c>)
 80086f8:	f043 0308 	orr.w	r3, r3, #8
 80086fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80086fe:	4b0e      	ldr	r3, [pc, #56]	@ (8008738 <HAL_TIM_MspPostInit+0x6c>)
 8008700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008702:	f003 0308 	and.w	r3, r3, #8
 8008706:	60bb      	str	r3, [r7, #8]
 8008708:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800870a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800870e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008710:	2302      	movs	r3, #2
 8008712:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008714:	2300      	movs	r3, #0
 8008716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008718:	2300      	movs	r3, #0
 800871a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800871c:	2302      	movs	r3, #2
 800871e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008720:	f107 030c 	add.w	r3, r7, #12
 8008724:	4619      	mov	r1, r3
 8008726:	4805      	ldr	r0, [pc, #20]	@ (800873c <HAL_TIM_MspPostInit+0x70>)
 8008728:	f001 fe84 	bl	800a434 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800872c:	bf00      	nop
 800872e:	3720      	adds	r7, #32
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}
 8008734:	40000800 	.word	0x40000800
 8008738:	40023800 	.word	0x40023800
 800873c:	40020c00 	.word	0x40020c00

08008740 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008740:	b480      	push	{r7}
 8008742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008744:	bf00      	nop
 8008746:	e7fd      	b.n	8008744 <NMI_Handler+0x4>

08008748 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008748:	b480      	push	{r7}
 800874a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800874c:	bf00      	nop
 800874e:	e7fd      	b.n	800874c <HardFault_Handler+0x4>

08008750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008750:	b480      	push	{r7}
 8008752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008754:	bf00      	nop
 8008756:	e7fd      	b.n	8008754 <MemManage_Handler+0x4>

08008758 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008758:	b480      	push	{r7}
 800875a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800875c:	bf00      	nop
 800875e:	e7fd      	b.n	800875c <BusFault_Handler+0x4>

08008760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008760:	b480      	push	{r7}
 8008762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008764:	bf00      	nop
 8008766:	e7fd      	b.n	8008764 <UsageFault_Handler+0x4>

08008768 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008768:	b480      	push	{r7}
 800876a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800876c:	bf00      	nop
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr

08008776 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008776:	b480      	push	{r7}
 8008778:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800877a:	bf00      	nop
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008784:	b480      	push	{r7}
 8008786:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008788:	bf00      	nop
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr
	...

08008794 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	g_systick_count++;
 8008798:	4b11      	ldr	r3, [pc, #68]	@ (80087e0 <SysTick_Handler+0x4c>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	3301      	adds	r3, #1
 800879e:	4a10      	ldr	r2, [pc, #64]	@ (80087e0 <SysTick_Handler+0x4c>)
 80087a0:	6013      	str	r3, [r2, #0]
	SCH_RunSystemTickTimer();
 80087a2:	f004 f82f 	bl	800c804 <SCH_RunSystemTickTimer>
	if (ads8327_timeout > 0) ads8327_timeout--;
 80087a6:	4b0f      	ldr	r3, [pc, #60]	@ (80087e4 <SysTick_Handler+0x50>)
 80087a8:	781b      	ldrb	r3, [r3, #0]
 80087aa:	b2db      	uxtb	r3, r3
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d006      	beq.n	80087be <SysTick_Handler+0x2a>
 80087b0:	4b0c      	ldr	r3, [pc, #48]	@ (80087e4 <SysTick_Handler+0x50>)
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	3b01      	subs	r3, #1
 80087b8:	b2da      	uxtb	r2, r3
 80087ba:	4b0a      	ldr	r3, [pc, #40]	@ (80087e4 <SysTick_Handler+0x50>)
 80087bc:	701a      	strb	r2, [r3, #0]
	if (ads8327_timeout > 0) adg1414_timeout--;
 80087be:	4b09      	ldr	r3, [pc, #36]	@ (80087e4 <SysTick_Handler+0x50>)
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d006      	beq.n	80087d6 <SysTick_Handler+0x42>
 80087c8:	4b07      	ldr	r3, [pc, #28]	@ (80087e8 <SysTick_Handler+0x54>)
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	3b01      	subs	r3, #1
 80087d0:	b2da      	uxtb	r2, r3
 80087d2:	4b05      	ldr	r3, [pc, #20]	@ (80087e8 <SysTick_Handler+0x54>)
 80087d4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80087d6:	f001 fd33 	bl	800a240 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80087da:	bf00      	nop
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	bf00      	nop
 80087e0:	20005b30 	.word	0x20005b30
 80087e4:	20005a51 	.word	0x20005a51
 80087e8:	20005a4c 	.word	0x20005a4c

080087ec <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */
	I2C_event_IRQ();
 80087f0:	f7f9 f9b6 	bl	8001b60 <I2C_event_IRQ>
  /* USER CODE END I2C2_EV_IRQn 0 */
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80087f4:	bf00      	nop
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */
	I2C_error_IRQ();
 80087fc:	f7f9 fab8 	bl	8001d70 <I2C_error_IRQ>
  /* USER CODE END I2C2_ER_IRQn 0 */
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8008800:	bf00      	nop
 8008802:	bd80      	pop	{r7, pc}

08008804 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */
	UART_Ring_ISR(USART1);
 8008808:	4802      	ldr	r0, [pc, #8]	@ (8008814 <USART1_IRQHandler+0x10>)
 800880a:	f7f9 fdda 	bl	80023c2 <UART_Ring_ISR>
  /* USER CODE END USART1_IRQn 1 */
}
 800880e:	bf00      	nop
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	40011000 	.word	0x40011000

08008818 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8008818:	b480      	push	{r7}
 800881a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 1 */
#ifdef H250_UART
	USART2_IRQ();
#endif
  /* USER CODE END USART2_IRQn 1 */
}
 800881c:	bf00      	nop
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr

08008826 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8008826:	b480      	push	{r7}
 8008828:	af00      	add	r7, sp, #0

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800882a:	bf00      	nop
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr

08008834 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */
	UART_Ring_ISR(USART6);
 8008838:	4802      	ldr	r0, [pc, #8]	@ (8008844 <USART6_IRQHandler+0x10>)
 800883a:	f7f9 fdc2 	bl	80023c2 <UART_Ring_ISR>
  /* USER CODE END USART6_IRQn 1 */
}
 800883e:	bf00      	nop
 8008840:	bd80      	pop	{r7, pc}
 8008842:	bf00      	nop
 8008844:	40011400 	.word	0x40011400

08008848 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008848:	b480      	push	{r7}
 800884a:	af00      	add	r7, sp, #0
  return 1;
 800884c:	2301      	movs	r3, #1
}
 800884e:	4618      	mov	r0, r3
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr

08008858 <_kill>:

int _kill(int pid, int sig)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8008862:	f004 ff77 	bl	800d754 <__errno>
 8008866:	4603      	mov	r3, r0
 8008868:	2216      	movs	r2, #22
 800886a:	601a      	str	r2, [r3, #0]
  return -1;
 800886c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008870:	4618      	mov	r0, r3
 8008872:	3708      	adds	r7, #8
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <_exit>:

void _exit (int status)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008880:	f04f 31ff 	mov.w	r1, #4294967295
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f7ff ffe7 	bl	8008858 <_kill>
  while (1) {}    /* Make sure we hang here */
 800888a:	bf00      	nop
 800888c:	e7fd      	b.n	800888a <_exit+0x12>

0800888e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800888e:	b580      	push	{r7, lr}
 8008890:	b086      	sub	sp, #24
 8008892:	af00      	add	r7, sp, #0
 8008894:	60f8      	str	r0, [r7, #12]
 8008896:	60b9      	str	r1, [r7, #8]
 8008898:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800889a:	2300      	movs	r3, #0
 800889c:	617b      	str	r3, [r7, #20]
 800889e:	e00a      	b.n	80088b6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80088a0:	f3af 8000 	nop.w
 80088a4:	4601      	mov	r1, r0
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	1c5a      	adds	r2, r3, #1
 80088aa:	60ba      	str	r2, [r7, #8]
 80088ac:	b2ca      	uxtb	r2, r1
 80088ae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	3301      	adds	r3, #1
 80088b4:	617b      	str	r3, [r7, #20]
 80088b6:	697a      	ldr	r2, [r7, #20]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	dbf0      	blt.n	80088a0 <_read+0x12>
  }

  return len;
 80088be:	687b      	ldr	r3, [r7, #4]
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3718      	adds	r7, #24
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b086      	sub	sp, #24
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	60f8      	str	r0, [r7, #12]
 80088d0:	60b9      	str	r1, [r7, #8]
 80088d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80088d4:	2300      	movs	r3, #0
 80088d6:	617b      	str	r3, [r7, #20]
 80088d8:	e009      	b.n	80088ee <_write+0x26>
  {
    __io_putchar(*ptr++);
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	1c5a      	adds	r2, r3, #1
 80088de:	60ba      	str	r2, [r7, #8]
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	4618      	mov	r0, r3
 80088e4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	3301      	adds	r3, #1
 80088ec:	617b      	str	r3, [r7, #20]
 80088ee:	697a      	ldr	r2, [r7, #20]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	429a      	cmp	r2, r3
 80088f4:	dbf1      	blt.n	80088da <_write+0x12>
  }
  return len;
 80088f6:	687b      	ldr	r3, [r7, #4]
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3718      	adds	r7, #24
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <_close>:

int _close(int file)
{
 8008900:	b480      	push	{r7}
 8008902:	b083      	sub	sp, #12
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008908:	f04f 33ff 	mov.w	r3, #4294967295
}
 800890c:	4618      	mov	r0, r3
 800890e:	370c      	adds	r7, #12
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008928:	605a      	str	r2, [r3, #4]
  return 0;
 800892a:	2300      	movs	r3, #0
}
 800892c:	4618      	mov	r0, r3
 800892e:	370c      	adds	r7, #12
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <_isatty>:

int _isatty(int file)
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008940:	2301      	movs	r3, #1
}
 8008942:	4618      	mov	r0, r3
 8008944:	370c      	adds	r7, #12
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr

0800894e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800894e:	b480      	push	{r7}
 8008950:	b085      	sub	sp, #20
 8008952:	af00      	add	r7, sp, #0
 8008954:	60f8      	str	r0, [r7, #12]
 8008956:	60b9      	str	r1, [r7, #8]
 8008958:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800895a:	2300      	movs	r3, #0
}
 800895c:	4618      	mov	r0, r3
 800895e:	3714      	adds	r7, #20
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b086      	sub	sp, #24
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008970:	4a14      	ldr	r2, [pc, #80]	@ (80089c4 <_sbrk+0x5c>)
 8008972:	4b15      	ldr	r3, [pc, #84]	@ (80089c8 <_sbrk+0x60>)
 8008974:	1ad3      	subs	r3, r2, r3
 8008976:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800897c:	4b13      	ldr	r3, [pc, #76]	@ (80089cc <_sbrk+0x64>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d102      	bne.n	800898a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008984:	4b11      	ldr	r3, [pc, #68]	@ (80089cc <_sbrk+0x64>)
 8008986:	4a12      	ldr	r2, [pc, #72]	@ (80089d0 <_sbrk+0x68>)
 8008988:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800898a:	4b10      	ldr	r3, [pc, #64]	@ (80089cc <_sbrk+0x64>)
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	4413      	add	r3, r2
 8008992:	693a      	ldr	r2, [r7, #16]
 8008994:	429a      	cmp	r2, r3
 8008996:	d207      	bcs.n	80089a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008998:	f004 fedc 	bl	800d754 <__errno>
 800899c:	4603      	mov	r3, r0
 800899e:	220c      	movs	r2, #12
 80089a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80089a2:	f04f 33ff 	mov.w	r3, #4294967295
 80089a6:	e009      	b.n	80089bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80089a8:	4b08      	ldr	r3, [pc, #32]	@ (80089cc <_sbrk+0x64>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80089ae:	4b07      	ldr	r3, [pc, #28]	@ (80089cc <_sbrk+0x64>)
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	4413      	add	r3, r2
 80089b6:	4a05      	ldr	r2, [pc, #20]	@ (80089cc <_sbrk+0x64>)
 80089b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80089ba:	68fb      	ldr	r3, [r7, #12]
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3718      	adds	r7, #24
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}
 80089c4:	20020000 	.word	0x20020000
 80089c8:	00000400 	.word	0x00000400
 80089cc:	20005b34 	.word	0x20005b34
 80089d0:	20005ed0 	.word	0x20005ed0

080089d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80089d4:	b480      	push	{r7}
 80089d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80089d8:	4b06      	ldr	r3, [pc, #24]	@ (80089f4 <SystemInit+0x20>)
 80089da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089de:	4a05      	ldr	r2, [pc, #20]	@ (80089f4 <SystemInit+0x20>)
 80089e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80089e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80089e8:	bf00      	nop
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr
 80089f2:	bf00      	nop
 80089f4:	e000ed00 	.word	0xe000ed00

080089f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80089f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8008a30 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80089fc:	f7ff ffea 	bl	80089d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008a00:	480c      	ldr	r0, [pc, #48]	@ (8008a34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008a02:	490d      	ldr	r1, [pc, #52]	@ (8008a38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008a04:	4a0d      	ldr	r2, [pc, #52]	@ (8008a3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008a08:	e002      	b.n	8008a10 <LoopCopyDataInit>

08008a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008a0e:	3304      	adds	r3, #4

08008a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008a14:	d3f9      	bcc.n	8008a0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008a16:	4a0a      	ldr	r2, [pc, #40]	@ (8008a40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008a18:	4c0a      	ldr	r4, [pc, #40]	@ (8008a44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008a1c:	e001      	b.n	8008a22 <LoopFillZerobss>

08008a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008a20:	3204      	adds	r2, #4

08008a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008a24:	d3fb      	bcc.n	8008a1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008a26:	f004 fe9b 	bl	800d760 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008a2a:	f7fe ff0d 	bl	8007848 <main>
  bx  lr    
 8008a2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008a30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008a34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008a38:	200043f4 	.word	0x200043f4
  ldr r2, =_sidata
 8008a3c:	08010bb8 	.word	0x08010bb8
  ldr r2, =_sbss
 8008a40:	200043f4 	.word	0x200043f4
  ldr r4, =_ebss
 8008a44:	20005ed0 	.word	0x20005ed0

08008a48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008a48:	e7fe      	b.n	8008a48 <ADC_IRQHandler>

08008a4a <LL_TIM_OC_SetCompareCH1>:
{
 8008a4a:	b480      	push	{r7}
 8008a4c:	b083      	sub	sp, #12
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
 8008a52:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	683a      	ldr	r2, [r7, #0]
 8008a58:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8008a5a:	bf00      	nop
 8008a5c:	370c      	adds	r7, #12
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr

08008a66 <LL_TIM_OC_SetCompareCH2>:
{
 8008a66:	b480      	push	{r7}
 8008a68:	b083      	sub	sp, #12
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
 8008a6e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	683a      	ldr	r2, [r7, #0]
 8008a74:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8008a76:	bf00      	nop
 8008a78:	370c      	adds	r7, #12
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr

08008a82 <LL_TIM_OC_SetCompareCH3>:
{
 8008a82:	b480      	push	{r7}
 8008a84:	b083      	sub	sp, #12
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
 8008a8a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	683a      	ldr	r2, [r7, #0]
 8008a90:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8008a92:	bf00      	nop
 8008a94:	370c      	adds	r7, #12
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr

08008a9e <LL_TIM_OC_SetCompareCH4>:
{
 8008a9e:	b480      	push	{r7}
 8008aa0:	b083      	sub	sp, #12
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
 8008aa6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	683a      	ldr	r2, [r7, #0]
 8008aac:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8008aae:	bf00      	nop
 8008ab0:	370c      	adds	r7, #12
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr
	...

08008abc <heater_set_duty_pwm_channel>:

#include "heater.h"
#include "main.h"

void heater_set_duty_pwm_channel(uint8_t channel, uint16_t duty_pwm)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	460a      	mov	r2, r1
 8008ac6:	71fb      	strb	r3, [r7, #7]
 8008ac8:	4613      	mov	r3, r2
 8008aca:	80bb      	strh	r3, [r7, #4]
    if (duty_pwm > 999) duty_pwm = 999;
 8008acc:	88bb      	ldrh	r3, [r7, #4]
 8008ace:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008ad2:	d302      	bcc.n	8008ada <heater_set_duty_pwm_channel+0x1e>
 8008ad4:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8008ad8:	80bb      	strh	r3, [r7, #4]
    switch (channel)
 8008ada:	79fb      	ldrb	r3, [r7, #7]
 8008adc:	2b03      	cmp	r3, #3
 8008ade:	d823      	bhi.n	8008b28 <heater_set_duty_pwm_channel+0x6c>
 8008ae0:	a201      	add	r2, pc, #4	@ (adr r2, 8008ae8 <heater_set_duty_pwm_channel+0x2c>)
 8008ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae6:	bf00      	nop
 8008ae8:	08008af9 	.word	0x08008af9
 8008aec:	08008b05 	.word	0x08008b05
 8008af0:	08008b11 	.word	0x08008b11
 8008af4:	08008b1d 	.word	0x08008b1d
    {
        case 0:
            LL_TIM_OC_SetCompareCH1(TIM1, duty_pwm);
 8008af8:	88bb      	ldrh	r3, [r7, #4]
 8008afa:	4619      	mov	r1, r3
 8008afc:	480d      	ldr	r0, [pc, #52]	@ (8008b34 <heater_set_duty_pwm_channel+0x78>)
 8008afe:	f7ff ffa4 	bl	8008a4a <LL_TIM_OC_SetCompareCH1>
            break;
 8008b02:	e012      	b.n	8008b2a <heater_set_duty_pwm_channel+0x6e>
        case 1:
            LL_TIM_OC_SetCompareCH2(TIM1, duty_pwm);
 8008b04:	88bb      	ldrh	r3, [r7, #4]
 8008b06:	4619      	mov	r1, r3
 8008b08:	480a      	ldr	r0, [pc, #40]	@ (8008b34 <heater_set_duty_pwm_channel+0x78>)
 8008b0a:	f7ff ffac 	bl	8008a66 <LL_TIM_OC_SetCompareCH2>
            break;
 8008b0e:	e00c      	b.n	8008b2a <heater_set_duty_pwm_channel+0x6e>
        case 2:
            LL_TIM_OC_SetCompareCH3(TIM1, duty_pwm);
 8008b10:	88bb      	ldrh	r3, [r7, #4]
 8008b12:	4619      	mov	r1, r3
 8008b14:	4807      	ldr	r0, [pc, #28]	@ (8008b34 <heater_set_duty_pwm_channel+0x78>)
 8008b16:	f7ff ffb4 	bl	8008a82 <LL_TIM_OC_SetCompareCH3>
            break;
 8008b1a:	e006      	b.n	8008b2a <heater_set_duty_pwm_channel+0x6e>
        case 3:
            LL_TIM_OC_SetCompareCH4(TIM1, duty_pwm);
 8008b1c:	88bb      	ldrh	r3, [r7, #4]
 8008b1e:	4619      	mov	r1, r3
 8008b20:	4804      	ldr	r0, [pc, #16]	@ (8008b34 <heater_set_duty_pwm_channel+0x78>)
 8008b22:	f7ff ffbc 	bl	8008a9e <LL_TIM_OC_SetCompareCH4>
            break;
 8008b26:	e000      	b.n	8008b2a <heater_set_duty_pwm_channel+0x6e>
        default:
            break;
 8008b28:	bf00      	nop
    }
}
 8008b2a:	bf00      	nop
 8008b2c:	3708      	adds	r7, #8
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	40010000 	.word	0x40010000

08008b38 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(const SPI_TypeDef *SPIx)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	f003 0301 	and.w	r3, r3, #1
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d101      	bne.n	8008b50 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	e000      	b.n	8008b52 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8008b50:	2300      	movs	r3, #0
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	370c      	adds	r7, #12
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr

08008b5e <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8008b5e:	b480      	push	{r7}
 8008b60:	b083      	sub	sp, #12
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	330c      	adds	r3, #12
 8008b6a:	781b      	ldrb	r3, [r3, #0]
 8008b6c:	b2db      	uxtb	r3, r3
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	370c      	adds	r7, #12
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr

08008b7a <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8008b7a:	b480      	push	{r7}
 8008b7c:	b085      	sub	sp, #20
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
 8008b82:	460b      	mov	r3, r1
 8008b84:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	330c      	adds	r3, #12
 8008b8a:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	78fa      	ldrb	r2, [r7, #3]
 8008b90:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8008b92:	bf00      	nop
 8008b94:	3714      	adds	r7, #20
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr

08008b9e <LL_GPIO_SetOutputPin>:
{
 8008b9e:	b480      	push	{r7}
 8008ba0:	b083      	sub	sp, #12
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
 8008ba6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	683a      	ldr	r2, [r7, #0]
 8008bac:	619a      	str	r2, [r3, #24]
}
 8008bae:	bf00      	nop
 8008bb0:	370c      	adds	r7, #12
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr

08008bba <LL_GPIO_ResetOutputPin>:
{
 8008bba:	b480      	push	{r7}
 8008bbc:	b083      	sub	sp, #12
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
 8008bc2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	041a      	lsls	r2, r3, #16
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	619a      	str	r2, [r3, #24]
}
 8008bcc:	bf00      	nop
 8008bce:	370c      	adds	r7, #12
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr

08008bd8 <csLOW>:
		LT8722_SPIS_AMUX_SIZE
	},
};

/* SPI support function --------------------------------------------------*/
static inline void csLOW(struct lt8722_dev *dev) {
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
	LL_GPIO_ResetOutputPin(dev->cs_port, dev->cs_pin);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	685a      	ldr	r2, [r3, #4]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	891b      	ldrh	r3, [r3, #8]
 8008be8:	4619      	mov	r1, r3
 8008bea:	4610      	mov	r0, r2
 8008bec:	f7ff ffe5 	bl	8008bba <LL_GPIO_ResetOutputPin>
}
 8008bf0:	bf00      	nop
 8008bf2:	3708      	adds	r7, #8
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <csHIGH>:

static inline void csHIGH(struct lt8722_dev *dev) {
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b082      	sub	sp, #8
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
	LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	685a      	ldr	r2, [r3, #4]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	891b      	ldrh	r3, [r3, #8]
 8008c08:	4619      	mov	r1, r3
 8008c0a:	4610      	mov	r0, r2
 8008c0c:	f7ff ffc7 	bl	8008b9e <LL_GPIO_SetOutputPin>
}
 8008c10:	bf00      	nop
 8008c12:	3708      	adds	r7, #8
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <SPI_LL_Transmit>:

static uint8_t SPI_LL_Transmit(struct lt8722_dev *dev, uint8_t data)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	460b      	mov	r3, r1
 8008c22:	70fb      	strb	r3, [r7, #3]
	LL_SPI_TransmitData8(SPI_TEC, data);
 8008c24:	78fb      	ldrb	r3, [r7, #3]
 8008c26:	4619      	mov	r1, r3
 8008c28:	4809      	ldr	r0, [pc, #36]	@ (8008c50 <SPI_LL_Transmit+0x38>)
 8008c2a:	f7ff ffa6 	bl	8008b7a <LL_SPI_TransmitData8>
	while(!LL_SPI_IsActiveFlag_RXNE(dev->hspi));
 8008c2e:	bf00      	nop
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4618      	mov	r0, r3
 8008c36:	f7ff ff7f 	bl	8008b38 <LL_SPI_IsActiveFlag_RXNE>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d0f7      	beq.n	8008c30 <SPI_LL_Transmit+0x18>
	return LL_SPI_ReceiveData8(SPI_TEC);
 8008c40:	4803      	ldr	r0, [pc, #12]	@ (8008c50 <SPI_LL_Transmit+0x38>)
 8008c42:	f7ff ff8c 	bl	8008b5e <LL_SPI_ReceiveData8>
 8008c46:	4603      	mov	r3, r0
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3708      	adds	r7, #8
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}
 8008c50:	40003c00 	.word	0x40003c00

08008c54 <SPI_write_and_read_buffer>:

uint8_t SPI_write_and_read_buffer(struct lt8722_dev *dev, uint8_t *buffer, uint8_t byte_number)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b086      	sub	sp, #24
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	4613      	mov	r3, r2
 8008c60:	71fb      	strb	r3, [r7, #7]
    uint8_t received_data = 0;
 8008c62:	2300      	movs	r3, #0
 8008c64:	75fb      	strb	r3, [r7, #23]
    csLOW(dev);
 8008c66:	68f8      	ldr	r0, [r7, #12]
 8008c68:	f7ff ffb6 	bl	8008bd8 <csLOW>
    for (uint8_t i = 0; i < byte_number; i++)
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	75bb      	strb	r3, [r7, #22]
 8008c70:	e011      	b.n	8008c96 <SPI_write_and_read_buffer+0x42>
    {
        received_data = SPI_LL_Transmit(dev, buffer[i]);
 8008c72:	7dbb      	ldrb	r3, [r7, #22]
 8008c74:	68ba      	ldr	r2, [r7, #8]
 8008c76:	4413      	add	r3, r2
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	68f8      	ldr	r0, [r7, #12]
 8008c7e:	f7ff ffcb 	bl	8008c18 <SPI_LL_Transmit>
 8008c82:	4603      	mov	r3, r0
 8008c84:	75fb      	strb	r3, [r7, #23]
        buffer[i] = received_data;
 8008c86:	7dbb      	ldrb	r3, [r7, #22]
 8008c88:	68ba      	ldr	r2, [r7, #8]
 8008c8a:	4413      	add	r3, r2
 8008c8c:	7dfa      	ldrb	r2, [r7, #23]
 8008c8e:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < byte_number; i++)
 8008c90:	7dbb      	ldrb	r3, [r7, #22]
 8008c92:	3301      	adds	r3, #1
 8008c94:	75bb      	strb	r3, [r7, #22]
 8008c96:	7dba      	ldrb	r2, [r7, #22]
 8008c98:	79fb      	ldrb	r3, [r7, #7]
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	d3e9      	bcc.n	8008c72 <SPI_write_and_read_buffer+0x1e>
    }
    csHIGH(dev);
 8008c9e:	68f8      	ldr	r0, [r7, #12]
 8008ca0:	f7ff ffaa 	bl	8008bf8 <csHIGH>
    return received_data;
 8008ca4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3718      	adds	r7, #24
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
	...

08008cb0 <lt8722_voltage_to_dac>:
 * @brief Convert voltage to DAC code.
 * @param voltage - Voltage value in nanovolts.
 * @return DAC code.
 */
int32_t lt8722_voltage_to_dac(int64_t voltage)
{
 8008cb0:	b5b0      	push	{r4, r5, r7, lr}
 8008cb2:	b082      	sub	sp, #8
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	e9c7 0100 	strd	r0, r1, [r7]
	return (LT8722_DAC_OFFSET - voltage) * (1 << LT8722_DAC_RESOLUTION) / LT8722_DAC_VREF;
 8008cba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008cbe:	4d0e      	ldr	r5, [pc, #56]	@ (8008cf8 <lt8722_voltage_to_dac+0x48>)
 8008cc0:	2400      	movs	r4, #0
 8008cc2:	1a2a      	subs	r2, r5, r0
 8008cc4:	eb64 0301 	sbc.w	r3, r4, r1
 8008cc8:	f04f 0000 	mov.w	r0, #0
 8008ccc:	f04f 0100 	mov.w	r1, #0
 8008cd0:	0659      	lsls	r1, r3, #25
 8008cd2:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 8008cd6:	0650      	lsls	r0, r2, #25
 8008cd8:	a305      	add	r3, pc, #20	@ (adr r3, 8008cf0 <lt8722_voltage_to_dac+0x40>)
 8008cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cde:	f7f8 f881 	bl	8000de4 <__aeabi_ldivmod>
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	4613      	mov	r3, r2
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3708      	adds	r7, #8
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bdb0      	pop	{r4, r5, r7, pc}
 8008cf0:	9502f900 	.word	0x9502f900
 8008cf4:	00000000 	.word	0x00000000
 8008cf8:	4a817c80 	.word	0x4a817c80

08008cfc <lt8722_dac_to_voltage>:
 * @brief Convert DAC code to nanovolts.
 * @param dac - DAC code.
 * @return Voltage value in nanovolts.
 */
int64_t lt8722_dac_to_voltage(int32_t dac)
{
 8008cfc:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008d00:	b085      	sub	sp, #20
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	60f8      	str	r0, [r7, #12]
	return LT8722_DAC_OFFSET - dac * LT8722_DAC_VREF /(1 << LT8722_DAC_RESOLUTION);
 8008d06:	68f9      	ldr	r1, [r7, #12]
 8008d08:	17c8      	asrs	r0, r1, #31
 8008d0a:	460c      	mov	r4, r1
 8008d0c:	4605      	mov	r5, r0
 8008d0e:	491b      	ldr	r1, [pc, #108]	@ (8008d7c <lt8722_dac_to_voltage+0x80>)
 8008d10:	fb01 f005 	mul.w	r0, r1, r5
 8008d14:	2100      	movs	r1, #0
 8008d16:	fb04 f101 	mul.w	r1, r4, r1
 8008d1a:	4401      	add	r1, r0
 8008d1c:	4817      	ldr	r0, [pc, #92]	@ (8008d7c <lt8722_dac_to_voltage+0x80>)
 8008d1e:	fba4 2300 	umull	r2, r3, r4, r0
 8008d22:	4419      	add	r1, r3
 8008d24:	460b      	mov	r3, r1
 8008d26:	4610      	mov	r0, r2
 8008d28:	4619      	mov	r1, r3
 8008d2a:	2900      	cmp	r1, #0
 8008d2c:	da08      	bge.n	8008d40 <lt8722_dac_to_voltage+0x44>
 8008d2e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008d32:	18c3      	adds	r3, r0, r3
 8008d34:	603b      	str	r3, [r7, #0]
 8008d36:	f141 0300 	adc.w	r3, r1, #0
 8008d3a:	607b      	str	r3, [r7, #4]
 8008d3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d40:	f04f 0200 	mov.w	r2, #0
 8008d44:	f04f 0300 	mov.w	r3, #0
 8008d48:	0e42      	lsrs	r2, r0, #25
 8008d4a:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8008d4e:	164b      	asrs	r3, r1, #25
 8008d50:	2100      	movs	r1, #0
 8008d52:	f1d2 0a00 	rsbs	sl, r2, #0
 8008d56:	eb61 0b03 	sbc.w	fp, r1, r3
 8008d5a:	4652      	mov	r2, sl
 8008d5c:	465b      	mov	r3, fp
 8008d5e:	4908      	ldr	r1, [pc, #32]	@ (8008d80 <lt8722_dac_to_voltage+0x84>)
 8008d60:	eb12 0801 	adds.w	r8, r2, r1
 8008d64:	f143 0900 	adc.w	r9, r3, #0
 8008d68:	4642      	mov	r2, r8
 8008d6a:	464b      	mov	r3, r9
}
 8008d6c:	4610      	mov	r0, r2
 8008d6e:	4619      	mov	r1, r3
 8008d70:	3714      	adds	r7, #20
 8008d72:	46bd      	mov	sp, r7
 8008d74:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008d78:	4770      	bx	lr
 8008d7a:	bf00      	nop
 8008d7c:	9502f900 	.word	0x9502f900
 8008d80:	4a817c80 	.word	0x4a817c80

08008d84 <lt8722_transaction>:
 * @param dev - LT8722 device descriptor
 * @param packet - LT8722 packet.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_transaction(struct lt8722_dev *dev, struct lt8722_packet *packet)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b086      	sub	sp, #24
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
	uint8_t buffer[8] = {0};
 8008d8e:	f107 030c 	add.w	r3, r7, #12
 8008d92:	2200      	movs	r2, #0
 8008d94:	601a      	str	r2, [r3, #0]
 8008d96:	605a      	str	r2, [r3, #4]
	buffer[0] = packet->command.byte;
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	733b      	strb	r3, [r7, #12]
	buffer[1] = packet->reg.address << 1;
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	791b      	ldrb	r3, [r3, #4]
 8008da2:	005b      	lsls	r3, r3, #1
 8008da4:	b2db      	uxtb	r3, r3
 8008da6:	737b      	strb	r3, [r7, #13]
	if (packet->command.byte == LT8722_DATA_WRITE_COMMAND)
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	2bf2      	cmp	r3, #242	@ 0xf2
 8008dae:	d111      	bne.n	8008dd4 <lt8722_transaction+0x50>
	{
		put_unaligned_be32(packet->data, &buffer[2]);
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	691a      	ldr	r2, [r3, #16]
 8008db4:	f107 030c 	add.w	r3, r7, #12
 8008db8:	3302      	adds	r3, #2
 8008dba:	4619      	mov	r1, r3
 8008dbc:	4610      	mov	r0, r2
 8008dbe:	f000 fabb 	bl	8009338 <put_unaligned_be32>
		buffer[6] = Calculate_CRC8(buffer, 6);
 8008dc2:	f107 030c 	add.w	r3, r7, #12
 8008dc6:	2106      	movs	r1, #6
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f000 fa79 	bl	80092c0 <Calculate_CRC8>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	74bb      	strb	r3, [r7, #18]
 8008dd2:	e007      	b.n	8008de4 <lt8722_transaction+0x60>
	} else
		buffer[2] = Calculate_CRC8(buffer, 2);
 8008dd4:	f107 030c 	add.w	r3, r7, #12
 8008dd8:	2102      	movs	r1, #2
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f000 fa70 	bl	80092c0 <Calculate_CRC8>
 8008de0:	4603      	mov	r3, r0
 8008de2:	73bb      	strb	r3, [r7, #14]
	SPI_write_and_read_buffer(dev, buffer, packet->command.size);
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	785a      	ldrb	r2, [r3, #1]
 8008de8:	f107 030c 	add.w	r3, r7, #12
 8008dec:	4619      	mov	r1, r3
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f7ff ff30 	bl	8008c54 <SPI_write_and_read_buffer>
	packet->status = (get_unaligned_be16(&buffer[0]) & GENMASK(10, 0));
 8008df4:	f107 030c 	add.w	r3, r7, #12
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f000 fadb 	bl	80093b4 <get_unaligned_be16>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	b29a      	uxth	r2, r3
 8008e02:	f04f 33ff 	mov.w	r3, #4294967295
 8008e06:	617b      	str	r3, [r7, #20]
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	055b      	lsls	r3, r3, #21
 8008e0c:	617b      	str	r3, [r7, #20]
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	0d5b      	lsrs	r3, r3, #21
 8008e12:	617b      	str	r3, [r7, #20]
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	4013      	ands	r3, r2
 8008e1a:	b29a      	uxth	r2, r3
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	82da      	strh	r2, [r3, #22]
	if (packet->command.byte == LT8722_DATA_WRITE_COMMAND)
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	2bf2      	cmp	r3, #242	@ 0xf2
 8008e26:	d106      	bne.n	8008e36 <lt8722_transaction+0xb2>
	{
		packet->crc = buffer[2];
 8008e28:	7bba      	ldrb	r2, [r7, #14]
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	751a      	strb	r2, [r3, #20]
		packet->ack = buffer[7];
 8008e2e:	7cfa      	ldrb	r2, [r7, #19]
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	755a      	strb	r2, [r3, #21]
 8008e34:	e019      	b.n	8008e6a <lt8722_transaction+0xe6>
	} else if (packet->command.byte == LT8722_DATA_READ_COMMAND) {
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	2bf4      	cmp	r3, #244	@ 0xf4
 8008e3c:	d10f      	bne.n	8008e5e <lt8722_transaction+0xda>
		packet->data = get_unaligned_be32(&buffer[2]);
 8008e3e:	f107 030c 	add.w	r3, r7, #12
 8008e42:	3302      	adds	r3, #2
 8008e44:	4618      	mov	r0, r3
 8008e46:	f000 fa98 	bl	800937a <get_unaligned_be32>
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	611a      	str	r2, [r3, #16]
		packet->crc = buffer[6];
 8008e50:	7cba      	ldrb	r2, [r7, #18]
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	751a      	strb	r2, [r3, #20]
		packet->ack = buffer[7];
 8008e56:	7cfa      	ldrb	r2, [r7, #19]
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	755a      	strb	r2, [r3, #21]
 8008e5c:	e005      	b.n	8008e6a <lt8722_transaction+0xe6>
	} else {
		packet->crc = buffer[2];
 8008e5e:	7bba      	ldrb	r2, [r7, #14]
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	751a      	strb	r2, [r3, #20]
		packet->ack = buffer[3];
 8008e64:	7bfa      	ldrb	r2, [r7, #15]
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	755a      	strb	r2, [r3, #21]
	}
	if (packet->ack != LT8722_ACK_ACKNOWLEDGE)
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	7d5b      	ldrb	r3, [r3, #21]
 8008e6e:	2ba5      	cmp	r3, #165	@ 0xa5
 8008e70:	d002      	beq.n	8008e78 <lt8722_transaction+0xf4>
		return -1;
 8008e72:	f04f 33ff 	mov.w	r3, #4294967295
 8008e76:	e000      	b.n	8008e7a <lt8722_transaction+0xf6>
	return 0;
 8008e78:	2300      	movs	r3, #0
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3718      	adds	r7, #24
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
	...

08008e84 <lt8722_reg_read>:
 * @param address - Register address.
 * @param data - Received data.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_reg_read(struct lt8722_dev *dev, uint8_t address, uint32_t *data)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b08c      	sub	sp, #48	@ 0x30
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	460b      	mov	r3, r1
 8008e8e:	607a      	str	r2, [r7, #4]
 8008e90:	72fb      	strb	r3, [r7, #11]
	int8_t ret = 0;
 8008e92:	2300      	movs	r3, #0
 8008e94:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	struct lt8722_packet packet;
	struct lt8722_command command = {
 8008e98:	4b14      	ldr	r3, [pc, #80]	@ (8008eec <lt8722_reg_read+0x68>)
 8008e9a:	881b      	ldrh	r3, [r3, #0]
 8008e9c:	823b      	strh	r3, [r7, #16]
		LT8722_DATA_READ_COMMAND,
		LT8722_DATA_READ_COMMAND_SIZE
	};
	packet.command = command;
 8008e9e:	8a3b      	ldrh	r3, [r7, #16]
 8008ea0:	82bb      	strh	r3, [r7, #20]
	packet.reg = lt8722_regs[address];
 8008ea2:	7afa      	ldrb	r2, [r7, #11]
 8008ea4:	4912      	ldr	r1, [pc, #72]	@ (8008ef0 <lt8722_reg_read+0x6c>)
 8008ea6:	4613      	mov	r3, r2
 8008ea8:	005b      	lsls	r3, r3, #1
 8008eaa:	4413      	add	r3, r2
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	18ca      	adds	r2, r1, r3
 8008eb0:	f107 0318 	add.w	r3, r7, #24
 8008eb4:	ca07      	ldmia	r2, {r0, r1, r2}
 8008eb6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	ret = lt8722_transaction(dev, &packet);
 8008eba:	f107 0314 	add.w	r3, r7, #20
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	f7ff ff5f 	bl	8008d84 <lt8722_transaction>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (ret)
 8008ecc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d002      	beq.n	8008eda <lt8722_reg_read+0x56>
		return ret;
 8008ed4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8008ed8:	e003      	b.n	8008ee2 <lt8722_reg_read+0x5e>
	*data = packet.data;
 8008eda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	601a      	str	r2, [r3, #0]
	return 0;
 8008ee0:	2300      	movs	r3, #0
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3730      	adds	r7, #48	@ 0x30
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}
 8008eea:	bf00      	nop
 8008eec:	08010548 	.word	0x08010548
 8008ef0:	20000150 	.word	0x20000150

08008ef4 <lt8722_reg_write>:
 * @param address - Register address.
 * @param data - Data to be written.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_reg_write(struct lt8722_dev *dev, uint8_t address, uint32_t data)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b08c      	sub	sp, #48	@ 0x30
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	60f8      	str	r0, [r7, #12]
 8008efc:	460b      	mov	r3, r1
 8008efe:	607a      	str	r2, [r7, #4]
 8008f00:	72fb      	strb	r3, [r7, #11]
	struct lt8722_packet packet;
	struct lt8722_command command = {
 8008f02:	4b0f      	ldr	r3, [pc, #60]	@ (8008f40 <lt8722_reg_write+0x4c>)
 8008f04:	881b      	ldrh	r3, [r3, #0]
 8008f06:	82bb      	strh	r3, [r7, #20]
		LT8722_DATA_WRITE_COMMAND,
		LT8722_DATA_WRITE_COMMAND_SIZE
	};
	packet.command = command;
 8008f08:	8abb      	ldrh	r3, [r7, #20]
 8008f0a:	833b      	strh	r3, [r7, #24]
	packet.reg = lt8722_regs[address];
 8008f0c:	7afa      	ldrb	r2, [r7, #11]
 8008f0e:	490d      	ldr	r1, [pc, #52]	@ (8008f44 <lt8722_reg_write+0x50>)
 8008f10:	4613      	mov	r3, r2
 8008f12:	005b      	lsls	r3, r3, #1
 8008f14:	4413      	add	r3, r2
 8008f16:	009b      	lsls	r3, r3, #2
 8008f18:	18ca      	adds	r2, r1, r3
 8008f1a:	f107 031c 	add.w	r3, r7, #28
 8008f1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8008f20:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	packet.data = data;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	62bb      	str	r3, [r7, #40]	@ 0x28
	return lt8722_transaction(dev, &packet);
 8008f28:	f107 0318 	add.w	r3, r7, #24
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	68f8      	ldr	r0, [r7, #12]
 8008f30:	f7ff ff28 	bl	8008d84 <lt8722_transaction>
 8008f34:	4603      	mov	r3, r0
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3730      	adds	r7, #48	@ 0x30
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	bf00      	nop
 8008f40:	0801054c 	.word	0x0801054c
 8008f44:	20000150 	.word	0x20000150

08008f48 <lt8722_reg_write_mask>:
 * @param mask - Mask to be applied.
 * @param data - Data to be written.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_reg_write_mask(struct lt8722_dev *dev, uint8_t address, uint32_t mask, uint32_t data)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b086      	sub	sp, #24
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	607a      	str	r2, [r7, #4]
 8008f52:	603b      	str	r3, [r7, #0]
 8008f54:	460b      	mov	r3, r1
 8008f56:	72fb      	strb	r3, [r7, #11]
	uint32_t reg_data;
	lt8722_reg_read(dev, address, &reg_data);
 8008f58:	f107 0214 	add.w	r2, r7, #20
 8008f5c:	7afb      	ldrb	r3, [r7, #11]
 8008f5e:	4619      	mov	r1, r3
 8008f60:	68f8      	ldr	r0, [r7, #12]
 8008f62:	f7ff ff8f 	bl	8008e84 <lt8722_reg_read>
	reg_data &= ~mask;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	43da      	mvns	r2, r3
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	4013      	ands	r3, r2
 8008f6e:	617b      	str	r3, [r7, #20]
	reg_data |= field_prep(mask, data);
 8008f70:	6839      	ldr	r1, [r7, #0]
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 fa4e 	bl	8009414 <field_prep>
 8008f78:	4602      	mov	r2, r0
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	617b      	str	r3, [r7, #20]
	return lt8722_reg_write(dev, address, reg_data);
 8008f80:	697a      	ldr	r2, [r7, #20]
 8008f82:	7afb      	ldrb	r3, [r7, #11]
 8008f84:	4619      	mov	r1, r3
 8008f86:	68f8      	ldr	r0, [r7, #12]
 8008f88:	f7ff ffb4 	bl	8008ef4 <lt8722_reg_write>
 8008f8c:	4603      	mov	r3, r0
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3718      	adds	r7, #24
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}

08008f96 <lt8722_set_enable_req>:
 * @brief Set ENABLE_REQ field in LT8722 device.
 * @param value - Enable if true, disabled otherwise
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_set_enable_req(struct lt8722_dev *dev, bool value)
{
 8008f96:	b580      	push	{r7, lr}
 8008f98:	b082      	sub	sp, #8
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	70fb      	strb	r3, [r7, #3]
	return lt8722_reg_write_mask(dev, LT8722_SPIS_COMMAND, LT8722_ENABLE_REQ_MASK, value);
 8008fa2:	78fb      	ldrb	r3, [r7, #3]
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	2100      	movs	r1, #0
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f7ff ffcd 	bl	8008f48 <lt8722_reg_write_mask>
 8008fae:	4603      	mov	r3, r0
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3708      	adds	r7, #8
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <lt8722_set_swen_req>:
 * @brief Set switching enable of LT8722 device.
 * @param value - Enable if true, disabled otherwise
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_set_swen_req(struct lt8722_dev *dev, bool value)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b082      	sub	sp, #8
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	70fb      	strb	r3, [r7, #3]
	return lt8722_reg_write_mask(dev, LT8722_SPIS_COMMAND, LT8722_SWEN_REQ_MASK, value);
 8008fc4:	78fb      	ldrb	r3, [r7, #3]
 8008fc6:	2202      	movs	r2, #2
 8008fc8:	2100      	movs	r1, #0
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f7ff ffbc 	bl	8008f48 <lt8722_reg_write_mask>
 8008fd0:	4603      	mov	r3, r0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3708      	adds	r7, #8
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}

08008fda <lt8722_reset>:
/**
 * @brief Shutdown the LT8722 device.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_reset(struct lt8722_dev *dev)
{
 8008fda:	b580      	push	{r7, lr}
 8008fdc:	b082      	sub	sp, #8
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
	return lt8722_reg_write_mask(dev, LT8722_SPIS_COMMAND, LT8722_SPI_RST_MASK, LT8722_SPI_RST_RESET);
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8008fe8:	2100      	movs	r1, #0
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f7ff ffac 	bl	8008f48 <lt8722_reg_write_mask>
 8008ff0:	4603      	mov	r3, r0
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3708      	adds	r7, #8
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}

08008ffa <lt8722_clear_faults>:
/**
 * @brief Clear LT8722 device faults.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_clear_faults(struct lt8722_dev *dev)
{
 8008ffa:	b580      	push	{r7, lr}
 8008ffc:	b084      	sub	sp, #16
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]
	return lt8722_reg_write_mask(dev, LT8722_SPIS_STATUS, LT8722_FAULTS_MASK, 0);
 8009002:	f04f 33ff 	mov.w	r3, #4294967295
 8009006:	60fb      	str	r3, [r7, #12]
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	069b      	lsls	r3, r3, #26
 800900c:	60fb      	str	r3, [r7, #12]
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	0d5b      	lsrs	r3, r3, #21
 8009012:	60fb      	str	r3, [r7, #12]
 8009014:	68fa      	ldr	r2, [r7, #12]
 8009016:	2300      	movs	r3, #0
 8009018:	2101      	movs	r1, #1
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f7ff ff94 	bl	8008f48 <lt8722_reg_write_mask>
 8009020:	4603      	mov	r3, r0
}
 8009022:	4618      	mov	r0, r3
 8009024:	3710      	adds	r7, #16
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <lt8722_set_dac>:
 * @brief Set DAC code of LT8722 device.
 * @param value - DAC value
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_set_dac(struct lt8722_dev *dev, uint32_t value)
{
 800902a:	b580      	push	{r7, lr}
 800902c:	b084      	sub	sp, #16
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
 8009032:	6039      	str	r1, [r7, #0]
	return lt8722_reg_write_mask(dev, LT8722_SPIS_DAC, LT8722_SPIS_DAC_MASK, value);
 8009034:	f04f 33ff 	mov.w	r3, #4294967295
 8009038:	60fb      	str	r3, [r7, #12]
 800903a:	68fa      	ldr	r2, [r7, #12]
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	2104      	movs	r1, #4
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f7ff ff81 	bl	8008f48 <lt8722_reg_write_mask>
 8009046:	4603      	mov	r3, r0
}
 8009048:	4618      	mov	r0, r3
 800904a:	3710      	adds	r7, #16
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <lt8722_init>:
 * @param init_param - Initialization parameter containing information about the
 * 		LT8722 device to be initialized.
 * @return 0 in case of success, negative error code otherwise
*/
int8_t lt8722_init(struct lt8722_dev *dev)
{
 8009050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009054:	b091      	sub	sp, #68	@ 0x44
 8009056:	af00      	add	r7, sp, #0
 8009058:	6178      	str	r0, [r7, #20]
	int8_t ret = 0;
 800905a:	2300      	movs	r3, #0
 800905c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	int64_t voltage;
	int64_t start_voltage;
	int64_t end_voltage;
//	LL_GPIO_ResetOutputPin((GPIO_TypeDef*)en_port[channel], en_pin[channel]);
//	LL_GPIO_ResetOutputPin((GPIO_TypeDef*)swen_port[channel], swen_pin[channel]);
	LL_GPIO_ResetOutputPin(dev->en_port, dev->en_pin);
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	68da      	ldr	r2, [r3, #12]
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	8a1b      	ldrh	r3, [r3, #16]
 8009068:	4619      	mov	r1, r3
 800906a:	4610      	mov	r0, r2
 800906c:	f7ff fda5 	bl	8008bba <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(dev->swen_port, dev->swen_pin);
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	695a      	ldr	r2, [r3, #20]
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	8b1b      	ldrh	r3, [r3, #24]
 8009078:	4619      	mov	r1, r3
 800907a:	4610      	mov	r0, r2
 800907c:	f7ff fd9d 	bl	8008bba <LL_GPIO_ResetOutputPin>
//		LL_GPIO_ResetOutputPin(TEC_1_EN_GPIO_Port, TEC_1_EN_Pin);
//		LL_GPIO_ResetOutputPin(TEC_1_SWEN_GPIO_Port, TEC_1_SWEN_Pin);
	/*
	 * Reset LT8722
	 */
	lt8722_reset(dev);
 8009080:	6978      	ldr	r0, [r7, #20]
 8009082:	f7ff ffaa 	bl	8008fda <lt8722_reset>
	 * Start-up sequence
	 * 1. Apply proper VIN and VDDIO voltages
	 *
	 * 2. Enable VCC LDO and other LT8722 circuitry
	 */
	ret = lt8722_clear_faults(dev);
 8009086:	6978      	ldr	r0, [r7, #20]
 8009088:	f7ff ffb7 	bl	8008ffa <lt8722_clear_faults>
 800908c:	4603      	mov	r3, r0
 800908e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

//	LL_GPIO_SetOutputPin((GPIO_TypeDef*)en_port[channel], en_pin[channel]);
	LL_GPIO_SetOutputPin(dev->en_port, dev->en_pin);
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	68da      	ldr	r2, [r3, #12]
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	8a1b      	ldrh	r3, [r3, #16]
 800909a:	4619      	mov	r1, r3
 800909c:	4610      	mov	r0, r2
 800909e:	f7ff fd7e 	bl	8008b9e <LL_GPIO_SetOutputPin>

	ret = lt8722_set_enable_req(dev, LT8722_ENABLE_REQ_ENABLED);
 80090a2:	2101      	movs	r1, #1
 80090a4:	6978      	ldr	r0, [r7, #20]
 80090a6:	f7ff ff76 	bl	8008f96 <lt8722_set_enable_req>
 80090aa:	4603      	mov	r3, r0
 80090ac:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	ret = lt8722_reg_write(dev, LT8722_SPIS_COMMAND, 0x00003A01);
 80090b0:	f643 2201 	movw	r2, #14849	@ 0x3a01
 80090b4:	2100      	movs	r1, #0
 80090b6:	6978      	ldr	r0, [r7, #20]
 80090b8:	f7ff ff1c 	bl	8008ef4 <lt8722_reg_write>
 80090bc:	4603      	mov	r3, r0
 80090be:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	/*
	 * 3. Configure output voltage control DAC to 0xFF000000
	 */
	ret = lt8722_set_dac(dev, 0xFF000000);
 80090c2:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
 80090c6:	6978      	ldr	r0, [r7, #20]
 80090c8:	f7ff ffaf 	bl	800902a <lt8722_set_dac>
 80090cc:	4603      	mov	r3, r0
 80090ce:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	/*
	 * 4. Write all SPIS_STATUS registers to 0
	 */
	ret = lt8722_reg_write(dev, LT8722_SPIS_STATUS, 0);
 80090d2:	2200      	movs	r2, #0
 80090d4:	2101      	movs	r1, #1
 80090d6:	6978      	ldr	r0, [r7, #20]
 80090d8:	f7ff ff0c 	bl	8008ef4 <lt8722_reg_write>
 80090dc:	4603      	mov	r3, r0
 80090de:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	LL_mDelay(1);
 80090e2:	2001      	movs	r0, #1
 80090e4:	f003 fac2 	bl	800c66c <LL_mDelay>
	ret = lt8722_reg_write(dev, LT8722_SPIS_COMMAND, 0x00003A01);
 80090e8:	f643 2201 	movw	r2, #14849	@ 0x3a01
 80090ec:	2100      	movs	r1, #0
 80090ee:	6978      	ldr	r0, [r7, #20]
 80090f0:	f7ff ff00 	bl	8008ef4 <lt8722_reg_write>
 80090f4:	4603      	mov	r3, r0
 80090f6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	/*
	 * 5. Ramp the output voltage control DAC from 0xFF000000 to 0x00000000
	 */
	start_voltage = lt8722_dac_to_voltage(0xFF000000);
 80090fa:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80090fe:	f7ff fdfd 	bl	8008cfc <lt8722_dac_to_voltage>
 8009102:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
	end_voltage = lt8722_dac_to_voltage(0x00000000);
 8009106:	2000      	movs	r0, #0
 8009108:	f7ff fdf8 	bl	8008cfc <lt8722_dac_to_voltage>
 800910c:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
	for (uint8_t i = 0;  i < 5; i++)
 8009110:	2300      	movs	r3, #0
 8009112:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8009116:	e046      	b.n	80091a6 <lt8722_init+0x156>
	{
		voltage = (start_voltage + (end_voltage - start_voltage) * i / 4);
 8009118:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800911c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8009120:	1a84      	subs	r4, r0, r2
 8009122:	eb61 0503 	sbc.w	r5, r1, r3
 8009126:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800912a:	2200      	movs	r2, #0
 800912c:	4698      	mov	r8, r3
 800912e:	4691      	mov	r9, r2
 8009130:	fb08 f205 	mul.w	r2, r8, r5
 8009134:	fb04 f309 	mul.w	r3, r4, r9
 8009138:	4413      	add	r3, r2
 800913a:	fba4 ab08 	umull	sl, fp, r4, r8
 800913e:	445b      	add	r3, fp
 8009140:	469b      	mov	fp, r3
 8009142:	4652      	mov	r2, sl
 8009144:	465b      	mov	r3, fp
 8009146:	2b00      	cmp	r3, #0
 8009148:	da06      	bge.n	8009158 <lt8722_init+0x108>
 800914a:	1cd1      	adds	r1, r2, #3
 800914c:	60b9      	str	r1, [r7, #8]
 800914e:	f143 0300 	adc.w	r3, r3, #0
 8009152:	60fb      	str	r3, [r7, #12]
 8009154:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009158:	f04f 0000 	mov.w	r0, #0
 800915c:	f04f 0100 	mov.w	r1, #0
 8009160:	0890      	lsrs	r0, r2, #2
 8009162:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 8009166:	1099      	asrs	r1, r3, #2
 8009168:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800916c:	1816      	adds	r6, r2, r0
 800916e:	603e      	str	r6, [r7, #0]
 8009170:	414b      	adcs	r3, r1
 8009172:	607b      	str	r3, [r7, #4]
 8009174:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009178:	e9c7 2308 	strd	r2, r3, [r7, #32]
		dac = lt8722_voltage_to_dac(voltage);
 800917c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009180:	f7ff fd96 	bl	8008cb0 <lt8722_voltage_to_dac>
 8009184:	61f8      	str	r0, [r7, #28]
		ret = lt8722_set_dac(dev, dac);
 8009186:	69fb      	ldr	r3, [r7, #28]
 8009188:	4619      	mov	r1, r3
 800918a:	6978      	ldr	r0, [r7, #20]
 800918c:	f7ff ff4d 	bl	800902a <lt8722_set_dac>
 8009190:	4603      	mov	r3, r0
 8009192:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		LL_mDelay(1);
 8009196:	2001      	movs	r0, #1
 8009198:	f003 fa68 	bl	800c66c <LL_mDelay>
	for (uint8_t i = 0;  i < 5; i++)
 800919c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80091a0:	3301      	adds	r3, #1
 80091a2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80091a6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80091aa:	2b04      	cmp	r3, #4
 80091ac:	d9b4      	bls.n	8009118 <lt8722_init+0xc8>
	}
	/*
	 * 6. Enable the PWM switching behavior
	 */
//	LL_GPIO_SetOutputPin((GPIO_TypeDef*)swen_port[channel], swen_pin[channel]);
	LL_GPIO_SetOutputPin(dev->swen_port, dev->swen_pin);
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	695a      	ldr	r2, [r3, #20]
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	8b1b      	ldrh	r3, [r3, #24]
 80091b6:	4619      	mov	r1, r3
 80091b8:	4610      	mov	r0, r2
 80091ba:	f7ff fcf0 	bl	8008b9e <LL_GPIO_SetOutputPin>
	ret = lt8722_set_swen_req(dev, LT8722_SWEN_REQ_ENABLED);
 80091be:	2101      	movs	r1, #1
 80091c0:	6978      	ldr	r0, [r7, #20]
 80091c2:	f7ff fef9 	bl	8008fb8 <lt8722_set_swen_req>
 80091c6:	4603      	mov	r3, r0
 80091c8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	delay_us(200);
 80091cc:	20c8      	movs	r0, #200	@ 0xc8
 80091ce:	f7f8 f803 	bl	80011d8 <delay_us>
//
//		delay_us(255);
//		delay_us(255);
//
//		ret = lt8722_set_swen_req(channel, LT8722_SWEN_REQ_DISABLED);
	return ret;
 80091d2:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3744      	adds	r7, #68	@ 0x44
 80091da:	46bd      	mov	sp, r7
 80091dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080091e0 <lt8722_set_output_voltage_channel>:
 * @param channel - Channel of lt8722.
 * @param value - Output voltage value in nanovolts.
 * @return 0 in case of success, negative error code otherwise
 */
int8_t lt8722_set_output_voltage_channel(struct lt8722_dev *dev, tec_dir_t dir, int64_t value)
{
 80091e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80091e4:	b08c      	sub	sp, #48	@ 0x30
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	61f8      	str	r0, [r7, #28]
 80091ea:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80091ee:	460b      	mov	r3, r1
 80091f0:	76fb      	strb	r3, [r7, #27]
	uint8_t ret = 0;
 80091f2:	2300      	movs	r3, #0
 80091f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	int64_t vdac = 0;
 80091f8:	f04f 0200 	mov.w	r2, #0
 80091fc:	f04f 0300 	mov.w	r3, #0
 8009200:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	int32_t dac = 0x0;
 8009204:	2300      	movs	r3, #0
 8009206:	623b      	str	r3, [r7, #32]
	if (dir == TEC_COOL)
 8009208:	7efb      	ldrb	r3, [r7, #27]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d124      	bne.n	8009258 <lt8722_set_output_voltage_channel+0x78>
		vdac = LT8722_DAC_OFFSET - value / 16;
 800920e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009212:	4610      	mov	r0, r2
 8009214:	4619      	mov	r1, r3
 8009216:	2900      	cmp	r1, #0
 8009218:	da07      	bge.n	800922a <lt8722_set_output_voltage_channel+0x4a>
 800921a:	f110 030f 	adds.w	r3, r0, #15
 800921e:	60bb      	str	r3, [r7, #8]
 8009220:	f141 0300 	adc.w	r3, r1, #0
 8009224:	60fb      	str	r3, [r7, #12]
 8009226:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800922a:	f04f 0200 	mov.w	r2, #0
 800922e:	f04f 0300 	mov.w	r3, #0
 8009232:	0902      	lsrs	r2, r0, #4
 8009234:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8009238:	110b      	asrs	r3, r1, #4
 800923a:	2100      	movs	r1, #0
 800923c:	4250      	negs	r0, r2
 800923e:	6038      	str	r0, [r7, #0]
 8009240:	eb61 0303 	sbc.w	r3, r1, r3
 8009244:	607b      	str	r3, [r7, #4]
 8009246:	e9d7 2300 	ldrd	r2, r3, [r7]
 800924a:	491c      	ldr	r1, [pc, #112]	@ (80092bc <lt8722_set_output_voltage_channel+0xdc>)
 800924c:	eb12 0801 	adds.w	r8, r2, r1
 8009250:	f143 0900 	adc.w	r9, r3, #0
 8009254:	e9c7 890a 	strd	r8, r9, [r7, #40]	@ 0x28
	if (dir == TEC_HEAT)
 8009258:	7efb      	ldrb	r3, [r7, #27]
 800925a:	2b01      	cmp	r3, #1
 800925c:	d119      	bne.n	8009292 <lt8722_set_output_voltage_channel+0xb2>
		vdac = LT8722_DAC_OFFSET + value / 16;
 800925e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009262:	2b00      	cmp	r3, #0
 8009264:	da05      	bge.n	8009272 <lt8722_set_output_voltage_channel+0x92>
 8009266:	f112 0a0f 	adds.w	sl, r2, #15
 800926a:	f143 0b00 	adc.w	fp, r3, #0
 800926e:	4652      	mov	r2, sl
 8009270:	465b      	mov	r3, fp
 8009272:	f04f 0000 	mov.w	r0, #0
 8009276:	f04f 0100 	mov.w	r1, #0
 800927a:	0910      	lsrs	r0, r2, #4
 800927c:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 8009280:	1119      	asrs	r1, r3, #4
 8009282:	4602      	mov	r2, r0
 8009284:	460b      	mov	r3, r1
 8009286:	490d      	ldr	r1, [pc, #52]	@ (80092bc <lt8722_set_output_voltage_channel+0xdc>)
 8009288:	1854      	adds	r4, r2, r1
 800928a:	f143 0500 	adc.w	r5, r3, #0
 800928e:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
	dac = lt8722_voltage_to_dac(vdac);
 8009292:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8009296:	f7ff fd0b 	bl	8008cb0 <lt8722_voltage_to_dac>
 800929a:	6238      	str	r0, [r7, #32]
	ret = lt8722_set_dac(dev, dac);
 800929c:	6a3b      	ldr	r3, [r7, #32]
 800929e:	4619      	mov	r1, r3
 80092a0:	69f8      	ldr	r0, [r7, #28]
 80092a2:	f7ff fec2 	bl	800902a <lt8722_set_dac>
 80092a6:	4603      	mov	r3, r0
 80092a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	return ret;
 80092ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3730      	adds	r7, #48	@ 0x30
 80092b4:	46bd      	mov	sp, r7
 80092b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80092ba:	bf00      	nop
 80092bc:	4a817c80 	.word	0x4a817c80

080092c0 <Calculate_CRC8>:

/* Private support function definition ------------------------------------*/
uint8_t Calculate_CRC8(uint8_t *data, uint8_t length)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b085      	sub	sp, #20
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	460b      	mov	r3, r1
 80092ca:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0x00;
 80092cc:	2300      	movs	r3, #0
 80092ce:	73fb      	strb	r3, [r7, #15]
    uint8_t poly = 0x07;
 80092d0:	2307      	movs	r3, #7
 80092d2:	733b      	strb	r3, [r7, #12]
    for (uint8_t i = 0; i < length; i++)
 80092d4:	2300      	movs	r3, #0
 80092d6:	73bb      	strb	r3, [r7, #14]
 80092d8:	e023      	b.n	8009322 <Calculate_CRC8+0x62>
    {
        crc ^= data[i];
 80092da:	7bbb      	ldrb	r3, [r7, #14]
 80092dc:	687a      	ldr	r2, [r7, #4]
 80092de:	4413      	add	r3, r2
 80092e0:	781a      	ldrb	r2, [r3, #0]
 80092e2:	7bfb      	ldrb	r3, [r7, #15]
 80092e4:	4053      	eors	r3, r2
 80092e6:	73fb      	strb	r3, [r7, #15]
        for (uint8_t bit = 0; bit < 8; bit++)
 80092e8:	2300      	movs	r3, #0
 80092ea:	737b      	strb	r3, [r7, #13]
 80092ec:	e013      	b.n	8009316 <Calculate_CRC8+0x56>
        {
            if (crc & 0x80)
 80092ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	da09      	bge.n	800930a <Calculate_CRC8+0x4a>
                crc = (crc << 1) ^ poly;
 80092f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092fa:	005b      	lsls	r3, r3, #1
 80092fc:	b25a      	sxtb	r2, r3
 80092fe:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8009302:	4053      	eors	r3, r2
 8009304:	b25b      	sxtb	r3, r3
 8009306:	73fb      	strb	r3, [r7, #15]
 8009308:	e002      	b.n	8009310 <Calculate_CRC8+0x50>
            else
                crc <<= 1;
 800930a:	7bfb      	ldrb	r3, [r7, #15]
 800930c:	005b      	lsls	r3, r3, #1
 800930e:	73fb      	strb	r3, [r7, #15]
        for (uint8_t bit = 0; bit < 8; bit++)
 8009310:	7b7b      	ldrb	r3, [r7, #13]
 8009312:	3301      	adds	r3, #1
 8009314:	737b      	strb	r3, [r7, #13]
 8009316:	7b7b      	ldrb	r3, [r7, #13]
 8009318:	2b07      	cmp	r3, #7
 800931a:	d9e8      	bls.n	80092ee <Calculate_CRC8+0x2e>
    for (uint8_t i = 0; i < length; i++)
 800931c:	7bbb      	ldrb	r3, [r7, #14]
 800931e:	3301      	adds	r3, #1
 8009320:	73bb      	strb	r3, [r7, #14]
 8009322:	7bba      	ldrb	r2, [r7, #14]
 8009324:	78fb      	ldrb	r3, [r7, #3]
 8009326:	429a      	cmp	r2, r3
 8009328:	d3d7      	bcc.n	80092da <Calculate_CRC8+0x1a>
        }
    }
    return crc;
 800932a:	7bfb      	ldrb	r3, [r7, #15]
}
 800932c:	4618      	mov	r0, r3
 800932e:	3714      	adds	r7, #20
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr

08009338 <put_unaligned_be32>:

void put_unaligned_be32(uint32_t val, uint8_t *buf)
{
 8009338:	b480      	push	{r7}
 800933a:	b083      	sub	sp, #12
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
	buf[3] = val & 0xFF;
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	3303      	adds	r3, #3
 8009346:	687a      	ldr	r2, [r7, #4]
 8009348:	b2d2      	uxtb	r2, r2
 800934a:	701a      	strb	r2, [r3, #0]
	buf[2] = (val >> 8) & 0xFF;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	0a1a      	lsrs	r2, r3, #8
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	3302      	adds	r3, #2
 8009354:	b2d2      	uxtb	r2, r2
 8009356:	701a      	strb	r2, [r3, #0]
	buf[1] = (val >> 16) & 0xFF;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	0c1a      	lsrs	r2, r3, #16
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	3301      	adds	r3, #1
 8009360:	b2d2      	uxtb	r2, r2
 8009362:	701a      	strb	r2, [r3, #0]
	buf[0] = val >> 24;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	0e1b      	lsrs	r3, r3, #24
 8009368:	b2da      	uxtb	r2, r3
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	701a      	strb	r2, [r3, #0]
}
 800936e:	bf00      	nop
 8009370:	370c      	adds	r7, #12
 8009372:	46bd      	mov	sp, r7
 8009374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009378:	4770      	bx	lr

0800937a <get_unaligned_be32>:
{
	buf[1] = val & 0xFF;
	buf[0] = val >> 8;
}
uint32_t get_unaligned_be32(uint8_t *buf)
{
 800937a:	b480      	push	{r7}
 800937c:	b083      	sub	sp, #12
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
	return buf[3] | ((uint16_t)buf[2] << 8) | ((uint32_t)buf[1] << 16) | ((uint32_t)buf[0] << 24);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	3303      	adds	r3, #3
 8009386:	781b      	ldrb	r3, [r3, #0]
 8009388:	461a      	mov	r2, r3
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	3302      	adds	r3, #2
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	021b      	lsls	r3, r3, #8
 8009392:	4313      	orrs	r3, r2
 8009394:	461a      	mov	r2, r3
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	3301      	adds	r3, #1
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	041b      	lsls	r3, r3, #16
 800939e:	431a      	orrs	r2, r3
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	061b      	lsls	r3, r3, #24
 80093a6:	4313      	orrs	r3, r2
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	370c      	adds	r7, #12
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr

080093b4 <get_unaligned_be16>:
uint32_t get_unaligned_be16(uint8_t *buf)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b083      	sub	sp, #12
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
	return buf[1] | ((uint16_t)buf[0] << 8);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	3301      	adds	r3, #1
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	461a      	mov	r2, r3
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	021b      	lsls	r3, r3, #8
 80093ca:	4313      	orrs	r3, r2
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	370c      	adds	r7, #12
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr

080093d8 <find_first_set_bit>:
uint32_t find_first_set_bit(uint32_t word)
{
 80093d8:	b480      	push	{r7}
 80093da:	b085      	sub	sp, #20
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
	uint32_t first_set_bit = 0;
 80093e0:	2300      	movs	r3, #0
 80093e2:	60fb      	str	r3, [r7, #12]
	while (word) {
 80093e4:	e00c      	b.n	8009400 <find_first_set_bit+0x28>
		if (word & 0x1)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f003 0301 	and.w	r3, r3, #1
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d001      	beq.n	80093f4 <find_first_set_bit+0x1c>
			return first_set_bit;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	e009      	b.n	8009408 <find_first_set_bit+0x30>
		word >>= 1;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	085b      	lsrs	r3, r3, #1
 80093f8:	607b      	str	r3, [r7, #4]
		first_set_bit ++;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	3301      	adds	r3, #1
 80093fe:	60fb      	str	r3, [r7, #12]
	while (word) {
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d1ef      	bne.n	80093e6 <find_first_set_bit+0xe>
	}
	return 32;
 8009406:	2320      	movs	r3, #32
}
 8009408:	4618      	mov	r0, r3
 800940a:	3714      	adds	r7, #20
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr

08009414 <field_prep>:
uint32_t field_prep(uint32_t mask, uint32_t val)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	6039      	str	r1, [r7, #0]
	return (val << find_first_set_bit(mask)) & mask;
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f7ff ffda 	bl	80093d8 <find_first_set_bit>
 8009424:	4602      	mov	r2, r0
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	fa03 f202 	lsl.w	r2, r3, r2
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	4013      	ands	r3, r2
}
 8009430:	4618      	mov	r0, r3
 8009432:	3708      	adds	r7, #8
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8009438:	b480      	push	{r7}
 800943a:	b083      	sub	sp, #12
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	689b      	ldr	r3, [r3, #8]
 8009444:	f043 0201 	orr.w	r2, r3, #1
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	609a      	str	r2, [r3, #8]
}
 800944c:	bf00      	nop
 800944e:	370c      	adds	r7, #12
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr

08009458 <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8009458:	b480      	push	{r7}
 800945a:	b083      	sub	sp, #12
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	689b      	ldr	r3, [r3, #8]
 8009464:	f003 0301 	and.w	r3, r3, #1
 8009468:	2b01      	cmp	r3, #1
 800946a:	bf0c      	ite	eq
 800946c:	2301      	moveq	r3, #1
 800946e:	2300      	movne	r3, #0
 8009470:	b2db      	uxtb	r3, r3
}
 8009472:	4618      	mov	r0, r3
 8009474:	370c      	adds	r7, #12
 8009476:	46bd      	mov	sp, r7
 8009478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947c:	4770      	bx	lr

0800947e <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 800947e:	b480      	push	{r7}
 8009480:	b083      	sub	sp, #12
 8009482:	af00      	add	r7, sp, #0
 8009484:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_SWSTART);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	689b      	ldr	r3, [r3, #8]
 800948a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	609a      	str	r2, [r3, #8]
}
 8009492:	bf00      	nop
 8009494:	370c      	adds	r7, #12
 8009496:	46bd      	mov	sp, r7
 8009498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949c:	4770      	bx	lr
	...

080094a0 <LL_DMA_EnableStream>:
{
 80094a0:	b480      	push	{r7}
 80094a2:	b083      	sub	sp, #12
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80094aa:	4a0c      	ldr	r2, [pc, #48]	@ (80094dc <LL_DMA_EnableStream+0x3c>)
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	4413      	add	r3, r2
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	461a      	mov	r2, r3
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	4413      	add	r3, r2
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4908      	ldr	r1, [pc, #32]	@ (80094dc <LL_DMA_EnableStream+0x3c>)
 80094bc:	683a      	ldr	r2, [r7, #0]
 80094be:	440a      	add	r2, r1
 80094c0:	7812      	ldrb	r2, [r2, #0]
 80094c2:	4611      	mov	r1, r2
 80094c4:	687a      	ldr	r2, [r7, #4]
 80094c6:	440a      	add	r2, r1
 80094c8:	f043 0301 	orr.w	r3, r3, #1
 80094cc:	6013      	str	r3, [r2, #0]
}
 80094ce:	bf00      	nop
 80094d0:	370c      	adds	r7, #12
 80094d2:	46bd      	mov	sp, r7
 80094d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d8:	4770      	bx	lr
 80094da:	bf00      	nop
 80094dc:	08010830 	.word	0x08010830

080094e0 <LL_DMA_SetDataTransferDirection>:
{
 80094e0:	b480      	push	{r7}
 80094e2:	b085      	sub	sp, #20
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	60f8      	str	r0, [r7, #12]
 80094e8:	60b9      	str	r1, [r7, #8]
 80094ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 80094ec:	4a0d      	ldr	r2, [pc, #52]	@ (8009524 <LL_DMA_SetDataTransferDirection+0x44>)
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	4413      	add	r3, r2
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	461a      	mov	r2, r3
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	4413      	add	r3, r2
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009500:	4908      	ldr	r1, [pc, #32]	@ (8009524 <LL_DMA_SetDataTransferDirection+0x44>)
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	440b      	add	r3, r1
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	4619      	mov	r1, r3
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	440b      	add	r3, r1
 800950e:	4619      	mov	r1, r3
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	4313      	orrs	r3, r2
 8009514:	600b      	str	r3, [r1, #0]
}
 8009516:	bf00      	nop
 8009518:	3714      	adds	r7, #20
 800951a:	46bd      	mov	sp, r7
 800951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009520:	4770      	bx	lr
 8009522:	bf00      	nop
 8009524:	08010830 	.word	0x08010830

08009528 <LL_DMA_SetMode>:
{
 8009528:	b480      	push	{r7}
 800952a:	b085      	sub	sp, #20
 800952c:	af00      	add	r7, sp, #0
 800952e:	60f8      	str	r0, [r7, #12]
 8009530:	60b9      	str	r1, [r7, #8]
 8009532:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8009534:	4a0d      	ldr	r2, [pc, #52]	@ (800956c <LL_DMA_SetMode+0x44>)
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	4413      	add	r3, r2
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	461a      	mov	r2, r3
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	4413      	add	r3, r2
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 8009548:	4908      	ldr	r1, [pc, #32]	@ (800956c <LL_DMA_SetMode+0x44>)
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	440b      	add	r3, r1
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	4619      	mov	r1, r3
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	440b      	add	r3, r1
 8009556:	4619      	mov	r1, r3
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	4313      	orrs	r3, r2
 800955c:	600b      	str	r3, [r1, #0]
}
 800955e:	bf00      	nop
 8009560:	3714      	adds	r7, #20
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr
 800956a:	bf00      	nop
 800956c:	08010830 	.word	0x08010830

08009570 <LL_DMA_SetPeriphIncMode>:
{
 8009570:	b480      	push	{r7}
 8009572:	b085      	sub	sp, #20
 8009574:	af00      	add	r7, sp, #0
 8009576:	60f8      	str	r0, [r7, #12]
 8009578:	60b9      	str	r1, [r7, #8]
 800957a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 800957c:	4a0d      	ldr	r2, [pc, #52]	@ (80095b4 <LL_DMA_SetPeriphIncMode+0x44>)
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	4413      	add	r3, r2
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	461a      	mov	r2, r3
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	4413      	add	r3, r2
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009590:	4908      	ldr	r1, [pc, #32]	@ (80095b4 <LL_DMA_SetPeriphIncMode+0x44>)
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	440b      	add	r3, r1
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	4619      	mov	r1, r3
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	440b      	add	r3, r1
 800959e:	4619      	mov	r1, r3
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	4313      	orrs	r3, r2
 80095a4:	600b      	str	r3, [r1, #0]
}
 80095a6:	bf00      	nop
 80095a8:	3714      	adds	r7, #20
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr
 80095b2:	bf00      	nop
 80095b4:	08010830 	.word	0x08010830

080095b8 <LL_DMA_SetMemoryIncMode>:
{
 80095b8:	b480      	push	{r7}
 80095ba:	b085      	sub	sp, #20
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 80095c4:	4a0d      	ldr	r2, [pc, #52]	@ (80095fc <LL_DMA_SetMemoryIncMode+0x44>)
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	4413      	add	r3, r2
 80095ca:	781b      	ldrb	r3, [r3, #0]
 80095cc:	461a      	mov	r2, r3
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	4413      	add	r3, r2
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80095d8:	4908      	ldr	r1, [pc, #32]	@ (80095fc <LL_DMA_SetMemoryIncMode+0x44>)
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	440b      	add	r3, r1
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	4619      	mov	r1, r3
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	440b      	add	r3, r1
 80095e6:	4619      	mov	r1, r3
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	4313      	orrs	r3, r2
 80095ec:	600b      	str	r3, [r1, #0]
}
 80095ee:	bf00      	nop
 80095f0:	3714      	adds	r7, #20
 80095f2:	46bd      	mov	sp, r7
 80095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f8:	4770      	bx	lr
 80095fa:	bf00      	nop
 80095fc:	08010830 	.word	0x08010830

08009600 <LL_DMA_SetPeriphSize>:
{
 8009600:	b480      	push	{r7}
 8009602:	b085      	sub	sp, #20
 8009604:	af00      	add	r7, sp, #0
 8009606:	60f8      	str	r0, [r7, #12]
 8009608:	60b9      	str	r1, [r7, #8]
 800960a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 800960c:	4a0d      	ldr	r2, [pc, #52]	@ (8009644 <LL_DMA_SetPeriphSize+0x44>)
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	4413      	add	r3, r2
 8009612:	781b      	ldrb	r3, [r3, #0]
 8009614:	461a      	mov	r2, r3
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	4413      	add	r3, r2
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8009620:	4908      	ldr	r1, [pc, #32]	@ (8009644 <LL_DMA_SetPeriphSize+0x44>)
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	440b      	add	r3, r1
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	4619      	mov	r1, r3
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	440b      	add	r3, r1
 800962e:	4619      	mov	r1, r3
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	4313      	orrs	r3, r2
 8009634:	600b      	str	r3, [r1, #0]
}
 8009636:	bf00      	nop
 8009638:	3714      	adds	r7, #20
 800963a:	46bd      	mov	sp, r7
 800963c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009640:	4770      	bx	lr
 8009642:	bf00      	nop
 8009644:	08010830 	.word	0x08010830

08009648 <LL_DMA_SetMemorySize>:
{
 8009648:	b480      	push	{r7}
 800964a:	b085      	sub	sp, #20
 800964c:	af00      	add	r7, sp, #0
 800964e:	60f8      	str	r0, [r7, #12]
 8009650:	60b9      	str	r1, [r7, #8]
 8009652:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8009654:	4a0d      	ldr	r2, [pc, #52]	@ (800968c <LL_DMA_SetMemorySize+0x44>)
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	4413      	add	r3, r2
 800965a:	781b      	ldrb	r3, [r3, #0]
 800965c:	461a      	mov	r2, r3
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	4413      	add	r3, r2
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 8009668:	4908      	ldr	r1, [pc, #32]	@ (800968c <LL_DMA_SetMemorySize+0x44>)
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	440b      	add	r3, r1
 800966e:	781b      	ldrb	r3, [r3, #0]
 8009670:	4619      	mov	r1, r3
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	440b      	add	r3, r1
 8009676:	4619      	mov	r1, r3
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	4313      	orrs	r3, r2
 800967c:	600b      	str	r3, [r1, #0]
}
 800967e:	bf00      	nop
 8009680:	3714      	adds	r7, #20
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr
 800968a:	bf00      	nop
 800968c:	08010830 	.word	0x08010830

08009690 <LL_DMA_SetDataLength>:
{
 8009690:	b480      	push	{r7}
 8009692:	b085      	sub	sp, #20
 8009694:	af00      	add	r7, sp, #0
 8009696:	60f8      	str	r0, [r7, #12]
 8009698:	60b9      	str	r1, [r7, #8]
 800969a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 800969c:	4a0d      	ldr	r2, [pc, #52]	@ (80096d4 <LL_DMA_SetDataLength+0x44>)
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	4413      	add	r3, r2
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	461a      	mov	r2, r3
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	4413      	add	r3, r2
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	0c1b      	lsrs	r3, r3, #16
 80096ae:	041b      	lsls	r3, r3, #16
 80096b0:	4908      	ldr	r1, [pc, #32]	@ (80096d4 <LL_DMA_SetDataLength+0x44>)
 80096b2:	68ba      	ldr	r2, [r7, #8]
 80096b4:	440a      	add	r2, r1
 80096b6:	7812      	ldrb	r2, [r2, #0]
 80096b8:	4611      	mov	r1, r2
 80096ba:	68fa      	ldr	r2, [r7, #12]
 80096bc:	440a      	add	r2, r1
 80096be:	4611      	mov	r1, r2
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	4313      	orrs	r3, r2
 80096c4:	604b      	str	r3, [r1, #4]
}
 80096c6:	bf00      	nop
 80096c8:	3714      	adds	r7, #20
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr
 80096d2:	bf00      	nop
 80096d4:	08010830 	.word	0x08010830

080096d8 <LL_DMA_SetChannelSelection>:
{
 80096d8:	b480      	push	{r7}
 80096da:	b085      	sub	sp, #20
 80096dc:	af00      	add	r7, sp, #0
 80096de:	60f8      	str	r0, [r7, #12]
 80096e0:	60b9      	str	r1, [r7, #8]
 80096e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 80096e4:	4a0d      	ldr	r2, [pc, #52]	@ (800971c <LL_DMA_SetChannelSelection+0x44>)
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	4413      	add	r3, r2
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	461a      	mov	r2, r3
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	4413      	add	r3, r2
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80096f8:	4908      	ldr	r1, [pc, #32]	@ (800971c <LL_DMA_SetChannelSelection+0x44>)
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	440b      	add	r3, r1
 80096fe:	781b      	ldrb	r3, [r3, #0]
 8009700:	4619      	mov	r1, r3
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	440b      	add	r3, r1
 8009706:	4619      	mov	r1, r3
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	4313      	orrs	r3, r2
 800970c:	600b      	str	r3, [r1, #0]
}
 800970e:	bf00      	nop
 8009710:	3714      	adds	r7, #20
 8009712:	46bd      	mov	sp, r7
 8009714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009718:	4770      	bx	lr
 800971a:	bf00      	nop
 800971c:	08010830 	.word	0x08010830

08009720 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 8009720:	b480      	push	{r7}
 8009722:	b085      	sub	sp, #20
 8009724:	af00      	add	r7, sp, #0
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 800972c:	4a07      	ldr	r2, [pc, #28]	@ (800974c <LL_DMA_SetMemoryAddress+0x2c>)
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	4413      	add	r3, r2
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	461a      	mov	r2, r3
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	4413      	add	r3, r2
 800973a:	461a      	mov	r2, r3
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	60d3      	str	r3, [r2, #12]
}
 8009740:	bf00      	nop
 8009742:	3714      	adds	r7, #20
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr
 800974c:	08010830 	.word	0x08010830

08009750 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 8009750:	b480      	push	{r7}
 8009752:	b085      	sub	sp, #20
 8009754:	af00      	add	r7, sp, #0
 8009756:	60f8      	str	r0, [r7, #12]
 8009758:	60b9      	str	r1, [r7, #8]
 800975a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 800975c:	4a07      	ldr	r2, [pc, #28]	@ (800977c <LL_DMA_SetPeriphAddress+0x2c>)
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	4413      	add	r3, r2
 8009762:	781b      	ldrb	r3, [r3, #0]
 8009764:	461a      	mov	r2, r3
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	4413      	add	r3, r2
 800976a:	461a      	mov	r2, r3
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6093      	str	r3, [r2, #8]
}
 8009770:	bf00      	nop
 8009772:	3714      	adds	r7, #20
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr
 800977c:	08010830 	.word	0x08010830

08009780 <NTC_DMA_ADC_Init>:
  3401, 3625, 3938, 4436, 5486, 6536
};


void NTC_DMA_ADC_Init(void)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	af00      	add	r7, sp, #0
    // Cấu hình DMA
    LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_0, LL_DMA_CHANNEL_0);
 8009784:	2200      	movs	r2, #0
 8009786:	2100      	movs	r1, #0
 8009788:	4823      	ldr	r0, [pc, #140]	@ (8009818 <NTC_DMA_ADC_Init+0x98>)
 800978a:	f7ff ffa5 	bl	80096d8 <LL_DMA_SetChannelSelection>
    LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_0, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800978e:	2200      	movs	r2, #0
 8009790:	2100      	movs	r1, #0
 8009792:	4821      	ldr	r0, [pc, #132]	@ (8009818 <NTC_DMA_ADC_Init+0x98>)
 8009794:	f7ff fea4 	bl	80094e0 <LL_DMA_SetDataTransferDirection>
    LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_PERIPH_NOINCREMENT);
 8009798:	2200      	movs	r2, #0
 800979a:	2100      	movs	r1, #0
 800979c:	481e      	ldr	r0, [pc, #120]	@ (8009818 <NTC_DMA_ADC_Init+0x98>)
 800979e:	f7ff fee7 	bl	8009570 <LL_DMA_SetPeriphIncMode>
    LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MEMORY_INCREMENT);
 80097a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80097a6:	2100      	movs	r1, #0
 80097a8:	481b      	ldr	r0, [pc, #108]	@ (8009818 <NTC_DMA_ADC_Init+0x98>)
 80097aa:	f7ff ff05 	bl	80095b8 <LL_DMA_SetMemoryIncMode>
    LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_0, LL_DMA_PDATAALIGN_HALFWORD);
 80097ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80097b2:	2100      	movs	r1, #0
 80097b4:	4818      	ldr	r0, [pc, #96]	@ (8009818 <NTC_DMA_ADC_Init+0x98>)
 80097b6:	f7ff ff23 	bl	8009600 <LL_DMA_SetPeriphSize>
    LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_0, LL_DMA_MDATAALIGN_HALFWORD);
 80097ba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80097be:	2100      	movs	r1, #0
 80097c0:	4815      	ldr	r0, [pc, #84]	@ (8009818 <NTC_DMA_ADC_Init+0x98>)
 80097c2:	f7ff ff41 	bl	8009648 <LL_DMA_SetMemorySize>
    LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_0, 8); // 8 kênh
 80097c6:	2208      	movs	r2, #8
 80097c8:	2100      	movs	r1, #0
 80097ca:	4813      	ldr	r0, [pc, #76]	@ (8009818 <NTC_DMA_ADC_Init+0x98>)
 80097cc:	f7ff ff60 	bl	8009690 <LL_DMA_SetDataLength>

    // Địa chỉ của ADC data register
    LL_DMA_SetPeriphAddress(DMA2, LL_DMA_STREAM_0, (uint32_t)&ADC1->DR);
 80097d0:	4a12      	ldr	r2, [pc, #72]	@ (800981c <NTC_DMA_ADC_Init+0x9c>)
 80097d2:	2100      	movs	r1, #0
 80097d4:	4810      	ldr	r0, [pc, #64]	@ (8009818 <NTC_DMA_ADC_Init+0x98>)
 80097d6:	f7ff ffbb 	bl	8009750 <LL_DMA_SetPeriphAddress>

    // Địa chỉ bộ nhớ DMA
    LL_DMA_SetMemoryAddress(DMA2, LL_DMA_STREAM_0, (uint32_t)NTC_ADC_value);
 80097da:	4b11      	ldr	r3, [pc, #68]	@ (8009820 <NTC_DMA_ADC_Init+0xa0>)
 80097dc:	461a      	mov	r2, r3
 80097de:	2100      	movs	r1, #0
 80097e0:	480d      	ldr	r0, [pc, #52]	@ (8009818 <NTC_DMA_ADC_Init+0x98>)
 80097e2:	f7ff ff9d 	bl	8009720 <LL_DMA_SetMemoryAddress>

    // Cấu hình DMA ở chế độ vòng lặp (Circular Mode)
    LL_DMA_SetMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MODE_CIRCULAR);
 80097e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80097ea:	2100      	movs	r1, #0
 80097ec:	480a      	ldr	r0, [pc, #40]	@ (8009818 <NTC_DMA_ADC_Init+0x98>)
 80097ee:	f7ff fe9b 	bl	8009528 <LL_DMA_SetMode>

    // Bật DMA stream
    LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_0);
 80097f2:	2100      	movs	r1, #0
 80097f4:	4808      	ldr	r0, [pc, #32]	@ (8009818 <NTC_DMA_ADC_Init+0x98>)
 80097f6:	f7ff fe53 	bl	80094a0 <LL_DMA_EnableStream>

    // Bật ADC
    LL_ADC_Enable(ADC1);
 80097fa:	480a      	ldr	r0, [pc, #40]	@ (8009824 <NTC_DMA_ADC_Init+0xa4>)
 80097fc:	f7ff fe1c 	bl	8009438 <LL_ADC_Enable>
    while (!LL_ADC_IsEnabled(ADC1));
 8009800:	bf00      	nop
 8009802:	4808      	ldr	r0, [pc, #32]	@ (8009824 <NTC_DMA_ADC_Init+0xa4>)
 8009804:	f7ff fe28 	bl	8009458 <LL_ADC_IsEnabled>
 8009808:	4603      	mov	r3, r0
 800980a:	2b00      	cmp	r3, #0
 800980c:	d0f9      	beq.n	8009802 <NTC_DMA_ADC_Init+0x82>

    // Bắt đầu chuyển đổi ADC
    LL_ADC_REG_StartConversionSWStart(ADC1);
 800980e:	4805      	ldr	r0, [pc, #20]	@ (8009824 <NTC_DMA_ADC_Init+0xa4>)
 8009810:	f7ff fe35 	bl	800947e <LL_ADC_REG_StartConversionSWStart>
}
 8009814:	bf00      	nop
 8009816:	bd80      	pop	{r7, pc}
 8009818:	40026400 	.word	0x40026400
 800981c:	4001204c 	.word	0x4001204c
 8009820:	20005b38 	.word	0x20005b38
 8009824:	40012000 	.word	0x40012000

08009828 <NTC_get_temperature>:

void NTC_get_temperature(int16_t* temp)
{
 8009828:	b480      	push	{r7}
 800982a:	b085      	sub	sp, #20
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < 8; i++)
 8009830:	2300      	movs	r3, #0
 8009832:	73fb      	strb	r3, [r7, #15]
 8009834:	e029      	b.n	800988a <NTC_get_temperature+0x62>
	{
		temp[i] = NTC_table[NTC_ADC_value[i]];
 8009836:	7bfb      	ldrb	r3, [r7, #15]
 8009838:	4a19      	ldr	r2, [pc, #100]	@ (80098a0 <NTC_get_temperature+0x78>)
 800983a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800983e:	461a      	mov	r2, r3
 8009840:	4b18      	ldr	r3, [pc, #96]	@ (80098a4 <NTC_get_temperature+0x7c>)
 8009842:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009846:	7bfb      	ldrb	r3, [r7, #15]
 8009848:	005b      	lsls	r3, r3, #1
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	4413      	add	r3, r2
 800984e:	b20a      	sxth	r2, r1
 8009850:	801a      	strh	r2, [r3, #0]
		if (temp[i] < -500 || temp[i] > 2000)  temp[i] = 0x7FFF;
 8009852:	7bfb      	ldrb	r3, [r7, #15]
 8009854:	005b      	lsls	r3, r3, #1
 8009856:	687a      	ldr	r2, [r7, #4]
 8009858:	4413      	add	r3, r2
 800985a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800985e:	f513 7ffa 	cmn.w	r3, #500	@ 0x1f4
 8009862:	db08      	blt.n	8009876 <NTC_get_temperature+0x4e>
 8009864:	7bfb      	ldrb	r3, [r7, #15]
 8009866:	005b      	lsls	r3, r3, #1
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	4413      	add	r3, r2
 800986c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009870:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8009874:	dd06      	ble.n	8009884 <NTC_get_temperature+0x5c>
 8009876:	7bfb      	ldrb	r3, [r7, #15]
 8009878:	005b      	lsls	r3, r3, #1
 800987a:	687a      	ldr	r2, [r7, #4]
 800987c:	4413      	add	r3, r2
 800987e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8009882:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < 8; i++)
 8009884:	7bfb      	ldrb	r3, [r7, #15]
 8009886:	3301      	adds	r3, #1
 8009888:	73fb      	strb	r3, [r7, #15]
 800988a:	7bfb      	ldrb	r3, [r7, #15]
 800988c:	2b07      	cmp	r3, #7
 800988e:	d9d2      	bls.n	8009836 <NTC_get_temperature+0xe>
	}
};
 8009890:	bf00      	nop
 8009892:	bf00      	nop
 8009894:	3714      	adds	r7, #20
 8009896:	46bd      	mov	sp, r7
 8009898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989c:	4770      	bx	lr
 800989e:	bf00      	nop
 80098a0:	20005b38 	.word	0x20005b38
 80098a4:	200001b0 	.word	0x200001b0

080098a8 <temperature_update>:
	 0,								// NTC_Ref			// is one NTC from 0 to 7
	 0,								// Temp_auto;			// ON/OFF
};

static void temperature_update(void)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b082      	sub	sp, #8
 80098ac:	af00      	add	r7, sp, #0
	if (s_Temperature_CurrentState.Temp_change_flag)
 80098ae:	4b28      	ldr	r3, [pc, #160]	@ (8009950 <temperature_update+0xa8>)
 80098b0:	785b      	ldrb	r3, [r3, #1]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d03c      	beq.n	8009930 <temperature_update+0x88>
	{
		uint8_t Tec_dir = 0;
 80098b6:	2300      	movs	r3, #0
 80098b8:	71bb      	strb	r3, [r7, #6]
		for (uint8_t channel = 0; channel < 4; channel ++)
 80098ba:	2300      	movs	r3, #0
 80098bc:	71fb      	strb	r3, [r7, #7]
 80098be:	e031      	b.n	8009924 <temperature_update+0x7c>
		{
			Tec_dir = ((s_Temperature_CurrentState.Tec_dir & (1 << channel)) == (1 << channel)) ? TEC_HEAT : TEC_COOL;
 80098c0:	4b23      	ldr	r3, [pc, #140]	@ (8009950 <temperature_update+0xa8>)
 80098c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80098c6:	4619      	mov	r1, r3
 80098c8:	79fb      	ldrb	r3, [r7, #7]
 80098ca:	2201      	movs	r2, #1
 80098cc:	fa02 f303 	lsl.w	r3, r2, r3
 80098d0:	ea01 0203 	and.w	r2, r1, r3
 80098d4:	79fb      	ldrb	r3, [r7, #7]
 80098d6:	2101      	movs	r1, #1
 80098d8:	fa01 f303 	lsl.w	r3, r1, r3
 80098dc:	429a      	cmp	r2, r3
 80098de:	bf0c      	ite	eq
 80098e0:	2301      	moveq	r3, #1
 80098e2:	2300      	movne	r3, #0
 80098e4:	b2db      	uxtb	r3, r3
 80098e6:	71bb      	strb	r3, [r7, #6]
			lt8722_set_output_voltage_channel(tec_table[channel], Tec_dir, s_Temperature_CurrentState.Tec_vol[channel]);
 80098e8:	79fb      	ldrb	r3, [r7, #7]
 80098ea:	4a1a      	ldr	r2, [pc, #104]	@ (8009954 <temperature_update+0xac>)
 80098ec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80098f0:	79fb      	ldrb	r3, [r7, #7]
 80098f2:	4a17      	ldr	r2, [pc, #92]	@ (8009950 <temperature_update+0xa8>)
 80098f4:	3301      	adds	r3, #1
 80098f6:	00db      	lsls	r3, r3, #3
 80098f8:	4413      	add	r3, r2
 80098fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098fe:	79b9      	ldrb	r1, [r7, #6]
 8009900:	f7ff fc6e 	bl	80091e0 <lt8722_set_output_voltage_channel>
			heater_set_duty_pwm_channel(channel, s_Temperature_CurrentState.Heater_duty[channel]);
 8009904:	79fb      	ldrb	r3, [r7, #7]
 8009906:	4a12      	ldr	r2, [pc, #72]	@ (8009950 <temperature_update+0xa8>)
 8009908:	3314      	adds	r3, #20
 800990a:	005b      	lsls	r3, r3, #1
 800990c:	4413      	add	r3, r2
 800990e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009912:	b29a      	uxth	r2, r3
 8009914:	79fb      	ldrb	r3, [r7, #7]
 8009916:	4611      	mov	r1, r2
 8009918:	4618      	mov	r0, r3
 800991a:	f7ff f8cf 	bl	8008abc <heater_set_duty_pwm_channel>
		for (uint8_t channel = 0; channel < 4; channel ++)
 800991e:	79fb      	ldrb	r3, [r7, #7]
 8009920:	3301      	adds	r3, #1
 8009922:	71fb      	strb	r3, [r7, #7]
 8009924:	79fb      	ldrb	r3, [r7, #7]
 8009926:	2b03      	cmp	r3, #3
 8009928:	d9ca      	bls.n	80098c0 <temperature_update+0x18>
		}
		s_Temperature_CurrentState.Temp_change_flag = 0;
 800992a:	4b09      	ldr	r3, [pc, #36]	@ (8009950 <temperature_update+0xa8>)
 800992c:	2200      	movs	r2, #0
 800992e:	705a      	strb	r2, [r3, #1]
	}
	NTC_get_temperature(s_Temperature_CurrentState.NTC_temp);
 8009930:	4809      	ldr	r0, [pc, #36]	@ (8009958 <temperature_update+0xb0>)
 8009932:	f7ff ff79 	bl	8009828 <NTC_get_temperature>

	if (s_Temperature_CurrentState.Temp_auto) {
 8009936:	4b06      	ldr	r3, [pc, #24]	@ (8009950 <temperature_update+0xa8>)
 8009938:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800993c:	2b00      	cmp	r3, #0
 800993e:	d003      	beq.n	8009948 <temperature_update+0xa0>
		temperature_auto_TEC();
 8009940:	f000 f80c 	bl	800995c <temperature_auto_TEC>
		temperature_auto_HTR();
 8009944:	f000 f8b0 	bl	8009aa8 <temperature_auto_HTR>
	}
}
 8009948:	bf00      	nop
 800994a:	3708      	adds	r7, #8
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}
 8009950:	200041c8 	.word	0x200041c8
 8009954:	200000c8 	.word	0x200000c8
 8009958:	200041fa 	.word	0x200041fa

0800995c <temperature_auto_TEC>:

void temperature_auto_TEC(void) {
 800995c:	b580      	push	{r7, lr}
 800995e:	af00      	add	r7, sp, #0
	if (s_Temperature_CurrentState.NTC_temp[s_Temperature_CurrentState.NTC_Ref] > s_Temperature_CurrentState.Temp_Ref + s_Temperature_CurrentState.High_Threshold) {
 8009960:	4b4c      	ldr	r3, [pc, #304]	@ (8009a94 <temperature_auto_TEC+0x138>)
 8009962:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009966:	4a4b      	ldr	r2, [pc, #300]	@ (8009a94 <temperature_auto_TEC+0x138>)
 8009968:	3318      	adds	r3, #24
 800996a:	005b      	lsls	r3, r3, #1
 800996c:	4413      	add	r3, r2
 800996e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009972:	461a      	mov	r2, r3
 8009974:	4b47      	ldr	r3, [pc, #284]	@ (8009a94 <temperature_auto_TEC+0x138>)
 8009976:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800997a:	4619      	mov	r1, r3
 800997c:	4b45      	ldr	r3, [pc, #276]	@ (8009a94 <temperature_auto_TEC+0x138>)
 800997e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009982:	440b      	add	r3, r1
 8009984:	429a      	cmp	r2, r3
 8009986:	f340 8082 	ble.w	8009a8e <temperature_auto_TEC+0x132>
		heater_set_duty_pwm_channel(0, 0);
 800998a:	2100      	movs	r1, #0
 800998c:	2000      	movs	r0, #0
 800998e:	f7ff f895 	bl	8008abc <heater_set_duty_pwm_channel>
		heater_set_duty_pwm_channel(1, 0);
 8009992:	2100      	movs	r1, #0
 8009994:	2001      	movs	r0, #1
 8009996:	f7ff f891 	bl	8008abc <heater_set_duty_pwm_channel>
		heater_set_duty_pwm_channel(2, 0);
 800999a:	2100      	movs	r1, #0
 800999c:	2002      	movs	r0, #2
 800999e:	f7ff f88d 	bl	8008abc <heater_set_duty_pwm_channel>
		heater_set_duty_pwm_channel(3, 0);
 80099a2:	2100      	movs	r1, #0
 80099a4:	2003      	movs	r0, #3
 80099a6:	f7ff f889 	bl	8008abc <heater_set_duty_pwm_channel>
		if ((s_Temperature_CurrentState.Tec_Heater_status >> TEC0_EN) & 0x01) {
 80099aa:	4b3a      	ldr	r3, [pc, #232]	@ (8009a94 <temperature_auto_TEC+0x138>)
 80099ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80099b0:	f003 0301 	and.w	r3, r3, #1
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d013      	beq.n	80099e0 <temperature_auto_TEC+0x84>
			s_Temperature_CurrentState.Tec_dir &= ~(1 << TEC0_EN);
 80099b8:	4b36      	ldr	r3, [pc, #216]	@ (8009a94 <temperature_auto_TEC+0x138>)
 80099ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099be:	f023 0301 	bic.w	r3, r3, #1
 80099c2:	b2da      	uxtb	r2, r3
 80099c4:	4b33      	ldr	r3, [pc, #204]	@ (8009a94 <temperature_auto_TEC+0x138>)
 80099c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			lt8722_set_output_voltage_channel(&tec_0, TEC_COOL, s_Temperature_CurrentState.Tec_vol[0]);
 80099ca:	4b32      	ldr	r3, [pc, #200]	@ (8009a94 <temperature_auto_TEC+0x138>)
 80099cc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80099d0:	2100      	movs	r1, #0
 80099d2:	4831      	ldr	r0, [pc, #196]	@ (8009a98 <temperature_auto_TEC+0x13c>)
 80099d4:	f7ff fc04 	bl	80091e0 <lt8722_set_output_voltage_channel>
			lt8722_set_swen_req(&tec_0, LT8722_SWEN_REQ_ENABLED);
 80099d8:	2101      	movs	r1, #1
 80099da:	482f      	ldr	r0, [pc, #188]	@ (8009a98 <temperature_auto_TEC+0x13c>)
 80099dc:	f7ff faec 	bl	8008fb8 <lt8722_set_swen_req>
		}
		if ((s_Temperature_CurrentState.Tec_Heater_status >> TEC1_EN) & 0x01) {
 80099e0:	4b2c      	ldr	r3, [pc, #176]	@ (8009a94 <temperature_auto_TEC+0x138>)
 80099e2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80099e6:	085b      	lsrs	r3, r3, #1
 80099e8:	b2db      	uxtb	r3, r3
 80099ea:	f003 0301 	and.w	r3, r3, #1
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d013      	beq.n	8009a1a <temperature_auto_TEC+0xbe>
			s_Temperature_CurrentState.Tec_dir &= ~(1 << TEC1_EN);
 80099f2:	4b28      	ldr	r3, [pc, #160]	@ (8009a94 <temperature_auto_TEC+0x138>)
 80099f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099f8:	f023 0302 	bic.w	r3, r3, #2
 80099fc:	b2da      	uxtb	r2, r3
 80099fe:	4b25      	ldr	r3, [pc, #148]	@ (8009a94 <temperature_auto_TEC+0x138>)
 8009a00:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			lt8722_set_output_voltage_channel(&tec_1, TEC_COOL, s_Temperature_CurrentState.Tec_vol[1]);
 8009a04:	4b23      	ldr	r3, [pc, #140]	@ (8009a94 <temperature_auto_TEC+0x138>)
 8009a06:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8009a0a:	2100      	movs	r1, #0
 8009a0c:	4823      	ldr	r0, [pc, #140]	@ (8009a9c <temperature_auto_TEC+0x140>)
 8009a0e:	f7ff fbe7 	bl	80091e0 <lt8722_set_output_voltage_channel>
			lt8722_set_swen_req(&tec_1, LT8722_SWEN_REQ_ENABLED);
 8009a12:	2101      	movs	r1, #1
 8009a14:	4821      	ldr	r0, [pc, #132]	@ (8009a9c <temperature_auto_TEC+0x140>)
 8009a16:	f7ff facf 	bl	8008fb8 <lt8722_set_swen_req>
		}
		if ((s_Temperature_CurrentState.Tec_Heater_status >> TEC2_EN) & 0x01) {
 8009a1a:	4b1e      	ldr	r3, [pc, #120]	@ (8009a94 <temperature_auto_TEC+0x138>)
 8009a1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009a20:	089b      	lsrs	r3, r3, #2
 8009a22:	b2db      	uxtb	r3, r3
 8009a24:	f003 0301 	and.w	r3, r3, #1
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d013      	beq.n	8009a54 <temperature_auto_TEC+0xf8>
			s_Temperature_CurrentState.Tec_dir &= ~(1 << TEC2_EN);
 8009a2c:	4b19      	ldr	r3, [pc, #100]	@ (8009a94 <temperature_auto_TEC+0x138>)
 8009a2e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a32:	f023 0304 	bic.w	r3, r3, #4
 8009a36:	b2da      	uxtb	r2, r3
 8009a38:	4b16      	ldr	r3, [pc, #88]	@ (8009a94 <temperature_auto_TEC+0x138>)
 8009a3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			lt8722_set_output_voltage_channel(&tec_2, TEC_COOL, s_Temperature_CurrentState.Tec_vol[2]);
 8009a3e:	4b15      	ldr	r3, [pc, #84]	@ (8009a94 <temperature_auto_TEC+0x138>)
 8009a40:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8009a44:	2100      	movs	r1, #0
 8009a46:	4816      	ldr	r0, [pc, #88]	@ (8009aa0 <temperature_auto_TEC+0x144>)
 8009a48:	f7ff fbca 	bl	80091e0 <lt8722_set_output_voltage_channel>
			lt8722_set_swen_req(&tec_2, LT8722_SWEN_REQ_ENABLED);
 8009a4c:	2101      	movs	r1, #1
 8009a4e:	4814      	ldr	r0, [pc, #80]	@ (8009aa0 <temperature_auto_TEC+0x144>)
 8009a50:	f7ff fab2 	bl	8008fb8 <lt8722_set_swen_req>
		}
		if ((s_Temperature_CurrentState.Tec_Heater_status >> TEC3_EN) & 0x01) {
 8009a54:	4b0f      	ldr	r3, [pc, #60]	@ (8009a94 <temperature_auto_TEC+0x138>)
 8009a56:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009a5a:	08db      	lsrs	r3, r3, #3
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	f003 0301 	and.w	r3, r3, #1
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d013      	beq.n	8009a8e <temperature_auto_TEC+0x132>
			s_Temperature_CurrentState.Tec_dir &= ~(1 << TEC3_EN);
 8009a66:	4b0b      	ldr	r3, [pc, #44]	@ (8009a94 <temperature_auto_TEC+0x138>)
 8009a68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a6c:	f023 0308 	bic.w	r3, r3, #8
 8009a70:	b2da      	uxtb	r2, r3
 8009a72:	4b08      	ldr	r3, [pc, #32]	@ (8009a94 <temperature_auto_TEC+0x138>)
 8009a74:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			lt8722_set_output_voltage_channel(&tec_3, TEC_COOL, s_Temperature_CurrentState.Tec_vol[3]);
 8009a78:	4b06      	ldr	r3, [pc, #24]	@ (8009a94 <temperature_auto_TEC+0x138>)
 8009a7a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009a7e:	2100      	movs	r1, #0
 8009a80:	4808      	ldr	r0, [pc, #32]	@ (8009aa4 <temperature_auto_TEC+0x148>)
 8009a82:	f7ff fbad 	bl	80091e0 <lt8722_set_output_voltage_channel>
			lt8722_set_swen_req(&tec_3, LT8722_SWEN_REQ_ENABLED);
 8009a86:	2101      	movs	r1, #1
 8009a88:	4806      	ldr	r0, [pc, #24]	@ (8009aa4 <temperature_auto_TEC+0x148>)
 8009a8a:	f7ff fa95 	bl	8008fb8 <lt8722_set_swen_req>
		}
	}
}
 8009a8e:	bf00      	nop
 8009a90:	bd80      	pop	{r7, pc}
 8009a92:	bf00      	nop
 8009a94:	200041c8 	.word	0x200041c8
 8009a98:	20000048 	.word	0x20000048
 8009a9c:	20000068 	.word	0x20000068
 8009aa0:	20000088 	.word	0x20000088
 8009aa4:	200000a8 	.word	0x200000a8

08009aa8 <temperature_auto_HTR>:
void temperature_auto_HTR(void) {
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	af00      	add	r7, sp, #0
	if (s_Temperature_CurrentState.NTC_temp[s_Temperature_CurrentState.NTC_Ref] < s_Temperature_CurrentState.Temp_Ref + s_Temperature_CurrentState.Low_Threshold) {
 8009aac:	4b34      	ldr	r3, [pc, #208]	@ (8009b80 <temperature_auto_HTR+0xd8>)
 8009aae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009ab2:	4a33      	ldr	r2, [pc, #204]	@ (8009b80 <temperature_auto_HTR+0xd8>)
 8009ab4:	3318      	adds	r3, #24
 8009ab6:	005b      	lsls	r3, r3, #1
 8009ab8:	4413      	add	r3, r2
 8009aba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009abe:	461a      	mov	r2, r3
 8009ac0:	4b2f      	ldr	r3, [pc, #188]	@ (8009b80 <temperature_auto_HTR+0xd8>)
 8009ac2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009ac6:	4619      	mov	r1, r3
 8009ac8:	4b2d      	ldr	r3, [pc, #180]	@ (8009b80 <temperature_auto_HTR+0xd8>)
 8009aca:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009ace:	440b      	add	r3, r1
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	da53      	bge.n	8009b7c <temperature_auto_HTR+0xd4>
		lt8722_set_swen_req(&tec_0, LT8722_SWEN_REQ_DISABLED);
 8009ad4:	2100      	movs	r1, #0
 8009ad6:	482b      	ldr	r0, [pc, #172]	@ (8009b84 <temperature_auto_HTR+0xdc>)
 8009ad8:	f7ff fa6e 	bl	8008fb8 <lt8722_set_swen_req>
		lt8722_set_swen_req(&tec_1, LT8722_SWEN_REQ_DISABLED);
 8009adc:	2100      	movs	r1, #0
 8009ade:	482a      	ldr	r0, [pc, #168]	@ (8009b88 <temperature_auto_HTR+0xe0>)
 8009ae0:	f7ff fa6a 	bl	8008fb8 <lt8722_set_swen_req>
		lt8722_set_swen_req(&tec_2, LT8722_SWEN_REQ_DISABLED);
 8009ae4:	2100      	movs	r1, #0
 8009ae6:	4829      	ldr	r0, [pc, #164]	@ (8009b8c <temperature_auto_HTR+0xe4>)
 8009ae8:	f7ff fa66 	bl	8008fb8 <lt8722_set_swen_req>
		lt8722_set_swen_req(&tec_3, LT8722_SWEN_REQ_DISABLED);
 8009aec:	2100      	movs	r1, #0
 8009aee:	4828      	ldr	r0, [pc, #160]	@ (8009b90 <temperature_auto_HTR+0xe8>)
 8009af0:	f7ff fa62 	bl	8008fb8 <lt8722_set_swen_req>
		if ((s_Temperature_CurrentState.Tec_Heater_status >> HEATER0_EN) & 0x01)
 8009af4:	4b22      	ldr	r3, [pc, #136]	@ (8009b80 <temperature_auto_HTR+0xd8>)
 8009af6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009afa:	091b      	lsrs	r3, r3, #4
 8009afc:	b2db      	uxtb	r3, r3
 8009afe:	f003 0301 	and.w	r3, r3, #1
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d007      	beq.n	8009b16 <temperature_auto_HTR+0x6e>
			heater_set_duty_pwm_channel(0, s_Temperature_CurrentState.Heater_duty[0]);
 8009b06:	4b1e      	ldr	r3, [pc, #120]	@ (8009b80 <temperature_auto_HTR+0xd8>)
 8009b08:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8009b0c:	b29b      	uxth	r3, r3
 8009b0e:	4619      	mov	r1, r3
 8009b10:	2000      	movs	r0, #0
 8009b12:	f7fe ffd3 	bl	8008abc <heater_set_duty_pwm_channel>
		if ((s_Temperature_CurrentState.Tec_Heater_status >> HEATER1_EN) & 0x01)
 8009b16:	4b1a      	ldr	r3, [pc, #104]	@ (8009b80 <temperature_auto_HTR+0xd8>)
 8009b18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009b1c:	095b      	lsrs	r3, r3, #5
 8009b1e:	b2db      	uxtb	r3, r3
 8009b20:	f003 0301 	and.w	r3, r3, #1
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d007      	beq.n	8009b38 <temperature_auto_HTR+0x90>
			heater_set_duty_pwm_channel(1, s_Temperature_CurrentState.Heater_duty[1]);
 8009b28:	4b15      	ldr	r3, [pc, #84]	@ (8009b80 <temperature_auto_HTR+0xd8>)
 8009b2a:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8009b2e:	b29b      	uxth	r3, r3
 8009b30:	4619      	mov	r1, r3
 8009b32:	2001      	movs	r0, #1
 8009b34:	f7fe ffc2 	bl	8008abc <heater_set_duty_pwm_channel>
		if ((s_Temperature_CurrentState.Tec_Heater_status >> HEATER2_EN) & 0x01)
 8009b38:	4b11      	ldr	r3, [pc, #68]	@ (8009b80 <temperature_auto_HTR+0xd8>)
 8009b3a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009b3e:	099b      	lsrs	r3, r3, #6
 8009b40:	b2db      	uxtb	r3, r3
 8009b42:	f003 0301 	and.w	r3, r3, #1
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d007      	beq.n	8009b5a <temperature_auto_HTR+0xb2>
			heater_set_duty_pwm_channel(2, s_Temperature_CurrentState.Heater_duty[2]);
 8009b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8009b80 <temperature_auto_HTR+0xd8>)
 8009b4c:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8009b50:	b29b      	uxth	r3, r3
 8009b52:	4619      	mov	r1, r3
 8009b54:	2002      	movs	r0, #2
 8009b56:	f7fe ffb1 	bl	8008abc <heater_set_duty_pwm_channel>
		if ((s_Temperature_CurrentState.Tec_Heater_status >> HEATER3_EN) & 0x01)
 8009b5a:	4b09      	ldr	r3, [pc, #36]	@ (8009b80 <temperature_auto_HTR+0xd8>)
 8009b5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009b60:	09db      	lsrs	r3, r3, #7
 8009b62:	b2db      	uxtb	r3, r3
 8009b64:	f003 0301 	and.w	r3, r3, #1
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d007      	beq.n	8009b7c <temperature_auto_HTR+0xd4>
			heater_set_duty_pwm_channel(3, s_Temperature_CurrentState.Heater_duty[3]);
 8009b6c:	4b04      	ldr	r3, [pc, #16]	@ (8009b80 <temperature_auto_HTR+0xd8>)
 8009b6e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8009b72:	b29b      	uxth	r3, r3
 8009b74:	4619      	mov	r1, r3
 8009b76:	2003      	movs	r0, #3
 8009b78:	f7fe ffa0 	bl	8008abc <heater_set_duty_pwm_channel>
	}
}
 8009b7c:	bf00      	nop
 8009b7e:	bd80      	pop	{r7, pc}
 8009b80:	200041c8 	.word	0x200041c8
 8009b84:	20000048 	.word	0x20000048
 8009b88:	20000068 	.word	0x20000068
 8009b8c:	20000088 	.word	0x20000088
 8009b90:	200000a8 	.word	0x200000a8

08009b94 <Temperature_GetSet_CreateTask>:
{
	return;
}

void Temperature_GetSet_CreateTask(void)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&temp_task_context.taskHandle, &temp_task_context.taskProperty);
 8009b98:	4902      	ldr	r1, [pc, #8]	@ (8009ba4 <Temperature_GetSet_CreateTask+0x10>)
 8009b9a:	4803      	ldr	r0, [pc, #12]	@ (8009ba8 <Temperature_GetSet_CreateTask+0x14>)
 8009b9c:	f002 fdf2 	bl	800c784 <SCH_TASK_CreateTask>
	return;
 8009ba0:	bf00      	nop
}
 8009ba2:	bd80      	pop	{r7, pc}
 8009ba4:	200041b4 	.word	0x200041b4
 8009ba8:	200041b0 	.word	0x200041b0

08009bac <temperature_set_setpoint>:

void temperature_set_setpoint(int16_t setpoint)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b083      	sub	sp, #12
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	80fb      	strh	r3, [r7, #6]
	s_Temperature_CurrentState.Temp_Ref = setpoint;
 8009bb6:	4a04      	ldr	r2, [pc, #16]	@ (8009bc8 <temperature_set_setpoint+0x1c>)
 8009bb8:	88fb      	ldrh	r3, [r7, #6]
 8009bba:	8053      	strh	r3, [r2, #2]
	return;
 8009bbc:	bf00      	nop
}
 8009bbe:	370c      	adds	r7, #12
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr
 8009bc8:	200041c8 	.word	0x200041c8

08009bcc <temperature_get_setpoint>:

int16_t temperature_get_setpoint()
{
 8009bcc:	b480      	push	{r7}
 8009bce:	af00      	add	r7, sp, #0
	return s_Temperature_CurrentState.Temp_Ref;
 8009bd0:	4b03      	ldr	r3, [pc, #12]	@ (8009be0 <temperature_get_setpoint+0x14>)
 8009bd2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr
 8009be0:	200041c8 	.word	0x200041c8

08009be4 <temperature_set_tec_vol>:
{
	return s_Temperature_CurrentState.NTC_temp[channel];
}

void temperature_set_tec_vol(uint8_t channel, uint16_t voltage)
{
 8009be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be8:	b087      	sub	sp, #28
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	4603      	mov	r3, r0
 8009bee:	460a      	mov	r2, r1
 8009bf0:	75fb      	strb	r3, [r7, #23]
 8009bf2:	4613      	mov	r3, r2
 8009bf4:	82bb      	strh	r3, [r7, #20]
	s_Temperature_CurrentState.Temp_change_flag = 1;
 8009bf6:	4b2c      	ldr	r3, [pc, #176]	@ (8009ca8 <temperature_set_tec_vol+0xc4>)
 8009bf8:	2201      	movs	r2, #1
 8009bfa:	705a      	strb	r2, [r3, #1]
	if (voltage > 3000) voltage = 3000;
 8009bfc:	8abb      	ldrh	r3, [r7, #20]
 8009bfe:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d902      	bls.n	8009c0c <temperature_set_tec_vol+0x28>
 8009c06:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8009c0a:	82bb      	strh	r3, [r7, #20]
	s_Temperature_CurrentState.Tec_vol[channel] = (int64_t)voltage*1000000;
 8009c0c:	8abb      	ldrh	r3, [r7, #20]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	469a      	mov	sl, r3
 8009c12:	4693      	mov	fp, r2
 8009c14:	7dfe      	ldrb	r6, [r7, #23]
 8009c16:	4652      	mov	r2, sl
 8009c18:	465b      	mov	r3, fp
 8009c1a:	f04f 0000 	mov.w	r0, #0
 8009c1e:	f04f 0100 	mov.w	r1, #0
 8009c22:	0159      	lsls	r1, r3, #5
 8009c24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009c28:	0150      	lsls	r0, r2, #5
 8009c2a:	4602      	mov	r2, r0
 8009c2c:	460b      	mov	r3, r1
 8009c2e:	ebb2 040a 	subs.w	r4, r2, sl
 8009c32:	eb63 050b 	sbc.w	r5, r3, fp
 8009c36:	f04f 0200 	mov.w	r2, #0
 8009c3a:	f04f 0300 	mov.w	r3, #0
 8009c3e:	026b      	lsls	r3, r5, #9
 8009c40:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8009c44:	0262      	lsls	r2, r4, #9
 8009c46:	4614      	mov	r4, r2
 8009c48:	461d      	mov	r5, r3
 8009c4a:	eb14 080a 	adds.w	r8, r4, sl
 8009c4e:	eb45 090b 	adc.w	r9, r5, fp
 8009c52:	f04f 0200 	mov.w	r2, #0
 8009c56:	f04f 0300 	mov.w	r3, #0
 8009c5a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8009c5e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8009c62:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8009c66:	ebb2 0108 	subs.w	r1, r2, r8
 8009c6a:	6039      	str	r1, [r7, #0]
 8009c6c:	eb63 0309 	sbc.w	r3, r3, r9
 8009c70:	607b      	str	r3, [r7, #4]
 8009c72:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009c76:	460b      	mov	r3, r1
 8009c78:	eb13 030a 	adds.w	r3, r3, sl
 8009c7c:	60bb      	str	r3, [r7, #8]
 8009c7e:	4613      	mov	r3, r2
 8009c80:	eb43 030b 	adc.w	r3, r3, fp
 8009c84:	60fb      	str	r3, [r7, #12]
 8009c86:	4a08      	ldr	r2, [pc, #32]	@ (8009ca8 <temperature_set_tec_vol+0xc4>)
 8009c88:	1c73      	adds	r3, r6, #1
 8009c8a:	00db      	lsls	r3, r3, #3
 8009c8c:	4413      	add	r3, r2
 8009c8e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009c92:	e9c3 1200 	strd	r1, r2, [r3]
	LL_mDelay(1);
 8009c96:	2001      	movs	r0, #1
 8009c98:	f002 fce8 	bl	800c66c <LL_mDelay>
}
 8009c9c:	bf00      	nop
 8009c9e:	371c      	adds	r7, #28
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ca6:	bf00      	nop
 8009ca8:	200041c8 	.word	0x200041c8

08009cac <temperature_get_tec_vol_set>:

uint16_t temperature_get_tec_vol_set(uint8_t channel)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b082      	sub	sp, #8
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	71fb      	strb	r3, [r7, #7]
	return (s_Temperature_CurrentState.Tec_vol[channel]/1000000);
 8009cb6:	79fb      	ldrb	r3, [r7, #7]
 8009cb8:	4a08      	ldr	r2, [pc, #32]	@ (8009cdc <temperature_get_tec_vol_set+0x30>)
 8009cba:	3301      	adds	r3, #1
 8009cbc:	00db      	lsls	r3, r3, #3
 8009cbe:	4413      	add	r3, r2
 8009cc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009cc4:	4a06      	ldr	r2, [pc, #24]	@ (8009ce0 <temperature_get_tec_vol_set+0x34>)
 8009cc6:	f04f 0300 	mov.w	r3, #0
 8009cca:	f7f7 f88b 	bl	8000de4 <__aeabi_ldivmod>
 8009cce:	4602      	mov	r2, r0
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	b293      	uxth	r3, r2
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3708      	adds	r7, #8
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}
 8009cdc:	200041c8 	.word	0x200041c8
 8009ce0:	000f4240 	.word	0x000f4240

08009ce4 <temperature_get_tec_vol_adc>:

uint16_t temperature_get_tec_vol_adc(uint8_t channel)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b082      	sub	sp, #8
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	4603      	mov	r3, r0
 8009cec:	71fb      	strb	r3, [r7, #7]
	return (s_Temperature_CurrentState.Tec_vol[channel]/1000000);
 8009cee:	79fb      	ldrb	r3, [r7, #7]
 8009cf0:	4a08      	ldr	r2, [pc, #32]	@ (8009d14 <temperature_get_tec_vol_adc+0x30>)
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	00db      	lsls	r3, r3, #3
 8009cf6:	4413      	add	r3, r2
 8009cf8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009cfc:	4a06      	ldr	r2, [pc, #24]	@ (8009d18 <temperature_get_tec_vol_adc+0x34>)
 8009cfe:	f04f 0300 	mov.w	r3, #0
 8009d02:	f7f7 f86f 	bl	8000de4 <__aeabi_ldivmod>
 8009d06:	4602      	mov	r2, r0
 8009d08:	460b      	mov	r3, r1
 8009d0a:	b293      	uxth	r3, r2
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3708      	adds	r7, #8
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}
 8009d14:	200041c8 	.word	0x200041c8
 8009d18:	000f4240 	.word	0x000f4240

08009d1c <temperature_set_heater_duty>:

void temperature_set_heater_duty(uint8_t channel, uint8_t duty)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b083      	sub	sp, #12
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	4603      	mov	r3, r0
 8009d24:	460a      	mov	r2, r1
 8009d26:	71fb      	strb	r3, [r7, #7]
 8009d28:	4613      	mov	r3, r2
 8009d2a:	71bb      	strb	r3, [r7, #6]
	s_Temperature_CurrentState.Temp_change_flag = 1;
 8009d2c:	4b0e      	ldr	r3, [pc, #56]	@ (8009d68 <temperature_set_heater_duty+0x4c>)
 8009d2e:	2201      	movs	r2, #1
 8009d30:	705a      	strb	r2, [r3, #1]
    if (duty > 100) duty = 100;
 8009d32:	79bb      	ldrb	r3, [r7, #6]
 8009d34:	2b64      	cmp	r3, #100	@ 0x64
 8009d36:	d901      	bls.n	8009d3c <temperature_set_heater_duty+0x20>
 8009d38:	2364      	movs	r3, #100	@ 0x64
 8009d3a:	71bb      	strb	r3, [r7, #6]
	s_Temperature_CurrentState.Heater_duty[channel] = duty*10;
 8009d3c:	79bb      	ldrb	r3, [r7, #6]
 8009d3e:	b29b      	uxth	r3, r3
 8009d40:	461a      	mov	r2, r3
 8009d42:	0092      	lsls	r2, r2, #2
 8009d44:	4413      	add	r3, r2
 8009d46:	005b      	lsls	r3, r3, #1
 8009d48:	b29a      	uxth	r2, r3
 8009d4a:	79fb      	ldrb	r3, [r7, #7]
 8009d4c:	b211      	sxth	r1, r2
 8009d4e:	4a06      	ldr	r2, [pc, #24]	@ (8009d68 <temperature_set_heater_duty+0x4c>)
 8009d50:	3314      	adds	r3, #20
 8009d52:	005b      	lsls	r3, r3, #1
 8009d54:	4413      	add	r3, r2
 8009d56:	460a      	mov	r2, r1
 8009d58:	805a      	strh	r2, [r3, #2]
}
 8009d5a:	bf00      	nop
 8009d5c:	370c      	adds	r7, #12
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr
 8009d66:	bf00      	nop
 8009d68:	200041c8 	.word	0x200041c8

08009d6c <temperature_get_heater_duty>:
uint8_t temperature_get_heater_duty(uint8_t channel)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b083      	sub	sp, #12
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	4603      	mov	r3, r0
 8009d74:	71fb      	strb	r3, [r7, #7]
	return (s_Temperature_CurrentState.Heater_duty[channel]/10);
 8009d76:	79fb      	ldrb	r3, [r7, #7]
 8009d78:	4a09      	ldr	r2, [pc, #36]	@ (8009da0 <temperature_get_heater_duty+0x34>)
 8009d7a:	3314      	adds	r3, #20
 8009d7c:	005b      	lsls	r3, r3, #1
 8009d7e:	4413      	add	r3, r2
 8009d80:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009d84:	4a07      	ldr	r2, [pc, #28]	@ (8009da4 <temperature_get_heater_duty+0x38>)
 8009d86:	fb82 1203 	smull	r1, r2, r2, r3
 8009d8a:	1092      	asrs	r2, r2, #2
 8009d8c:	17db      	asrs	r3, r3, #31
 8009d8e:	1ad3      	subs	r3, r2, r3
 8009d90:	b21b      	sxth	r3, r3
 8009d92:	b2db      	uxtb	r3, r3
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	370c      	adds	r7, #12
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr
 8009da0:	200041c8 	.word	0x200041c8
 8009da4:	66666667 	.word	0x66666667

08009da8 <temperature_set_tec_dir>:

void temperature_set_tec_dir(tec_dir_t dir_0, tec_dir_t dir_1, tec_dir_t dir_2, tec_dir_t dir_3)
{
 8009da8:	b490      	push	{r4, r7}
 8009daa:	b082      	sub	sp, #8
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	4604      	mov	r4, r0
 8009db0:	4608      	mov	r0, r1
 8009db2:	4611      	mov	r1, r2
 8009db4:	461a      	mov	r2, r3
 8009db6:	4623      	mov	r3, r4
 8009db8:	71fb      	strb	r3, [r7, #7]
 8009dba:	4603      	mov	r3, r0
 8009dbc:	71bb      	strb	r3, [r7, #6]
 8009dbe:	460b      	mov	r3, r1
 8009dc0:	717b      	strb	r3, [r7, #5]
 8009dc2:	4613      	mov	r3, r2
 8009dc4:	713b      	strb	r3, [r7, #4]
    s_Temperature_CurrentState.Temp_change_flag = 1;
 8009dc6:	4b10      	ldr	r3, [pc, #64]	@ (8009e08 <temperature_set_tec_dir+0x60>)
 8009dc8:	2201      	movs	r2, #1
 8009dca:	705a      	strb	r2, [r3, #1]
    s_Temperature_CurrentState.Tec_dir = (dir_0 << TEC0_DIR) | (dir_1 << TEC1_DIR) | (dir_2 << TEC2_DIR) | (dir_3 << TEC3_DIR);
 8009dcc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009dd0:	005b      	lsls	r3, r3, #1
 8009dd2:	b25a      	sxtb	r2, r3
 8009dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009dd8:	4313      	orrs	r3, r2
 8009dda:	b25a      	sxtb	r2, r3
 8009ddc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8009de0:	009b      	lsls	r3, r3, #2
 8009de2:	b25b      	sxtb	r3, r3
 8009de4:	4313      	orrs	r3, r2
 8009de6:	b25a      	sxtb	r2, r3
 8009de8:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8009dec:	00db      	lsls	r3, r3, #3
 8009dee:	b25b      	sxtb	r3, r3
 8009df0:	4313      	orrs	r3, r2
 8009df2:	b25b      	sxtb	r3, r3
 8009df4:	b2da      	uxtb	r2, r3
 8009df6:	4b04      	ldr	r3, [pc, #16]	@ (8009e08 <temperature_set_tec_dir+0x60>)
 8009df8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    return;
 8009dfc:	bf00      	nop
}
 8009dfe:	3708      	adds	r7, #8
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bc90      	pop	{r4, r7}
 8009e04:	4770      	bx	lr
 8009e06:	bf00      	nop
 8009e08:	200041c8 	.word	0x200041c8

08009e0c <temperature_get_tec_dir>:

void temperature_get_tec_dir(tec_dir_t *dir_0, tec_dir_t *dir_1, tec_dir_t *dir_2, tec_dir_t *dir_3)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b087      	sub	sp, #28
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	60f8      	str	r0, [r7, #12]
 8009e14:	60b9      	str	r1, [r7, #8]
 8009e16:	607a      	str	r2, [r7, #4]
 8009e18:	603b      	str	r3, [r7, #0]
	uint8_t dir = s_Temperature_CurrentState.Tec_dir;
 8009e1a:	4b14      	ldr	r3, [pc, #80]	@ (8009e6c <temperature_get_tec_dir+0x60>)
 8009e1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e20:	75fb      	strb	r3, [r7, #23]
    *dir_0 = (tec_dir_t)((dir >> TEC0_DIR) & 0x01);
 8009e22:	7dfb      	ldrb	r3, [r7, #23]
 8009e24:	f003 0301 	and.w	r3, r3, #1
 8009e28:	b2da      	uxtb	r2, r3
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	701a      	strb	r2, [r3, #0]
    *dir_1 = (tec_dir_t)((dir >> TEC1_DIR) & 0x01);
 8009e2e:	7dfb      	ldrb	r3, [r7, #23]
 8009e30:	085b      	lsrs	r3, r3, #1
 8009e32:	b2db      	uxtb	r3, r3
 8009e34:	f003 0301 	and.w	r3, r3, #1
 8009e38:	b2da      	uxtb	r2, r3
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	701a      	strb	r2, [r3, #0]
    *dir_2 = (tec_dir_t)((dir >> TEC2_DIR) & 0x01);
 8009e3e:	7dfb      	ldrb	r3, [r7, #23]
 8009e40:	089b      	lsrs	r3, r3, #2
 8009e42:	b2db      	uxtb	r3, r3
 8009e44:	f003 0301 	and.w	r3, r3, #1
 8009e48:	b2da      	uxtb	r2, r3
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	701a      	strb	r2, [r3, #0]
    *dir_3 = (tec_dir_t)((dir >> TEC3_DIR) & 0x01);
 8009e4e:	7dfb      	ldrb	r3, [r7, #23]
 8009e50:	08db      	lsrs	r3, r3, #3
 8009e52:	b2db      	uxtb	r3, r3
 8009e54:	f003 0301 	and.w	r3, r3, #1
 8009e58:	b2da      	uxtb	r2, r3
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	701a      	strb	r2, [r3, #0]
}
 8009e5e:	bf00      	nop
 8009e60:	371c      	adds	r7, #28
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr
 8009e6a:	bf00      	nop
 8009e6c:	200041c8 	.word	0x200041c8

08009e70 <temperature_set_tec_auto>:

void temperature_set_tec_auto(uint8_t tec_0_en, uint8_t tec_1_en, uint8_t tec_2_en, uint8_t tec_3_en) {
 8009e70:	b490      	push	{r4, r7}
 8009e72:	b084      	sub	sp, #16
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	4604      	mov	r4, r0
 8009e78:	4608      	mov	r0, r1
 8009e7a:	4611      	mov	r1, r2
 8009e7c:	461a      	mov	r2, r3
 8009e7e:	4623      	mov	r3, r4
 8009e80:	71fb      	strb	r3, [r7, #7]
 8009e82:	4603      	mov	r3, r0
 8009e84:	71bb      	strb	r3, [r7, #6]
 8009e86:	460b      	mov	r3, r1
 8009e88:	717b      	strb	r3, [r7, #5]
 8009e8a:	4613      	mov	r3, r2
 8009e8c:	713b      	strb	r3, [r7, #4]
	uint8_t tec_ena = (tec_0_en << TEC0_EN) | (tec_1_en << TEC1_EN) | (tec_2_en << TEC2_EN) | (tec_3_en << TEC3_EN);
 8009e8e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009e92:	005b      	lsls	r3, r3, #1
 8009e94:	b25a      	sxtb	r2, r3
 8009e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e9a:	4313      	orrs	r3, r2
 8009e9c:	b25a      	sxtb	r2, r3
 8009e9e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8009ea2:	009b      	lsls	r3, r3, #2
 8009ea4:	b25b      	sxtb	r3, r3
 8009ea6:	4313      	orrs	r3, r2
 8009ea8:	b25a      	sxtb	r2, r3
 8009eaa:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8009eae:	00db      	lsls	r3, r3, #3
 8009eb0:	b25b      	sxtb	r3, r3
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	b25b      	sxtb	r3, r3
 8009eb6:	73fb      	strb	r3, [r7, #15]
	uint8_t heater_ena = s_Temperature_CurrentState.Tec_Heater_status & 0xF0;
 8009eb8:	4b0d      	ldr	r3, [pc, #52]	@ (8009ef0 <temperature_set_tec_auto+0x80>)
 8009eba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009ebe:	f023 030f 	bic.w	r3, r3, #15
 8009ec2:	73bb      	strb	r3, [r7, #14]
	s_Temperature_CurrentState.Tec_Heater_status = (heater_ena & 0xF0) | (tec_ena & 0x0F);
 8009ec4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ec8:	f023 030f 	bic.w	r3, r3, #15
 8009ecc:	b25a      	sxtb	r2, r3
 8009ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ed2:	f003 030f 	and.w	r3, r3, #15
 8009ed6:	b25b      	sxtb	r3, r3
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	b25b      	sxtb	r3, r3
 8009edc:	b2da      	uxtb	r2, r3
 8009ede:	4b04      	ldr	r3, [pc, #16]	@ (8009ef0 <temperature_set_tec_auto+0x80>)
 8009ee0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
}
 8009ee4:	bf00      	nop
 8009ee6:	3710      	adds	r7, #16
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bc90      	pop	{r4, r7}
 8009eec:	4770      	bx	lr
 8009eee:	bf00      	nop
 8009ef0:	200041c8 	.word	0x200041c8

08009ef4 <temperature_get_tec_auto>:

void temperature_get_tec_auto(uint8_t *tec_0_en, uint8_t *tec_1_en, uint8_t *tec_2_en, uint8_t *tec_3_en) {
 8009ef4:	b480      	push	{r7}
 8009ef6:	b087      	sub	sp, #28
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	60f8      	str	r0, [r7, #12]
 8009efc:	60b9      	str	r1, [r7, #8]
 8009efe:	607a      	str	r2, [r7, #4]
 8009f00:	603b      	str	r3, [r7, #0]
	uint8_t Tec_Heater_status = s_Temperature_CurrentState.Tec_Heater_status;
 8009f02:	4b14      	ldr	r3, [pc, #80]	@ (8009f54 <temperature_get_tec_auto+0x60>)
 8009f04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009f08:	75fb      	strb	r3, [r7, #23]
    *tec_0_en = (Tec_Heater_status >> TEC0_EN) & 0x01;
 8009f0a:	7dfb      	ldrb	r3, [r7, #23]
 8009f0c:	f003 0301 	and.w	r3, r3, #1
 8009f10:	b2da      	uxtb	r2, r3
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	701a      	strb	r2, [r3, #0]
    *tec_1_en = (Tec_Heater_status >> TEC1_EN) & 0x01;
 8009f16:	7dfb      	ldrb	r3, [r7, #23]
 8009f18:	085b      	lsrs	r3, r3, #1
 8009f1a:	b2db      	uxtb	r3, r3
 8009f1c:	f003 0301 	and.w	r3, r3, #1
 8009f20:	b2da      	uxtb	r2, r3
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	701a      	strb	r2, [r3, #0]
    *tec_2_en = (Tec_Heater_status >> TEC2_EN) & 0x01;
 8009f26:	7dfb      	ldrb	r3, [r7, #23]
 8009f28:	089b      	lsrs	r3, r3, #2
 8009f2a:	b2db      	uxtb	r3, r3
 8009f2c:	f003 0301 	and.w	r3, r3, #1
 8009f30:	b2da      	uxtb	r2, r3
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	701a      	strb	r2, [r3, #0]
    *tec_3_en = (Tec_Heater_status >> TEC3_EN) & 0x01;
 8009f36:	7dfb      	ldrb	r3, [r7, #23]
 8009f38:	08db      	lsrs	r3, r3, #3
 8009f3a:	b2db      	uxtb	r3, r3
 8009f3c:	f003 0301 	and.w	r3, r3, #1
 8009f40:	b2da      	uxtb	r2, r3
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	701a      	strb	r2, [r3, #0]
}
 8009f46:	bf00      	nop
 8009f48:	371c      	adds	r7, #28
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f50:	4770      	bx	lr
 8009f52:	bf00      	nop
 8009f54:	200041c8 	.word	0x200041c8

08009f58 <temperature_set_heater_auto>:

void temperature_set_heater_auto(uint8_t heater_0_en, uint8_t heater_1_en, uint8_t heater_2_en, uint8_t heater_3_en) {
 8009f58:	b490      	push	{r4, r7}
 8009f5a:	b084      	sub	sp, #16
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	4604      	mov	r4, r0
 8009f60:	4608      	mov	r0, r1
 8009f62:	4611      	mov	r1, r2
 8009f64:	461a      	mov	r2, r3
 8009f66:	4623      	mov	r3, r4
 8009f68:	71fb      	strb	r3, [r7, #7]
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	71bb      	strb	r3, [r7, #6]
 8009f6e:	460b      	mov	r3, r1
 8009f70:	717b      	strb	r3, [r7, #5]
 8009f72:	4613      	mov	r3, r2
 8009f74:	713b      	strb	r3, [r7, #4]
    uint8_t heater_ena = (heater_0_en << HEATER0_EN) | (heater_1_en << HEATER1_EN) | (heater_2_en << HEATER2_EN) | (heater_3_en << HEATER3_EN);
 8009f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f7a:	011b      	lsls	r3, r3, #4
 8009f7c:	b25a      	sxtb	r2, r3
 8009f7e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009f82:	015b      	lsls	r3, r3, #5
 8009f84:	b25b      	sxtb	r3, r3
 8009f86:	4313      	orrs	r3, r2
 8009f88:	b25a      	sxtb	r2, r3
 8009f8a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8009f8e:	019b      	lsls	r3, r3, #6
 8009f90:	b25b      	sxtb	r3, r3
 8009f92:	4313      	orrs	r3, r2
 8009f94:	b25a      	sxtb	r2, r3
 8009f96:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8009f9a:	01db      	lsls	r3, r3, #7
 8009f9c:	b25b      	sxtb	r3, r3
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	b25b      	sxtb	r3, r3
 8009fa2:	73fb      	strb	r3, [r7, #15]
    uint8_t tec_ena = s_Temperature_CurrentState.Tec_Heater_status & 0x0F;
 8009fa4:	4b0d      	ldr	r3, [pc, #52]	@ (8009fdc <temperature_set_heater_auto+0x84>)
 8009fa6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009faa:	f003 030f 	and.w	r3, r3, #15
 8009fae:	73bb      	strb	r3, [r7, #14]
    s_Temperature_CurrentState.Tec_Heater_status = (heater_ena & 0xF0) | (tec_ena & 0x0F);
 8009fb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fb4:	f023 030f 	bic.w	r3, r3, #15
 8009fb8:	b25a      	sxtb	r2, r3
 8009fba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009fbe:	f003 030f 	and.w	r3, r3, #15
 8009fc2:	b25b      	sxtb	r3, r3
 8009fc4:	4313      	orrs	r3, r2
 8009fc6:	b25b      	sxtb	r3, r3
 8009fc8:	b2da      	uxtb	r2, r3
 8009fca:	4b04      	ldr	r3, [pc, #16]	@ (8009fdc <temperature_set_heater_auto+0x84>)
 8009fcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
}
 8009fd0:	bf00      	nop
 8009fd2:	3710      	adds	r7, #16
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bc90      	pop	{r4, r7}
 8009fd8:	4770      	bx	lr
 8009fda:	bf00      	nop
 8009fdc:	200041c8 	.word	0x200041c8

08009fe0 <temperature_get_heater_auto>:

void temperature_get_heater_auto(uint8_t *heater_0_en, uint8_t *heater_1_en, uint8_t *heater_2_en, uint8_t *heater_3_en) {
 8009fe0:	b480      	push	{r7}
 8009fe2:	b087      	sub	sp, #28
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	60f8      	str	r0, [r7, #12]
 8009fe8:	60b9      	str	r1, [r7, #8]
 8009fea:	607a      	str	r2, [r7, #4]
 8009fec:	603b      	str	r3, [r7, #0]
	uint8_t Tec_Heater_status = s_Temperature_CurrentState.Tec_Heater_status;
 8009fee:	4b13      	ldr	r3, [pc, #76]	@ (800a03c <temperature_get_heater_auto+0x5c>)
 8009ff0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009ff4:	75fb      	strb	r3, [r7, #23]
    *heater_0_en = (Tec_Heater_status >> HEATER0_EN) & 0x01;
 8009ff6:	7dfb      	ldrb	r3, [r7, #23]
 8009ff8:	091b      	lsrs	r3, r3, #4
 8009ffa:	b2db      	uxtb	r3, r3
 8009ffc:	f003 0301 	and.w	r3, r3, #1
 800a000:	b2da      	uxtb	r2, r3
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	701a      	strb	r2, [r3, #0]
    *heater_1_en = (Tec_Heater_status >> HEATER1_EN) & 0x01;
 800a006:	7dfb      	ldrb	r3, [r7, #23]
 800a008:	095b      	lsrs	r3, r3, #5
 800a00a:	b2db      	uxtb	r3, r3
 800a00c:	f003 0301 	and.w	r3, r3, #1
 800a010:	b2da      	uxtb	r2, r3
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	701a      	strb	r2, [r3, #0]
    *heater_2_en = (Tec_Heater_status >> HEATER2_EN) & 0x01;
 800a016:	7dfb      	ldrb	r3, [r7, #23]
 800a018:	099b      	lsrs	r3, r3, #6
 800a01a:	b2db      	uxtb	r3, r3
 800a01c:	f003 0301 	and.w	r3, r3, #1
 800a020:	b2da      	uxtb	r2, r3
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	701a      	strb	r2, [r3, #0]
    *heater_3_en = (Tec_Heater_status >> HEATER3_EN) & 0x01;
 800a026:	7dfb      	ldrb	r3, [r7, #23]
 800a028:	09db      	lsrs	r3, r3, #7
 800a02a:	b2da      	uxtb	r2, r3
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	701a      	strb	r2, [r3, #0]
}
 800a030:	bf00      	nop
 800a032:	371c      	adds	r7, #28
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr
 800a03c:	200041c8 	.word	0x200041c8

0800a040 <temperature_set_ntc_ref>:

void temperature_set_ntc_ref(uint8_t NTC_Ref) {
 800a040:	b480      	push	{r7}
 800a042:	b083      	sub	sp, #12
 800a044:	af00      	add	r7, sp, #0
 800a046:	4603      	mov	r3, r0
 800a048:	71fb      	strb	r3, [r7, #7]
	s_Temperature_CurrentState.NTC_Ref = NTC_Ref;
 800a04a:	4a05      	ldr	r2, [pc, #20]	@ (800a060 <temperature_set_ntc_ref+0x20>)
 800a04c:	79fb      	ldrb	r3, [r7, #7]
 800a04e:	f882 3045 	strb.w	r3, [r2, #69]	@ 0x45
}
 800a052:	bf00      	nop
 800a054:	370c      	adds	r7, #12
 800a056:	46bd      	mov	sp, r7
 800a058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05c:	4770      	bx	lr
 800a05e:	bf00      	nop
 800a060:	200041c8 	.word	0x200041c8

0800a064 <temperature_get_ntc_ref>:

void temperature_get_ntc_ref(uint8_t *NTC_Ref) {
 800a064:	b480      	push	{r7}
 800a066:	b083      	sub	sp, #12
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
	*NTC_Ref = s_Temperature_CurrentState.NTC_Ref;
 800a06c:	4b05      	ldr	r3, [pc, #20]	@ (800a084 <temperature_get_ntc_ref+0x20>)
 800a06e:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	701a      	strb	r2, [r3, #0]
}
 800a076:	bf00      	nop
 800a078:	370c      	adds	r7, #12
 800a07a:	46bd      	mov	sp, r7
 800a07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a080:	4770      	bx	lr
 800a082:	bf00      	nop
 800a084:	200041c8 	.word	0x200041c8

0800a088 <temperature_set_auto_ctrl>:

void temperature_set_auto_ctrl(uint8_t Temp_auto) {
 800a088:	b480      	push	{r7}
 800a08a:	b083      	sub	sp, #12
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	4603      	mov	r3, r0
 800a090:	71fb      	strb	r3, [r7, #7]
	s_Temperature_CurrentState.Temp_auto = Temp_auto;
 800a092:	4a05      	ldr	r2, [pc, #20]	@ (800a0a8 <temperature_set_auto_ctrl+0x20>)
 800a094:	79fb      	ldrb	r3, [r7, #7]
 800a096:	f882 3046 	strb.w	r3, [r2, #70]	@ 0x46
}
 800a09a:	bf00      	nop
 800a09c:	370c      	adds	r7, #12
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr
 800a0a6:	bf00      	nop
 800a0a8:	200041c8 	.word	0x200041c8

0800a0ac <temperature_get_auto_ctrl>:
void temperature_get_auto_ctrl(uint8_t *Temp_auto) {
 800a0ac:	b480      	push	{r7}
 800a0ae:	b083      	sub	sp, #12
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
	*Temp_auto = s_Temperature_CurrentState.Temp_auto;
 800a0b4:	4b05      	ldr	r3, [pc, #20]	@ (800a0cc <temperature_get_auto_ctrl+0x20>)
 800a0b6:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	701a      	strb	r2, [r3, #0]
}
 800a0be:	bf00      	nop
 800a0c0:	370c      	adds	r7, #12
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c8:	4770      	bx	lr
 800a0ca:	bf00      	nop
 800a0cc:	200041c8 	.word	0x200041c8

0800a0d0 <LL_GPIO_SetOutputPin>:
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b083      	sub	sp, #12
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	683a      	ldr	r2, [r7, #0]
 800a0de:	619a      	str	r2, [r3, #24]
}
 800a0e0:	bf00      	nop
 800a0e2:	370c      	adds	r7, #12
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr

0800a0ec <LL_GPIO_ResetOutputPin>:
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b083      	sub	sp, #12
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	041a      	lsls	r2, r3, #16
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	619a      	str	r2, [r3, #24]
}
 800a0fe:	bf00      	nop
 800a100:	370c      	adds	r7, #12
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr
	...

0800a10c <Ex_Watchdog_Init>:
		181
	}
};

void Ex_Watchdog_Init(void)
{
 800a10c:	b480      	push	{r7}
 800a10e:	af00      	add	r7, sp, #0
	WDT_Current = 0;
 800a110:	4b03      	ldr	r3, [pc, #12]	@ (800a120 <Ex_Watchdog_Init+0x14>)
 800a112:	2200      	movs	r2, #0
 800a114:	701a      	strb	r2, [r3, #0]
}
 800a116:	bf00      	nop
 800a118:	46bd      	mov	sp, r7
 800a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11e:	4770      	bx	lr
 800a120:	20005b58 	.word	0x20005b58

0800a124 <Ex_Watchdog_CreateTask>:

void Ex_Watchdog_CreateTask(void)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&wdt_task_context.taskHandle, &wdt_task_context.taskProperty);
 800a128:	4902      	ldr	r1, [pc, #8]	@ (800a134 <Ex_Watchdog_CreateTask+0x10>)
 800a12a:	4803      	ldr	r0, [pc, #12]	@ (800a138 <Ex_Watchdog_CreateTask+0x14>)
 800a12c:	f002 fb2a 	bl	800c784 <SCH_TASK_CreateTask>
}
 800a130:	bf00      	nop
 800a132:	bd80      	pop	{r7, pc}
 800a134:	20004214 	.word	0x20004214
 800a138:	20004210 	.word	0x20004210

0800a13c <status_wdt_update>:

void status_wdt_update(void)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	af00      	add	r7, sp, #0
	if (WDT_Current)
 800a140:	4b14      	ldr	r3, [pc, #80]	@ (800a194 <status_wdt_update+0x58>)
 800a142:	781b      	ldrb	r3, [r3, #0]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d012      	beq.n	800a16e <status_wdt_update+0x32>
	{
		if (SCH_TIM_HasCompleted(SCH_TIM_WDT))
 800a148:	2001      	movs	r0, #1
 800a14a:	f002 fb05 	bl	800c758 <SCH_TIM_HasCompleted>
 800a14e:	4603      	mov	r3, r0
 800a150:	2b00      	cmp	r3, #0
 800a152:	d01d      	beq.n	800a190 <status_wdt_update+0x54>
		{
			WDT_Current = 0;
 800a154:	4b0f      	ldr	r3, [pc, #60]	@ (800a194 <status_wdt_update+0x58>)
 800a156:	2200      	movs	r2, #0
 800a158:	701a      	strb	r2, [r3, #0]
			LL_GPIO_ResetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 800a15a:	2102      	movs	r1, #2
 800a15c:	480e      	ldr	r0, [pc, #56]	@ (800a198 <status_wdt_update+0x5c>)
 800a15e:	f7ff ffc5 	bl	800a0ec <LL_GPIO_ResetOutputPin>
			SCH_TIM_Start(SCH_TIM_WDT,LOW_PERIOD);	//restart
 800a162:	f44f 7116 	mov.w	r1, #600	@ 0x258
 800a166:	2001      	movs	r0, #1
 800a168:	f002 fae0 	bl	800c72c <SCH_TIM_Start>
			WDT_Current = 1;
			LL_GPIO_SetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
			SCH_TIM_Start(SCH_TIM_WDT,HIGH_PERIOD);	//restart
		}
	}
}
 800a16c:	e010      	b.n	800a190 <status_wdt_update+0x54>
		if (SCH_TIM_HasCompleted(SCH_TIM_WDT))
 800a16e:	2001      	movs	r0, #1
 800a170:	f002 faf2 	bl	800c758 <SCH_TIM_HasCompleted>
 800a174:	4603      	mov	r3, r0
 800a176:	2b00      	cmp	r3, #0
 800a178:	d00a      	beq.n	800a190 <status_wdt_update+0x54>
			WDT_Current = 1;
 800a17a:	4b06      	ldr	r3, [pc, #24]	@ (800a194 <status_wdt_update+0x58>)
 800a17c:	2201      	movs	r2, #1
 800a17e:	701a      	strb	r2, [r3, #0]
			LL_GPIO_SetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 800a180:	2102      	movs	r1, #2
 800a182:	4805      	ldr	r0, [pc, #20]	@ (800a198 <status_wdt_update+0x5c>)
 800a184:	f7ff ffa4 	bl	800a0d0 <LL_GPIO_SetOutputPin>
			SCH_TIM_Start(SCH_TIM_WDT,HIGH_PERIOD);	//restart
 800a188:	21c8      	movs	r1, #200	@ 0xc8
 800a18a:	2001      	movs	r0, #1
 800a18c:	f002 face 	bl	800c72c <SCH_TIM_Start>
}
 800a190:	bf00      	nop
 800a192:	bd80      	pop	{r7, pc}
 800a194:	20005b58 	.word	0x20005b58
 800a198:	40020000 	.word	0x40020000

0800a19c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a1a0:	4b0e      	ldr	r3, [pc, #56]	@ (800a1dc <HAL_Init+0x40>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	4a0d      	ldr	r2, [pc, #52]	@ (800a1dc <HAL_Init+0x40>)
 800a1a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a1aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800a1ac:	4b0b      	ldr	r3, [pc, #44]	@ (800a1dc <HAL_Init+0x40>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4a0a      	ldr	r2, [pc, #40]	@ (800a1dc <HAL_Init+0x40>)
 800a1b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a1b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a1b8:	4b08      	ldr	r3, [pc, #32]	@ (800a1dc <HAL_Init+0x40>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4a07      	ldr	r2, [pc, #28]	@ (800a1dc <HAL_Init+0x40>)
 800a1be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a1c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a1c4:	2003      	movs	r0, #3
 800a1c6:	f000 f901 	bl	800a3cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a1ca:	200f      	movs	r0, #15
 800a1cc:	f000 f808 	bl	800a1e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a1d0:	f7fe fa32 	bl	8008638 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a1d4:	2300      	movs	r3, #0
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	bd80      	pop	{r7, pc}
 800a1da:	bf00      	nop
 800a1dc:	40023c00 	.word	0x40023c00

0800a1e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b082      	sub	sp, #8
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800a1e8:	4b12      	ldr	r3, [pc, #72]	@ (800a234 <HAL_InitTick+0x54>)
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	4b12      	ldr	r3, [pc, #72]	@ (800a238 <HAL_InitTick+0x58>)
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a1f6:	fbb3 f3f1 	udiv	r3, r3, r1
 800a1fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1fe:	4618      	mov	r0, r3
 800a200:	f000 f90b 	bl	800a41a <HAL_SYSTICK_Config>
 800a204:	4603      	mov	r3, r0
 800a206:	2b00      	cmp	r3, #0
 800a208:	d001      	beq.n	800a20e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800a20a:	2301      	movs	r3, #1
 800a20c:	e00e      	b.n	800a22c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2b0f      	cmp	r3, #15
 800a212:	d80a      	bhi.n	800a22a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a214:	2200      	movs	r2, #0
 800a216:	6879      	ldr	r1, [r7, #4]
 800a218:	f04f 30ff 	mov.w	r0, #4294967295
 800a21c:	f000 f8e1 	bl	800a3e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a220:	4a06      	ldr	r2, [pc, #24]	@ (800a23c <HAL_InitTick+0x5c>)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800a226:	2300      	movs	r3, #0
 800a228:	e000      	b.n	800a22c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800a22a:	2301      	movs	r3, #1
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	3708      	adds	r7, #8
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}
 800a234:	2000014c 	.word	0x2000014c
 800a238:	20004228 	.word	0x20004228
 800a23c:	20004224 	.word	0x20004224

0800a240 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a240:	b480      	push	{r7}
 800a242:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a244:	4b06      	ldr	r3, [pc, #24]	@ (800a260 <HAL_IncTick+0x20>)
 800a246:	781b      	ldrb	r3, [r3, #0]
 800a248:	461a      	mov	r2, r3
 800a24a:	4b06      	ldr	r3, [pc, #24]	@ (800a264 <HAL_IncTick+0x24>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4413      	add	r3, r2
 800a250:	4a04      	ldr	r2, [pc, #16]	@ (800a264 <HAL_IncTick+0x24>)
 800a252:	6013      	str	r3, [r2, #0]
}
 800a254:	bf00      	nop
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr
 800a25e:	bf00      	nop
 800a260:	20004228 	.word	0x20004228
 800a264:	20005b5c 	.word	0x20005b5c

0800a268 <__NVIC_SetPriorityGrouping>:
{
 800a268:	b480      	push	{r7}
 800a26a:	b085      	sub	sp, #20
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f003 0307 	and.w	r3, r3, #7
 800a276:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a278:	4b0c      	ldr	r3, [pc, #48]	@ (800a2ac <__NVIC_SetPriorityGrouping+0x44>)
 800a27a:	68db      	ldr	r3, [r3, #12]
 800a27c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a27e:	68ba      	ldr	r2, [r7, #8]
 800a280:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800a284:	4013      	ands	r3, r2
 800a286:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a290:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800a294:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a29a:	4a04      	ldr	r2, [pc, #16]	@ (800a2ac <__NVIC_SetPriorityGrouping+0x44>)
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	60d3      	str	r3, [r2, #12]
}
 800a2a0:	bf00      	nop
 800a2a2:	3714      	adds	r7, #20
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr
 800a2ac:	e000ed00 	.word	0xe000ed00

0800a2b0 <__NVIC_GetPriorityGrouping>:
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a2b4:	4b04      	ldr	r3, [pc, #16]	@ (800a2c8 <__NVIC_GetPriorityGrouping+0x18>)
 800a2b6:	68db      	ldr	r3, [r3, #12]
 800a2b8:	0a1b      	lsrs	r3, r3, #8
 800a2ba:	f003 0307 	and.w	r3, r3, #7
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c6:	4770      	bx	lr
 800a2c8:	e000ed00 	.word	0xe000ed00

0800a2cc <__NVIC_SetPriority>:
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b083      	sub	sp, #12
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	6039      	str	r1, [r7, #0]
 800a2d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a2d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	db0a      	blt.n	800a2f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	b2da      	uxtb	r2, r3
 800a2e4:	490c      	ldr	r1, [pc, #48]	@ (800a318 <__NVIC_SetPriority+0x4c>)
 800a2e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a2ea:	0112      	lsls	r2, r2, #4
 800a2ec:	b2d2      	uxtb	r2, r2
 800a2ee:	440b      	add	r3, r1
 800a2f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a2f4:	e00a      	b.n	800a30c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	b2da      	uxtb	r2, r3
 800a2fa:	4908      	ldr	r1, [pc, #32]	@ (800a31c <__NVIC_SetPriority+0x50>)
 800a2fc:	79fb      	ldrb	r3, [r7, #7]
 800a2fe:	f003 030f 	and.w	r3, r3, #15
 800a302:	3b04      	subs	r3, #4
 800a304:	0112      	lsls	r2, r2, #4
 800a306:	b2d2      	uxtb	r2, r2
 800a308:	440b      	add	r3, r1
 800a30a:	761a      	strb	r2, [r3, #24]
}
 800a30c:	bf00      	nop
 800a30e:	370c      	adds	r7, #12
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr
 800a318:	e000e100 	.word	0xe000e100
 800a31c:	e000ed00 	.word	0xe000ed00

0800a320 <NVIC_EncodePriority>:
{
 800a320:	b480      	push	{r7}
 800a322:	b089      	sub	sp, #36	@ 0x24
 800a324:	af00      	add	r7, sp, #0
 800a326:	60f8      	str	r0, [r7, #12]
 800a328:	60b9      	str	r1, [r7, #8]
 800a32a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	f003 0307 	and.w	r3, r3, #7
 800a332:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a334:	69fb      	ldr	r3, [r7, #28]
 800a336:	f1c3 0307 	rsb	r3, r3, #7
 800a33a:	2b04      	cmp	r3, #4
 800a33c:	bf28      	it	cs
 800a33e:	2304      	movcs	r3, #4
 800a340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a342:	69fb      	ldr	r3, [r7, #28]
 800a344:	3304      	adds	r3, #4
 800a346:	2b06      	cmp	r3, #6
 800a348:	d902      	bls.n	800a350 <NVIC_EncodePriority+0x30>
 800a34a:	69fb      	ldr	r3, [r7, #28]
 800a34c:	3b03      	subs	r3, #3
 800a34e:	e000      	b.n	800a352 <NVIC_EncodePriority+0x32>
 800a350:	2300      	movs	r3, #0
 800a352:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a354:	f04f 32ff 	mov.w	r2, #4294967295
 800a358:	69bb      	ldr	r3, [r7, #24]
 800a35a:	fa02 f303 	lsl.w	r3, r2, r3
 800a35e:	43da      	mvns	r2, r3
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	401a      	ands	r2, r3
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a368:	f04f 31ff 	mov.w	r1, #4294967295
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	fa01 f303 	lsl.w	r3, r1, r3
 800a372:	43d9      	mvns	r1, r3
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a378:	4313      	orrs	r3, r2
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3724      	adds	r7, #36	@ 0x24
 800a37e:	46bd      	mov	sp, r7
 800a380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a384:	4770      	bx	lr
	...

0800a388 <SysTick_Config>:
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b082      	sub	sp, #8
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	3b01      	subs	r3, #1
 800a394:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a398:	d301      	bcc.n	800a39e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800a39a:	2301      	movs	r3, #1
 800a39c:	e00f      	b.n	800a3be <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a39e:	4a0a      	ldr	r2, [pc, #40]	@ (800a3c8 <SysTick_Config+0x40>)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	3b01      	subs	r3, #1
 800a3a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a3a6:	210f      	movs	r1, #15
 800a3a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a3ac:	f7ff ff8e 	bl	800a2cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a3b0:	4b05      	ldr	r3, [pc, #20]	@ (800a3c8 <SysTick_Config+0x40>)
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a3b6:	4b04      	ldr	r3, [pc, #16]	@ (800a3c8 <SysTick_Config+0x40>)
 800a3b8:	2207      	movs	r2, #7
 800a3ba:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800a3bc:	2300      	movs	r3, #0
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3708      	adds	r7, #8
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
 800a3c6:	bf00      	nop
 800a3c8:	e000e010 	.word	0xe000e010

0800a3cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b082      	sub	sp, #8
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f7ff ff47 	bl	800a268 <__NVIC_SetPriorityGrouping>
}
 800a3da:	bf00      	nop
 800a3dc:	3708      	adds	r7, #8
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}

0800a3e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a3e2:	b580      	push	{r7, lr}
 800a3e4:	b086      	sub	sp, #24
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	60b9      	str	r1, [r7, #8]
 800a3ec:	607a      	str	r2, [r7, #4]
 800a3ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a3f4:	f7ff ff5c 	bl	800a2b0 <__NVIC_GetPriorityGrouping>
 800a3f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a3fa:	687a      	ldr	r2, [r7, #4]
 800a3fc:	68b9      	ldr	r1, [r7, #8]
 800a3fe:	6978      	ldr	r0, [r7, #20]
 800a400:	f7ff ff8e 	bl	800a320 <NVIC_EncodePriority>
 800a404:	4602      	mov	r2, r0
 800a406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a40a:	4611      	mov	r1, r2
 800a40c:	4618      	mov	r0, r3
 800a40e:	f7ff ff5d 	bl	800a2cc <__NVIC_SetPriority>
}
 800a412:	bf00      	nop
 800a414:	3718      	adds	r7, #24
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}

0800a41a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a41a:	b580      	push	{r7, lr}
 800a41c:	b082      	sub	sp, #8
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f7ff ffb0 	bl	800a388 <SysTick_Config>
 800a428:	4603      	mov	r3, r0
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3708      	adds	r7, #8
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
	...

0800a434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a434:	b480      	push	{r7}
 800a436:	b089      	sub	sp, #36	@ 0x24
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a43e:	2300      	movs	r3, #0
 800a440:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a442:	2300      	movs	r3, #0
 800a444:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a446:	2300      	movs	r3, #0
 800a448:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a44a:	2300      	movs	r3, #0
 800a44c:	61fb      	str	r3, [r7, #28]
 800a44e:	e16b      	b.n	800a728 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a450:	2201      	movs	r2, #1
 800a452:	69fb      	ldr	r3, [r7, #28]
 800a454:	fa02 f303 	lsl.w	r3, r2, r3
 800a458:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	697a      	ldr	r2, [r7, #20]
 800a460:	4013      	ands	r3, r2
 800a462:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a464:	693a      	ldr	r2, [r7, #16]
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	429a      	cmp	r2, r3
 800a46a:	f040 815a 	bne.w	800a722 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	f003 0303 	and.w	r3, r3, #3
 800a476:	2b01      	cmp	r3, #1
 800a478:	d005      	beq.n	800a486 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a482:	2b02      	cmp	r3, #2
 800a484:	d130      	bne.n	800a4e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	689b      	ldr	r3, [r3, #8]
 800a48a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a48c:	69fb      	ldr	r3, [r7, #28]
 800a48e:	005b      	lsls	r3, r3, #1
 800a490:	2203      	movs	r2, #3
 800a492:	fa02 f303 	lsl.w	r3, r2, r3
 800a496:	43db      	mvns	r3, r3
 800a498:	69ba      	ldr	r2, [r7, #24]
 800a49a:	4013      	ands	r3, r2
 800a49c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	68da      	ldr	r2, [r3, #12]
 800a4a2:	69fb      	ldr	r3, [r7, #28]
 800a4a4:	005b      	lsls	r3, r3, #1
 800a4a6:	fa02 f303 	lsl.w	r3, r2, r3
 800a4aa:	69ba      	ldr	r2, [r7, #24]
 800a4ac:	4313      	orrs	r3, r2
 800a4ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	69ba      	ldr	r2, [r7, #24]
 800a4b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a4bc:	2201      	movs	r2, #1
 800a4be:	69fb      	ldr	r3, [r7, #28]
 800a4c0:	fa02 f303 	lsl.w	r3, r2, r3
 800a4c4:	43db      	mvns	r3, r3
 800a4c6:	69ba      	ldr	r2, [r7, #24]
 800a4c8:	4013      	ands	r3, r2
 800a4ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	685b      	ldr	r3, [r3, #4]
 800a4d0:	091b      	lsrs	r3, r3, #4
 800a4d2:	f003 0201 	and.w	r2, r3, #1
 800a4d6:	69fb      	ldr	r3, [r7, #28]
 800a4d8:	fa02 f303 	lsl.w	r3, r2, r3
 800a4dc:	69ba      	ldr	r2, [r7, #24]
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	69ba      	ldr	r2, [r7, #24]
 800a4e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	f003 0303 	and.w	r3, r3, #3
 800a4f0:	2b03      	cmp	r3, #3
 800a4f2:	d017      	beq.n	800a524 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	68db      	ldr	r3, [r3, #12]
 800a4f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a4fa:	69fb      	ldr	r3, [r7, #28]
 800a4fc:	005b      	lsls	r3, r3, #1
 800a4fe:	2203      	movs	r2, #3
 800a500:	fa02 f303 	lsl.w	r3, r2, r3
 800a504:	43db      	mvns	r3, r3
 800a506:	69ba      	ldr	r2, [r7, #24]
 800a508:	4013      	ands	r3, r2
 800a50a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	689a      	ldr	r2, [r3, #8]
 800a510:	69fb      	ldr	r3, [r7, #28]
 800a512:	005b      	lsls	r3, r3, #1
 800a514:	fa02 f303 	lsl.w	r3, r2, r3
 800a518:	69ba      	ldr	r2, [r7, #24]
 800a51a:	4313      	orrs	r3, r2
 800a51c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	69ba      	ldr	r2, [r7, #24]
 800a522:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	f003 0303 	and.w	r3, r3, #3
 800a52c:	2b02      	cmp	r3, #2
 800a52e:	d123      	bne.n	800a578 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a530:	69fb      	ldr	r3, [r7, #28]
 800a532:	08da      	lsrs	r2, r3, #3
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	3208      	adds	r2, #8
 800a538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a53c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a53e:	69fb      	ldr	r3, [r7, #28]
 800a540:	f003 0307 	and.w	r3, r3, #7
 800a544:	009b      	lsls	r3, r3, #2
 800a546:	220f      	movs	r2, #15
 800a548:	fa02 f303 	lsl.w	r3, r2, r3
 800a54c:	43db      	mvns	r3, r3
 800a54e:	69ba      	ldr	r2, [r7, #24]
 800a550:	4013      	ands	r3, r2
 800a552:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	691a      	ldr	r2, [r3, #16]
 800a558:	69fb      	ldr	r3, [r7, #28]
 800a55a:	f003 0307 	and.w	r3, r3, #7
 800a55e:	009b      	lsls	r3, r3, #2
 800a560:	fa02 f303 	lsl.w	r3, r2, r3
 800a564:	69ba      	ldr	r2, [r7, #24]
 800a566:	4313      	orrs	r3, r2
 800a568:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a56a:	69fb      	ldr	r3, [r7, #28]
 800a56c:	08da      	lsrs	r2, r3, #3
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	3208      	adds	r2, #8
 800a572:	69b9      	ldr	r1, [r7, #24]
 800a574:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a57e:	69fb      	ldr	r3, [r7, #28]
 800a580:	005b      	lsls	r3, r3, #1
 800a582:	2203      	movs	r2, #3
 800a584:	fa02 f303 	lsl.w	r3, r2, r3
 800a588:	43db      	mvns	r3, r3
 800a58a:	69ba      	ldr	r2, [r7, #24]
 800a58c:	4013      	ands	r3, r2
 800a58e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	685b      	ldr	r3, [r3, #4]
 800a594:	f003 0203 	and.w	r2, r3, #3
 800a598:	69fb      	ldr	r3, [r7, #28]
 800a59a:	005b      	lsls	r3, r3, #1
 800a59c:	fa02 f303 	lsl.w	r3, r2, r3
 800a5a0:	69ba      	ldr	r2, [r7, #24]
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	69ba      	ldr	r2, [r7, #24]
 800a5aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	f000 80b4 	beq.w	800a722 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	60fb      	str	r3, [r7, #12]
 800a5be:	4b60      	ldr	r3, [pc, #384]	@ (800a740 <HAL_GPIO_Init+0x30c>)
 800a5c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5c2:	4a5f      	ldr	r2, [pc, #380]	@ (800a740 <HAL_GPIO_Init+0x30c>)
 800a5c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a5c8:	6453      	str	r3, [r2, #68]	@ 0x44
 800a5ca:	4b5d      	ldr	r3, [pc, #372]	@ (800a740 <HAL_GPIO_Init+0x30c>)
 800a5cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a5d2:	60fb      	str	r3, [r7, #12]
 800a5d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a5d6:	4a5b      	ldr	r2, [pc, #364]	@ (800a744 <HAL_GPIO_Init+0x310>)
 800a5d8:	69fb      	ldr	r3, [r7, #28]
 800a5da:	089b      	lsrs	r3, r3, #2
 800a5dc:	3302      	adds	r3, #2
 800a5de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a5e4:	69fb      	ldr	r3, [r7, #28]
 800a5e6:	f003 0303 	and.w	r3, r3, #3
 800a5ea:	009b      	lsls	r3, r3, #2
 800a5ec:	220f      	movs	r2, #15
 800a5ee:	fa02 f303 	lsl.w	r3, r2, r3
 800a5f2:	43db      	mvns	r3, r3
 800a5f4:	69ba      	ldr	r2, [r7, #24]
 800a5f6:	4013      	ands	r3, r2
 800a5f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	4a52      	ldr	r2, [pc, #328]	@ (800a748 <HAL_GPIO_Init+0x314>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d02b      	beq.n	800a65a <HAL_GPIO_Init+0x226>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	4a51      	ldr	r2, [pc, #324]	@ (800a74c <HAL_GPIO_Init+0x318>)
 800a606:	4293      	cmp	r3, r2
 800a608:	d025      	beq.n	800a656 <HAL_GPIO_Init+0x222>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	4a50      	ldr	r2, [pc, #320]	@ (800a750 <HAL_GPIO_Init+0x31c>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d01f      	beq.n	800a652 <HAL_GPIO_Init+0x21e>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	4a4f      	ldr	r2, [pc, #316]	@ (800a754 <HAL_GPIO_Init+0x320>)
 800a616:	4293      	cmp	r3, r2
 800a618:	d019      	beq.n	800a64e <HAL_GPIO_Init+0x21a>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	4a4e      	ldr	r2, [pc, #312]	@ (800a758 <HAL_GPIO_Init+0x324>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	d013      	beq.n	800a64a <HAL_GPIO_Init+0x216>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	4a4d      	ldr	r2, [pc, #308]	@ (800a75c <HAL_GPIO_Init+0x328>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d00d      	beq.n	800a646 <HAL_GPIO_Init+0x212>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	4a4c      	ldr	r2, [pc, #304]	@ (800a760 <HAL_GPIO_Init+0x32c>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d007      	beq.n	800a642 <HAL_GPIO_Init+0x20e>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	4a4b      	ldr	r2, [pc, #300]	@ (800a764 <HAL_GPIO_Init+0x330>)
 800a636:	4293      	cmp	r3, r2
 800a638:	d101      	bne.n	800a63e <HAL_GPIO_Init+0x20a>
 800a63a:	2307      	movs	r3, #7
 800a63c:	e00e      	b.n	800a65c <HAL_GPIO_Init+0x228>
 800a63e:	2308      	movs	r3, #8
 800a640:	e00c      	b.n	800a65c <HAL_GPIO_Init+0x228>
 800a642:	2306      	movs	r3, #6
 800a644:	e00a      	b.n	800a65c <HAL_GPIO_Init+0x228>
 800a646:	2305      	movs	r3, #5
 800a648:	e008      	b.n	800a65c <HAL_GPIO_Init+0x228>
 800a64a:	2304      	movs	r3, #4
 800a64c:	e006      	b.n	800a65c <HAL_GPIO_Init+0x228>
 800a64e:	2303      	movs	r3, #3
 800a650:	e004      	b.n	800a65c <HAL_GPIO_Init+0x228>
 800a652:	2302      	movs	r3, #2
 800a654:	e002      	b.n	800a65c <HAL_GPIO_Init+0x228>
 800a656:	2301      	movs	r3, #1
 800a658:	e000      	b.n	800a65c <HAL_GPIO_Init+0x228>
 800a65a:	2300      	movs	r3, #0
 800a65c:	69fa      	ldr	r2, [r7, #28]
 800a65e:	f002 0203 	and.w	r2, r2, #3
 800a662:	0092      	lsls	r2, r2, #2
 800a664:	4093      	lsls	r3, r2
 800a666:	69ba      	ldr	r2, [r7, #24]
 800a668:	4313      	orrs	r3, r2
 800a66a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a66c:	4935      	ldr	r1, [pc, #212]	@ (800a744 <HAL_GPIO_Init+0x310>)
 800a66e:	69fb      	ldr	r3, [r7, #28]
 800a670:	089b      	lsrs	r3, r3, #2
 800a672:	3302      	adds	r3, #2
 800a674:	69ba      	ldr	r2, [r7, #24]
 800a676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a67a:	4b3b      	ldr	r3, [pc, #236]	@ (800a768 <HAL_GPIO_Init+0x334>)
 800a67c:	689b      	ldr	r3, [r3, #8]
 800a67e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	43db      	mvns	r3, r3
 800a684:	69ba      	ldr	r2, [r7, #24]
 800a686:	4013      	ands	r3, r2
 800a688:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	685b      	ldr	r3, [r3, #4]
 800a68e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a692:	2b00      	cmp	r3, #0
 800a694:	d003      	beq.n	800a69e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800a696:	69ba      	ldr	r2, [r7, #24]
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	4313      	orrs	r3, r2
 800a69c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a69e:	4a32      	ldr	r2, [pc, #200]	@ (800a768 <HAL_GPIO_Init+0x334>)
 800a6a0:	69bb      	ldr	r3, [r7, #24]
 800a6a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a6a4:	4b30      	ldr	r3, [pc, #192]	@ (800a768 <HAL_GPIO_Init+0x334>)
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	43db      	mvns	r3, r3
 800a6ae:	69ba      	ldr	r2, [r7, #24]
 800a6b0:	4013      	ands	r3, r2
 800a6b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	685b      	ldr	r3, [r3, #4]
 800a6b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d003      	beq.n	800a6c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800a6c0:	69ba      	ldr	r2, [r7, #24]
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	4313      	orrs	r3, r2
 800a6c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a6c8:	4a27      	ldr	r2, [pc, #156]	@ (800a768 <HAL_GPIO_Init+0x334>)
 800a6ca:	69bb      	ldr	r3, [r7, #24]
 800a6cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800a6ce:	4b26      	ldr	r3, [pc, #152]	@ (800a768 <HAL_GPIO_Init+0x334>)
 800a6d0:	685b      	ldr	r3, [r3, #4]
 800a6d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	43db      	mvns	r3, r3
 800a6d8:	69ba      	ldr	r2, [r7, #24]
 800a6da:	4013      	ands	r3, r2
 800a6dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	685b      	ldr	r3, [r3, #4]
 800a6e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d003      	beq.n	800a6f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800a6ea:	69ba      	ldr	r2, [r7, #24]
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a6f2:	4a1d      	ldr	r2, [pc, #116]	@ (800a768 <HAL_GPIO_Init+0x334>)
 800a6f4:	69bb      	ldr	r3, [r7, #24]
 800a6f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a6f8:	4b1b      	ldr	r3, [pc, #108]	@ (800a768 <HAL_GPIO_Init+0x334>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	43db      	mvns	r3, r3
 800a702:	69ba      	ldr	r2, [r7, #24]
 800a704:	4013      	ands	r3, r2
 800a706:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	685b      	ldr	r3, [r3, #4]
 800a70c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a710:	2b00      	cmp	r3, #0
 800a712:	d003      	beq.n	800a71c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800a714:	69ba      	ldr	r2, [r7, #24]
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	4313      	orrs	r3, r2
 800a71a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a71c:	4a12      	ldr	r2, [pc, #72]	@ (800a768 <HAL_GPIO_Init+0x334>)
 800a71e:	69bb      	ldr	r3, [r7, #24]
 800a720:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a722:	69fb      	ldr	r3, [r7, #28]
 800a724:	3301      	adds	r3, #1
 800a726:	61fb      	str	r3, [r7, #28]
 800a728:	69fb      	ldr	r3, [r7, #28]
 800a72a:	2b0f      	cmp	r3, #15
 800a72c:	f67f ae90 	bls.w	800a450 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800a730:	bf00      	nop
 800a732:	bf00      	nop
 800a734:	3724      	adds	r7, #36	@ 0x24
 800a736:	46bd      	mov	sp, r7
 800a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73c:	4770      	bx	lr
 800a73e:	bf00      	nop
 800a740:	40023800 	.word	0x40023800
 800a744:	40013800 	.word	0x40013800
 800a748:	40020000 	.word	0x40020000
 800a74c:	40020400 	.word	0x40020400
 800a750:	40020800 	.word	0x40020800
 800a754:	40020c00 	.word	0x40020c00
 800a758:	40021000 	.word	0x40021000
 800a75c:	40021400 	.word	0x40021400
 800a760:	40021800 	.word	0x40021800
 800a764:	40021c00 	.word	0x40021c00
 800a768:	40013c00 	.word	0x40013c00

0800a76c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b082      	sub	sp, #8
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d101      	bne.n	800a77e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a77a:	2301      	movs	r3, #1
 800a77c:	e041      	b.n	800a802 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a784:	b2db      	uxtb	r3, r3
 800a786:	2b00      	cmp	r3, #0
 800a788:	d106      	bne.n	800a798 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2200      	movs	r2, #0
 800a78e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f7fd ff78 	bl	8008688 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2202      	movs	r2, #2
 800a79c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681a      	ldr	r2, [r3, #0]
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	3304      	adds	r3, #4
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	4610      	mov	r0, r2
 800a7ac:	f000 f88a 	bl	800a8c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a800:	2300      	movs	r3, #0
}
 800a802:	4618      	mov	r0, r3
 800a804:	3708      	adds	r7, #8
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}
	...

0800a80c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b086      	sub	sp, #24
 800a810:	af00      	add	r7, sp, #0
 800a812:	60f8      	str	r0, [r7, #12]
 800a814:	60b9      	str	r1, [r7, #8]
 800a816:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a818:	2300      	movs	r3, #0
 800a81a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a822:	2b01      	cmp	r3, #1
 800a824:	d101      	bne.n	800a82a <HAL_TIM_OC_ConfigChannel+0x1e>
 800a826:	2302      	movs	r3, #2
 800a828:	e048      	b.n	800a8bc <HAL_TIM_OC_ConfigChannel+0xb0>
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	2201      	movs	r2, #1
 800a82e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2b0c      	cmp	r3, #12
 800a836:	d839      	bhi.n	800a8ac <HAL_TIM_OC_ConfigChannel+0xa0>
 800a838:	a201      	add	r2, pc, #4	@ (adr r2, 800a840 <HAL_TIM_OC_ConfigChannel+0x34>)
 800a83a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a83e:	bf00      	nop
 800a840:	0800a875 	.word	0x0800a875
 800a844:	0800a8ad 	.word	0x0800a8ad
 800a848:	0800a8ad 	.word	0x0800a8ad
 800a84c:	0800a8ad 	.word	0x0800a8ad
 800a850:	0800a883 	.word	0x0800a883
 800a854:	0800a8ad 	.word	0x0800a8ad
 800a858:	0800a8ad 	.word	0x0800a8ad
 800a85c:	0800a8ad 	.word	0x0800a8ad
 800a860:	0800a891 	.word	0x0800a891
 800a864:	0800a8ad 	.word	0x0800a8ad
 800a868:	0800a8ad 	.word	0x0800a8ad
 800a86c:	0800a8ad 	.word	0x0800a8ad
 800a870:	0800a89f 	.word	0x0800a89f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	68b9      	ldr	r1, [r7, #8]
 800a87a:	4618      	mov	r0, r3
 800a87c:	f000 f8ce 	bl	800aa1c <TIM_OC1_SetConfig>
      break;
 800a880:	e017      	b.n	800a8b2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	68b9      	ldr	r1, [r7, #8]
 800a888:	4618      	mov	r0, r3
 800a88a:	f000 f937 	bl	800aafc <TIM_OC2_SetConfig>
      break;
 800a88e:	e010      	b.n	800a8b2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	68b9      	ldr	r1, [r7, #8]
 800a896:	4618      	mov	r0, r3
 800a898:	f000 f9a6 	bl	800abe8 <TIM_OC3_SetConfig>
      break;
 800a89c:	e009      	b.n	800a8b2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	68b9      	ldr	r1, [r7, #8]
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f000 fa13 	bl	800acd0 <TIM_OC4_SetConfig>
      break;
 800a8aa:	e002      	b.n	800a8b2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	75fb      	strb	r3, [r7, #23]
      break;
 800a8b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a8ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3718      	adds	r7, #24
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}

0800a8c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b085      	sub	sp, #20
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	4a46      	ldr	r2, [pc, #280]	@ (800a9f0 <TIM_Base_SetConfig+0x12c>)
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	d013      	beq.n	800a904 <TIM_Base_SetConfig+0x40>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8e2:	d00f      	beq.n	800a904 <TIM_Base_SetConfig+0x40>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	4a43      	ldr	r2, [pc, #268]	@ (800a9f4 <TIM_Base_SetConfig+0x130>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d00b      	beq.n	800a904 <TIM_Base_SetConfig+0x40>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	4a42      	ldr	r2, [pc, #264]	@ (800a9f8 <TIM_Base_SetConfig+0x134>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d007      	beq.n	800a904 <TIM_Base_SetConfig+0x40>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	4a41      	ldr	r2, [pc, #260]	@ (800a9fc <TIM_Base_SetConfig+0x138>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d003      	beq.n	800a904 <TIM_Base_SetConfig+0x40>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	4a40      	ldr	r2, [pc, #256]	@ (800aa00 <TIM_Base_SetConfig+0x13c>)
 800a900:	4293      	cmp	r3, r2
 800a902:	d108      	bne.n	800a916 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a90a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	68fa      	ldr	r2, [r7, #12]
 800a912:	4313      	orrs	r3, r2
 800a914:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	4a35      	ldr	r2, [pc, #212]	@ (800a9f0 <TIM_Base_SetConfig+0x12c>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d02b      	beq.n	800a976 <TIM_Base_SetConfig+0xb2>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a924:	d027      	beq.n	800a976 <TIM_Base_SetConfig+0xb2>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	4a32      	ldr	r2, [pc, #200]	@ (800a9f4 <TIM_Base_SetConfig+0x130>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d023      	beq.n	800a976 <TIM_Base_SetConfig+0xb2>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	4a31      	ldr	r2, [pc, #196]	@ (800a9f8 <TIM_Base_SetConfig+0x134>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d01f      	beq.n	800a976 <TIM_Base_SetConfig+0xb2>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	4a30      	ldr	r2, [pc, #192]	@ (800a9fc <TIM_Base_SetConfig+0x138>)
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d01b      	beq.n	800a976 <TIM_Base_SetConfig+0xb2>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	4a2f      	ldr	r2, [pc, #188]	@ (800aa00 <TIM_Base_SetConfig+0x13c>)
 800a942:	4293      	cmp	r3, r2
 800a944:	d017      	beq.n	800a976 <TIM_Base_SetConfig+0xb2>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	4a2e      	ldr	r2, [pc, #184]	@ (800aa04 <TIM_Base_SetConfig+0x140>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d013      	beq.n	800a976 <TIM_Base_SetConfig+0xb2>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	4a2d      	ldr	r2, [pc, #180]	@ (800aa08 <TIM_Base_SetConfig+0x144>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d00f      	beq.n	800a976 <TIM_Base_SetConfig+0xb2>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	4a2c      	ldr	r2, [pc, #176]	@ (800aa0c <TIM_Base_SetConfig+0x148>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d00b      	beq.n	800a976 <TIM_Base_SetConfig+0xb2>
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	4a2b      	ldr	r2, [pc, #172]	@ (800aa10 <TIM_Base_SetConfig+0x14c>)
 800a962:	4293      	cmp	r3, r2
 800a964:	d007      	beq.n	800a976 <TIM_Base_SetConfig+0xb2>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	4a2a      	ldr	r2, [pc, #168]	@ (800aa14 <TIM_Base_SetConfig+0x150>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d003      	beq.n	800a976 <TIM_Base_SetConfig+0xb2>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	4a29      	ldr	r2, [pc, #164]	@ (800aa18 <TIM_Base_SetConfig+0x154>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d108      	bne.n	800a988 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a97c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	68db      	ldr	r3, [r3, #12]
 800a982:	68fa      	ldr	r2, [r7, #12]
 800a984:	4313      	orrs	r3, r2
 800a986:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	695b      	ldr	r3, [r3, #20]
 800a992:	4313      	orrs	r3, r2
 800a994:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	68fa      	ldr	r2, [r7, #12]
 800a99a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	689a      	ldr	r2, [r3, #8]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	4a10      	ldr	r2, [pc, #64]	@ (800a9f0 <TIM_Base_SetConfig+0x12c>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d003      	beq.n	800a9bc <TIM_Base_SetConfig+0xf8>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	4a12      	ldr	r2, [pc, #72]	@ (800aa00 <TIM_Base_SetConfig+0x13c>)
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d103      	bne.n	800a9c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	691a      	ldr	r2, [r3, #16]
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2201      	movs	r2, #1
 800a9c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	691b      	ldr	r3, [r3, #16]
 800a9ce:	f003 0301 	and.w	r3, r3, #1
 800a9d2:	2b01      	cmp	r3, #1
 800a9d4:	d105      	bne.n	800a9e2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	691b      	ldr	r3, [r3, #16]
 800a9da:	f023 0201 	bic.w	r2, r3, #1
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	611a      	str	r2, [r3, #16]
  }
}
 800a9e2:	bf00      	nop
 800a9e4:	3714      	adds	r7, #20
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ec:	4770      	bx	lr
 800a9ee:	bf00      	nop
 800a9f0:	40010000 	.word	0x40010000
 800a9f4:	40000400 	.word	0x40000400
 800a9f8:	40000800 	.word	0x40000800
 800a9fc:	40000c00 	.word	0x40000c00
 800aa00:	40010400 	.word	0x40010400
 800aa04:	40014000 	.word	0x40014000
 800aa08:	40014400 	.word	0x40014400
 800aa0c:	40014800 	.word	0x40014800
 800aa10:	40001800 	.word	0x40001800
 800aa14:	40001c00 	.word	0x40001c00
 800aa18:	40002000 	.word	0x40002000

0800aa1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b087      	sub	sp, #28
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6a1b      	ldr	r3, [r3, #32]
 800aa2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6a1b      	ldr	r3, [r3, #32]
 800aa30:	f023 0201 	bic.w	r2, r3, #1
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	685b      	ldr	r3, [r3, #4]
 800aa3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	699b      	ldr	r3, [r3, #24]
 800aa42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	f023 0303 	bic.w	r3, r3, #3
 800aa52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	68fa      	ldr	r2, [r7, #12]
 800aa5a:	4313      	orrs	r3, r2
 800aa5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	f023 0302 	bic.w	r3, r3, #2
 800aa64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	689b      	ldr	r3, [r3, #8]
 800aa6a:	697a      	ldr	r2, [r7, #20]
 800aa6c:	4313      	orrs	r3, r2
 800aa6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	4a20      	ldr	r2, [pc, #128]	@ (800aaf4 <TIM_OC1_SetConfig+0xd8>)
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d003      	beq.n	800aa80 <TIM_OC1_SetConfig+0x64>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	4a1f      	ldr	r2, [pc, #124]	@ (800aaf8 <TIM_OC1_SetConfig+0xdc>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d10c      	bne.n	800aa9a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	f023 0308 	bic.w	r3, r3, #8
 800aa86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	68db      	ldr	r3, [r3, #12]
 800aa8c:	697a      	ldr	r2, [r7, #20]
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	f023 0304 	bic.w	r3, r3, #4
 800aa98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	4a15      	ldr	r2, [pc, #84]	@ (800aaf4 <TIM_OC1_SetConfig+0xd8>)
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d003      	beq.n	800aaaa <TIM_OC1_SetConfig+0x8e>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	4a14      	ldr	r2, [pc, #80]	@ (800aaf8 <TIM_OC1_SetConfig+0xdc>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d111      	bne.n	800aace <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aab0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800aab8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	695b      	ldr	r3, [r3, #20]
 800aabe:	693a      	ldr	r2, [r7, #16]
 800aac0:	4313      	orrs	r3, r2
 800aac2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	699b      	ldr	r3, [r3, #24]
 800aac8:	693a      	ldr	r2, [r7, #16]
 800aaca:	4313      	orrs	r3, r2
 800aacc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	693a      	ldr	r2, [r7, #16]
 800aad2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	68fa      	ldr	r2, [r7, #12]
 800aad8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	685a      	ldr	r2, [r3, #4]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	697a      	ldr	r2, [r7, #20]
 800aae6:	621a      	str	r2, [r3, #32]
}
 800aae8:	bf00      	nop
 800aaea:	371c      	adds	r7, #28
 800aaec:	46bd      	mov	sp, r7
 800aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf2:	4770      	bx	lr
 800aaf4:	40010000 	.word	0x40010000
 800aaf8:	40010400 	.word	0x40010400

0800aafc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b087      	sub	sp, #28
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6a1b      	ldr	r3, [r3, #32]
 800ab0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6a1b      	ldr	r3, [r3, #32]
 800ab10:	f023 0210 	bic.w	r2, r3, #16
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	685b      	ldr	r3, [r3, #4]
 800ab1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	699b      	ldr	r3, [r3, #24]
 800ab22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ab32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	021b      	lsls	r3, r3, #8
 800ab3a:	68fa      	ldr	r2, [r7, #12]
 800ab3c:	4313      	orrs	r3, r2
 800ab3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ab40:	697b      	ldr	r3, [r7, #20]
 800ab42:	f023 0320 	bic.w	r3, r3, #32
 800ab46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	689b      	ldr	r3, [r3, #8]
 800ab4c:	011b      	lsls	r3, r3, #4
 800ab4e:	697a      	ldr	r2, [r7, #20]
 800ab50:	4313      	orrs	r3, r2
 800ab52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	4a22      	ldr	r2, [pc, #136]	@ (800abe0 <TIM_OC2_SetConfig+0xe4>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d003      	beq.n	800ab64 <TIM_OC2_SetConfig+0x68>
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	4a21      	ldr	r2, [pc, #132]	@ (800abe4 <TIM_OC2_SetConfig+0xe8>)
 800ab60:	4293      	cmp	r3, r2
 800ab62:	d10d      	bne.n	800ab80 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ab64:	697b      	ldr	r3, [r7, #20]
 800ab66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ab6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	68db      	ldr	r3, [r3, #12]
 800ab70:	011b      	lsls	r3, r3, #4
 800ab72:	697a      	ldr	r2, [r7, #20]
 800ab74:	4313      	orrs	r3, r2
 800ab76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab7e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	4a17      	ldr	r2, [pc, #92]	@ (800abe0 <TIM_OC2_SetConfig+0xe4>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d003      	beq.n	800ab90 <TIM_OC2_SetConfig+0x94>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	4a16      	ldr	r2, [pc, #88]	@ (800abe4 <TIM_OC2_SetConfig+0xe8>)
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d113      	bne.n	800abb8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ab96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ab9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	695b      	ldr	r3, [r3, #20]
 800aba4:	009b      	lsls	r3, r3, #2
 800aba6:	693a      	ldr	r2, [r7, #16]
 800aba8:	4313      	orrs	r3, r2
 800abaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	699b      	ldr	r3, [r3, #24]
 800abb0:	009b      	lsls	r3, r3, #2
 800abb2:	693a      	ldr	r2, [r7, #16]
 800abb4:	4313      	orrs	r3, r2
 800abb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	693a      	ldr	r2, [r7, #16]
 800abbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	68fa      	ldr	r2, [r7, #12]
 800abc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	685a      	ldr	r2, [r3, #4]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	697a      	ldr	r2, [r7, #20]
 800abd0:	621a      	str	r2, [r3, #32]
}
 800abd2:	bf00      	nop
 800abd4:	371c      	adds	r7, #28
 800abd6:	46bd      	mov	sp, r7
 800abd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abdc:	4770      	bx	lr
 800abde:	bf00      	nop
 800abe0:	40010000 	.word	0x40010000
 800abe4:	40010400 	.word	0x40010400

0800abe8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800abe8:	b480      	push	{r7}
 800abea:	b087      	sub	sp, #28
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6a1b      	ldr	r3, [r3, #32]
 800abf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6a1b      	ldr	r3, [r3, #32]
 800abfc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	69db      	ldr	r3, [r3, #28]
 800ac0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f023 0303 	bic.w	r3, r3, #3
 800ac1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	68fa      	ldr	r2, [r7, #12]
 800ac26:	4313      	orrs	r3, r2
 800ac28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ac30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	689b      	ldr	r3, [r3, #8]
 800ac36:	021b      	lsls	r3, r3, #8
 800ac38:	697a      	ldr	r2, [r7, #20]
 800ac3a:	4313      	orrs	r3, r2
 800ac3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	4a21      	ldr	r2, [pc, #132]	@ (800acc8 <TIM_OC3_SetConfig+0xe0>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d003      	beq.n	800ac4e <TIM_OC3_SetConfig+0x66>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	4a20      	ldr	r2, [pc, #128]	@ (800accc <TIM_OC3_SetConfig+0xe4>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d10d      	bne.n	800ac6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ac54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	68db      	ldr	r3, [r3, #12]
 800ac5a:	021b      	lsls	r3, r3, #8
 800ac5c:	697a      	ldr	r2, [r7, #20]
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ac68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	4a16      	ldr	r2, [pc, #88]	@ (800acc8 <TIM_OC3_SetConfig+0xe0>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d003      	beq.n	800ac7a <TIM_OC3_SetConfig+0x92>
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	4a15      	ldr	r2, [pc, #84]	@ (800accc <TIM_OC3_SetConfig+0xe4>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d113      	bne.n	800aca2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ac80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ac88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	695b      	ldr	r3, [r3, #20]
 800ac8e:	011b      	lsls	r3, r3, #4
 800ac90:	693a      	ldr	r2, [r7, #16]
 800ac92:	4313      	orrs	r3, r2
 800ac94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	699b      	ldr	r3, [r3, #24]
 800ac9a:	011b      	lsls	r3, r3, #4
 800ac9c:	693a      	ldr	r2, [r7, #16]
 800ac9e:	4313      	orrs	r3, r2
 800aca0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	693a      	ldr	r2, [r7, #16]
 800aca6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	68fa      	ldr	r2, [r7, #12]
 800acac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	685a      	ldr	r2, [r3, #4]
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	697a      	ldr	r2, [r7, #20]
 800acba:	621a      	str	r2, [r3, #32]
}
 800acbc:	bf00      	nop
 800acbe:	371c      	adds	r7, #28
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr
 800acc8:	40010000 	.word	0x40010000
 800accc:	40010400 	.word	0x40010400

0800acd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b087      	sub	sp, #28
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
 800acd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6a1b      	ldr	r3, [r3, #32]
 800acde:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6a1b      	ldr	r3, [r3, #32]
 800ace4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	69db      	ldr	r3, [r3, #28]
 800acf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800acfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ad06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	021b      	lsls	r3, r3, #8
 800ad0e:	68fa      	ldr	r2, [r7, #12]
 800ad10:	4313      	orrs	r3, r2
 800ad12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ad1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	689b      	ldr	r3, [r3, #8]
 800ad20:	031b      	lsls	r3, r3, #12
 800ad22:	693a      	ldr	r2, [r7, #16]
 800ad24:	4313      	orrs	r3, r2
 800ad26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	4a12      	ldr	r2, [pc, #72]	@ (800ad74 <TIM_OC4_SetConfig+0xa4>)
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d003      	beq.n	800ad38 <TIM_OC4_SetConfig+0x68>
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	4a11      	ldr	r2, [pc, #68]	@ (800ad78 <TIM_OC4_SetConfig+0xa8>)
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d109      	bne.n	800ad4c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ad3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	695b      	ldr	r3, [r3, #20]
 800ad44:	019b      	lsls	r3, r3, #6
 800ad46:	697a      	ldr	r2, [r7, #20]
 800ad48:	4313      	orrs	r3, r2
 800ad4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	697a      	ldr	r2, [r7, #20]
 800ad50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	68fa      	ldr	r2, [r7, #12]
 800ad56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	685a      	ldr	r2, [r3, #4]
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	693a      	ldr	r2, [r7, #16]
 800ad64:	621a      	str	r2, [r3, #32]
}
 800ad66:	bf00      	nop
 800ad68:	371c      	adds	r7, #28
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad70:	4770      	bx	lr
 800ad72:	bf00      	nop
 800ad74:	40010000 	.word	0x40010000
 800ad78:	40010400 	.word	0x40010400

0800ad7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b085      	sub	sp, #20
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	d101      	bne.n	800ad94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ad90:	2302      	movs	r3, #2
 800ad92:	e05a      	b.n	800ae4a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2201      	movs	r2, #1
 800ad98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2202      	movs	r2, #2
 800ada0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	689b      	ldr	r3, [r3, #8]
 800adb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800adba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	68fa      	ldr	r2, [r7, #12]
 800adc2:	4313      	orrs	r3, r2
 800adc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	68fa      	ldr	r2, [r7, #12]
 800adcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	4a21      	ldr	r2, [pc, #132]	@ (800ae58 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800add4:	4293      	cmp	r3, r2
 800add6:	d022      	beq.n	800ae1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ade0:	d01d      	beq.n	800ae1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	4a1d      	ldr	r2, [pc, #116]	@ (800ae5c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ade8:	4293      	cmp	r3, r2
 800adea:	d018      	beq.n	800ae1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	4a1b      	ldr	r2, [pc, #108]	@ (800ae60 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d013      	beq.n	800ae1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	4a1a      	ldr	r2, [pc, #104]	@ (800ae64 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d00e      	beq.n	800ae1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	4a18      	ldr	r2, [pc, #96]	@ (800ae68 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ae06:	4293      	cmp	r3, r2
 800ae08:	d009      	beq.n	800ae1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	4a17      	ldr	r2, [pc, #92]	@ (800ae6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ae10:	4293      	cmp	r3, r2
 800ae12:	d004      	beq.n	800ae1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	4a15      	ldr	r2, [pc, #84]	@ (800ae70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d10c      	bne.n	800ae38 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ae24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	685b      	ldr	r3, [r3, #4]
 800ae2a:	68ba      	ldr	r2, [r7, #8]
 800ae2c:	4313      	orrs	r3, r2
 800ae2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	68ba      	ldr	r2, [r7, #8]
 800ae36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2200      	movs	r2, #0
 800ae44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ae48:	2300      	movs	r3, #0
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	3714      	adds	r7, #20
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae54:	4770      	bx	lr
 800ae56:	bf00      	nop
 800ae58:	40010000 	.word	0x40010000
 800ae5c:	40000400 	.word	0x40000400
 800ae60:	40000800 	.word	0x40000800
 800ae64:	40000c00 	.word	0x40000c00
 800ae68:	40010400 	.word	0x40010400
 800ae6c:	40014000 	.word	0x40014000
 800ae70:	40001800 	.word	0x40001800

0800ae74 <LL_ADC_REG_SetSequencerLength>:
{
 800ae74:	b480      	push	{r7}
 800ae76:	b083      	sub	sp, #12
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae82:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	431a      	orrs	r2, r3
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800ae8e:	bf00      	nop
 800ae90:	370c      	adds	r7, #12
 800ae92:	46bd      	mov	sp, r7
 800ae94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae98:	4770      	bx	lr

0800ae9a <LL_ADC_IsEnabled>:
{
 800ae9a:	b480      	push	{r7}
 800ae9c:	b083      	sub	sp, #12
 800ae9e:	af00      	add	r7, sp, #0
 800aea0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	689b      	ldr	r3, [r3, #8]
 800aea6:	f003 0301 	and.w	r3, r3, #1
 800aeaa:	2b01      	cmp	r3, #1
 800aeac:	bf0c      	ite	eq
 800aeae:	2301      	moveq	r3, #1
 800aeb0:	2300      	movne	r3, #0
 800aeb2:	b2db      	uxtb	r3, r3
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	370c      	adds	r7, #12
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebe:	4770      	bx	lr

0800aec0 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 800aec0:	b590      	push	{r4, r7, lr}
 800aec2:	b085      	sub	sp, #20
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800aeca:	2300      	movs	r3, #0
 800aecc:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 800aece:	481c      	ldr	r0, [pc, #112]	@ (800af40 <LL_ADC_CommonInit+0x80>)
 800aed0:	f7ff ffe3 	bl	800ae9a <LL_ADC_IsEnabled>
 800aed4:	4604      	mov	r4, r0
 800aed6:	481b      	ldr	r0, [pc, #108]	@ (800af44 <LL_ADC_CommonInit+0x84>)
 800aed8:	f7ff ffdf 	bl	800ae9a <LL_ADC_IsEnabled>
 800aedc:	4603      	mov	r3, r0
 800aede:	431c      	orrs	r4, r3
 800aee0:	4819      	ldr	r0, [pc, #100]	@ (800af48 <LL_ADC_CommonInit+0x88>)
 800aee2:	f7ff ffda 	bl	800ae9a <LL_ADC_IsEnabled>
 800aee6:	4603      	mov	r3, r0
 800aee8:	4323      	orrs	r3, r4
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d120      	bne.n	800af30 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	685b      	ldr	r3, [r3, #4]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d012      	beq.n	800af1c <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	685a      	ldr	r2, [r3, #4]
 800aefa:	4b14      	ldr	r3, [pc, #80]	@ (800af4c <LL_ADC_CommonInit+0x8c>)
 800aefc:	4013      	ands	r3, r2
 800aefe:	683a      	ldr	r2, [r7, #0]
 800af00:	6811      	ldr	r1, [r2, #0]
 800af02:	683a      	ldr	r2, [r7, #0]
 800af04:	6852      	ldr	r2, [r2, #4]
 800af06:	4311      	orrs	r1, r2
 800af08:	683a      	ldr	r2, [r7, #0]
 800af0a:	6892      	ldr	r2, [r2, #8]
 800af0c:	4311      	orrs	r1, r2
 800af0e:	683a      	ldr	r2, [r7, #0]
 800af10:	68d2      	ldr	r2, [r2, #12]
 800af12:	430a      	orrs	r2, r1
 800af14:	431a      	orrs	r2, r3
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	605a      	str	r2, [r3, #4]
 800af1a:	e00b      	b.n	800af34 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	685a      	ldr	r2, [r3, #4]
 800af20:	4b0a      	ldr	r3, [pc, #40]	@ (800af4c <LL_ADC_CommonInit+0x8c>)
 800af22:	4013      	ands	r3, r2
 800af24:	683a      	ldr	r2, [r7, #0]
 800af26:	6812      	ldr	r2, [r2, #0]
 800af28:	431a      	orrs	r2, r3
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	605a      	str	r2, [r3, #4]
 800af2e:	e001      	b.n	800af34 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 800af30:	2301      	movs	r3, #1
 800af32:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800af34:	7bfb      	ldrb	r3, [r7, #15]
}
 800af36:	4618      	mov	r0, r3
 800af38:	3714      	adds	r7, #20
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd90      	pop	{r4, r7, pc}
 800af3e:	bf00      	nop
 800af40:	40012000 	.word	0x40012000
 800af44:	40012100 	.word	0x40012100
 800af48:	40012200 	.word	0x40012200
 800af4c:	fffc10e0 	.word	0xfffc10e0

0800af50 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b084      	sub	sp, #16
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800af5a:	2300      	movs	r3, #0
 800af5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f7ff ff9b 	bl	800ae9a <LL_ADC_IsEnabled>
 800af64:	4603      	mov	r3, r0
 800af66:	2b00      	cmp	r3, #0
 800af68:	d117      	bne.n	800af9a <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	685b      	ldr	r3, [r3, #4]
 800af6e:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 800af72:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800af76:	683a      	ldr	r2, [r7, #0]
 800af78:	6811      	ldr	r1, [r2, #0]
 800af7a:	683a      	ldr	r2, [r7, #0]
 800af7c:	6892      	ldr	r2, [r2, #8]
 800af7e:	430a      	orrs	r2, r1
 800af80:	431a      	orrs	r2, r3
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	605a      	str	r2, [r3, #4]
               ,
               ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );

    MODIFY_REG(ADCx->CR2,
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	689b      	ldr	r3, [r3, #8]
 800af8a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	685b      	ldr	r3, [r3, #4]
 800af92:	431a      	orrs	r2, r3
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	609a      	str	r2, [r3, #8]
 800af98:	e001      	b.n	800af9e <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800af9a:	2301      	movs	r3, #1
 800af9c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800af9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800afa0:	4618      	mov	r0, r3
 800afa2:	3710      	adds	r7, #16
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}

0800afa8 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b084      	sub	sp, #16
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800afb2:	2300      	movs	r3, #0
 800afb4:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f7ff ff6f 	bl	800ae9a <LL_ADC_IsEnabled>
 800afbc:	4603      	mov	r3, r0
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d12b      	bne.n	800b01a <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	685b      	ldr	r3, [r3, #4]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d009      	beq.n	800afde <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	685b      	ldr	r3, [r3, #4]
 800afce:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	689b      	ldr	r3, [r3, #8]
 800afd6:	431a      	orrs	r2, r3
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	605a      	str	r2, [r3, #4]
 800afdc:	e005      	b.n	800afea <LL_ADC_REG_Init+0x42>
                 ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	685b      	ldr	r3, [r3, #4]
 800afe2:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	605a      	str	r2, [r3, #4]
                 ,
                 LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }

    MODIFY_REG(ADCx->CR2,
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	689a      	ldr	r2, [r3, #8]
 800afee:	4b0e      	ldr	r3, [pc, #56]	@ (800b028 <LL_ADC_REG_Init+0x80>)
 800aff0:	4013      	ands	r3, r2
 800aff2:	683a      	ldr	r2, [r7, #0]
 800aff4:	6812      	ldr	r2, [r2, #0]
 800aff6:	f002 6170 	and.w	r1, r2, #251658240	@ 0xf000000
 800affa:	683a      	ldr	r2, [r7, #0]
 800affc:	68d2      	ldr	r2, [r2, #12]
 800affe:	4311      	orrs	r1, r2
 800b000:	683a      	ldr	r2, [r7, #0]
 800b002:	6912      	ldr	r2, [r2, #16]
 800b004:	430a      	orrs	r2, r1
 800b006:	431a      	orrs	r2, r3
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	685b      	ldr	r3, [r3, #4]
 800b010:	4619      	mov	r1, r3
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f7ff ff2e 	bl	800ae74 <LL_ADC_REG_SetSequencerLength>
 800b018:	e001      	b.n	800b01e <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800b01a:	2301      	movs	r3, #1
 800b01c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800b01e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b020:	4618      	mov	r0, r3
 800b022:	3710      	adds	r7, #16
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}
 800b028:	c0fffcfd 	.word	0xc0fffcfd

0800b02c <LL_GPIO_SetPinMode>:
{
 800b02c:	b480      	push	{r7}
 800b02e:	b08b      	sub	sp, #44	@ 0x2c
 800b030:	af00      	add	r7, sp, #0
 800b032:	60f8      	str	r0, [r7, #12]
 800b034:	60b9      	str	r1, [r7, #8]
 800b036:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681a      	ldr	r2, [r3, #0]
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	fa93 f3a3 	rbit	r3, r3
 800b046:	613b      	str	r3, [r7, #16]
  return result;
 800b048:	693b      	ldr	r3, [r7, #16]
 800b04a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b04c:	69bb      	ldr	r3, [r7, #24]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d101      	bne.n	800b056 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800b052:	2320      	movs	r3, #32
 800b054:	e003      	b.n	800b05e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800b056:	69bb      	ldr	r3, [r7, #24]
 800b058:	fab3 f383 	clz	r3, r3
 800b05c:	b2db      	uxtb	r3, r3
 800b05e:	005b      	lsls	r3, r3, #1
 800b060:	2103      	movs	r1, #3
 800b062:	fa01 f303 	lsl.w	r3, r1, r3
 800b066:	43db      	mvns	r3, r3
 800b068:	401a      	ands	r2, r3
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b06e:	6a3b      	ldr	r3, [r7, #32]
 800b070:	fa93 f3a3 	rbit	r3, r3
 800b074:	61fb      	str	r3, [r7, #28]
  return result;
 800b076:	69fb      	ldr	r3, [r7, #28]
 800b078:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b07a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d101      	bne.n	800b084 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800b080:	2320      	movs	r3, #32
 800b082:	e003      	b.n	800b08c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800b084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b086:	fab3 f383 	clz	r3, r3
 800b08a:	b2db      	uxtb	r3, r3
 800b08c:	005b      	lsls	r3, r3, #1
 800b08e:	6879      	ldr	r1, [r7, #4]
 800b090:	fa01 f303 	lsl.w	r3, r1, r3
 800b094:	431a      	orrs	r2, r3
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	601a      	str	r2, [r3, #0]
}
 800b09a:	bf00      	nop
 800b09c:	372c      	adds	r7, #44	@ 0x2c
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a4:	4770      	bx	lr

0800b0a6 <LL_GPIO_SetPinOutputType>:
{
 800b0a6:	b480      	push	{r7}
 800b0a8:	b085      	sub	sp, #20
 800b0aa:	af00      	add	r7, sp, #0
 800b0ac:	60f8      	str	r0, [r7, #12]
 800b0ae:	60b9      	str	r1, [r7, #8]
 800b0b0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	685a      	ldr	r2, [r3, #4]
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	43db      	mvns	r3, r3
 800b0ba:	401a      	ands	r2, r3
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	6879      	ldr	r1, [r7, #4]
 800b0c0:	fb01 f303 	mul.w	r3, r1, r3
 800b0c4:	431a      	orrs	r2, r3
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	605a      	str	r2, [r3, #4]
}
 800b0ca:	bf00      	nop
 800b0cc:	3714      	adds	r7, #20
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d4:	4770      	bx	lr

0800b0d6 <LL_GPIO_SetPinSpeed>:
{
 800b0d6:	b480      	push	{r7}
 800b0d8:	b08b      	sub	sp, #44	@ 0x2c
 800b0da:	af00      	add	r7, sp, #0
 800b0dc:	60f8      	str	r0, [r7, #12]
 800b0de:	60b9      	str	r1, [r7, #8]
 800b0e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	689a      	ldr	r2, [r3, #8]
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	fa93 f3a3 	rbit	r3, r3
 800b0f0:	613b      	str	r3, [r7, #16]
  return result;
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b0f6:	69bb      	ldr	r3, [r7, #24]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d101      	bne.n	800b100 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800b0fc:	2320      	movs	r3, #32
 800b0fe:	e003      	b.n	800b108 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800b100:	69bb      	ldr	r3, [r7, #24]
 800b102:	fab3 f383 	clz	r3, r3
 800b106:	b2db      	uxtb	r3, r3
 800b108:	005b      	lsls	r3, r3, #1
 800b10a:	2103      	movs	r1, #3
 800b10c:	fa01 f303 	lsl.w	r3, r1, r3
 800b110:	43db      	mvns	r3, r3
 800b112:	401a      	ands	r2, r3
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b118:	6a3b      	ldr	r3, [r7, #32]
 800b11a:	fa93 f3a3 	rbit	r3, r3
 800b11e:	61fb      	str	r3, [r7, #28]
  return result;
 800b120:	69fb      	ldr	r3, [r7, #28]
 800b122:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b126:	2b00      	cmp	r3, #0
 800b128:	d101      	bne.n	800b12e <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800b12a:	2320      	movs	r3, #32
 800b12c:	e003      	b.n	800b136 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800b12e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b130:	fab3 f383 	clz	r3, r3
 800b134:	b2db      	uxtb	r3, r3
 800b136:	005b      	lsls	r3, r3, #1
 800b138:	6879      	ldr	r1, [r7, #4]
 800b13a:	fa01 f303 	lsl.w	r3, r1, r3
 800b13e:	431a      	orrs	r2, r3
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	609a      	str	r2, [r3, #8]
}
 800b144:	bf00      	nop
 800b146:	372c      	adds	r7, #44	@ 0x2c
 800b148:	46bd      	mov	sp, r7
 800b14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14e:	4770      	bx	lr

0800b150 <LL_GPIO_SetPinPull>:
{
 800b150:	b480      	push	{r7}
 800b152:	b08b      	sub	sp, #44	@ 0x2c
 800b154:	af00      	add	r7, sp, #0
 800b156:	60f8      	str	r0, [r7, #12]
 800b158:	60b9      	str	r1, [r7, #8]
 800b15a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	68da      	ldr	r2, [r3, #12]
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b164:	697b      	ldr	r3, [r7, #20]
 800b166:	fa93 f3a3 	rbit	r3, r3
 800b16a:	613b      	str	r3, [r7, #16]
  return result;
 800b16c:	693b      	ldr	r3, [r7, #16]
 800b16e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b170:	69bb      	ldr	r3, [r7, #24]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d101      	bne.n	800b17a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800b176:	2320      	movs	r3, #32
 800b178:	e003      	b.n	800b182 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800b17a:	69bb      	ldr	r3, [r7, #24]
 800b17c:	fab3 f383 	clz	r3, r3
 800b180:	b2db      	uxtb	r3, r3
 800b182:	005b      	lsls	r3, r3, #1
 800b184:	2103      	movs	r1, #3
 800b186:	fa01 f303 	lsl.w	r3, r1, r3
 800b18a:	43db      	mvns	r3, r3
 800b18c:	401a      	ands	r2, r3
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b192:	6a3b      	ldr	r3, [r7, #32]
 800b194:	fa93 f3a3 	rbit	r3, r3
 800b198:	61fb      	str	r3, [r7, #28]
  return result;
 800b19a:	69fb      	ldr	r3, [r7, #28]
 800b19c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b19e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d101      	bne.n	800b1a8 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800b1a4:	2320      	movs	r3, #32
 800b1a6:	e003      	b.n	800b1b0 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800b1a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1aa:	fab3 f383 	clz	r3, r3
 800b1ae:	b2db      	uxtb	r3, r3
 800b1b0:	005b      	lsls	r3, r3, #1
 800b1b2:	6879      	ldr	r1, [r7, #4]
 800b1b4:	fa01 f303 	lsl.w	r3, r1, r3
 800b1b8:	431a      	orrs	r2, r3
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	60da      	str	r2, [r3, #12]
}
 800b1be:	bf00      	nop
 800b1c0:	372c      	adds	r7, #44	@ 0x2c
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c8:	4770      	bx	lr

0800b1ca <LL_GPIO_SetAFPin_0_7>:
{
 800b1ca:	b480      	push	{r7}
 800b1cc:	b08b      	sub	sp, #44	@ 0x2c
 800b1ce:	af00      	add	r7, sp, #0
 800b1d0:	60f8      	str	r0, [r7, #12]
 800b1d2:	60b9      	str	r1, [r7, #8]
 800b1d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	6a1a      	ldr	r2, [r3, #32]
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	fa93 f3a3 	rbit	r3, r3
 800b1e4:	613b      	str	r3, [r7, #16]
  return result;
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b1ea:	69bb      	ldr	r3, [r7, #24]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d101      	bne.n	800b1f4 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800b1f0:	2320      	movs	r3, #32
 800b1f2:	e003      	b.n	800b1fc <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800b1f4:	69bb      	ldr	r3, [r7, #24]
 800b1f6:	fab3 f383 	clz	r3, r3
 800b1fa:	b2db      	uxtb	r3, r3
 800b1fc:	009b      	lsls	r3, r3, #2
 800b1fe:	210f      	movs	r1, #15
 800b200:	fa01 f303 	lsl.w	r3, r1, r3
 800b204:	43db      	mvns	r3, r3
 800b206:	401a      	ands	r2, r3
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b20c:	6a3b      	ldr	r3, [r7, #32]
 800b20e:	fa93 f3a3 	rbit	r3, r3
 800b212:	61fb      	str	r3, [r7, #28]
  return result;
 800b214:	69fb      	ldr	r3, [r7, #28]
 800b216:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d101      	bne.n	800b222 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800b21e:	2320      	movs	r3, #32
 800b220:	e003      	b.n	800b22a <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800b222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b224:	fab3 f383 	clz	r3, r3
 800b228:	b2db      	uxtb	r3, r3
 800b22a:	009b      	lsls	r3, r3, #2
 800b22c:	6879      	ldr	r1, [r7, #4]
 800b22e:	fa01 f303 	lsl.w	r3, r1, r3
 800b232:	431a      	orrs	r2, r3
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	621a      	str	r2, [r3, #32]
}
 800b238:	bf00      	nop
 800b23a:	372c      	adds	r7, #44	@ 0x2c
 800b23c:	46bd      	mov	sp, r7
 800b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b242:	4770      	bx	lr

0800b244 <LL_GPIO_SetAFPin_8_15>:
{
 800b244:	b480      	push	{r7}
 800b246:	b08b      	sub	sp, #44	@ 0x2c
 800b248:	af00      	add	r7, sp, #0
 800b24a:	60f8      	str	r0, [r7, #12]
 800b24c:	60b9      	str	r1, [r7, #8]
 800b24e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	0a1b      	lsrs	r3, r3, #8
 800b258:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	fa93 f3a3 	rbit	r3, r3
 800b260:	613b      	str	r3, [r7, #16]
  return result;
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b266:	69bb      	ldr	r3, [r7, #24]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d101      	bne.n	800b270 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800b26c:	2320      	movs	r3, #32
 800b26e:	e003      	b.n	800b278 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800b270:	69bb      	ldr	r3, [r7, #24]
 800b272:	fab3 f383 	clz	r3, r3
 800b276:	b2db      	uxtb	r3, r3
 800b278:	009b      	lsls	r3, r3, #2
 800b27a:	210f      	movs	r1, #15
 800b27c:	fa01 f303 	lsl.w	r3, r1, r3
 800b280:	43db      	mvns	r3, r3
 800b282:	401a      	ands	r2, r3
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	0a1b      	lsrs	r3, r3, #8
 800b288:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b28a:	6a3b      	ldr	r3, [r7, #32]
 800b28c:	fa93 f3a3 	rbit	r3, r3
 800b290:	61fb      	str	r3, [r7, #28]
  return result;
 800b292:	69fb      	ldr	r3, [r7, #28]
 800b294:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d101      	bne.n	800b2a0 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800b29c:	2320      	movs	r3, #32
 800b29e:	e003      	b.n	800b2a8 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800b2a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2a2:	fab3 f383 	clz	r3, r3
 800b2a6:	b2db      	uxtb	r3, r3
 800b2a8:	009b      	lsls	r3, r3, #2
 800b2aa:	6879      	ldr	r1, [r7, #4]
 800b2ac:	fa01 f303 	lsl.w	r3, r1, r3
 800b2b0:	431a      	orrs	r2, r3
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800b2b6:	bf00      	nop
 800b2b8:	372c      	adds	r7, #44	@ 0x2c
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c0:	4770      	bx	lr

0800b2c2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800b2c2:	b580      	push	{r7, lr}
 800b2c4:	b08a      	sub	sp, #40	@ 0x28
 800b2c6:	af00      	add	r7, sp, #0
 800b2c8:	6078      	str	r0, [r7, #4]
 800b2ca:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b2da:	69bb      	ldr	r3, [r7, #24]
 800b2dc:	fa93 f3a3 	rbit	r3, r3
 800b2e0:	617b      	str	r3, [r7, #20]
  return result;
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800b2e6:	69fb      	ldr	r3, [r7, #28]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d101      	bne.n	800b2f0 <LL_GPIO_Init+0x2e>
    return 32U;
 800b2ec:	2320      	movs	r3, #32
 800b2ee:	e003      	b.n	800b2f8 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 800b2f0:	69fb      	ldr	r3, [r7, #28]
 800b2f2:	fab3 f383 	clz	r3, r3
 800b2f6:	b2db      	uxtb	r3, r3
 800b2f8:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800b2fa:	e057      	b.n	800b3ac <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	681a      	ldr	r2, [r3, #0]
 800b300:	2101      	movs	r1, #1
 800b302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b304:	fa01 f303 	lsl.w	r3, r1, r3
 800b308:	4013      	ands	r3, r2
 800b30a:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 800b30c:	6a3b      	ldr	r3, [r7, #32]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d049      	beq.n	800b3a6 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	685b      	ldr	r3, [r3, #4]
 800b316:	2b01      	cmp	r3, #1
 800b318:	d003      	beq.n	800b322 <LL_GPIO_Init+0x60>
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	2b02      	cmp	r3, #2
 800b320:	d10d      	bne.n	800b33e <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	689b      	ldr	r3, [r3, #8]
 800b326:	461a      	mov	r2, r3
 800b328:	6a39      	ldr	r1, [r7, #32]
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f7ff fed3 	bl	800b0d6 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	68db      	ldr	r3, [r3, #12]
 800b334:	461a      	mov	r2, r3
 800b336:	6a39      	ldr	r1, [r7, #32]
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f7ff feb4 	bl	800b0a6 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	691b      	ldr	r3, [r3, #16]
 800b342:	461a      	mov	r2, r3
 800b344:	6a39      	ldr	r1, [r7, #32]
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f7ff ff02 	bl	800b150 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	685b      	ldr	r3, [r3, #4]
 800b350:	2b02      	cmp	r3, #2
 800b352:	d121      	bne.n	800b398 <LL_GPIO_Init+0xd6>
 800b354:	6a3b      	ldr	r3, [r7, #32]
 800b356:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	fa93 f3a3 	rbit	r3, r3
 800b35e:	60bb      	str	r3, [r7, #8]
  return result;
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d101      	bne.n	800b36e <LL_GPIO_Init+0xac>
    return 32U;
 800b36a:	2320      	movs	r3, #32
 800b36c:	e003      	b.n	800b376 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	fab3 f383 	clz	r3, r3
 800b374:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800b376:	2b07      	cmp	r3, #7
 800b378:	d807      	bhi.n	800b38a <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	695b      	ldr	r3, [r3, #20]
 800b37e:	461a      	mov	r2, r3
 800b380:	6a39      	ldr	r1, [r7, #32]
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f7ff ff21 	bl	800b1ca <LL_GPIO_SetAFPin_0_7>
 800b388:	e006      	b.n	800b398 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	695b      	ldr	r3, [r3, #20]
 800b38e:	461a      	mov	r2, r3
 800b390:	6a39      	ldr	r1, [r7, #32]
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f7ff ff56 	bl	800b244 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	685b      	ldr	r3, [r3, #4]
 800b39c:	461a      	mov	r2, r3
 800b39e:	6a39      	ldr	r1, [r7, #32]
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f7ff fe43 	bl	800b02c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800b3a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3a8:	3301      	adds	r3, #1
 800b3aa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	681a      	ldr	r2, [r3, #0]
 800b3b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3b2:	fa22 f303 	lsr.w	r3, r2, r3
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d1a0      	bne.n	800b2fc <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 800b3ba:	2300      	movs	r3, #0
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3728      	adds	r7, #40	@ 0x28
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}

0800b3c4 <LL_I2C_Enable>:
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b083      	sub	sp, #12
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f043 0201 	orr.w	r2, r3, #1
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	601a      	str	r2, [r3, #0]
}
 800b3d8:	bf00      	nop
 800b3da:	370c      	adds	r7, #12
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e2:	4770      	bx	lr

0800b3e4 <LL_I2C_Disable>:
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b083      	sub	sp, #12
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f023 0201 	bic.w	r2, r3, #1
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	601a      	str	r2, [r3, #0]
}
 800b3f8:	bf00      	nop
 800b3fa:	370c      	adds	r7, #12
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b402:	4770      	bx	lr

0800b404 <LL_I2C_SetOwnAddress1>:
{
 800b404:	b480      	push	{r7}
 800b406:	b085      	sub	sp, #20
 800b408:	af00      	add	r7, sp, #0
 800b40a:	60f8      	str	r0, [r7, #12]
 800b40c:	60b9      	str	r1, [r7, #8]
 800b40e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	689b      	ldr	r3, [r3, #8]
 800b414:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800b418:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b41c:	68b9      	ldr	r1, [r7, #8]
 800b41e:	687a      	ldr	r2, [r7, #4]
 800b420:	430a      	orrs	r2, r1
 800b422:	431a      	orrs	r2, r3
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	609a      	str	r2, [r3, #8]
}
 800b428:	bf00      	nop
 800b42a:	3714      	adds	r7, #20
 800b42c:	46bd      	mov	sp, r7
 800b42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b432:	4770      	bx	lr

0800b434 <LL_I2C_ConfigSpeed>:
{
 800b434:	b480      	push	{r7}
 800b436:	b087      	sub	sp, #28
 800b438:	af00      	add	r7, sp, #0
 800b43a:	60f8      	str	r0, [r7, #12]
 800b43c:	60b9      	str	r1, [r7, #8]
 800b43e:	607a      	str	r2, [r7, #4]
 800b440:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 800b442:	2300      	movs	r3, #0
 800b444:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 800b446:	2300      	movs	r3, #0
 800b448:	617b      	str	r3, [r7, #20]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	4a42      	ldr	r2, [pc, #264]	@ (800b558 <LL_I2C_ConfigSpeed+0x124>)
 800b44e:	fba2 2303 	umull	r2, r3, r2, r3
 800b452:	0c9b      	lsrs	r3, r3, #18
 800b454:	613b      	str	r3, [r7, #16]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	685b      	ldr	r3, [r3, #4]
 800b45a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800b45e:	693b      	ldr	r3, [r7, #16]
 800b460:	431a      	orrs	r2, r3
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	605a      	str	r2, [r3, #4]
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	6a1b      	ldr	r3, [r3, #32]
 800b46a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	493a      	ldr	r1, [pc, #232]	@ (800b55c <LL_I2C_ConfigSpeed+0x128>)
 800b472:	428b      	cmp	r3, r1
 800b474:	d802      	bhi.n	800b47c <LL_I2C_ConfigSpeed+0x48>
 800b476:	693b      	ldr	r3, [r7, #16]
 800b478:	3301      	adds	r3, #1
 800b47a:	e009      	b.n	800b490 <LL_I2C_ConfigSpeed+0x5c>
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800b482:	fb01 f303 	mul.w	r3, r1, r3
 800b486:	4936      	ldr	r1, [pc, #216]	@ (800b560 <LL_I2C_ConfigSpeed+0x12c>)
 800b488:	fba1 1303 	umull	r1, r3, r1, r3
 800b48c:	099b      	lsrs	r3, r3, #6
 800b48e:	3301      	adds	r3, #1
 800b490:	431a      	orrs	r2, r3
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	621a      	str	r2, [r3, #32]
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	4a30      	ldr	r2, [pc, #192]	@ (800b55c <LL_I2C_ConfigSpeed+0x128>)
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d939      	bls.n	800b512 <LL_I2C_ConfigSpeed+0xde>
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d117      	bne.n	800b4d4 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800b4a4:	687a      	ldr	r2, [r7, #4]
 800b4a6:	4613      	mov	r3, r2
 800b4a8:	005b      	lsls	r3, r3, #1
 800b4aa:	4413      	add	r3, r2
 800b4ac:	68ba      	ldr	r2, [r7, #8]
 800b4ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d009      	beq.n	800b4ce <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800b4ba:	687a      	ldr	r2, [r7, #4]
 800b4bc:	4613      	mov	r3, r2
 800b4be:	005b      	lsls	r3, r3, #1
 800b4c0:	4413      	add	r3, r2
 800b4c2:	68ba      	ldr	r2, [r7, #8]
 800b4c4:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800b4c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b4cc:	e01d      	b.n	800b50a <LL_I2C_ConfigSpeed+0xd6>
 800b4ce:	f248 0301 	movw	r3, #32769	@ 0x8001
 800b4d2:	e01a      	b.n	800b50a <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800b4d4:	687a      	ldr	r2, [r7, #4]
 800b4d6:	4613      	mov	r3, r2
 800b4d8:	009b      	lsls	r3, r3, #2
 800b4da:	4413      	add	r3, r2
 800b4dc:	009a      	lsls	r2, r3, #2
 800b4de:	4413      	add	r3, r2
 800b4e0:	68ba      	ldr	r2, [r7, #8]
 800b4e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d00b      	beq.n	800b506 <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800b4ee:	687a      	ldr	r2, [r7, #4]
 800b4f0:	4613      	mov	r3, r2
 800b4f2:	009b      	lsls	r3, r3, #2
 800b4f4:	4413      	add	r3, r2
 800b4f6:	009a      	lsls	r2, r3, #2
 800b4f8:	4413      	add	r3, r2
 800b4fa:	68ba      	ldr	r2, [r7, #8]
 800b4fc:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800b500:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b504:	e001      	b.n	800b50a <LL_I2C_ConfigSpeed+0xd6>
 800b506:	f248 0301 	movw	r3, #32769	@ 0x8001
 800b50a:	683a      	ldr	r2, [r7, #0]
 800b50c:	4313      	orrs	r3, r2
 800b50e:	617b      	str	r3, [r7, #20]
 800b510:	e011      	b.n	800b536 <LL_I2C_ConfigSpeed+0x102>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	005b      	lsls	r3, r3, #1
 800b516:	68ba      	ldr	r2, [r7, #8]
 800b518:	fbb2 f2f3 	udiv	r2, r2, r3
 800b51c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800b520:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 800b522:	2b00      	cmp	r3, #0
 800b524:	d005      	beq.n	800b532 <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 800b52a:	68ba      	ldr	r2, [r7, #8]
 800b52c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b530:	e000      	b.n	800b534 <LL_I2C_ConfigSpeed+0x100>
 800b532:	2304      	movs	r3, #4
 800b534:	617b      	str	r3, [r7, #20]
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	69db      	ldr	r3, [r3, #28]
 800b53a:	f423 434f 	bic.w	r3, r3, #52992	@ 0xcf00
 800b53e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b542:	697a      	ldr	r2, [r7, #20]
 800b544:	431a      	orrs	r2, r3
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	61da      	str	r2, [r3, #28]
}
 800b54a:	bf00      	nop
 800b54c:	371c      	adds	r7, #28
 800b54e:	46bd      	mov	sp, r7
 800b550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b554:	4770      	bx	lr
 800b556:	bf00      	nop
 800b558:	431bde83 	.word	0x431bde83
 800b55c:	000186a0 	.word	0x000186a0
 800b560:	10624dd3 	.word	0x10624dd3

0800b564 <LL_I2C_SetMode>:
{
 800b564:	b480      	push	{r7}
 800b566:	b083      	sub	sp, #12
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	f023 021a 	bic.w	r2, r3, #26
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	431a      	orrs	r2, r3
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	601a      	str	r2, [r3, #0]
}
 800b57e:	bf00      	nop
 800b580:	370c      	adds	r7, #12
 800b582:	46bd      	mov	sp, r7
 800b584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b588:	4770      	bx	lr

0800b58a <LL_I2C_AcknowledgeNextData>:
{
 800b58a:	b480      	push	{r7}
 800b58c:	b083      	sub	sp, #12
 800b58e:	af00      	add	r7, sp, #0
 800b590:	6078      	str	r0, [r7, #4]
 800b592:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	431a      	orrs	r2, r3
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	601a      	str	r2, [r3, #0]
}
 800b5a4:	bf00      	nop
 800b5a6:	370c      	adds	r7, #12
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ae:	4770      	bx	lr

0800b5b0 <LL_APB1_GRP1_ForceReset>:
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b083      	sub	sp, #12
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR, Periphs);
 800b5b8:	4b05      	ldr	r3, [pc, #20]	@ (800b5d0 <LL_APB1_GRP1_ForceReset+0x20>)
 800b5ba:	6a1a      	ldr	r2, [r3, #32]
 800b5bc:	4904      	ldr	r1, [pc, #16]	@ (800b5d0 <LL_APB1_GRP1_ForceReset+0x20>)
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	4313      	orrs	r3, r2
 800b5c2:	620b      	str	r3, [r1, #32]
}
 800b5c4:	bf00      	nop
 800b5c6:	370c      	adds	r7, #12
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ce:	4770      	bx	lr
 800b5d0:	40023800 	.word	0x40023800

0800b5d4 <LL_APB1_GRP1_ReleaseReset>:
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b083      	sub	sp, #12
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR, Periphs);
 800b5dc:	4b06      	ldr	r3, [pc, #24]	@ (800b5f8 <LL_APB1_GRP1_ReleaseReset+0x24>)
 800b5de:	6a1a      	ldr	r2, [r3, #32]
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	43db      	mvns	r3, r3
 800b5e4:	4904      	ldr	r1, [pc, #16]	@ (800b5f8 <LL_APB1_GRP1_ReleaseReset+0x24>)
 800b5e6:	4013      	ands	r3, r2
 800b5e8:	620b      	str	r3, [r1, #32]
}
 800b5ea:	bf00      	nop
 800b5ec:	370c      	adds	r7, #12
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f4:	4770      	bx	lr
 800b5f6:	bf00      	nop
 800b5f8:	40023800 	.word	0x40023800

0800b5fc <LL_I2C_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are de-initialized
  *          - ERROR  I2C registers are not de-initialized
  */
uint32_t LL_I2C_DeInit(I2C_TypeDef *I2Cx)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b084      	sub	sp, #16
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 800b604:	2300      	movs	r3, #0
 800b606:	73fb      	strb	r3, [r7, #15]

  /* Check the I2C Instance I2Cx */
  assert_param(IS_I2C_ALL_INSTANCE(I2Cx));

  if (I2Cx == I2C1)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	4a16      	ldr	r2, [pc, #88]	@ (800b664 <LL_I2C_DeInit+0x68>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d108      	bne.n	800b622 <LL_I2C_DeInit+0x26>
  {
    /* Force reset of I2C clock */
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_I2C1);
 800b610:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800b614:	f7ff ffcc 	bl	800b5b0 <LL_APB1_GRP1_ForceReset>

    /* Release reset of I2C clock */
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_I2C1);
 800b618:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800b61c:	f7ff ffda 	bl	800b5d4 <LL_APB1_GRP1_ReleaseReset>
 800b620:	e01b      	b.n	800b65a <LL_I2C_DeInit+0x5e>
  }
  else if (I2Cx == I2C2)
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	4a10      	ldr	r2, [pc, #64]	@ (800b668 <LL_I2C_DeInit+0x6c>)
 800b626:	4293      	cmp	r3, r2
 800b628:	d108      	bne.n	800b63c <LL_I2C_DeInit+0x40>
  {
    /* Force reset of I2C clock */
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_I2C2);
 800b62a:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800b62e:	f7ff ffbf 	bl	800b5b0 <LL_APB1_GRP1_ForceReset>

    /* Release reset of I2C clock */
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_I2C2);
 800b632:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800b636:	f7ff ffcd 	bl	800b5d4 <LL_APB1_GRP1_ReleaseReset>
 800b63a:	e00e      	b.n	800b65a <LL_I2C_DeInit+0x5e>

  }
#if defined(I2C3)
  else if (I2Cx == I2C3)
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	4a0b      	ldr	r2, [pc, #44]	@ (800b66c <LL_I2C_DeInit+0x70>)
 800b640:	4293      	cmp	r3, r2
 800b642:	d108      	bne.n	800b656 <LL_I2C_DeInit+0x5a>
  {
    /* Force reset of I2C clock */
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_I2C3);
 800b644:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800b648:	f7ff ffb2 	bl	800b5b0 <LL_APB1_GRP1_ForceReset>

    /* Release reset of I2C clock */
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_I2C3);
 800b64c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800b650:	f7ff ffc0 	bl	800b5d4 <LL_APB1_GRP1_ReleaseReset>
 800b654:	e001      	b.n	800b65a <LL_I2C_DeInit+0x5e>
  }
#endif
  else
  {
    status = ERROR;
 800b656:	2301      	movs	r3, #1
 800b658:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b65a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3710      	adds	r7, #16
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}
 800b664:	40005400 	.word	0x40005400
 800b668:	40005800 	.word	0x40005800
 800b66c:	40005c00 	.word	0x40005c00

0800b670 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b086      	sub	sp, #24
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
 800b678:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f7ff feb2 	bl	800b3e4 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800b680:	f107 0308 	add.w	r3, r7, #8
 800b684:	4618      	mov	r0, r3
 800b686:	f000 f895 	bl	800b7b4 <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 800b68a:	6939      	ldr	r1, [r7, #16]
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	685a      	ldr	r2, [r3, #4]
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	689b      	ldr	r3, [r3, #8]
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f7ff fecd 	bl	800b434 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	68d9      	ldr	r1, [r3, #12]
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	695b      	ldr	r3, [r3, #20]
 800b6a2:	461a      	mov	r2, r3
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f7ff fead 	bl	800b404 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	4619      	mov	r1, r3
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f7ff ff57 	bl	800b564 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f7ff fe84 	bl	800b3c4 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	691b      	ldr	r3, [r3, #16]
 800b6c0:	4619      	mov	r1, r3
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f7ff ff61 	bl	800b58a <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 800b6c8:	2300      	movs	r3, #0
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3718      	adds	r7, #24
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}
	...

0800b6d4 <LL_RCC_GetSysClkSource>:
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800b6d8:	4b04      	ldr	r3, [pc, #16]	@ (800b6ec <LL_RCC_GetSysClkSource+0x18>)
 800b6da:	689b      	ldr	r3, [r3, #8]
 800b6dc:	f003 030c 	and.w	r3, r3, #12
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e8:	4770      	bx	lr
 800b6ea:	bf00      	nop
 800b6ec:	40023800 	.word	0x40023800

0800b6f0 <LL_RCC_GetAHBPrescaler>:
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800b6f4:	4b04      	ldr	r3, [pc, #16]	@ (800b708 <LL_RCC_GetAHBPrescaler+0x18>)
 800b6f6:	689b      	ldr	r3, [r3, #8]
 800b6f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	46bd      	mov	sp, r7
 800b700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b704:	4770      	bx	lr
 800b706:	bf00      	nop
 800b708:	40023800 	.word	0x40023800

0800b70c <LL_RCC_GetAPB1Prescaler>:
{
 800b70c:	b480      	push	{r7}
 800b70e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800b710:	4b04      	ldr	r3, [pc, #16]	@ (800b724 <LL_RCC_GetAPB1Prescaler+0x18>)
 800b712:	689b      	ldr	r3, [r3, #8]
 800b714:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 800b718:	4618      	mov	r0, r3
 800b71a:	46bd      	mov	sp, r7
 800b71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b720:	4770      	bx	lr
 800b722:	bf00      	nop
 800b724:	40023800 	.word	0x40023800

0800b728 <LL_RCC_GetAPB2Prescaler>:
{
 800b728:	b480      	push	{r7}
 800b72a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800b72c:	4b04      	ldr	r3, [pc, #16]	@ (800b740 <LL_RCC_GetAPB2Prescaler+0x18>)
 800b72e:	689b      	ldr	r3, [r3, #8]
 800b730:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800b734:	4618      	mov	r0, r3
 800b736:	46bd      	mov	sp, r7
 800b738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73c:	4770      	bx	lr
 800b73e:	bf00      	nop
 800b740:	40023800 	.word	0x40023800

0800b744 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800b744:	b480      	push	{r7}
 800b746:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800b748:	4b04      	ldr	r3, [pc, #16]	@ (800b75c <LL_RCC_PLL_GetMainSource+0x18>)
 800b74a:	685b      	ldr	r3, [r3, #4]
 800b74c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 800b750:	4618      	mov	r0, r3
 800b752:	46bd      	mov	sp, r7
 800b754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b758:	4770      	bx	lr
 800b75a:	bf00      	nop
 800b75c:	40023800 	.word	0x40023800

0800b760 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800b760:	b480      	push	{r7}
 800b762:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800b764:	4b04      	ldr	r3, [pc, #16]	@ (800b778 <LL_RCC_PLL_GetN+0x18>)
 800b766:	685b      	ldr	r3, [r3, #4]
 800b768:	099b      	lsrs	r3, r3, #6
 800b76a:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800b76e:	4618      	mov	r0, r3
 800b770:	46bd      	mov	sp, r7
 800b772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b776:	4770      	bx	lr
 800b778:	40023800 	.word	0x40023800

0800b77c <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 800b77c:	b480      	push	{r7}
 800b77e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800b780:	4b04      	ldr	r3, [pc, #16]	@ (800b794 <LL_RCC_PLL_GetP+0x18>)
 800b782:	685b      	ldr	r3, [r3, #4]
 800b784:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800b788:	4618      	mov	r0, r3
 800b78a:	46bd      	mov	sp, r7
 800b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b790:	4770      	bx	lr
 800b792:	bf00      	nop
 800b794:	40023800 	.word	0x40023800

0800b798 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800b798:	b480      	push	{r7}
 800b79a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800b79c:	4b04      	ldr	r3, [pc, #16]	@ (800b7b0 <LL_RCC_PLL_GetDivider+0x18>)
 800b79e:	685b      	ldr	r3, [r3, #4]
 800b7a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ac:	4770      	bx	lr
 800b7ae:	bf00      	nop
 800b7b0:	40023800 	.word	0x40023800

0800b7b4 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b082      	sub	sp, #8
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800b7bc:	f000 f820 	bl	800b800 <RCC_GetSystemClockFreq>
 800b7c0:	4602      	mov	r2, r0
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f000 f840 	bl	800b850 <RCC_GetHCLKClockFreq>
 800b7d0:	4602      	mov	r2, r0
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	685b      	ldr	r3, [r3, #4]
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f000 f84e 	bl	800b87c <RCC_GetPCLK1ClockFreq>
 800b7e0:	4602      	mov	r2, r0
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f000 f85a 	bl	800b8a4 <RCC_GetPCLK2ClockFreq>
 800b7f0:	4602      	mov	r2, r0
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	60da      	str	r2, [r3, #12]
}
 800b7f6:	bf00      	nop
 800b7f8:	3708      	adds	r7, #8
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}
	...

0800b800 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b082      	sub	sp, #8
 800b804:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800b806:	2300      	movs	r3, #0
 800b808:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800b80a:	f7ff ff63 	bl	800b6d4 <LL_RCC_GetSysClkSource>
 800b80e:	4603      	mov	r3, r0
 800b810:	2b08      	cmp	r3, #8
 800b812:	d00c      	beq.n	800b82e <RCC_GetSystemClockFreq+0x2e>
 800b814:	2b08      	cmp	r3, #8
 800b816:	d80f      	bhi.n	800b838 <RCC_GetSystemClockFreq+0x38>
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d002      	beq.n	800b822 <RCC_GetSystemClockFreq+0x22>
 800b81c:	2b04      	cmp	r3, #4
 800b81e:	d003      	beq.n	800b828 <RCC_GetSystemClockFreq+0x28>
 800b820:	e00a      	b.n	800b838 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800b822:	4b09      	ldr	r3, [pc, #36]	@ (800b848 <RCC_GetSystemClockFreq+0x48>)
 800b824:	607b      	str	r3, [r7, #4]
      break;
 800b826:	e00a      	b.n	800b83e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800b828:	4b08      	ldr	r3, [pc, #32]	@ (800b84c <RCC_GetSystemClockFreq+0x4c>)
 800b82a:	607b      	str	r3, [r7, #4]
      break;
 800b82c:	e007      	b.n	800b83e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800b82e:	2008      	movs	r0, #8
 800b830:	f000 f84c 	bl	800b8cc <RCC_PLL_GetFreqDomain_SYS>
 800b834:	6078      	str	r0, [r7, #4]
      break;
 800b836:	e002      	b.n	800b83e <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 800b838:	4b03      	ldr	r3, [pc, #12]	@ (800b848 <RCC_GetSystemClockFreq+0x48>)
 800b83a:	607b      	str	r3, [r7, #4]
      break;
 800b83c:	bf00      	nop
  }

  return frequency;
 800b83e:	687b      	ldr	r3, [r7, #4]
}
 800b840:	4618      	mov	r0, r3
 800b842:	3708      	adds	r7, #8
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}
 800b848:	00f42400 	.word	0x00f42400
 800b84c:	007a1200 	.word	0x007a1200

0800b850 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b082      	sub	sp, #8
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800b858:	f7ff ff4a 	bl	800b6f0 <LL_RCC_GetAHBPrescaler>
 800b85c:	4603      	mov	r3, r0
 800b85e:	091b      	lsrs	r3, r3, #4
 800b860:	f003 030f 	and.w	r3, r3, #15
 800b864:	4a04      	ldr	r2, [pc, #16]	@ (800b878 <RCC_GetHCLKClockFreq+0x28>)
 800b866:	5cd3      	ldrb	r3, [r2, r3]
 800b868:	461a      	mov	r2, r3
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	40d3      	lsrs	r3, r2
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3708      	adds	r7, #8
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}
 800b876:	bf00      	nop
 800b878:	08010818 	.word	0x08010818

0800b87c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b082      	sub	sp, #8
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800b884:	f7ff ff42 	bl	800b70c <LL_RCC_GetAPB1Prescaler>
 800b888:	4603      	mov	r3, r0
 800b88a:	0a9b      	lsrs	r3, r3, #10
 800b88c:	4a04      	ldr	r2, [pc, #16]	@ (800b8a0 <RCC_GetPCLK1ClockFreq+0x24>)
 800b88e:	5cd3      	ldrb	r3, [r2, r3]
 800b890:	461a      	mov	r2, r3
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	40d3      	lsrs	r3, r2
}
 800b896:	4618      	mov	r0, r3
 800b898:	3708      	adds	r7, #8
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}
 800b89e:	bf00      	nop
 800b8a0:	08010828 	.word	0x08010828

0800b8a4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b082      	sub	sp, #8
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800b8ac:	f7ff ff3c 	bl	800b728 <LL_RCC_GetAPB2Prescaler>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	0b5b      	lsrs	r3, r3, #13
 800b8b4:	4a04      	ldr	r2, [pc, #16]	@ (800b8c8 <RCC_GetPCLK2ClockFreq+0x24>)
 800b8b6:	5cd3      	ldrb	r3, [r2, r3]
 800b8b8:	461a      	mov	r2, r3
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	40d3      	lsrs	r3, r2
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3708      	adds	r7, #8
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}
 800b8c6:	bf00      	nop
 800b8c8:	08010828 	.word	0x08010828

0800b8cc <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 800b8cc:	b590      	push	{r4, r7, lr}
 800b8ce:	b087      	sub	sp, #28
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800b8e0:	f7ff ff30 	bl	800b744 <LL_RCC_PLL_GetMainSource>
 800b8e4:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d004      	beq.n	800b8f6 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b8f2:	d003      	beq.n	800b8fc <RCC_PLL_GetFreqDomain_SYS+0x30>
 800b8f4:	e005      	b.n	800b902 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800b8f6:	4b12      	ldr	r3, [pc, #72]	@ (800b940 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800b8f8:	617b      	str	r3, [r7, #20]
      break;
 800b8fa:	e005      	b.n	800b908 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800b8fc:	4b11      	ldr	r3, [pc, #68]	@ (800b944 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800b8fe:	617b      	str	r3, [r7, #20]
      break;
 800b900:	e002      	b.n	800b908 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800b902:	4b0f      	ldr	r3, [pc, #60]	@ (800b940 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800b904:	617b      	str	r3, [r7, #20]
      break;
 800b906:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2b08      	cmp	r3, #8
 800b90c:	d113      	bne.n	800b936 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800b90e:	f7ff ff43 	bl	800b798 <LL_RCC_PLL_GetDivider>
 800b912:	4602      	mov	r2, r0
 800b914:	697b      	ldr	r3, [r7, #20]
 800b916:	fbb3 f4f2 	udiv	r4, r3, r2
 800b91a:	f7ff ff21 	bl	800b760 <LL_RCC_PLL_GetN>
 800b91e:	4603      	mov	r3, r0
 800b920:	fb03 f404 	mul.w	r4, r3, r4
 800b924:	f7ff ff2a 	bl	800b77c <LL_RCC_PLL_GetP>
 800b928:	4603      	mov	r3, r0
 800b92a:	0c1b      	lsrs	r3, r3, #16
 800b92c:	3301      	adds	r3, #1
 800b92e:	005b      	lsls	r3, r3, #1
 800b930:	fbb4 f3f3 	udiv	r3, r4, r3
 800b934:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800b936:	693b      	ldr	r3, [r7, #16]
}
 800b938:	4618      	mov	r0, r3
 800b93a:	371c      	adds	r7, #28
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd90      	pop	{r4, r7, pc}
 800b940:	00f42400 	.word	0x00f42400
 800b944:	007a1200 	.word	0x007a1200

0800b948 <LL_SPI_IsEnabled>:
{
 800b948:	b480      	push	{r7}
 800b94a:	b083      	sub	sp, #12
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b958:	2b40      	cmp	r3, #64	@ 0x40
 800b95a:	d101      	bne.n	800b960 <LL_SPI_IsEnabled+0x18>
 800b95c:	2301      	movs	r3, #1
 800b95e:	e000      	b.n	800b962 <LL_SPI_IsEnabled+0x1a>
 800b960:	2300      	movs	r3, #0
}
 800b962:	4618      	mov	r0, r3
 800b964:	370c      	adds	r7, #12
 800b966:	46bd      	mov	sp, r7
 800b968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96c:	4770      	bx	lr

0800b96e <LL_SPI_SetCRCPolynomial>:
{
 800b96e:	b480      	push	{r7}
 800b970:	b083      	sub	sp, #12
 800b972:	af00      	add	r7, sp, #0
 800b974:	6078      	str	r0, [r7, #4]
 800b976:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	b29b      	uxth	r3, r3
 800b97c:	461a      	mov	r2, r3
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	611a      	str	r2, [r3, #16]
}
 800b982:	bf00      	nop
 800b984:	370c      	adds	r7, #12
 800b986:	46bd      	mov	sp, r7
 800b988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98c:	4770      	bx	lr

0800b98e <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800b98e:	b580      	push	{r7, lr}
 800b990:	b084      	sub	sp, #16
 800b992:	af00      	add	r7, sp, #0
 800b994:	6078      	str	r0, [r7, #4]
 800b996:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800b998:	2301      	movs	r3, #1
 800b99a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f7ff ffd3 	bl	800b948 <LL_SPI_IsEnabled>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d139      	bne.n	800ba1c <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b9b0:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 800b9b4:	683a      	ldr	r2, [r7, #0]
 800b9b6:	6811      	ldr	r1, [r2, #0]
 800b9b8:	683a      	ldr	r2, [r7, #0]
 800b9ba:	6852      	ldr	r2, [r2, #4]
 800b9bc:	4311      	orrs	r1, r2
 800b9be:	683a      	ldr	r2, [r7, #0]
 800b9c0:	6892      	ldr	r2, [r2, #8]
 800b9c2:	4311      	orrs	r1, r2
 800b9c4:	683a      	ldr	r2, [r7, #0]
 800b9c6:	68d2      	ldr	r2, [r2, #12]
 800b9c8:	4311      	orrs	r1, r2
 800b9ca:	683a      	ldr	r2, [r7, #0]
 800b9cc:	6912      	ldr	r2, [r2, #16]
 800b9ce:	4311      	orrs	r1, r2
 800b9d0:	683a      	ldr	r2, [r7, #0]
 800b9d2:	6952      	ldr	r2, [r2, #20]
 800b9d4:	4311      	orrs	r1, r2
 800b9d6:	683a      	ldr	r2, [r7, #0]
 800b9d8:	6992      	ldr	r2, [r2, #24]
 800b9da:	4311      	orrs	r1, r2
 800b9dc:	683a      	ldr	r2, [r7, #0]
 800b9de:	69d2      	ldr	r2, [r2, #28]
 800b9e0:	4311      	orrs	r1, r2
 800b9e2:	683a      	ldr	r2, [r7, #0]
 800b9e4:	6a12      	ldr	r2, [r2, #32]
 800b9e6:	430a      	orrs	r2, r1
 800b9e8:	431a      	orrs	r2, r3
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	685b      	ldr	r3, [r3, #4]
 800b9f2:	f023 0204 	bic.w	r2, r3, #4
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	695b      	ldr	r3, [r3, #20]
 800b9fa:	0c1b      	lsrs	r3, r3, #16
 800b9fc:	431a      	orrs	r2, r3
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	6a1b      	ldr	r3, [r3, #32]
 800ba06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ba0a:	d105      	bne.n	800ba18 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba10:	4619      	mov	r1, r3
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f7ff ffab 	bl	800b96e <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	69db      	ldr	r3, [r3, #28]
 800ba20:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	61da      	str	r2, [r3, #28]
  return status;
 800ba28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3710      	adds	r7, #16
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}

0800ba32 <LL_TIM_SetPrescaler>:
{
 800ba32:	b480      	push	{r7}
 800ba34:	b083      	sub	sp, #12
 800ba36:	af00      	add	r7, sp, #0
 800ba38:	6078      	str	r0, [r7, #4]
 800ba3a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	683a      	ldr	r2, [r7, #0]
 800ba40:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800ba42:	bf00      	nop
 800ba44:	370c      	adds	r7, #12
 800ba46:	46bd      	mov	sp, r7
 800ba48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4c:	4770      	bx	lr

0800ba4e <LL_TIM_SetAutoReload>:
{
 800ba4e:	b480      	push	{r7}
 800ba50:	b083      	sub	sp, #12
 800ba52:	af00      	add	r7, sp, #0
 800ba54:	6078      	str	r0, [r7, #4]
 800ba56:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	683a      	ldr	r2, [r7, #0]
 800ba5c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800ba5e:	bf00      	nop
 800ba60:	370c      	adds	r7, #12
 800ba62:	46bd      	mov	sp, r7
 800ba64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba68:	4770      	bx	lr

0800ba6a <LL_TIM_SetRepetitionCounter>:
{
 800ba6a:	b480      	push	{r7}
 800ba6c:	b083      	sub	sp, #12
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	6078      	str	r0, [r7, #4]
 800ba72:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	683a      	ldr	r2, [r7, #0]
 800ba78:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800ba7a:	bf00      	nop
 800ba7c:	370c      	adds	r7, #12
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba84:	4770      	bx	lr

0800ba86 <LL_TIM_OC_SetCompareCH1>:
{
 800ba86:	b480      	push	{r7}
 800ba88:	b083      	sub	sp, #12
 800ba8a:	af00      	add	r7, sp, #0
 800ba8c:	6078      	str	r0, [r7, #4]
 800ba8e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	683a      	ldr	r2, [r7, #0]
 800ba94:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800ba96:	bf00      	nop
 800ba98:	370c      	adds	r7, #12
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa0:	4770      	bx	lr

0800baa2 <LL_TIM_OC_SetCompareCH2>:
{
 800baa2:	b480      	push	{r7}
 800baa4:	b083      	sub	sp, #12
 800baa6:	af00      	add	r7, sp, #0
 800baa8:	6078      	str	r0, [r7, #4]
 800baaa:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	683a      	ldr	r2, [r7, #0]
 800bab0:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800bab2:	bf00      	nop
 800bab4:	370c      	adds	r7, #12
 800bab6:	46bd      	mov	sp, r7
 800bab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babc:	4770      	bx	lr

0800babe <LL_TIM_OC_SetCompareCH3>:
{
 800babe:	b480      	push	{r7}
 800bac0:	b083      	sub	sp, #12
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]
 800bac6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	683a      	ldr	r2, [r7, #0]
 800bacc:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800bace:	bf00      	nop
 800bad0:	370c      	adds	r7, #12
 800bad2:	46bd      	mov	sp, r7
 800bad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad8:	4770      	bx	lr

0800bada <LL_TIM_OC_SetCompareCH4>:
{
 800bada:	b480      	push	{r7}
 800badc:	b083      	sub	sp, #12
 800bade:	af00      	add	r7, sp, #0
 800bae0:	6078      	str	r0, [r7, #4]
 800bae2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	683a      	ldr	r2, [r7, #0]
 800bae8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800baea:	bf00      	nop
 800baec:	370c      	adds	r7, #12
 800baee:	46bd      	mov	sp, r7
 800baf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf4:	4770      	bx	lr

0800baf6 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800baf6:	b480      	push	{r7}
 800baf8:	b083      	sub	sp, #12
 800bafa:	af00      	add	r7, sp, #0
 800bafc:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	695b      	ldr	r3, [r3, #20]
 800bb02:	f043 0201 	orr.w	r2, r3, #1
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	615a      	str	r2, [r3, #20]
}
 800bb0a:	bf00      	nop
 800bb0c:	370c      	adds	r7, #12
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb14:	4770      	bx	lr
	...

0800bb18 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b084      	sub	sp, #16
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
 800bb20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	4a3d      	ldr	r2, [pc, #244]	@ (800bc20 <LL_TIM_Init+0x108>)
 800bb2c:	4293      	cmp	r3, r2
 800bb2e:	d013      	beq.n	800bb58 <LL_TIM_Init+0x40>
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb36:	d00f      	beq.n	800bb58 <LL_TIM_Init+0x40>
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	4a3a      	ldr	r2, [pc, #232]	@ (800bc24 <LL_TIM_Init+0x10c>)
 800bb3c:	4293      	cmp	r3, r2
 800bb3e:	d00b      	beq.n	800bb58 <LL_TIM_Init+0x40>
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	4a39      	ldr	r2, [pc, #228]	@ (800bc28 <LL_TIM_Init+0x110>)
 800bb44:	4293      	cmp	r3, r2
 800bb46:	d007      	beq.n	800bb58 <LL_TIM_Init+0x40>
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	4a38      	ldr	r2, [pc, #224]	@ (800bc2c <LL_TIM_Init+0x114>)
 800bb4c:	4293      	cmp	r3, r2
 800bb4e:	d003      	beq.n	800bb58 <LL_TIM_Init+0x40>
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	4a37      	ldr	r2, [pc, #220]	@ (800bc30 <LL_TIM_Init+0x118>)
 800bb54:	4293      	cmp	r3, r2
 800bb56:	d106      	bne.n	800bb66 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	685b      	ldr	r3, [r3, #4]
 800bb62:	4313      	orrs	r3, r2
 800bb64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	4a2d      	ldr	r2, [pc, #180]	@ (800bc20 <LL_TIM_Init+0x108>)
 800bb6a:	4293      	cmp	r3, r2
 800bb6c:	d02b      	beq.n	800bbc6 <LL_TIM_Init+0xae>
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb74:	d027      	beq.n	800bbc6 <LL_TIM_Init+0xae>
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	4a2a      	ldr	r2, [pc, #168]	@ (800bc24 <LL_TIM_Init+0x10c>)
 800bb7a:	4293      	cmp	r3, r2
 800bb7c:	d023      	beq.n	800bbc6 <LL_TIM_Init+0xae>
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	4a29      	ldr	r2, [pc, #164]	@ (800bc28 <LL_TIM_Init+0x110>)
 800bb82:	4293      	cmp	r3, r2
 800bb84:	d01f      	beq.n	800bbc6 <LL_TIM_Init+0xae>
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	4a28      	ldr	r2, [pc, #160]	@ (800bc2c <LL_TIM_Init+0x114>)
 800bb8a:	4293      	cmp	r3, r2
 800bb8c:	d01b      	beq.n	800bbc6 <LL_TIM_Init+0xae>
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	4a27      	ldr	r2, [pc, #156]	@ (800bc30 <LL_TIM_Init+0x118>)
 800bb92:	4293      	cmp	r3, r2
 800bb94:	d017      	beq.n	800bbc6 <LL_TIM_Init+0xae>
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	4a26      	ldr	r2, [pc, #152]	@ (800bc34 <LL_TIM_Init+0x11c>)
 800bb9a:	4293      	cmp	r3, r2
 800bb9c:	d013      	beq.n	800bbc6 <LL_TIM_Init+0xae>
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	4a25      	ldr	r2, [pc, #148]	@ (800bc38 <LL_TIM_Init+0x120>)
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d00f      	beq.n	800bbc6 <LL_TIM_Init+0xae>
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	4a24      	ldr	r2, [pc, #144]	@ (800bc3c <LL_TIM_Init+0x124>)
 800bbaa:	4293      	cmp	r3, r2
 800bbac:	d00b      	beq.n	800bbc6 <LL_TIM_Init+0xae>
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	4a23      	ldr	r2, [pc, #140]	@ (800bc40 <LL_TIM_Init+0x128>)
 800bbb2:	4293      	cmp	r3, r2
 800bbb4:	d007      	beq.n	800bbc6 <LL_TIM_Init+0xae>
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	4a22      	ldr	r2, [pc, #136]	@ (800bc44 <LL_TIM_Init+0x12c>)
 800bbba:	4293      	cmp	r3, r2
 800bbbc:	d003      	beq.n	800bbc6 <LL_TIM_Init+0xae>
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	4a21      	ldr	r2, [pc, #132]	@ (800bc48 <LL_TIM_Init+0x130>)
 800bbc2:	4293      	cmp	r3, r2
 800bbc4:	d106      	bne.n	800bbd4 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	68db      	ldr	r3, [r3, #12]
 800bbd0:	4313      	orrs	r3, r2
 800bbd2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	68fa      	ldr	r2, [r7, #12]
 800bbd8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	689b      	ldr	r3, [r3, #8]
 800bbde:	4619      	mov	r1, r3
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f7ff ff34 	bl	800ba4e <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	881b      	ldrh	r3, [r3, #0]
 800bbea:	4619      	mov	r1, r3
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f7ff ff20 	bl	800ba32 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	4a0a      	ldr	r2, [pc, #40]	@ (800bc20 <LL_TIM_Init+0x108>)
 800bbf6:	4293      	cmp	r3, r2
 800bbf8:	d003      	beq.n	800bc02 <LL_TIM_Init+0xea>
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	4a0c      	ldr	r2, [pc, #48]	@ (800bc30 <LL_TIM_Init+0x118>)
 800bbfe:	4293      	cmp	r3, r2
 800bc00:	d105      	bne.n	800bc0e <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	691b      	ldr	r3, [r3, #16]
 800bc06:	4619      	mov	r1, r3
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f7ff ff2e 	bl	800ba6a <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f7ff ff71 	bl	800baf6 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800bc14:	2300      	movs	r3, #0
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	3710      	adds	r7, #16
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}
 800bc1e:	bf00      	nop
 800bc20:	40010000 	.word	0x40010000
 800bc24:	40000400 	.word	0x40000400
 800bc28:	40000800 	.word	0x40000800
 800bc2c:	40000c00 	.word	0x40000c00
 800bc30:	40010400 	.word	0x40010400
 800bc34:	40014000 	.word	0x40014000
 800bc38:	40014400 	.word	0x40014400
 800bc3c:	40014800 	.word	0x40014800
 800bc40:	40001800 	.word	0x40001800
 800bc44:	40001c00 	.word	0x40001c00
 800bc48:	40002000 	.word	0x40002000

0800bc4c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b086      	sub	sp, #24
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	60f8      	str	r0, [r7, #12]
 800bc54:	60b9      	str	r1, [r7, #8]
 800bc56:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800bc58:	2301      	movs	r3, #1
 800bc5a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bc62:	d027      	beq.n	800bcb4 <LL_TIM_OC_Init+0x68>
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bc6a:	d82a      	bhi.n	800bcc2 <LL_TIM_OC_Init+0x76>
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bc72:	d018      	beq.n	800bca6 <LL_TIM_OC_Init+0x5a>
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bc7a:	d822      	bhi.n	800bcc2 <LL_TIM_OC_Init+0x76>
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	2b01      	cmp	r3, #1
 800bc80:	d003      	beq.n	800bc8a <LL_TIM_OC_Init+0x3e>
 800bc82:	68bb      	ldr	r3, [r7, #8]
 800bc84:	2b10      	cmp	r3, #16
 800bc86:	d007      	beq.n	800bc98 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 800bc88:	e01b      	b.n	800bcc2 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800bc8a:	6879      	ldr	r1, [r7, #4]
 800bc8c:	68f8      	ldr	r0, [r7, #12]
 800bc8e:	f000 f861 	bl	800bd54 <OC1Config>
 800bc92:	4603      	mov	r3, r0
 800bc94:	75fb      	strb	r3, [r7, #23]
      break;
 800bc96:	e015      	b.n	800bcc4 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800bc98:	6879      	ldr	r1, [r7, #4]
 800bc9a:	68f8      	ldr	r0, [r7, #12]
 800bc9c:	f000 f8c6 	bl	800be2c <OC2Config>
 800bca0:	4603      	mov	r3, r0
 800bca2:	75fb      	strb	r3, [r7, #23]
      break;
 800bca4:	e00e      	b.n	800bcc4 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800bca6:	6879      	ldr	r1, [r7, #4]
 800bca8:	68f8      	ldr	r0, [r7, #12]
 800bcaa:	f000 f92f 	bl	800bf0c <OC3Config>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	75fb      	strb	r3, [r7, #23]
      break;
 800bcb2:	e007      	b.n	800bcc4 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800bcb4:	6879      	ldr	r1, [r7, #4]
 800bcb6:	68f8      	ldr	r0, [r7, #12]
 800bcb8:	f000 f998 	bl	800bfec <OC4Config>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	75fb      	strb	r3, [r7, #23]
      break;
 800bcc0:	e000      	b.n	800bcc4 <LL_TIM_OC_Init+0x78>
      break;
 800bcc2:	bf00      	nop
  }

  return result;
 800bcc4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	3718      	adds	r7, #24
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}

0800bcce <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, const LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 800bcce:	b480      	push	{r7}
 800bcd0:	b085      	sub	sp, #20
 800bcd2:	af00      	add	r7, sp, #0
 800bcd4:	6078      	str	r0, [r7, #4]
 800bcd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800bce2:	683a      	ldr	r2, [r7, #0]
 800bce4:	7b12      	ldrb	r2, [r2, #12]
 800bce6:	4313      	orrs	r3, r2
 800bce8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	689b      	ldr	r3, [r3, #8]
 800bcf4:	4313      	orrs	r3, r2
 800bcf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	685b      	ldr	r3, [r3, #4]
 800bd02:	4313      	orrs	r3, r2
 800bd04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	4313      	orrs	r3, r2
 800bd12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bd1a:	683a      	ldr	r2, [r7, #0]
 800bd1c:	89d2      	ldrh	r2, [r2, #14]
 800bd1e:	4313      	orrs	r3, r2
 800bd20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	691b      	ldr	r3, [r3, #16]
 800bd2c:	4313      	orrs	r3, r2
 800bd2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	695b      	ldr	r3, [r3, #20]
 800bd3a:	4313      	orrs	r3, r2
 800bd3c:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	68fa      	ldr	r2, [r7, #12]
 800bd42:	645a      	str	r2, [r3, #68]	@ 0x44

  return SUCCESS;
 800bd44:	2300      	movs	r3, #0
}
 800bd46:	4618      	mov	r0, r3
 800bd48:	3714      	adds	r7, #20
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd50:	4770      	bx	lr
	...

0800bd54 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b086      	sub	sp, #24
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
 800bd5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6a1b      	ldr	r3, [r3, #32]
 800bd62:	f023 0201 	bic.w	r2, r3, #1
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6a1b      	ldr	r3, [r3, #32]
 800bd6e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	685b      	ldr	r3, [r3, #4]
 800bd74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	699b      	ldr	r3, [r3, #24]
 800bd7a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	f023 0303 	bic.w	r3, r3, #3
 800bd82:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	4313      	orrs	r3, r2
 800bd90:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	f023 0202 	bic.w	r2, r3, #2
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	691b      	ldr	r3, [r3, #16]
 800bd9c:	4313      	orrs	r3, r2
 800bd9e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800bda0:	697b      	ldr	r3, [r7, #20]
 800bda2:	f023 0201 	bic.w	r2, r3, #1
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	685b      	ldr	r3, [r3, #4]
 800bdaa:	4313      	orrs	r3, r2
 800bdac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	4a1c      	ldr	r2, [pc, #112]	@ (800be24 <OC1Config+0xd0>)
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	d003      	beq.n	800bdbe <OC1Config+0x6a>
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	4a1b      	ldr	r2, [pc, #108]	@ (800be28 <OC1Config+0xd4>)
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	d11e      	bne.n	800bdfc <OC1Config+0xa8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	f023 0208 	bic.w	r2, r3, #8
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	695b      	ldr	r3, [r3, #20]
 800bdc8:	009b      	lsls	r3, r3, #2
 800bdca:	4313      	orrs	r3, r2
 800bdcc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	f023 0204 	bic.w	r2, r3, #4
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	689b      	ldr	r3, [r3, #8]
 800bdd8:	009b      	lsls	r3, r3, #2
 800bdda:	4313      	orrs	r3, r2
 800bddc:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	699b      	ldr	r3, [r3, #24]
 800bde8:	4313      	orrs	r3, r2
 800bdea:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	69db      	ldr	r3, [r3, #28]
 800bdf6:	005b      	lsls	r3, r3, #1
 800bdf8:	4313      	orrs	r3, r2
 800bdfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	693a      	ldr	r2, [r7, #16]
 800be00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	68fa      	ldr	r2, [r7, #12]
 800be06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	68db      	ldr	r3, [r3, #12]
 800be0c:	4619      	mov	r1, r3
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	f7ff fe39 	bl	800ba86 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	697a      	ldr	r2, [r7, #20]
 800be18:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800be1a:	2300      	movs	r3, #0
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3718      	adds	r7, #24
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}
 800be24:	40010000 	.word	0x40010000
 800be28:	40010400 	.word	0x40010400

0800be2c <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b086      	sub	sp, #24
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
 800be34:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6a1b      	ldr	r3, [r3, #32]
 800be3a:	f023 0210 	bic.w	r2, r3, #16
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6a1b      	ldr	r3, [r3, #32]
 800be46:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	685b      	ldr	r3, [r3, #4]
 800be4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	699b      	ldr	r3, [r3, #24]
 800be52:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800be5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	021b      	lsls	r3, r3, #8
 800be68:	4313      	orrs	r3, r2
 800be6a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800be6c:	697b      	ldr	r3, [r7, #20]
 800be6e:	f023 0220 	bic.w	r2, r3, #32
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	691b      	ldr	r3, [r3, #16]
 800be76:	011b      	lsls	r3, r3, #4
 800be78:	4313      	orrs	r3, r2
 800be7a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	f023 0210 	bic.w	r2, r3, #16
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	685b      	ldr	r3, [r3, #4]
 800be86:	011b      	lsls	r3, r3, #4
 800be88:	4313      	orrs	r3, r2
 800be8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	4a1d      	ldr	r2, [pc, #116]	@ (800bf04 <OC2Config+0xd8>)
 800be90:	4293      	cmp	r3, r2
 800be92:	d003      	beq.n	800be9c <OC2Config+0x70>
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	4a1c      	ldr	r2, [pc, #112]	@ (800bf08 <OC2Config+0xdc>)
 800be98:	4293      	cmp	r3, r2
 800be9a:	d11f      	bne.n	800bedc <OC2Config+0xb0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800be9c:	697b      	ldr	r3, [r7, #20]
 800be9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	695b      	ldr	r3, [r3, #20]
 800bea6:	019b      	lsls	r3, r3, #6
 800bea8:	4313      	orrs	r3, r2
 800beaa:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800beac:	697b      	ldr	r3, [r7, #20]
 800beae:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	689b      	ldr	r3, [r3, #8]
 800beb6:	019b      	lsls	r3, r3, #6
 800beb8:	4313      	orrs	r3, r2
 800beba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800bebc:	693b      	ldr	r3, [r7, #16]
 800bebe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	699b      	ldr	r3, [r3, #24]
 800bec6:	009b      	lsls	r3, r3, #2
 800bec8:	4313      	orrs	r3, r2
 800beca:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	69db      	ldr	r3, [r3, #28]
 800bed6:	00db      	lsls	r3, r3, #3
 800bed8:	4313      	orrs	r3, r2
 800beda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	693a      	ldr	r2, [r7, #16]
 800bee0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	68fa      	ldr	r2, [r7, #12]
 800bee6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	68db      	ldr	r3, [r3, #12]
 800beec:	4619      	mov	r1, r3
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f7ff fdd7 	bl	800baa2 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	697a      	ldr	r2, [r7, #20]
 800bef8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800befa:	2300      	movs	r3, #0
}
 800befc:	4618      	mov	r0, r3
 800befe:	3718      	adds	r7, #24
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}
 800bf04:	40010000 	.word	0x40010000
 800bf08:	40010400 	.word	0x40010400

0800bf0c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b086      	sub	sp, #24
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
 800bf14:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6a1b      	ldr	r3, [r3, #32]
 800bf1a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6a1b      	ldr	r3, [r3, #32]
 800bf26:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	685b      	ldr	r3, [r3, #4]
 800bf2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	69db      	ldr	r3, [r3, #28]
 800bf32:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	f023 0303 	bic.w	r3, r3, #3
 800bf3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	4313      	orrs	r3, r2
 800bf48:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800bf4a:	697b      	ldr	r3, [r7, #20]
 800bf4c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	691b      	ldr	r3, [r3, #16]
 800bf54:	021b      	lsls	r3, r3, #8
 800bf56:	4313      	orrs	r3, r2
 800bf58:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800bf5a:	697b      	ldr	r3, [r7, #20]
 800bf5c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	685b      	ldr	r3, [r3, #4]
 800bf64:	021b      	lsls	r3, r3, #8
 800bf66:	4313      	orrs	r3, r2
 800bf68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	4a1d      	ldr	r2, [pc, #116]	@ (800bfe4 <OC3Config+0xd8>)
 800bf6e:	4293      	cmp	r3, r2
 800bf70:	d003      	beq.n	800bf7a <OC3Config+0x6e>
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	4a1c      	ldr	r2, [pc, #112]	@ (800bfe8 <OC3Config+0xdc>)
 800bf76:	4293      	cmp	r3, r2
 800bf78:	d11f      	bne.n	800bfba <OC3Config+0xae>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	695b      	ldr	r3, [r3, #20]
 800bf84:	029b      	lsls	r3, r3, #10
 800bf86:	4313      	orrs	r3, r2
 800bf88:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800bf8a:	697b      	ldr	r3, [r7, #20]
 800bf8c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	689b      	ldr	r3, [r3, #8]
 800bf94:	029b      	lsls	r3, r3, #10
 800bf96:	4313      	orrs	r3, r2
 800bf98:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800bf9a:	693b      	ldr	r3, [r7, #16]
 800bf9c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	699b      	ldr	r3, [r3, #24]
 800bfa4:	011b      	lsls	r3, r3, #4
 800bfa6:	4313      	orrs	r3, r2
 800bfa8:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800bfaa:	693b      	ldr	r3, [r7, #16]
 800bfac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	69db      	ldr	r3, [r3, #28]
 800bfb4:	015b      	lsls	r3, r3, #5
 800bfb6:	4313      	orrs	r3, r2
 800bfb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	693a      	ldr	r2, [r7, #16]
 800bfbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	68fa      	ldr	r2, [r7, #12]
 800bfc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	68db      	ldr	r3, [r3, #12]
 800bfca:	4619      	mov	r1, r3
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f7ff fd76 	bl	800babe <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	697a      	ldr	r2, [r7, #20]
 800bfd6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800bfd8:	2300      	movs	r3, #0
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	3718      	adds	r7, #24
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}
 800bfe2:	bf00      	nop
 800bfe4:	40010000 	.word	0x40010000
 800bfe8:	40010400 	.word	0x40010400

0800bfec <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b086      	sub	sp, #24
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
 800bff4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	6a1b      	ldr	r3, [r3, #32]
 800bffa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6a1b      	ldr	r3, [r3, #32]
 800c006:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	685b      	ldr	r3, [r3, #4]
 800c00c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	69db      	ldr	r3, [r3, #28]
 800c012:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c01a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	021b      	lsls	r3, r3, #8
 800c028:	4313      	orrs	r3, r2
 800c02a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800c02c:	693b      	ldr	r3, [r7, #16]
 800c02e:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	691b      	ldr	r3, [r3, #16]
 800c036:	031b      	lsls	r3, r3, #12
 800c038:	4313      	orrs	r3, r2
 800c03a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800c03c:	693b      	ldr	r3, [r7, #16]
 800c03e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	685b      	ldr	r3, [r3, #4]
 800c046:	031b      	lsls	r3, r3, #12
 800c048:	4313      	orrs	r3, r2
 800c04a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	4a11      	ldr	r2, [pc, #68]	@ (800c094 <OC4Config+0xa8>)
 800c050:	4293      	cmp	r3, r2
 800c052:	d003      	beq.n	800c05c <OC4Config+0x70>
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	4a10      	ldr	r2, [pc, #64]	@ (800c098 <OC4Config+0xac>)
 800c058:	4293      	cmp	r3, r2
 800c05a:	d107      	bne.n	800c06c <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	699b      	ldr	r3, [r3, #24]
 800c066:	019b      	lsls	r3, r3, #6
 800c068:	4313      	orrs	r3, r2
 800c06a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	697a      	ldr	r2, [r7, #20]
 800c070:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	68fa      	ldr	r2, [r7, #12]
 800c076:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	68db      	ldr	r3, [r3, #12]
 800c07c:	4619      	mov	r1, r3
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f7ff fd2b 	bl	800bada <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	693a      	ldr	r2, [r7, #16]
 800c088:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800c08a:	2300      	movs	r3, #0
}
 800c08c:	4618      	mov	r0, r3
 800c08e:	3718      	adds	r7, #24
 800c090:	46bd      	mov	sp, r7
 800c092:	bd80      	pop	{r7, pc}
 800c094:	40010000 	.word	0x40010000
 800c098:	40010400 	.word	0x40010400

0800c09c <LL_USART_IsEnabled>:
{
 800c09c:	b480      	push	{r7}
 800c09e:	b083      	sub	sp, #12
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	68db      	ldr	r3, [r3, #12]
 800c0a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c0ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c0b0:	bf0c      	ite	eq
 800c0b2:	2301      	moveq	r3, #1
 800c0b4:	2300      	movne	r3, #0
 800c0b6:	b2db      	uxtb	r3, r3
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	370c      	adds	r7, #12
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c2:	4770      	bx	lr

0800c0c4 <LL_USART_SetStopBitsLength>:
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b083      	sub	sp, #12
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
 800c0cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	691b      	ldr	r3, [r3, #16]
 800c0d2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	431a      	orrs	r2, r3
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	611a      	str	r2, [r3, #16]
}
 800c0de:	bf00      	nop
 800c0e0:	370c      	adds	r7, #12
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e8:	4770      	bx	lr

0800c0ea <LL_USART_SetHWFlowCtrl>:
{
 800c0ea:	b480      	push	{r7}
 800c0ec:	b083      	sub	sp, #12
 800c0ee:	af00      	add	r7, sp, #0
 800c0f0:	6078      	str	r0, [r7, #4]
 800c0f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	695b      	ldr	r3, [r3, #20]
 800c0f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	431a      	orrs	r2, r3
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	615a      	str	r2, [r3, #20]
}
 800c104:	bf00      	nop
 800c106:	370c      	adds	r7, #12
 800c108:	46bd      	mov	sp, r7
 800c10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10e:	4770      	bx	lr

0800c110 <LL_USART_SetBaudRate>:
{
 800c110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c114:	b0c0      	sub	sp, #256	@ 0x100
 800c116:	af00      	add	r7, sp, #0
 800c118:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800c11c:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 800c120:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800c124:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800c128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c12c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c130:	f040 810c 	bne.w	800c34c <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800c134:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c138:	2200      	movs	r2, #0
 800c13a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c13e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800c142:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800c146:	4622      	mov	r2, r4
 800c148:	462b      	mov	r3, r5
 800c14a:	1891      	adds	r1, r2, r2
 800c14c:	6639      	str	r1, [r7, #96]	@ 0x60
 800c14e:	415b      	adcs	r3, r3
 800c150:	667b      	str	r3, [r7, #100]	@ 0x64
 800c152:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800c156:	4621      	mov	r1, r4
 800c158:	eb12 0801 	adds.w	r8, r2, r1
 800c15c:	4629      	mov	r1, r5
 800c15e:	eb43 0901 	adc.w	r9, r3, r1
 800c162:	f04f 0200 	mov.w	r2, #0
 800c166:	f04f 0300 	mov.w	r3, #0
 800c16a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c16e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c172:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c176:	4690      	mov	r8, r2
 800c178:	4699      	mov	r9, r3
 800c17a:	4623      	mov	r3, r4
 800c17c:	eb18 0303 	adds.w	r3, r8, r3
 800c180:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c184:	462b      	mov	r3, r5
 800c186:	eb49 0303 	adc.w	r3, r9, r3
 800c18a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c18e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c192:	2200      	movs	r2, #0
 800c194:	469a      	mov	sl, r3
 800c196:	4693      	mov	fp, r2
 800c198:	eb1a 030a 	adds.w	r3, sl, sl
 800c19c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c19e:	eb4b 030b 	adc.w	r3, fp, fp
 800c1a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c1a4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800c1a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800c1ac:	f7f4 fe6a 	bl	8000e84 <__aeabi_uldivmod>
 800c1b0:	4602      	mov	r2, r0
 800c1b2:	460b      	mov	r3, r1
 800c1b4:	4b64      	ldr	r3, [pc, #400]	@ (800c348 <LL_USART_SetBaudRate+0x238>)
 800c1b6:	fba3 2302 	umull	r2, r3, r3, r2
 800c1ba:	095b      	lsrs	r3, r3, #5
 800c1bc:	b29b      	uxth	r3, r3
 800c1be:	011b      	lsls	r3, r3, #4
 800c1c0:	b29c      	uxth	r4, r3
 800c1c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c1cc:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800c1d0:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 800c1d4:	4642      	mov	r2, r8
 800c1d6:	464b      	mov	r3, r9
 800c1d8:	1891      	adds	r1, r2, r2
 800c1da:	6539      	str	r1, [r7, #80]	@ 0x50
 800c1dc:	415b      	adcs	r3, r3
 800c1de:	657b      	str	r3, [r7, #84]	@ 0x54
 800c1e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800c1e4:	4641      	mov	r1, r8
 800c1e6:	1851      	adds	r1, r2, r1
 800c1e8:	64b9      	str	r1, [r7, #72]	@ 0x48
 800c1ea:	4649      	mov	r1, r9
 800c1ec:	414b      	adcs	r3, r1
 800c1ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c1f0:	f04f 0200 	mov.w	r2, #0
 800c1f4:	f04f 0300 	mov.w	r3, #0
 800c1f8:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 800c1fc:	4659      	mov	r1, fp
 800c1fe:	00cb      	lsls	r3, r1, #3
 800c200:	4651      	mov	r1, sl
 800c202:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c206:	4651      	mov	r1, sl
 800c208:	00ca      	lsls	r2, r1, #3
 800c20a:	4610      	mov	r0, r2
 800c20c:	4619      	mov	r1, r3
 800c20e:	4603      	mov	r3, r0
 800c210:	4642      	mov	r2, r8
 800c212:	189b      	adds	r3, r3, r2
 800c214:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c218:	464b      	mov	r3, r9
 800c21a:	460a      	mov	r2, r1
 800c21c:	eb42 0303 	adc.w	r3, r2, r3
 800c220:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c224:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c228:	2200      	movs	r2, #0
 800c22a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c22e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800c232:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800c236:	460b      	mov	r3, r1
 800c238:	18db      	adds	r3, r3, r3
 800c23a:	643b      	str	r3, [r7, #64]	@ 0x40
 800c23c:	4613      	mov	r3, r2
 800c23e:	eb42 0303 	adc.w	r3, r2, r3
 800c242:	647b      	str	r3, [r7, #68]	@ 0x44
 800c244:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800c248:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 800c24c:	f7f4 fe1a 	bl	8000e84 <__aeabi_uldivmod>
 800c250:	4602      	mov	r2, r0
 800c252:	460b      	mov	r3, r1
 800c254:	4611      	mov	r1, r2
 800c256:	4b3c      	ldr	r3, [pc, #240]	@ (800c348 <LL_USART_SetBaudRate+0x238>)
 800c258:	fba3 2301 	umull	r2, r3, r3, r1
 800c25c:	095b      	lsrs	r3, r3, #5
 800c25e:	2264      	movs	r2, #100	@ 0x64
 800c260:	fb02 f303 	mul.w	r3, r2, r3
 800c264:	1acb      	subs	r3, r1, r3
 800c266:	00db      	lsls	r3, r3, #3
 800c268:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800c26c:	4b36      	ldr	r3, [pc, #216]	@ (800c348 <LL_USART_SetBaudRate+0x238>)
 800c26e:	fba3 2302 	umull	r2, r3, r3, r2
 800c272:	095b      	lsrs	r3, r3, #5
 800c274:	b29b      	uxth	r3, r3
 800c276:	005b      	lsls	r3, r3, #1
 800c278:	b29b      	uxth	r3, r3
 800c27a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800c27e:	b29b      	uxth	r3, r3
 800c280:	4423      	add	r3, r4
 800c282:	b29c      	uxth	r4, r3
 800c284:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c288:	2200      	movs	r2, #0
 800c28a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c28e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800c292:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 800c296:	4642      	mov	r2, r8
 800c298:	464b      	mov	r3, r9
 800c29a:	1891      	adds	r1, r2, r2
 800c29c:	63b9      	str	r1, [r7, #56]	@ 0x38
 800c29e:	415b      	adcs	r3, r3
 800c2a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c2a2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800c2a6:	4641      	mov	r1, r8
 800c2a8:	1851      	adds	r1, r2, r1
 800c2aa:	6339      	str	r1, [r7, #48]	@ 0x30
 800c2ac:	4649      	mov	r1, r9
 800c2ae:	414b      	adcs	r3, r1
 800c2b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c2b2:	f04f 0200 	mov.w	r2, #0
 800c2b6:	f04f 0300 	mov.w	r3, #0
 800c2ba:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800c2be:	4659      	mov	r1, fp
 800c2c0:	00cb      	lsls	r3, r1, #3
 800c2c2:	4651      	mov	r1, sl
 800c2c4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c2c8:	4651      	mov	r1, sl
 800c2ca:	00ca      	lsls	r2, r1, #3
 800c2cc:	4610      	mov	r0, r2
 800c2ce:	4619      	mov	r1, r3
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	4642      	mov	r2, r8
 800c2d4:	189b      	adds	r3, r3, r2
 800c2d6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c2da:	464b      	mov	r3, r9
 800c2dc:	460a      	mov	r2, r1
 800c2de:	eb42 0303 	adc.w	r3, r2, r3
 800c2e2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c2e6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c2f0:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800c2f4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800c2f8:	460b      	mov	r3, r1
 800c2fa:	18db      	adds	r3, r3, r3
 800c2fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c2fe:	4613      	mov	r3, r2
 800c300:	eb42 0303 	adc.w	r3, r2, r3
 800c304:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c306:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800c30a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800c30e:	f7f4 fdb9 	bl	8000e84 <__aeabi_uldivmod>
 800c312:	4602      	mov	r2, r0
 800c314:	460b      	mov	r3, r1
 800c316:	4b0c      	ldr	r3, [pc, #48]	@ (800c348 <LL_USART_SetBaudRate+0x238>)
 800c318:	fba3 1302 	umull	r1, r3, r3, r2
 800c31c:	095b      	lsrs	r3, r3, #5
 800c31e:	2164      	movs	r1, #100	@ 0x64
 800c320:	fb01 f303 	mul.w	r3, r1, r3
 800c324:	1ad3      	subs	r3, r2, r3
 800c326:	00db      	lsls	r3, r3, #3
 800c328:	3332      	adds	r3, #50	@ 0x32
 800c32a:	4a07      	ldr	r2, [pc, #28]	@ (800c348 <LL_USART_SetBaudRate+0x238>)
 800c32c:	fba2 2303 	umull	r2, r3, r2, r3
 800c330:	095b      	lsrs	r3, r3, #5
 800c332:	b29b      	uxth	r3, r3
 800c334:	f003 0307 	and.w	r3, r3, #7
 800c338:	b29b      	uxth	r3, r3
 800c33a:	4423      	add	r3, r4
 800c33c:	b29b      	uxth	r3, r3
 800c33e:	461a      	mov	r2, r3
 800c340:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c344:	609a      	str	r2, [r3, #8]
}
 800c346:	e108      	b.n	800c55a <LL_USART_SetBaudRate+0x44a>
 800c348:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800c34c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c350:	2200      	movs	r2, #0
 800c352:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c356:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800c35a:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 800c35e:	4642      	mov	r2, r8
 800c360:	464b      	mov	r3, r9
 800c362:	1891      	adds	r1, r2, r2
 800c364:	6239      	str	r1, [r7, #32]
 800c366:	415b      	adcs	r3, r3
 800c368:	627b      	str	r3, [r7, #36]	@ 0x24
 800c36a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c36e:	4641      	mov	r1, r8
 800c370:	1854      	adds	r4, r2, r1
 800c372:	4649      	mov	r1, r9
 800c374:	eb43 0501 	adc.w	r5, r3, r1
 800c378:	f04f 0200 	mov.w	r2, #0
 800c37c:	f04f 0300 	mov.w	r3, #0
 800c380:	00eb      	lsls	r3, r5, #3
 800c382:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c386:	00e2      	lsls	r2, r4, #3
 800c388:	4614      	mov	r4, r2
 800c38a:	461d      	mov	r5, r3
 800c38c:	4643      	mov	r3, r8
 800c38e:	18e3      	adds	r3, r4, r3
 800c390:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c394:	464b      	mov	r3, r9
 800c396:	eb45 0303 	adc.w	r3, r5, r3
 800c39a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c39e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c3a8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800c3ac:	f04f 0200 	mov.w	r2, #0
 800c3b0:	f04f 0300 	mov.w	r3, #0
 800c3b4:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 800c3b8:	4629      	mov	r1, r5
 800c3ba:	008b      	lsls	r3, r1, #2
 800c3bc:	4621      	mov	r1, r4
 800c3be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c3c2:	4621      	mov	r1, r4
 800c3c4:	008a      	lsls	r2, r1, #2
 800c3c6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800c3ca:	f7f4 fd5b 	bl	8000e84 <__aeabi_uldivmod>
 800c3ce:	4602      	mov	r2, r0
 800c3d0:	460b      	mov	r3, r1
 800c3d2:	4b65      	ldr	r3, [pc, #404]	@ (800c568 <LL_USART_SetBaudRate+0x458>)
 800c3d4:	fba3 2302 	umull	r2, r3, r3, r2
 800c3d8:	095b      	lsrs	r3, r3, #5
 800c3da:	b29b      	uxth	r3, r3
 800c3dc:	011b      	lsls	r3, r3, #4
 800c3de:	b29c      	uxth	r4, r3
 800c3e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c3ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c3ee:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 800c3f2:	4642      	mov	r2, r8
 800c3f4:	464b      	mov	r3, r9
 800c3f6:	1891      	adds	r1, r2, r2
 800c3f8:	61b9      	str	r1, [r7, #24]
 800c3fa:	415b      	adcs	r3, r3
 800c3fc:	61fb      	str	r3, [r7, #28]
 800c3fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c402:	4641      	mov	r1, r8
 800c404:	1851      	adds	r1, r2, r1
 800c406:	6139      	str	r1, [r7, #16]
 800c408:	4649      	mov	r1, r9
 800c40a:	414b      	adcs	r3, r1
 800c40c:	617b      	str	r3, [r7, #20]
 800c40e:	f04f 0200 	mov.w	r2, #0
 800c412:	f04f 0300 	mov.w	r3, #0
 800c416:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c41a:	4659      	mov	r1, fp
 800c41c:	00cb      	lsls	r3, r1, #3
 800c41e:	4651      	mov	r1, sl
 800c420:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c424:	4651      	mov	r1, sl
 800c426:	00ca      	lsls	r2, r1, #3
 800c428:	4610      	mov	r0, r2
 800c42a:	4619      	mov	r1, r3
 800c42c:	4603      	mov	r3, r0
 800c42e:	4642      	mov	r2, r8
 800c430:	189b      	adds	r3, r3, r2
 800c432:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c436:	464b      	mov	r3, r9
 800c438:	460a      	mov	r2, r1
 800c43a:	eb42 0303 	adc.w	r3, r2, r3
 800c43e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c442:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c446:	2200      	movs	r2, #0
 800c448:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c44c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800c450:	f04f 0200 	mov.w	r2, #0
 800c454:	f04f 0300 	mov.w	r3, #0
 800c458:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 800c45c:	4649      	mov	r1, r9
 800c45e:	008b      	lsls	r3, r1, #2
 800c460:	4641      	mov	r1, r8
 800c462:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c466:	4641      	mov	r1, r8
 800c468:	008a      	lsls	r2, r1, #2
 800c46a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800c46e:	f7f4 fd09 	bl	8000e84 <__aeabi_uldivmod>
 800c472:	4602      	mov	r2, r0
 800c474:	460b      	mov	r3, r1
 800c476:	4611      	mov	r1, r2
 800c478:	4b3b      	ldr	r3, [pc, #236]	@ (800c568 <LL_USART_SetBaudRate+0x458>)
 800c47a:	fba3 2301 	umull	r2, r3, r3, r1
 800c47e:	095b      	lsrs	r3, r3, #5
 800c480:	2264      	movs	r2, #100	@ 0x64
 800c482:	fb02 f303 	mul.w	r3, r2, r3
 800c486:	1acb      	subs	r3, r1, r3
 800c488:	011b      	lsls	r3, r3, #4
 800c48a:	3332      	adds	r3, #50	@ 0x32
 800c48c:	4a36      	ldr	r2, [pc, #216]	@ (800c568 <LL_USART_SetBaudRate+0x458>)
 800c48e:	fba2 2303 	umull	r2, r3, r2, r3
 800c492:	095b      	lsrs	r3, r3, #5
 800c494:	b29b      	uxth	r3, r3
 800c496:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c49a:	b29b      	uxth	r3, r3
 800c49c:	4423      	add	r3, r4
 800c49e:	b29c      	uxth	r4, r3
 800c4a0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c4a8:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800c4aa:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800c4ae:	4642      	mov	r2, r8
 800c4b0:	464b      	mov	r3, r9
 800c4b2:	1891      	adds	r1, r2, r2
 800c4b4:	60b9      	str	r1, [r7, #8]
 800c4b6:	415b      	adcs	r3, r3
 800c4b8:	60fb      	str	r3, [r7, #12]
 800c4ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c4be:	4641      	mov	r1, r8
 800c4c0:	1851      	adds	r1, r2, r1
 800c4c2:	6039      	str	r1, [r7, #0]
 800c4c4:	4649      	mov	r1, r9
 800c4c6:	414b      	adcs	r3, r1
 800c4c8:	607b      	str	r3, [r7, #4]
 800c4ca:	f04f 0200 	mov.w	r2, #0
 800c4ce:	f04f 0300 	mov.w	r3, #0
 800c4d2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c4d6:	4659      	mov	r1, fp
 800c4d8:	00cb      	lsls	r3, r1, #3
 800c4da:	4651      	mov	r1, sl
 800c4dc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c4e0:	4651      	mov	r1, sl
 800c4e2:	00ca      	lsls	r2, r1, #3
 800c4e4:	4610      	mov	r0, r2
 800c4e6:	4619      	mov	r1, r3
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	4642      	mov	r2, r8
 800c4ec:	189b      	adds	r3, r3, r2
 800c4ee:	673b      	str	r3, [r7, #112]	@ 0x70
 800c4f0:	464b      	mov	r3, r9
 800c4f2:	460a      	mov	r2, r1
 800c4f4:	eb42 0303 	adc.w	r3, r2, r3
 800c4f8:	677b      	str	r3, [r7, #116]	@ 0x74
 800c4fa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c4fe:	2200      	movs	r2, #0
 800c500:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c502:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c504:	f04f 0200 	mov.w	r2, #0
 800c508:	f04f 0300 	mov.w	r3, #0
 800c50c:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 800c510:	4649      	mov	r1, r9
 800c512:	008b      	lsls	r3, r1, #2
 800c514:	4641      	mov	r1, r8
 800c516:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c51a:	4641      	mov	r1, r8
 800c51c:	008a      	lsls	r2, r1, #2
 800c51e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800c522:	f7f4 fcaf 	bl	8000e84 <__aeabi_uldivmod>
 800c526:	4602      	mov	r2, r0
 800c528:	460b      	mov	r3, r1
 800c52a:	4b0f      	ldr	r3, [pc, #60]	@ (800c568 <LL_USART_SetBaudRate+0x458>)
 800c52c:	fba3 1302 	umull	r1, r3, r3, r2
 800c530:	095b      	lsrs	r3, r3, #5
 800c532:	2164      	movs	r1, #100	@ 0x64
 800c534:	fb01 f303 	mul.w	r3, r1, r3
 800c538:	1ad3      	subs	r3, r2, r3
 800c53a:	011b      	lsls	r3, r3, #4
 800c53c:	3332      	adds	r3, #50	@ 0x32
 800c53e:	4a0a      	ldr	r2, [pc, #40]	@ (800c568 <LL_USART_SetBaudRate+0x458>)
 800c540:	fba2 2303 	umull	r2, r3, r2, r3
 800c544:	095b      	lsrs	r3, r3, #5
 800c546:	b29b      	uxth	r3, r3
 800c548:	f003 030f 	and.w	r3, r3, #15
 800c54c:	b29b      	uxth	r3, r3
 800c54e:	4423      	add	r3, r4
 800c550:	b29b      	uxth	r3, r3
 800c552:	461a      	mov	r2, r3
 800c554:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c558:	609a      	str	r2, [r3, #8]
}
 800c55a:	bf00      	nop
 800c55c:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800c560:	46bd      	mov	sp, r7
 800c562:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c566:	bf00      	nop
 800c568:	51eb851f 	.word	0x51eb851f

0800c56c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b088      	sub	sp, #32
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
 800c574:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800c576:	2301      	movs	r3, #1
 800c578:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800c57a:	2300      	movs	r3, #0
 800c57c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f7ff fd8c 	bl	800c09c <LL_USART_IsEnabled>
 800c584:	4603      	mov	r3, r0
 800c586:	2b00      	cmp	r3, #0
 800c588:	d15e      	bne.n	800c648 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	68db      	ldr	r3, [r3, #12]
 800c58e:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800c592:	f023 030c 	bic.w	r3, r3, #12
 800c596:	683a      	ldr	r2, [r7, #0]
 800c598:	6851      	ldr	r1, [r2, #4]
 800c59a:	683a      	ldr	r2, [r7, #0]
 800c59c:	68d2      	ldr	r2, [r2, #12]
 800c59e:	4311      	orrs	r1, r2
 800c5a0:	683a      	ldr	r2, [r7, #0]
 800c5a2:	6912      	ldr	r2, [r2, #16]
 800c5a4:	4311      	orrs	r1, r2
 800c5a6:	683a      	ldr	r2, [r7, #0]
 800c5a8:	6992      	ldr	r2, [r2, #24]
 800c5aa:	430a      	orrs	r2, r1
 800c5ac:	431a      	orrs	r2, r3
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	689b      	ldr	r3, [r3, #8]
 800c5b6:	4619      	mov	r1, r3
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	f7ff fd83 	bl	800c0c4 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	695b      	ldr	r3, [r3, #20]
 800c5c2:	4619      	mov	r1, r3
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	f7ff fd90 	bl	800c0ea <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800c5ca:	f107 0308 	add.w	r3, r7, #8
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f7ff f8f0 	bl	800b7b4 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	4a1f      	ldr	r2, [pc, #124]	@ (800c654 <LL_USART_Init+0xe8>)
 800c5d8:	4293      	cmp	r3, r2
 800c5da:	d102      	bne.n	800c5e2 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800c5dc:	697b      	ldr	r3, [r7, #20]
 800c5de:	61bb      	str	r3, [r7, #24]
 800c5e0:	e021      	b.n	800c626 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	4a1c      	ldr	r2, [pc, #112]	@ (800c658 <LL_USART_Init+0xec>)
 800c5e6:	4293      	cmp	r3, r2
 800c5e8:	d102      	bne.n	800c5f0 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800c5ea:	693b      	ldr	r3, [r7, #16]
 800c5ec:	61bb      	str	r3, [r7, #24]
 800c5ee:	e01a      	b.n	800c626 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	4a1a      	ldr	r2, [pc, #104]	@ (800c65c <LL_USART_Init+0xf0>)
 800c5f4:	4293      	cmp	r3, r2
 800c5f6:	d102      	bne.n	800c5fe <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	61bb      	str	r3, [r7, #24]
 800c5fc:	e013      	b.n	800c626 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	4a17      	ldr	r2, [pc, #92]	@ (800c660 <LL_USART_Init+0xf4>)
 800c602:	4293      	cmp	r3, r2
 800c604:	d102      	bne.n	800c60c <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800c606:	697b      	ldr	r3, [r7, #20]
 800c608:	61bb      	str	r3, [r7, #24]
 800c60a:	e00c      	b.n	800c626 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	4a15      	ldr	r2, [pc, #84]	@ (800c664 <LL_USART_Init+0xf8>)
 800c610:	4293      	cmp	r3, r2
 800c612:	d102      	bne.n	800c61a <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800c614:	693b      	ldr	r3, [r7, #16]
 800c616:	61bb      	str	r3, [r7, #24]
 800c618:	e005      	b.n	800c626 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	4a12      	ldr	r2, [pc, #72]	@ (800c668 <LL_USART_Init+0xfc>)
 800c61e:	4293      	cmp	r3, r2
 800c620:	d101      	bne.n	800c626 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800c622:	693b      	ldr	r3, [r7, #16]
 800c624:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800c626:	69bb      	ldr	r3, [r7, #24]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d00d      	beq.n	800c648 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d009      	beq.n	800c648 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 800c634:	2300      	movs	r3, #0
 800c636:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800c640:	69b9      	ldr	r1, [r7, #24]
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f7ff fd64 	bl	800c110 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800c648:	7ffb      	ldrb	r3, [r7, #31]
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	3720      	adds	r7, #32
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}
 800c652:	bf00      	nop
 800c654:	40011000 	.word	0x40011000
 800c658:	40004400 	.word	0x40004400
 800c65c:	40004800 	.word	0x40004800
 800c660:	40011400 	.word	0x40011400
 800c664:	40004c00 	.word	0x40004c00
 800c668:	40005000 	.word	0x40005000

0800c66c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 800c66c:	b480      	push	{r7}
 800c66e:	b085      	sub	sp, #20
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800c674:	4b0f      	ldr	r3, [pc, #60]	@ (800c6b4 <LL_mDelay+0x48>)
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800c67a:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c682:	d00c      	beq.n	800c69e <LL_mDelay+0x32>
  {
    Delay++;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	3301      	adds	r3, #1
 800c688:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800c68a:	e008      	b.n	800c69e <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800c68c:	4b09      	ldr	r3, [pc, #36]	@ (800c6b4 <LL_mDelay+0x48>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c694:	2b00      	cmp	r3, #0
 800c696:	d002      	beq.n	800c69e <LL_mDelay+0x32>
    {
      Delay--;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	3b01      	subs	r3, #1
 800c69c:	607b      	str	r3, [r7, #4]
  while (Delay)
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d1f3      	bne.n	800c68c <LL_mDelay+0x20>
    }
  }
}
 800c6a4:	bf00      	nop
 800c6a6:	bf00      	nop
 800c6a8:	3714      	adds	r7, #20
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b0:	4770      	bx	lr
 800c6b2:	bf00      	nop
 800c6b4:	e000e010 	.word	0xe000e010

0800c6b8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800c6b8:	b480      	push	{r7}
 800c6ba:	b083      	sub	sp, #12
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800c6c0:	4a04      	ldr	r2, [pc, #16]	@ (800c6d4 <LL_SetSystemCoreClock+0x1c>)
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	6013      	str	r3, [r2, #0]
}
 800c6c6:	bf00      	nop
 800c6c8:	370c      	adds	r7, #12
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d0:	4770      	bx	lr
 800c6d2:	bf00      	nop
 800c6d4:	2000014c 	.word	0x2000014c

0800c6d8 <SCH_Initialize>:
  * @param  None
  * @retval None
  *****************************************************************************/

void SCH_Initialize(void)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	af00      	add	r7, sp, #0
  s_SystemTick = RESET;
 800c6dc:	4b0d      	ldr	r3, [pc, #52]	@ (800c714 <SCH_Initialize+0x3c>)
 800c6de:	2200      	movs	r2, #0
 800c6e0:	601a      	str	r2, [r3, #0]
  s_NumOfTaskScheduled = RESET;
 800c6e2:	4b0d      	ldr	r3, [pc, #52]	@ (800c718 <SCH_Initialize+0x40>)
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	701a      	strb	r2, [r3, #0]
  s_NumOfTimers = RESET;
 800c6e8:	4b0c      	ldr	r3, [pc, #48]	@ (800c71c <SCH_Initialize+0x44>)
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	701a      	strb	r2, [r3, #0]

  // Initial Scheduler Context
  memset((uint8_t*)&s_TaskContext[0], RESET, (sizeof(SCH_TaskContextTypedef) * MAX_TASK));
 800c6ee:	22f0      	movs	r2, #240	@ 0xf0
 800c6f0:	2100      	movs	r1, #0
 800c6f2:	480b      	ldr	r0, [pc, #44]	@ (800c720 <SCH_Initialize+0x48>)
 800c6f4:	f000 ffcf 	bl	800d696 <memset>
  memset((uint8_t*)&s_TimerContext[0], RESET, (sizeof(SCH_TimerContextTypedef) * MAX_TIMERS));
 800c6f8:	22f0      	movs	r2, #240	@ 0xf0
 800c6fa:	2100      	movs	r1, #0
 800c6fc:	4809      	ldr	r0, [pc, #36]	@ (800c724 <SCH_Initialize+0x4c>)
 800c6fe:	f000 ffca 	bl	800d696 <memset>
  memset((uint8_t*)&s_SoftTimers[0], RESET, (sizeof(uint32_t) * SCH_TIM_LAST));
 800c702:	2238      	movs	r2, #56	@ 0x38
 800c704:	2100      	movs	r1, #0
 800c706:	4808      	ldr	r0, [pc, #32]	@ (800c728 <SCH_Initialize+0x50>)
 800c708:	f000 ffc5 	bl	800d696 <memset>

    // Initialize Scheduler context
  systick_timer_init();
 800c70c:	f7f5 fbda 	bl	8001ec4 <systick_timer_init>
}
 800c710:	bf00      	nop
 800c712:	bd80      	pop	{r7, pc}
 800c714:	20005d48 	.word	0x20005d48
 800c718:	20005c50 	.word	0x20005c50
 800c71c:	20005d44 	.word	0x20005d44
 800c720:	20005b60 	.word	0x20005b60
 800c724:	20005c54 	.word	0x20005c54
 800c728:	20005d4c 	.word	0x20005d4c

0800c72c <SCH_TIM_Start>:
  * @param  const SCH_SoftTimerTypedef timer - type of soft timer
  *         const uint32_t timeInMs - time in mSec
  * @retval None
  *****************************************************************************/
void SCH_TIM_Start(const SCH_SoftTimerTypedef timer, const uint32_t timeInMs)
{
 800c72c:	b480      	push	{r7}
 800c72e:	b083      	sub	sp, #12
 800c730:	af00      	add	r7, sp, #0
 800c732:	4603      	mov	r3, r0
 800c734:	6039      	str	r1, [r7, #0]
 800c736:	71fb      	strb	r3, [r7, #7]
  if(timer < SCH_TIM_LAST)
 800c738:	79fb      	ldrb	r3, [r7, #7]
 800c73a:	2b0d      	cmp	r3, #13
 800c73c:	d804      	bhi.n	800c748 <SCH_TIM_Start+0x1c>
  {
	//s_SoftTimers[timer] = timeInMs + s_SystemTick;
    s_SoftTimers[timer] = timeInMs;
 800c73e:	79fb      	ldrb	r3, [r7, #7]
 800c740:	4904      	ldr	r1, [pc, #16]	@ (800c754 <SCH_TIM_Start+0x28>)
 800c742:	683a      	ldr	r2, [r7, #0]
 800c744:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800c748:	bf00      	nop
 800c74a:	370c      	adds	r7, #12
 800c74c:	46bd      	mov	sp, r7
 800c74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c752:	4770      	bx	lr
 800c754:	20005d4c 	.word	0x20005d4c

0800c758 <SCH_TIM_HasCompleted>:
  * @param  const SCH_SoftTimerTypedef timer - type of soft timer
  * @retval TRUE / FALSE
  *****************************************************************************/

uint16_t SCH_TIM_HasCompleted(const SCH_SoftTimerTypedef timer)
{
 800c758:	b480      	push	{r7}
 800c75a:	b083      	sub	sp, #12
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	4603      	mov	r3, r0
 800c760:	71fb      	strb	r3, [r7, #7]
  return (s_SoftTimers[timer] == 0 ? 1:0 ) ;
 800c762:	79fb      	ldrb	r3, [r7, #7]
 800c764:	4a06      	ldr	r2, [pc, #24]	@ (800c780 <SCH_TIM_HasCompleted+0x28>)
 800c766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	bf0c      	ite	eq
 800c76e:	2301      	moveq	r3, #1
 800c770:	2300      	movne	r3, #0
 800c772:	b2db      	uxtb	r3, r3
}
 800c774:	4618      	mov	r0, r3
 800c776:	370c      	adds	r7, #12
 800c778:	46bd      	mov	sp, r7
 800c77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77e:	4770      	bx	lr
 800c780:	20005d4c 	.word	0x20005d4c

0800c784 <SCH_TASK_CreateTask>:
  * @param  SCH_TASK_HANDLE* pHandle - pointer to task handle
  *         SCH_TaskPropertyTypedef* pTaskProperty - pointer to task property
  * @retval status
  *****************************************************************************/
t_Status SCH_TASK_CreateTask(SCH_TASK_HANDLE* pHandle, SCH_TaskPropertyTypedef* pTaskProperty)
{
 800c784:	b480      	push	{r7}
 800c786:	b085      	sub	sp, #20
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
 800c78c:	6039      	str	r1, [r7, #0]
  t_Status                      status = STS_ERROR;
 800c78e:	2301      	movs	r3, #1
 800c790:	73fb      	strb	r3, [r7, #15]

  // make sure that we have valid parameters
  if((pHandle) && (pTaskProperty))
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d029      	beq.n	800c7ec <SCH_TASK_CreateTask+0x68>
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d026      	beq.n	800c7ec <SCH_TASK_CreateTask+0x68>
  {
    // Check for number of task defined
    if(s_NumOfTaskScheduled < (MAX_TASK - 1))
 800c79e:	4b17      	ldr	r3, [pc, #92]	@ (800c7fc <SCH_TASK_CreateTask+0x78>)
 800c7a0:	781b      	ldrb	r3, [r3, #0]
 800c7a2:	2b12      	cmp	r3, #18
 800c7a4:	d822      	bhi.n	800c7ec <SCH_TASK_CreateTask+0x68>
    {
      SCH_TaskContextTypedef* pTaskContext = &s_TaskContext[s_NumOfTaskScheduled];
 800c7a6:	4b15      	ldr	r3, [pc, #84]	@ (800c7fc <SCH_TASK_CreateTask+0x78>)
 800c7a8:	781b      	ldrb	r3, [r3, #0]
 800c7aa:	461a      	mov	r2, r3
 800c7ac:	4613      	mov	r3, r2
 800c7ae:	005b      	lsls	r3, r3, #1
 800c7b0:	4413      	add	r3, r2
 800c7b2:	009b      	lsls	r3, r3, #2
 800c7b4:	4a12      	ldr	r2, [pc, #72]	@ (800c800 <SCH_TASK_CreateTask+0x7c>)
 800c7b6:	4413      	add	r3, r2
 800c7b8:	60bb      	str	r3, [r7, #8]
      // get task context
      // memcpy((uint8_t*)pTaskContext->pTaskProperty, (uint8_t*)pTaskProperty, sizeof(SCH_TaskPropertyTypedef));
      pTaskContext->pTaskProperty = pTaskProperty;
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	683a      	ldr	r2, [r7, #0]
 800c7be:	609a      	str	r2, [r3, #8]
      // Make sure we are initializing other members of task context
      pTaskContext->taskFlag = FALSE;
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	805a      	strh	r2, [r3, #2]
      pTaskContext->taskTick = pTaskProperty->taskTick;;
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	68da      	ldr	r2, [r3, #12]
 800c7ca:	68bb      	ldr	r3, [r7, #8]
 800c7cc:	605a      	str	r2, [r3, #4]
      // Put task in Ready State
      pTaskContext->taskState = TASK_StateReady;
 800c7ce:	68bb      	ldr	r3, [r7, #8]
 800c7d0:	2201      	movs	r2, #1
 800c7d2:	701a      	strb	r2, [r3, #0]

      // Give Task Handle back to caller
      *pHandle = s_NumOfTaskScheduled;
 800c7d4:	4b09      	ldr	r3, [pc, #36]	@ (800c7fc <SCH_TASK_CreateTask+0x78>)
 800c7d6:	781a      	ldrb	r2, [r3, #0]
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	701a      	strb	r2, [r3, #0]

      s_NumOfTaskScheduled++;
 800c7dc:	4b07      	ldr	r3, [pc, #28]	@ (800c7fc <SCH_TASK_CreateTask+0x78>)
 800c7de:	781b      	ldrb	r3, [r3, #0]
 800c7e0:	3301      	adds	r3, #1
 800c7e2:	b2da      	uxtb	r2, r3
 800c7e4:	4b05      	ldr	r3, [pc, #20]	@ (800c7fc <SCH_TASK_CreateTask+0x78>)
 800c7e6:	701a      	strb	r2, [r3, #0]
      // We were able to register task with schedular
      status = STS_DONE;
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 800c7ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	3714      	adds	r7, #20
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f8:	4770      	bx	lr
 800c7fa:	bf00      	nop
 800c7fc:	20005c50 	.word	0x20005c50
 800c800:	20005b60 	.word	0x20005b60

0800c804 <SCH_RunSystemTickTimer>:
  * @brief  Function handles system tick timer
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_RunSystemTickTimer(void)
{
 800c804:	b480      	push	{r7}
 800c806:	b085      	sub	sp, #20
 800c808:	af00      	add	r7, sp, #0
  uint8_t                       timerIndex;
  SCH_TimerContextTypedef*      pTimerContext;

  // Increment System Tick counter

  s_SystemTick++;
 800c80a:	4b42      	ldr	r3, [pc, #264]	@ (800c914 <SCH_RunSystemTickTimer+0x110>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	3301      	adds	r3, #1
 800c810:	4a40      	ldr	r2, [pc, #256]	@ (800c914 <SCH_RunSystemTickTimer+0x110>)
 800c812:	6013      	str	r3, [r2, #0]
//  if(s_SystemTick > 100000){
//	  LL_GPIO_SetOutputPin(GPIOD, LL_GPIO_PIN_15);
//  }
  // Check Status of other Periodic Task
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 800c814:	2300      	movs	r3, #0
 800c816:	73fb      	strb	r3, [r7, #15]
 800c818:	e025      	b.n	800c866 <SCH_RunSystemTickTimer+0x62>
  {
    // Get Task Context
    pTaskContext = &s_TaskContext[taskIndex];
 800c81a:	7bfa      	ldrb	r2, [r7, #15]
 800c81c:	4613      	mov	r3, r2
 800c81e:	005b      	lsls	r3, r3, #1
 800c820:	4413      	add	r3, r2
 800c822:	009b      	lsls	r3, r3, #2
 800c824:	4a3c      	ldr	r2, [pc, #240]	@ (800c918 <SCH_RunSystemTickTimer+0x114>)
 800c826:	4413      	add	r3, r2
 800c828:	607b      	str	r3, [r7, #4]

    // Check type and State of the task
    if((SCH_TASK_SYNC == pTaskContext->pTaskProperty->taskType) && (TASK_StateReady == pTaskContext->taskState))
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	689b      	ldr	r3, [r3, #8]
 800c82e:	781b      	ldrb	r3, [r3, #0]
 800c830:	2b01      	cmp	r3, #1
 800c832:	d115      	bne.n	800c860 <SCH_RunSystemTickTimer+0x5c>
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	781b      	ldrb	r3, [r3, #0]
 800c838:	2b01      	cmp	r3, #1
 800c83a:	d111      	bne.n	800c860 <SCH_RunSystemTickTimer+0x5c>
    {
      // Increment task tick
      pTaskContext->taskTick += 1;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	685b      	ldr	r3, [r3, #4]
 800c840:	1c5a      	adds	r2, r3, #1
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	605a      	str	r2, [r3, #4]

      // Check if we reached task period
      if(pTaskContext->taskTick >= pTaskContext->pTaskProperty->taskPeriodInMS)
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	685a      	ldr	r2, [r3, #4]
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	689b      	ldr	r3, [r3, #8]
 800c84e:	685b      	ldr	r3, [r3, #4]
 800c850:	429a      	cmp	r2, r3
 800c852:	d305      	bcc.n	800c860 <SCH_RunSystemTickTimer+0x5c>
      {
        // Yes
        // Reset Task tick timer
        pTaskContext->taskTick = RESET;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2200      	movs	r2, #0
 800c858:	605a      	str	r2, [r3, #4]
        // Enable Flag
        pTaskContext->taskFlag = TRUE;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2201      	movs	r2, #1
 800c85e:	805a      	strh	r2, [r3, #2]
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 800c860:	7bfb      	ldrb	r3, [r7, #15]
 800c862:	3301      	adds	r3, #1
 800c864:	73fb      	strb	r3, [r7, #15]
 800c866:	4b2d      	ldr	r3, [pc, #180]	@ (800c91c <SCH_RunSystemTickTimer+0x118>)
 800c868:	781b      	ldrb	r3, [r3, #0]
 800c86a:	7bfa      	ldrb	r2, [r7, #15]
 800c86c:	429a      	cmp	r2, r3
 800c86e:	d3d4      	bcc.n	800c81a <SCH_RunSystemTickTimer+0x16>
      }
    }
  }

  // Check Status of other Periodic Task
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 800c870:	2300      	movs	r3, #0
 800c872:	73bb      	strb	r3, [r7, #14]
 800c874:	e02b      	b.n	800c8ce <SCH_RunSystemTickTimer+0xca>
  {
    // Get Task Context
    pTimerContext = &s_TimerContext[timerIndex];
 800c876:	7bba      	ldrb	r2, [r7, #14]
 800c878:	4613      	mov	r3, r2
 800c87a:	005b      	lsls	r3, r3, #1
 800c87c:	4413      	add	r3, r2
 800c87e:	009b      	lsls	r3, r3, #2
 800c880:	4a27      	ldr	r2, [pc, #156]	@ (800c920 <SCH_RunSystemTickTimer+0x11c>)
 800c882:	4413      	add	r3, r2
 800c884:	60bb      	str	r3, [r7, #8]

    // Check type and State of the task
    if(TIM_StateRun == pTimerContext->timerState)
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	781b      	ldrb	r3, [r3, #0]
 800c88a:	2b01      	cmp	r3, #1
 800c88c:	d11c      	bne.n	800c8c8 <SCH_RunSystemTickTimer+0xc4>
    {
      // Increment task tick
      pTimerContext->timerTick += 1;
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	685b      	ldr	r3, [r3, #4]
 800c892:	1c5a      	adds	r2, r3, #1
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	605a      	str	r2, [r3, #4]

      // Check if we reached task period
      if(pTimerContext->timerTick >= pTimerContext->pTimerProperty->timerPeriodInMS)
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	685a      	ldr	r2, [r3, #4]
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	689b      	ldr	r3, [r3, #8]
 800c8a0:	685b      	ldr	r3, [r3, #4]
 800c8a2:	429a      	cmp	r2, r3
 800c8a4:	d310      	bcc.n	800c8c8 <SCH_RunSystemTickTimer+0xc4>
      {
        // Yes
        // Enable Flag
        pTimerContext->timerFlag = TRUE;
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	2201      	movs	r2, #1
 800c8aa:	805a      	strh	r2, [r3, #2]
        // Reset tick timer
        pTimerContext->timerTick = RESET;
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	605a      	str	r2, [r3, #4]
        // Check timer type and change the state
        pTimerContext->timerState = (SCH_TIMER_PERIODIC == pTimerContext->pTimerProperty->timerType)?TIM_StateRun:TIM_StateStop;
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	689b      	ldr	r3, [r3, #8]
 800c8b6:	781b      	ldrb	r3, [r3, #0]
 800c8b8:	2b02      	cmp	r3, #2
 800c8ba:	bf0c      	ite	eq
 800c8bc:	2301      	moveq	r3, #1
 800c8be:	2300      	movne	r3, #0
 800c8c0:	b2db      	uxtb	r3, r3
 800c8c2:	461a      	mov	r2, r3
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	701a      	strb	r2, [r3, #0]
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 800c8c8:	7bbb      	ldrb	r3, [r7, #14]
 800c8ca:	3301      	adds	r3, #1
 800c8cc:	73bb      	strb	r3, [r7, #14]
 800c8ce:	4b15      	ldr	r3, [pc, #84]	@ (800c924 <SCH_RunSystemTickTimer+0x120>)
 800c8d0:	781b      	ldrb	r3, [r3, #0]
 800c8d2:	7bba      	ldrb	r2, [r7, #14]
 800c8d4:	429a      	cmp	r2, r3
 800c8d6:	d3ce      	bcc.n	800c876 <SCH_RunSystemTickTimer+0x72>
      }
    }
  }
  // Update software timer
   for(timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 800c8d8:	2300      	movs	r3, #0
 800c8da:	73bb      	strb	r3, [r7, #14]
 800c8dc:	e010      	b.n	800c900 <SCH_RunSystemTickTimer+0xfc>
 	if (s_SoftTimers[timerIndex] > 0)	s_SoftTimers[timerIndex] --;
 800c8de:	7bbb      	ldrb	r3, [r7, #14]
 800c8e0:	4a11      	ldr	r2, [pc, #68]	@ (800c928 <SCH_RunSystemTickTimer+0x124>)
 800c8e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d007      	beq.n	800c8fa <SCH_RunSystemTickTimer+0xf6>
 800c8ea:	7bbb      	ldrb	r3, [r7, #14]
 800c8ec:	4a0e      	ldr	r2, [pc, #56]	@ (800c928 <SCH_RunSystemTickTimer+0x124>)
 800c8ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c8f2:	3a01      	subs	r2, #1
 800c8f4:	490c      	ldr	r1, [pc, #48]	@ (800c928 <SCH_RunSystemTickTimer+0x124>)
 800c8f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   for(timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 800c8fa:	7bbb      	ldrb	r3, [r7, #14]
 800c8fc:	3301      	adds	r3, #1
 800c8fe:	73bb      	strb	r3, [r7, #14]
 800c900:	7bbb      	ldrb	r3, [r7, #14]
 800c902:	2b0d      	cmp	r3, #13
 800c904:	d9eb      	bls.n	800c8de <SCH_RunSystemTickTimer+0xda>
}
 800c906:	bf00      	nop
 800c908:	bf00      	nop
 800c90a:	3714      	adds	r7, #20
 800c90c:	46bd      	mov	sp, r7
 800c90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c912:	4770      	bx	lr
 800c914:	20005d48 	.word	0x20005d48
 800c918:	20005b60 	.word	0x20005b60
 800c91c:	20005c50 	.word	0x20005c50
 800c920:	20005c54 	.word	0x20005c54
 800c924:	20005d44 	.word	0x20005d44
 800c928:	20005d4c 	.word	0x20005d4c

0800c92c <SCH_StartSchedular>:
  * @brief  Start schedular
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_StartSchedular(void)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	af00      	add	r7, sp, #0
  // Start Schedular..i.e. start system tick timer
  SCH_START;
 800c930:	f7f5 fab8 	bl	8001ea4 <systick_timer_start>
}
 800c934:	bf00      	nop
 800c936:	bd80      	pop	{r7, pc}

0800c938 <SCH_HandleScheduledTask>:
  * @brief  Function handles scheduled task and timer events
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_HandleScheduledTask(void)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b084      	sub	sp, #16
 800c93c:	af00      	add	r7, sp, #0
  SCH_TaskContextTypedef*       pTaskContext;
  uint8_t                       timerIndex;
  SCH_TimerContextTypedef*      pTimerContext;

  // check for schedule flag
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 800c93e:	2300      	movs	r3, #0
 800c940:	73fb      	strb	r3, [r7, #15]
 800c942:	e01e      	b.n	800c982 <SCH_HandleScheduledTask+0x4a>
  {
    // Get Task Context
    pTaskContext = &s_TaskContext[taskIndex];
 800c944:	7bfa      	ldrb	r2, [r7, #15]
 800c946:	4613      	mov	r3, r2
 800c948:	005b      	lsls	r3, r3, #1
 800c94a:	4413      	add	r3, r2
 800c94c:	009b      	lsls	r3, r3, #2
 800c94e:	4a23      	ldr	r2, [pc, #140]	@ (800c9dc <SCH_HandleScheduledTask+0xa4>)
 800c950:	4413      	add	r3, r2
 800c952:	607b      	str	r3, [r7, #4]

    // Check type and State of the task
    if((TRUE == pTaskContext->taskFlag) && (TASK_StateReady == pTaskContext->taskState))
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	885b      	ldrh	r3, [r3, #2]
 800c958:	2b01      	cmp	r3, #1
 800c95a:	d10f      	bne.n	800c97c <SCH_HandleScheduledTask+0x44>
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	781b      	ldrb	r3, [r3, #0]
 800c960:	2b01      	cmp	r3, #1
 800c962:	d10b      	bne.n	800c97c <SCH_HandleScheduledTask+0x44>
    {
      pTaskContext->taskFlag = FALSE;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2200      	movs	r2, #0
 800c968:	805a      	strh	r2, [r3, #2]
      if(pTaskContext->pTaskProperty->taskFunction)
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	689b      	ldr	r3, [r3, #8]
 800c96e:	689b      	ldr	r3, [r3, #8]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d003      	beq.n	800c97c <SCH_HandleScheduledTask+0x44>
      {
        pTaskContext->pTaskProperty->taskFunction();
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	689b      	ldr	r3, [r3, #8]
 800c978:	689b      	ldr	r3, [r3, #8]
 800c97a:	4798      	blx	r3
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 800c97c:	7bfb      	ldrb	r3, [r7, #15]
 800c97e:	3301      	adds	r3, #1
 800c980:	73fb      	strb	r3, [r7, #15]
 800c982:	4b17      	ldr	r3, [pc, #92]	@ (800c9e0 <SCH_HandleScheduledTask+0xa8>)
 800c984:	781b      	ldrb	r3, [r3, #0]
 800c986:	7bfa      	ldrb	r2, [r7, #15]
 800c988:	429a      	cmp	r2, r3
 800c98a:	d3db      	bcc.n	800c944 <SCH_HandleScheduledTask+0xc>
      }
    }
  }

  // check for timer flag
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 800c98c:	2300      	movs	r3, #0
 800c98e:	73bb      	strb	r3, [r7, #14]
 800c990:	e01a      	b.n	800c9c8 <SCH_HandleScheduledTask+0x90>
  {
    // Get Timer Context
    pTimerContext = &s_TimerContext[timerIndex];
 800c992:	7bba      	ldrb	r2, [r7, #14]
 800c994:	4613      	mov	r3, r2
 800c996:	005b      	lsls	r3, r3, #1
 800c998:	4413      	add	r3, r2
 800c99a:	009b      	lsls	r3, r3, #2
 800c99c:	4a11      	ldr	r2, [pc, #68]	@ (800c9e4 <SCH_HandleScheduledTask+0xac>)
 800c99e:	4413      	add	r3, r2
 800c9a0:	60bb      	str	r3, [r7, #8]

    // Check timer flag
    if(TRUE == pTimerContext->timerFlag)
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	885b      	ldrh	r3, [r3, #2]
 800c9a6:	2b01      	cmp	r3, #1
 800c9a8:	d10b      	bne.n	800c9c2 <SCH_HandleScheduledTask+0x8a>
    {
      pTimerContext->timerFlag = FALSE;
 800c9aa:	68bb      	ldr	r3, [r7, #8]
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	805a      	strh	r2, [r3, #2]
      if(pTimerContext->pTimerProperty->timerCallbackFunction)
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	689b      	ldr	r3, [r3, #8]
 800c9b4:	689b      	ldr	r3, [r3, #8]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d003      	beq.n	800c9c2 <SCH_HandleScheduledTask+0x8a>
      {
        pTimerContext->pTimerProperty->timerCallbackFunction();
 800c9ba:	68bb      	ldr	r3, [r7, #8]
 800c9bc:	689b      	ldr	r3, [r3, #8]
 800c9be:	689b      	ldr	r3, [r3, #8]
 800c9c0:	4798      	blx	r3
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 800c9c2:	7bbb      	ldrb	r3, [r7, #14]
 800c9c4:	3301      	adds	r3, #1
 800c9c6:	73bb      	strb	r3, [r7, #14]
 800c9c8:	4b07      	ldr	r3, [pc, #28]	@ (800c9e8 <SCH_HandleScheduledTask+0xb0>)
 800c9ca:	781b      	ldrb	r3, [r3, #0]
 800c9cc:	7bba      	ldrb	r2, [r7, #14]
 800c9ce:	429a      	cmp	r2, r3
 800c9d0:	d3df      	bcc.n	800c992 <SCH_HandleScheduledTask+0x5a>
      }
    }
  }
}
 800c9d2:	bf00      	nop
 800c9d4:	bf00      	nop
 800c9d6:	3710      	adds	r7, #16
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}
 800c9dc:	20005b60 	.word	0x20005b60
 800c9e0:	20005c50 	.word	0x20005c50
 800c9e4:	20005c54 	.word	0x20005c54
 800c9e8:	20005d44 	.word	0x20005d44

0800c9ec <atoi>:
 800c9ec:	220a      	movs	r2, #10
 800c9ee:	2100      	movs	r1, #0
 800c9f0:	f000 b87a 	b.w	800cae8 <strtol>

0800c9f4 <_strtol_l.isra.0>:
 800c9f4:	2b24      	cmp	r3, #36	@ 0x24
 800c9f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9fa:	4686      	mov	lr, r0
 800c9fc:	4690      	mov	r8, r2
 800c9fe:	d801      	bhi.n	800ca04 <_strtol_l.isra.0+0x10>
 800ca00:	2b01      	cmp	r3, #1
 800ca02:	d106      	bne.n	800ca12 <_strtol_l.isra.0+0x1e>
 800ca04:	f000 fea6 	bl	800d754 <__errno>
 800ca08:	2316      	movs	r3, #22
 800ca0a:	6003      	str	r3, [r0, #0]
 800ca0c:	2000      	movs	r0, #0
 800ca0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca12:	4834      	ldr	r0, [pc, #208]	@ (800cae4 <_strtol_l.isra.0+0xf0>)
 800ca14:	460d      	mov	r5, r1
 800ca16:	462a      	mov	r2, r5
 800ca18:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ca1c:	5d06      	ldrb	r6, [r0, r4]
 800ca1e:	f016 0608 	ands.w	r6, r6, #8
 800ca22:	d1f8      	bne.n	800ca16 <_strtol_l.isra.0+0x22>
 800ca24:	2c2d      	cmp	r4, #45	@ 0x2d
 800ca26:	d110      	bne.n	800ca4a <_strtol_l.isra.0+0x56>
 800ca28:	782c      	ldrb	r4, [r5, #0]
 800ca2a:	2601      	movs	r6, #1
 800ca2c:	1c95      	adds	r5, r2, #2
 800ca2e:	f033 0210 	bics.w	r2, r3, #16
 800ca32:	d115      	bne.n	800ca60 <_strtol_l.isra.0+0x6c>
 800ca34:	2c30      	cmp	r4, #48	@ 0x30
 800ca36:	d10d      	bne.n	800ca54 <_strtol_l.isra.0+0x60>
 800ca38:	782a      	ldrb	r2, [r5, #0]
 800ca3a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ca3e:	2a58      	cmp	r2, #88	@ 0x58
 800ca40:	d108      	bne.n	800ca54 <_strtol_l.isra.0+0x60>
 800ca42:	786c      	ldrb	r4, [r5, #1]
 800ca44:	3502      	adds	r5, #2
 800ca46:	2310      	movs	r3, #16
 800ca48:	e00a      	b.n	800ca60 <_strtol_l.isra.0+0x6c>
 800ca4a:	2c2b      	cmp	r4, #43	@ 0x2b
 800ca4c:	bf04      	itt	eq
 800ca4e:	782c      	ldrbeq	r4, [r5, #0]
 800ca50:	1c95      	addeq	r5, r2, #2
 800ca52:	e7ec      	b.n	800ca2e <_strtol_l.isra.0+0x3a>
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d1f6      	bne.n	800ca46 <_strtol_l.isra.0+0x52>
 800ca58:	2c30      	cmp	r4, #48	@ 0x30
 800ca5a:	bf14      	ite	ne
 800ca5c:	230a      	movne	r3, #10
 800ca5e:	2308      	moveq	r3, #8
 800ca60:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ca64:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ca68:	2200      	movs	r2, #0
 800ca6a:	fbbc f9f3 	udiv	r9, ip, r3
 800ca6e:	4610      	mov	r0, r2
 800ca70:	fb03 ca19 	mls	sl, r3, r9, ip
 800ca74:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ca78:	2f09      	cmp	r7, #9
 800ca7a:	d80f      	bhi.n	800ca9c <_strtol_l.isra.0+0xa8>
 800ca7c:	463c      	mov	r4, r7
 800ca7e:	42a3      	cmp	r3, r4
 800ca80:	dd1b      	ble.n	800caba <_strtol_l.isra.0+0xc6>
 800ca82:	1c57      	adds	r7, r2, #1
 800ca84:	d007      	beq.n	800ca96 <_strtol_l.isra.0+0xa2>
 800ca86:	4581      	cmp	r9, r0
 800ca88:	d314      	bcc.n	800cab4 <_strtol_l.isra.0+0xc0>
 800ca8a:	d101      	bne.n	800ca90 <_strtol_l.isra.0+0x9c>
 800ca8c:	45a2      	cmp	sl, r4
 800ca8e:	db11      	blt.n	800cab4 <_strtol_l.isra.0+0xc0>
 800ca90:	fb00 4003 	mla	r0, r0, r3, r4
 800ca94:	2201      	movs	r2, #1
 800ca96:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ca9a:	e7eb      	b.n	800ca74 <_strtol_l.isra.0+0x80>
 800ca9c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800caa0:	2f19      	cmp	r7, #25
 800caa2:	d801      	bhi.n	800caa8 <_strtol_l.isra.0+0xb4>
 800caa4:	3c37      	subs	r4, #55	@ 0x37
 800caa6:	e7ea      	b.n	800ca7e <_strtol_l.isra.0+0x8a>
 800caa8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800caac:	2f19      	cmp	r7, #25
 800caae:	d804      	bhi.n	800caba <_strtol_l.isra.0+0xc6>
 800cab0:	3c57      	subs	r4, #87	@ 0x57
 800cab2:	e7e4      	b.n	800ca7e <_strtol_l.isra.0+0x8a>
 800cab4:	f04f 32ff 	mov.w	r2, #4294967295
 800cab8:	e7ed      	b.n	800ca96 <_strtol_l.isra.0+0xa2>
 800caba:	1c53      	adds	r3, r2, #1
 800cabc:	d108      	bne.n	800cad0 <_strtol_l.isra.0+0xdc>
 800cabe:	2322      	movs	r3, #34	@ 0x22
 800cac0:	f8ce 3000 	str.w	r3, [lr]
 800cac4:	4660      	mov	r0, ip
 800cac6:	f1b8 0f00 	cmp.w	r8, #0
 800caca:	d0a0      	beq.n	800ca0e <_strtol_l.isra.0+0x1a>
 800cacc:	1e69      	subs	r1, r5, #1
 800cace:	e006      	b.n	800cade <_strtol_l.isra.0+0xea>
 800cad0:	b106      	cbz	r6, 800cad4 <_strtol_l.isra.0+0xe0>
 800cad2:	4240      	negs	r0, r0
 800cad4:	f1b8 0f00 	cmp.w	r8, #0
 800cad8:	d099      	beq.n	800ca0e <_strtol_l.isra.0+0x1a>
 800cada:	2a00      	cmp	r2, #0
 800cadc:	d1f6      	bne.n	800cacc <_strtol_l.isra.0+0xd8>
 800cade:	f8c8 1000 	str.w	r1, [r8]
 800cae2:	e794      	b.n	800ca0e <_strtol_l.isra.0+0x1a>
 800cae4:	08010839 	.word	0x08010839

0800cae8 <strtol>:
 800cae8:	4613      	mov	r3, r2
 800caea:	460a      	mov	r2, r1
 800caec:	4601      	mov	r1, r0
 800caee:	4802      	ldr	r0, [pc, #8]	@ (800caf8 <strtol+0x10>)
 800caf0:	6800      	ldr	r0, [r0, #0]
 800caf2:	f7ff bf7f 	b.w	800c9f4 <_strtol_l.isra.0>
 800caf6:	bf00      	nop
 800caf8:	20004238 	.word	0x20004238

0800cafc <__cvt>:
 800cafc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb00:	ec57 6b10 	vmov	r6, r7, d0
 800cb04:	2f00      	cmp	r7, #0
 800cb06:	460c      	mov	r4, r1
 800cb08:	4619      	mov	r1, r3
 800cb0a:	463b      	mov	r3, r7
 800cb0c:	bfbb      	ittet	lt
 800cb0e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800cb12:	461f      	movlt	r7, r3
 800cb14:	2300      	movge	r3, #0
 800cb16:	232d      	movlt	r3, #45	@ 0x2d
 800cb18:	700b      	strb	r3, [r1, #0]
 800cb1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cb1c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800cb20:	4691      	mov	r9, r2
 800cb22:	f023 0820 	bic.w	r8, r3, #32
 800cb26:	bfbc      	itt	lt
 800cb28:	4632      	movlt	r2, r6
 800cb2a:	4616      	movlt	r6, r2
 800cb2c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cb30:	d005      	beq.n	800cb3e <__cvt+0x42>
 800cb32:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800cb36:	d100      	bne.n	800cb3a <__cvt+0x3e>
 800cb38:	3401      	adds	r4, #1
 800cb3a:	2102      	movs	r1, #2
 800cb3c:	e000      	b.n	800cb40 <__cvt+0x44>
 800cb3e:	2103      	movs	r1, #3
 800cb40:	ab03      	add	r3, sp, #12
 800cb42:	9301      	str	r3, [sp, #4]
 800cb44:	ab02      	add	r3, sp, #8
 800cb46:	9300      	str	r3, [sp, #0]
 800cb48:	ec47 6b10 	vmov	d0, r6, r7
 800cb4c:	4653      	mov	r3, sl
 800cb4e:	4622      	mov	r2, r4
 800cb50:	f000 fec6 	bl	800d8e0 <_dtoa_r>
 800cb54:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800cb58:	4605      	mov	r5, r0
 800cb5a:	d119      	bne.n	800cb90 <__cvt+0x94>
 800cb5c:	f019 0f01 	tst.w	r9, #1
 800cb60:	d00e      	beq.n	800cb80 <__cvt+0x84>
 800cb62:	eb00 0904 	add.w	r9, r0, r4
 800cb66:	2200      	movs	r2, #0
 800cb68:	2300      	movs	r3, #0
 800cb6a:	4630      	mov	r0, r6
 800cb6c:	4639      	mov	r1, r7
 800cb6e:	f7f3 ffbb 	bl	8000ae8 <__aeabi_dcmpeq>
 800cb72:	b108      	cbz	r0, 800cb78 <__cvt+0x7c>
 800cb74:	f8cd 900c 	str.w	r9, [sp, #12]
 800cb78:	2230      	movs	r2, #48	@ 0x30
 800cb7a:	9b03      	ldr	r3, [sp, #12]
 800cb7c:	454b      	cmp	r3, r9
 800cb7e:	d31e      	bcc.n	800cbbe <__cvt+0xc2>
 800cb80:	9b03      	ldr	r3, [sp, #12]
 800cb82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cb84:	1b5b      	subs	r3, r3, r5
 800cb86:	4628      	mov	r0, r5
 800cb88:	6013      	str	r3, [r2, #0]
 800cb8a:	b004      	add	sp, #16
 800cb8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb90:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cb94:	eb00 0904 	add.w	r9, r0, r4
 800cb98:	d1e5      	bne.n	800cb66 <__cvt+0x6a>
 800cb9a:	7803      	ldrb	r3, [r0, #0]
 800cb9c:	2b30      	cmp	r3, #48	@ 0x30
 800cb9e:	d10a      	bne.n	800cbb6 <__cvt+0xba>
 800cba0:	2200      	movs	r2, #0
 800cba2:	2300      	movs	r3, #0
 800cba4:	4630      	mov	r0, r6
 800cba6:	4639      	mov	r1, r7
 800cba8:	f7f3 ff9e 	bl	8000ae8 <__aeabi_dcmpeq>
 800cbac:	b918      	cbnz	r0, 800cbb6 <__cvt+0xba>
 800cbae:	f1c4 0401 	rsb	r4, r4, #1
 800cbb2:	f8ca 4000 	str.w	r4, [sl]
 800cbb6:	f8da 3000 	ldr.w	r3, [sl]
 800cbba:	4499      	add	r9, r3
 800cbbc:	e7d3      	b.n	800cb66 <__cvt+0x6a>
 800cbbe:	1c59      	adds	r1, r3, #1
 800cbc0:	9103      	str	r1, [sp, #12]
 800cbc2:	701a      	strb	r2, [r3, #0]
 800cbc4:	e7d9      	b.n	800cb7a <__cvt+0x7e>

0800cbc6 <__exponent>:
 800cbc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cbc8:	2900      	cmp	r1, #0
 800cbca:	bfba      	itte	lt
 800cbcc:	4249      	neglt	r1, r1
 800cbce:	232d      	movlt	r3, #45	@ 0x2d
 800cbd0:	232b      	movge	r3, #43	@ 0x2b
 800cbd2:	2909      	cmp	r1, #9
 800cbd4:	7002      	strb	r2, [r0, #0]
 800cbd6:	7043      	strb	r3, [r0, #1]
 800cbd8:	dd29      	ble.n	800cc2e <__exponent+0x68>
 800cbda:	f10d 0307 	add.w	r3, sp, #7
 800cbde:	461d      	mov	r5, r3
 800cbe0:	270a      	movs	r7, #10
 800cbe2:	461a      	mov	r2, r3
 800cbe4:	fbb1 f6f7 	udiv	r6, r1, r7
 800cbe8:	fb07 1416 	mls	r4, r7, r6, r1
 800cbec:	3430      	adds	r4, #48	@ 0x30
 800cbee:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cbf2:	460c      	mov	r4, r1
 800cbf4:	2c63      	cmp	r4, #99	@ 0x63
 800cbf6:	f103 33ff 	add.w	r3, r3, #4294967295
 800cbfa:	4631      	mov	r1, r6
 800cbfc:	dcf1      	bgt.n	800cbe2 <__exponent+0x1c>
 800cbfe:	3130      	adds	r1, #48	@ 0x30
 800cc00:	1e94      	subs	r4, r2, #2
 800cc02:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cc06:	1c41      	adds	r1, r0, #1
 800cc08:	4623      	mov	r3, r4
 800cc0a:	42ab      	cmp	r3, r5
 800cc0c:	d30a      	bcc.n	800cc24 <__exponent+0x5e>
 800cc0e:	f10d 0309 	add.w	r3, sp, #9
 800cc12:	1a9b      	subs	r3, r3, r2
 800cc14:	42ac      	cmp	r4, r5
 800cc16:	bf88      	it	hi
 800cc18:	2300      	movhi	r3, #0
 800cc1a:	3302      	adds	r3, #2
 800cc1c:	4403      	add	r3, r0
 800cc1e:	1a18      	subs	r0, r3, r0
 800cc20:	b003      	add	sp, #12
 800cc22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc24:	f813 6b01 	ldrb.w	r6, [r3], #1
 800cc28:	f801 6f01 	strb.w	r6, [r1, #1]!
 800cc2c:	e7ed      	b.n	800cc0a <__exponent+0x44>
 800cc2e:	2330      	movs	r3, #48	@ 0x30
 800cc30:	3130      	adds	r1, #48	@ 0x30
 800cc32:	7083      	strb	r3, [r0, #2]
 800cc34:	70c1      	strb	r1, [r0, #3]
 800cc36:	1d03      	adds	r3, r0, #4
 800cc38:	e7f1      	b.n	800cc1e <__exponent+0x58>
	...

0800cc3c <_printf_float>:
 800cc3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc40:	b08d      	sub	sp, #52	@ 0x34
 800cc42:	460c      	mov	r4, r1
 800cc44:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800cc48:	4616      	mov	r6, r2
 800cc4a:	461f      	mov	r7, r3
 800cc4c:	4605      	mov	r5, r0
 800cc4e:	f000 fd37 	bl	800d6c0 <_localeconv_r>
 800cc52:	6803      	ldr	r3, [r0, #0]
 800cc54:	9304      	str	r3, [sp, #16]
 800cc56:	4618      	mov	r0, r3
 800cc58:	f7f3 fb1a 	bl	8000290 <strlen>
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc60:	f8d8 3000 	ldr.w	r3, [r8]
 800cc64:	9005      	str	r0, [sp, #20]
 800cc66:	3307      	adds	r3, #7
 800cc68:	f023 0307 	bic.w	r3, r3, #7
 800cc6c:	f103 0208 	add.w	r2, r3, #8
 800cc70:	f894 a018 	ldrb.w	sl, [r4, #24]
 800cc74:	f8d4 b000 	ldr.w	fp, [r4]
 800cc78:	f8c8 2000 	str.w	r2, [r8]
 800cc7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cc80:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800cc84:	9307      	str	r3, [sp, #28]
 800cc86:	f8cd 8018 	str.w	r8, [sp, #24]
 800cc8a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800cc8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc92:	4b9c      	ldr	r3, [pc, #624]	@ (800cf04 <_printf_float+0x2c8>)
 800cc94:	f04f 32ff 	mov.w	r2, #4294967295
 800cc98:	f7f3 ff58 	bl	8000b4c <__aeabi_dcmpun>
 800cc9c:	bb70      	cbnz	r0, 800ccfc <_printf_float+0xc0>
 800cc9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cca2:	4b98      	ldr	r3, [pc, #608]	@ (800cf04 <_printf_float+0x2c8>)
 800cca4:	f04f 32ff 	mov.w	r2, #4294967295
 800cca8:	f7f3 ff32 	bl	8000b10 <__aeabi_dcmple>
 800ccac:	bb30      	cbnz	r0, 800ccfc <_printf_float+0xc0>
 800ccae:	2200      	movs	r2, #0
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	4640      	mov	r0, r8
 800ccb4:	4649      	mov	r1, r9
 800ccb6:	f7f3 ff21 	bl	8000afc <__aeabi_dcmplt>
 800ccba:	b110      	cbz	r0, 800ccc2 <_printf_float+0x86>
 800ccbc:	232d      	movs	r3, #45	@ 0x2d
 800ccbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ccc2:	4a91      	ldr	r2, [pc, #580]	@ (800cf08 <_printf_float+0x2cc>)
 800ccc4:	4b91      	ldr	r3, [pc, #580]	@ (800cf0c <_printf_float+0x2d0>)
 800ccc6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ccca:	bf8c      	ite	hi
 800cccc:	4690      	movhi	r8, r2
 800ccce:	4698      	movls	r8, r3
 800ccd0:	2303      	movs	r3, #3
 800ccd2:	6123      	str	r3, [r4, #16]
 800ccd4:	f02b 0304 	bic.w	r3, fp, #4
 800ccd8:	6023      	str	r3, [r4, #0]
 800ccda:	f04f 0900 	mov.w	r9, #0
 800ccde:	9700      	str	r7, [sp, #0]
 800cce0:	4633      	mov	r3, r6
 800cce2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800cce4:	4621      	mov	r1, r4
 800cce6:	4628      	mov	r0, r5
 800cce8:	f000 f9d2 	bl	800d090 <_printf_common>
 800ccec:	3001      	adds	r0, #1
 800ccee:	f040 808d 	bne.w	800ce0c <_printf_float+0x1d0>
 800ccf2:	f04f 30ff 	mov.w	r0, #4294967295
 800ccf6:	b00d      	add	sp, #52	@ 0x34
 800ccf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccfc:	4642      	mov	r2, r8
 800ccfe:	464b      	mov	r3, r9
 800cd00:	4640      	mov	r0, r8
 800cd02:	4649      	mov	r1, r9
 800cd04:	f7f3 ff22 	bl	8000b4c <__aeabi_dcmpun>
 800cd08:	b140      	cbz	r0, 800cd1c <_printf_float+0xe0>
 800cd0a:	464b      	mov	r3, r9
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	bfbc      	itt	lt
 800cd10:	232d      	movlt	r3, #45	@ 0x2d
 800cd12:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800cd16:	4a7e      	ldr	r2, [pc, #504]	@ (800cf10 <_printf_float+0x2d4>)
 800cd18:	4b7e      	ldr	r3, [pc, #504]	@ (800cf14 <_printf_float+0x2d8>)
 800cd1a:	e7d4      	b.n	800ccc6 <_printf_float+0x8a>
 800cd1c:	6863      	ldr	r3, [r4, #4]
 800cd1e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800cd22:	9206      	str	r2, [sp, #24]
 800cd24:	1c5a      	adds	r2, r3, #1
 800cd26:	d13b      	bne.n	800cda0 <_printf_float+0x164>
 800cd28:	2306      	movs	r3, #6
 800cd2a:	6063      	str	r3, [r4, #4]
 800cd2c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800cd30:	2300      	movs	r3, #0
 800cd32:	6022      	str	r2, [r4, #0]
 800cd34:	9303      	str	r3, [sp, #12]
 800cd36:	ab0a      	add	r3, sp, #40	@ 0x28
 800cd38:	e9cd a301 	strd	sl, r3, [sp, #4]
 800cd3c:	ab09      	add	r3, sp, #36	@ 0x24
 800cd3e:	9300      	str	r3, [sp, #0]
 800cd40:	6861      	ldr	r1, [r4, #4]
 800cd42:	ec49 8b10 	vmov	d0, r8, r9
 800cd46:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800cd4a:	4628      	mov	r0, r5
 800cd4c:	f7ff fed6 	bl	800cafc <__cvt>
 800cd50:	9b06      	ldr	r3, [sp, #24]
 800cd52:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cd54:	2b47      	cmp	r3, #71	@ 0x47
 800cd56:	4680      	mov	r8, r0
 800cd58:	d129      	bne.n	800cdae <_printf_float+0x172>
 800cd5a:	1cc8      	adds	r0, r1, #3
 800cd5c:	db02      	blt.n	800cd64 <_printf_float+0x128>
 800cd5e:	6863      	ldr	r3, [r4, #4]
 800cd60:	4299      	cmp	r1, r3
 800cd62:	dd41      	ble.n	800cde8 <_printf_float+0x1ac>
 800cd64:	f1aa 0a02 	sub.w	sl, sl, #2
 800cd68:	fa5f fa8a 	uxtb.w	sl, sl
 800cd6c:	3901      	subs	r1, #1
 800cd6e:	4652      	mov	r2, sl
 800cd70:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800cd74:	9109      	str	r1, [sp, #36]	@ 0x24
 800cd76:	f7ff ff26 	bl	800cbc6 <__exponent>
 800cd7a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cd7c:	1813      	adds	r3, r2, r0
 800cd7e:	2a01      	cmp	r2, #1
 800cd80:	4681      	mov	r9, r0
 800cd82:	6123      	str	r3, [r4, #16]
 800cd84:	dc02      	bgt.n	800cd8c <_printf_float+0x150>
 800cd86:	6822      	ldr	r2, [r4, #0]
 800cd88:	07d2      	lsls	r2, r2, #31
 800cd8a:	d501      	bpl.n	800cd90 <_printf_float+0x154>
 800cd8c:	3301      	adds	r3, #1
 800cd8e:	6123      	str	r3, [r4, #16]
 800cd90:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d0a2      	beq.n	800ccde <_printf_float+0xa2>
 800cd98:	232d      	movs	r3, #45	@ 0x2d
 800cd9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cd9e:	e79e      	b.n	800ccde <_printf_float+0xa2>
 800cda0:	9a06      	ldr	r2, [sp, #24]
 800cda2:	2a47      	cmp	r2, #71	@ 0x47
 800cda4:	d1c2      	bne.n	800cd2c <_printf_float+0xf0>
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d1c0      	bne.n	800cd2c <_printf_float+0xf0>
 800cdaa:	2301      	movs	r3, #1
 800cdac:	e7bd      	b.n	800cd2a <_printf_float+0xee>
 800cdae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cdb2:	d9db      	bls.n	800cd6c <_printf_float+0x130>
 800cdb4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800cdb8:	d118      	bne.n	800cdec <_printf_float+0x1b0>
 800cdba:	2900      	cmp	r1, #0
 800cdbc:	6863      	ldr	r3, [r4, #4]
 800cdbe:	dd0b      	ble.n	800cdd8 <_printf_float+0x19c>
 800cdc0:	6121      	str	r1, [r4, #16]
 800cdc2:	b913      	cbnz	r3, 800cdca <_printf_float+0x18e>
 800cdc4:	6822      	ldr	r2, [r4, #0]
 800cdc6:	07d0      	lsls	r0, r2, #31
 800cdc8:	d502      	bpl.n	800cdd0 <_printf_float+0x194>
 800cdca:	3301      	adds	r3, #1
 800cdcc:	440b      	add	r3, r1
 800cdce:	6123      	str	r3, [r4, #16]
 800cdd0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800cdd2:	f04f 0900 	mov.w	r9, #0
 800cdd6:	e7db      	b.n	800cd90 <_printf_float+0x154>
 800cdd8:	b913      	cbnz	r3, 800cde0 <_printf_float+0x1a4>
 800cdda:	6822      	ldr	r2, [r4, #0]
 800cddc:	07d2      	lsls	r2, r2, #31
 800cdde:	d501      	bpl.n	800cde4 <_printf_float+0x1a8>
 800cde0:	3302      	adds	r3, #2
 800cde2:	e7f4      	b.n	800cdce <_printf_float+0x192>
 800cde4:	2301      	movs	r3, #1
 800cde6:	e7f2      	b.n	800cdce <_printf_float+0x192>
 800cde8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800cdec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cdee:	4299      	cmp	r1, r3
 800cdf0:	db05      	blt.n	800cdfe <_printf_float+0x1c2>
 800cdf2:	6823      	ldr	r3, [r4, #0]
 800cdf4:	6121      	str	r1, [r4, #16]
 800cdf6:	07d8      	lsls	r0, r3, #31
 800cdf8:	d5ea      	bpl.n	800cdd0 <_printf_float+0x194>
 800cdfa:	1c4b      	adds	r3, r1, #1
 800cdfc:	e7e7      	b.n	800cdce <_printf_float+0x192>
 800cdfe:	2900      	cmp	r1, #0
 800ce00:	bfd4      	ite	le
 800ce02:	f1c1 0202 	rsble	r2, r1, #2
 800ce06:	2201      	movgt	r2, #1
 800ce08:	4413      	add	r3, r2
 800ce0a:	e7e0      	b.n	800cdce <_printf_float+0x192>
 800ce0c:	6823      	ldr	r3, [r4, #0]
 800ce0e:	055a      	lsls	r2, r3, #21
 800ce10:	d407      	bmi.n	800ce22 <_printf_float+0x1e6>
 800ce12:	6923      	ldr	r3, [r4, #16]
 800ce14:	4642      	mov	r2, r8
 800ce16:	4631      	mov	r1, r6
 800ce18:	4628      	mov	r0, r5
 800ce1a:	47b8      	blx	r7
 800ce1c:	3001      	adds	r0, #1
 800ce1e:	d12b      	bne.n	800ce78 <_printf_float+0x23c>
 800ce20:	e767      	b.n	800ccf2 <_printf_float+0xb6>
 800ce22:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ce26:	f240 80dd 	bls.w	800cfe4 <_printf_float+0x3a8>
 800ce2a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ce2e:	2200      	movs	r2, #0
 800ce30:	2300      	movs	r3, #0
 800ce32:	f7f3 fe59 	bl	8000ae8 <__aeabi_dcmpeq>
 800ce36:	2800      	cmp	r0, #0
 800ce38:	d033      	beq.n	800cea2 <_printf_float+0x266>
 800ce3a:	4a37      	ldr	r2, [pc, #220]	@ (800cf18 <_printf_float+0x2dc>)
 800ce3c:	2301      	movs	r3, #1
 800ce3e:	4631      	mov	r1, r6
 800ce40:	4628      	mov	r0, r5
 800ce42:	47b8      	blx	r7
 800ce44:	3001      	adds	r0, #1
 800ce46:	f43f af54 	beq.w	800ccf2 <_printf_float+0xb6>
 800ce4a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ce4e:	4543      	cmp	r3, r8
 800ce50:	db02      	blt.n	800ce58 <_printf_float+0x21c>
 800ce52:	6823      	ldr	r3, [r4, #0]
 800ce54:	07d8      	lsls	r0, r3, #31
 800ce56:	d50f      	bpl.n	800ce78 <_printf_float+0x23c>
 800ce58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce5c:	4631      	mov	r1, r6
 800ce5e:	4628      	mov	r0, r5
 800ce60:	47b8      	blx	r7
 800ce62:	3001      	adds	r0, #1
 800ce64:	f43f af45 	beq.w	800ccf2 <_printf_float+0xb6>
 800ce68:	f04f 0900 	mov.w	r9, #0
 800ce6c:	f108 38ff 	add.w	r8, r8, #4294967295
 800ce70:	f104 0a1a 	add.w	sl, r4, #26
 800ce74:	45c8      	cmp	r8, r9
 800ce76:	dc09      	bgt.n	800ce8c <_printf_float+0x250>
 800ce78:	6823      	ldr	r3, [r4, #0]
 800ce7a:	079b      	lsls	r3, r3, #30
 800ce7c:	f100 8103 	bmi.w	800d086 <_printf_float+0x44a>
 800ce80:	68e0      	ldr	r0, [r4, #12]
 800ce82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ce84:	4298      	cmp	r0, r3
 800ce86:	bfb8      	it	lt
 800ce88:	4618      	movlt	r0, r3
 800ce8a:	e734      	b.n	800ccf6 <_printf_float+0xba>
 800ce8c:	2301      	movs	r3, #1
 800ce8e:	4652      	mov	r2, sl
 800ce90:	4631      	mov	r1, r6
 800ce92:	4628      	mov	r0, r5
 800ce94:	47b8      	blx	r7
 800ce96:	3001      	adds	r0, #1
 800ce98:	f43f af2b 	beq.w	800ccf2 <_printf_float+0xb6>
 800ce9c:	f109 0901 	add.w	r9, r9, #1
 800cea0:	e7e8      	b.n	800ce74 <_printf_float+0x238>
 800cea2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	dc39      	bgt.n	800cf1c <_printf_float+0x2e0>
 800cea8:	4a1b      	ldr	r2, [pc, #108]	@ (800cf18 <_printf_float+0x2dc>)
 800ceaa:	2301      	movs	r3, #1
 800ceac:	4631      	mov	r1, r6
 800ceae:	4628      	mov	r0, r5
 800ceb0:	47b8      	blx	r7
 800ceb2:	3001      	adds	r0, #1
 800ceb4:	f43f af1d 	beq.w	800ccf2 <_printf_float+0xb6>
 800ceb8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800cebc:	ea59 0303 	orrs.w	r3, r9, r3
 800cec0:	d102      	bne.n	800cec8 <_printf_float+0x28c>
 800cec2:	6823      	ldr	r3, [r4, #0]
 800cec4:	07d9      	lsls	r1, r3, #31
 800cec6:	d5d7      	bpl.n	800ce78 <_printf_float+0x23c>
 800cec8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cecc:	4631      	mov	r1, r6
 800cece:	4628      	mov	r0, r5
 800ced0:	47b8      	blx	r7
 800ced2:	3001      	adds	r0, #1
 800ced4:	f43f af0d 	beq.w	800ccf2 <_printf_float+0xb6>
 800ced8:	f04f 0a00 	mov.w	sl, #0
 800cedc:	f104 0b1a 	add.w	fp, r4, #26
 800cee0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cee2:	425b      	negs	r3, r3
 800cee4:	4553      	cmp	r3, sl
 800cee6:	dc01      	bgt.n	800ceec <_printf_float+0x2b0>
 800cee8:	464b      	mov	r3, r9
 800ceea:	e793      	b.n	800ce14 <_printf_float+0x1d8>
 800ceec:	2301      	movs	r3, #1
 800ceee:	465a      	mov	r2, fp
 800cef0:	4631      	mov	r1, r6
 800cef2:	4628      	mov	r0, r5
 800cef4:	47b8      	blx	r7
 800cef6:	3001      	adds	r0, #1
 800cef8:	f43f aefb 	beq.w	800ccf2 <_printf_float+0xb6>
 800cefc:	f10a 0a01 	add.w	sl, sl, #1
 800cf00:	e7ee      	b.n	800cee0 <_printf_float+0x2a4>
 800cf02:	bf00      	nop
 800cf04:	7fefffff 	.word	0x7fefffff
 800cf08:	0801093d 	.word	0x0801093d
 800cf0c:	08010939 	.word	0x08010939
 800cf10:	08010945 	.word	0x08010945
 800cf14:	08010941 	.word	0x08010941
 800cf18:	08010949 	.word	0x08010949
 800cf1c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cf1e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cf22:	4553      	cmp	r3, sl
 800cf24:	bfa8      	it	ge
 800cf26:	4653      	movge	r3, sl
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	4699      	mov	r9, r3
 800cf2c:	dc36      	bgt.n	800cf9c <_printf_float+0x360>
 800cf2e:	f04f 0b00 	mov.w	fp, #0
 800cf32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cf36:	f104 021a 	add.w	r2, r4, #26
 800cf3a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cf3c:	9306      	str	r3, [sp, #24]
 800cf3e:	eba3 0309 	sub.w	r3, r3, r9
 800cf42:	455b      	cmp	r3, fp
 800cf44:	dc31      	bgt.n	800cfaa <_printf_float+0x36e>
 800cf46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf48:	459a      	cmp	sl, r3
 800cf4a:	dc3a      	bgt.n	800cfc2 <_printf_float+0x386>
 800cf4c:	6823      	ldr	r3, [r4, #0]
 800cf4e:	07da      	lsls	r2, r3, #31
 800cf50:	d437      	bmi.n	800cfc2 <_printf_float+0x386>
 800cf52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf54:	ebaa 0903 	sub.w	r9, sl, r3
 800cf58:	9b06      	ldr	r3, [sp, #24]
 800cf5a:	ebaa 0303 	sub.w	r3, sl, r3
 800cf5e:	4599      	cmp	r9, r3
 800cf60:	bfa8      	it	ge
 800cf62:	4699      	movge	r9, r3
 800cf64:	f1b9 0f00 	cmp.w	r9, #0
 800cf68:	dc33      	bgt.n	800cfd2 <_printf_float+0x396>
 800cf6a:	f04f 0800 	mov.w	r8, #0
 800cf6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cf72:	f104 0b1a 	add.w	fp, r4, #26
 800cf76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf78:	ebaa 0303 	sub.w	r3, sl, r3
 800cf7c:	eba3 0309 	sub.w	r3, r3, r9
 800cf80:	4543      	cmp	r3, r8
 800cf82:	f77f af79 	ble.w	800ce78 <_printf_float+0x23c>
 800cf86:	2301      	movs	r3, #1
 800cf88:	465a      	mov	r2, fp
 800cf8a:	4631      	mov	r1, r6
 800cf8c:	4628      	mov	r0, r5
 800cf8e:	47b8      	blx	r7
 800cf90:	3001      	adds	r0, #1
 800cf92:	f43f aeae 	beq.w	800ccf2 <_printf_float+0xb6>
 800cf96:	f108 0801 	add.w	r8, r8, #1
 800cf9a:	e7ec      	b.n	800cf76 <_printf_float+0x33a>
 800cf9c:	4642      	mov	r2, r8
 800cf9e:	4631      	mov	r1, r6
 800cfa0:	4628      	mov	r0, r5
 800cfa2:	47b8      	blx	r7
 800cfa4:	3001      	adds	r0, #1
 800cfa6:	d1c2      	bne.n	800cf2e <_printf_float+0x2f2>
 800cfa8:	e6a3      	b.n	800ccf2 <_printf_float+0xb6>
 800cfaa:	2301      	movs	r3, #1
 800cfac:	4631      	mov	r1, r6
 800cfae:	4628      	mov	r0, r5
 800cfb0:	9206      	str	r2, [sp, #24]
 800cfb2:	47b8      	blx	r7
 800cfb4:	3001      	adds	r0, #1
 800cfb6:	f43f ae9c 	beq.w	800ccf2 <_printf_float+0xb6>
 800cfba:	9a06      	ldr	r2, [sp, #24]
 800cfbc:	f10b 0b01 	add.w	fp, fp, #1
 800cfc0:	e7bb      	b.n	800cf3a <_printf_float+0x2fe>
 800cfc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cfc6:	4631      	mov	r1, r6
 800cfc8:	4628      	mov	r0, r5
 800cfca:	47b8      	blx	r7
 800cfcc:	3001      	adds	r0, #1
 800cfce:	d1c0      	bne.n	800cf52 <_printf_float+0x316>
 800cfd0:	e68f      	b.n	800ccf2 <_printf_float+0xb6>
 800cfd2:	9a06      	ldr	r2, [sp, #24]
 800cfd4:	464b      	mov	r3, r9
 800cfd6:	4442      	add	r2, r8
 800cfd8:	4631      	mov	r1, r6
 800cfda:	4628      	mov	r0, r5
 800cfdc:	47b8      	blx	r7
 800cfde:	3001      	adds	r0, #1
 800cfe0:	d1c3      	bne.n	800cf6a <_printf_float+0x32e>
 800cfe2:	e686      	b.n	800ccf2 <_printf_float+0xb6>
 800cfe4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cfe8:	f1ba 0f01 	cmp.w	sl, #1
 800cfec:	dc01      	bgt.n	800cff2 <_printf_float+0x3b6>
 800cfee:	07db      	lsls	r3, r3, #31
 800cff0:	d536      	bpl.n	800d060 <_printf_float+0x424>
 800cff2:	2301      	movs	r3, #1
 800cff4:	4642      	mov	r2, r8
 800cff6:	4631      	mov	r1, r6
 800cff8:	4628      	mov	r0, r5
 800cffa:	47b8      	blx	r7
 800cffc:	3001      	adds	r0, #1
 800cffe:	f43f ae78 	beq.w	800ccf2 <_printf_float+0xb6>
 800d002:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d006:	4631      	mov	r1, r6
 800d008:	4628      	mov	r0, r5
 800d00a:	47b8      	blx	r7
 800d00c:	3001      	adds	r0, #1
 800d00e:	f43f ae70 	beq.w	800ccf2 <_printf_float+0xb6>
 800d012:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d016:	2200      	movs	r2, #0
 800d018:	2300      	movs	r3, #0
 800d01a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d01e:	f7f3 fd63 	bl	8000ae8 <__aeabi_dcmpeq>
 800d022:	b9c0      	cbnz	r0, 800d056 <_printf_float+0x41a>
 800d024:	4653      	mov	r3, sl
 800d026:	f108 0201 	add.w	r2, r8, #1
 800d02a:	4631      	mov	r1, r6
 800d02c:	4628      	mov	r0, r5
 800d02e:	47b8      	blx	r7
 800d030:	3001      	adds	r0, #1
 800d032:	d10c      	bne.n	800d04e <_printf_float+0x412>
 800d034:	e65d      	b.n	800ccf2 <_printf_float+0xb6>
 800d036:	2301      	movs	r3, #1
 800d038:	465a      	mov	r2, fp
 800d03a:	4631      	mov	r1, r6
 800d03c:	4628      	mov	r0, r5
 800d03e:	47b8      	blx	r7
 800d040:	3001      	adds	r0, #1
 800d042:	f43f ae56 	beq.w	800ccf2 <_printf_float+0xb6>
 800d046:	f108 0801 	add.w	r8, r8, #1
 800d04a:	45d0      	cmp	r8, sl
 800d04c:	dbf3      	blt.n	800d036 <_printf_float+0x3fa>
 800d04e:	464b      	mov	r3, r9
 800d050:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d054:	e6df      	b.n	800ce16 <_printf_float+0x1da>
 800d056:	f04f 0800 	mov.w	r8, #0
 800d05a:	f104 0b1a 	add.w	fp, r4, #26
 800d05e:	e7f4      	b.n	800d04a <_printf_float+0x40e>
 800d060:	2301      	movs	r3, #1
 800d062:	4642      	mov	r2, r8
 800d064:	e7e1      	b.n	800d02a <_printf_float+0x3ee>
 800d066:	2301      	movs	r3, #1
 800d068:	464a      	mov	r2, r9
 800d06a:	4631      	mov	r1, r6
 800d06c:	4628      	mov	r0, r5
 800d06e:	47b8      	blx	r7
 800d070:	3001      	adds	r0, #1
 800d072:	f43f ae3e 	beq.w	800ccf2 <_printf_float+0xb6>
 800d076:	f108 0801 	add.w	r8, r8, #1
 800d07a:	68e3      	ldr	r3, [r4, #12]
 800d07c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d07e:	1a5b      	subs	r3, r3, r1
 800d080:	4543      	cmp	r3, r8
 800d082:	dcf0      	bgt.n	800d066 <_printf_float+0x42a>
 800d084:	e6fc      	b.n	800ce80 <_printf_float+0x244>
 800d086:	f04f 0800 	mov.w	r8, #0
 800d08a:	f104 0919 	add.w	r9, r4, #25
 800d08e:	e7f4      	b.n	800d07a <_printf_float+0x43e>

0800d090 <_printf_common>:
 800d090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d094:	4616      	mov	r6, r2
 800d096:	4698      	mov	r8, r3
 800d098:	688a      	ldr	r2, [r1, #8]
 800d09a:	690b      	ldr	r3, [r1, #16]
 800d09c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d0a0:	4293      	cmp	r3, r2
 800d0a2:	bfb8      	it	lt
 800d0a4:	4613      	movlt	r3, r2
 800d0a6:	6033      	str	r3, [r6, #0]
 800d0a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d0ac:	4607      	mov	r7, r0
 800d0ae:	460c      	mov	r4, r1
 800d0b0:	b10a      	cbz	r2, 800d0b6 <_printf_common+0x26>
 800d0b2:	3301      	adds	r3, #1
 800d0b4:	6033      	str	r3, [r6, #0]
 800d0b6:	6823      	ldr	r3, [r4, #0]
 800d0b8:	0699      	lsls	r1, r3, #26
 800d0ba:	bf42      	ittt	mi
 800d0bc:	6833      	ldrmi	r3, [r6, #0]
 800d0be:	3302      	addmi	r3, #2
 800d0c0:	6033      	strmi	r3, [r6, #0]
 800d0c2:	6825      	ldr	r5, [r4, #0]
 800d0c4:	f015 0506 	ands.w	r5, r5, #6
 800d0c8:	d106      	bne.n	800d0d8 <_printf_common+0x48>
 800d0ca:	f104 0a19 	add.w	sl, r4, #25
 800d0ce:	68e3      	ldr	r3, [r4, #12]
 800d0d0:	6832      	ldr	r2, [r6, #0]
 800d0d2:	1a9b      	subs	r3, r3, r2
 800d0d4:	42ab      	cmp	r3, r5
 800d0d6:	dc26      	bgt.n	800d126 <_printf_common+0x96>
 800d0d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d0dc:	6822      	ldr	r2, [r4, #0]
 800d0de:	3b00      	subs	r3, #0
 800d0e0:	bf18      	it	ne
 800d0e2:	2301      	movne	r3, #1
 800d0e4:	0692      	lsls	r2, r2, #26
 800d0e6:	d42b      	bmi.n	800d140 <_printf_common+0xb0>
 800d0e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d0ec:	4641      	mov	r1, r8
 800d0ee:	4638      	mov	r0, r7
 800d0f0:	47c8      	blx	r9
 800d0f2:	3001      	adds	r0, #1
 800d0f4:	d01e      	beq.n	800d134 <_printf_common+0xa4>
 800d0f6:	6823      	ldr	r3, [r4, #0]
 800d0f8:	6922      	ldr	r2, [r4, #16]
 800d0fa:	f003 0306 	and.w	r3, r3, #6
 800d0fe:	2b04      	cmp	r3, #4
 800d100:	bf02      	ittt	eq
 800d102:	68e5      	ldreq	r5, [r4, #12]
 800d104:	6833      	ldreq	r3, [r6, #0]
 800d106:	1aed      	subeq	r5, r5, r3
 800d108:	68a3      	ldr	r3, [r4, #8]
 800d10a:	bf0c      	ite	eq
 800d10c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d110:	2500      	movne	r5, #0
 800d112:	4293      	cmp	r3, r2
 800d114:	bfc4      	itt	gt
 800d116:	1a9b      	subgt	r3, r3, r2
 800d118:	18ed      	addgt	r5, r5, r3
 800d11a:	2600      	movs	r6, #0
 800d11c:	341a      	adds	r4, #26
 800d11e:	42b5      	cmp	r5, r6
 800d120:	d11a      	bne.n	800d158 <_printf_common+0xc8>
 800d122:	2000      	movs	r0, #0
 800d124:	e008      	b.n	800d138 <_printf_common+0xa8>
 800d126:	2301      	movs	r3, #1
 800d128:	4652      	mov	r2, sl
 800d12a:	4641      	mov	r1, r8
 800d12c:	4638      	mov	r0, r7
 800d12e:	47c8      	blx	r9
 800d130:	3001      	adds	r0, #1
 800d132:	d103      	bne.n	800d13c <_printf_common+0xac>
 800d134:	f04f 30ff 	mov.w	r0, #4294967295
 800d138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d13c:	3501      	adds	r5, #1
 800d13e:	e7c6      	b.n	800d0ce <_printf_common+0x3e>
 800d140:	18e1      	adds	r1, r4, r3
 800d142:	1c5a      	adds	r2, r3, #1
 800d144:	2030      	movs	r0, #48	@ 0x30
 800d146:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d14a:	4422      	add	r2, r4
 800d14c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d150:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d154:	3302      	adds	r3, #2
 800d156:	e7c7      	b.n	800d0e8 <_printf_common+0x58>
 800d158:	2301      	movs	r3, #1
 800d15a:	4622      	mov	r2, r4
 800d15c:	4641      	mov	r1, r8
 800d15e:	4638      	mov	r0, r7
 800d160:	47c8      	blx	r9
 800d162:	3001      	adds	r0, #1
 800d164:	d0e6      	beq.n	800d134 <_printf_common+0xa4>
 800d166:	3601      	adds	r6, #1
 800d168:	e7d9      	b.n	800d11e <_printf_common+0x8e>
	...

0800d16c <_printf_i>:
 800d16c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d170:	7e0f      	ldrb	r7, [r1, #24]
 800d172:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d174:	2f78      	cmp	r7, #120	@ 0x78
 800d176:	4691      	mov	r9, r2
 800d178:	4680      	mov	r8, r0
 800d17a:	460c      	mov	r4, r1
 800d17c:	469a      	mov	sl, r3
 800d17e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d182:	d807      	bhi.n	800d194 <_printf_i+0x28>
 800d184:	2f62      	cmp	r7, #98	@ 0x62
 800d186:	d80a      	bhi.n	800d19e <_printf_i+0x32>
 800d188:	2f00      	cmp	r7, #0
 800d18a:	f000 80d1 	beq.w	800d330 <_printf_i+0x1c4>
 800d18e:	2f58      	cmp	r7, #88	@ 0x58
 800d190:	f000 80b8 	beq.w	800d304 <_printf_i+0x198>
 800d194:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d198:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d19c:	e03a      	b.n	800d214 <_printf_i+0xa8>
 800d19e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d1a2:	2b15      	cmp	r3, #21
 800d1a4:	d8f6      	bhi.n	800d194 <_printf_i+0x28>
 800d1a6:	a101      	add	r1, pc, #4	@ (adr r1, 800d1ac <_printf_i+0x40>)
 800d1a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d1ac:	0800d205 	.word	0x0800d205
 800d1b0:	0800d219 	.word	0x0800d219
 800d1b4:	0800d195 	.word	0x0800d195
 800d1b8:	0800d195 	.word	0x0800d195
 800d1bc:	0800d195 	.word	0x0800d195
 800d1c0:	0800d195 	.word	0x0800d195
 800d1c4:	0800d219 	.word	0x0800d219
 800d1c8:	0800d195 	.word	0x0800d195
 800d1cc:	0800d195 	.word	0x0800d195
 800d1d0:	0800d195 	.word	0x0800d195
 800d1d4:	0800d195 	.word	0x0800d195
 800d1d8:	0800d317 	.word	0x0800d317
 800d1dc:	0800d243 	.word	0x0800d243
 800d1e0:	0800d2d1 	.word	0x0800d2d1
 800d1e4:	0800d195 	.word	0x0800d195
 800d1e8:	0800d195 	.word	0x0800d195
 800d1ec:	0800d339 	.word	0x0800d339
 800d1f0:	0800d195 	.word	0x0800d195
 800d1f4:	0800d243 	.word	0x0800d243
 800d1f8:	0800d195 	.word	0x0800d195
 800d1fc:	0800d195 	.word	0x0800d195
 800d200:	0800d2d9 	.word	0x0800d2d9
 800d204:	6833      	ldr	r3, [r6, #0]
 800d206:	1d1a      	adds	r2, r3, #4
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	6032      	str	r2, [r6, #0]
 800d20c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d210:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d214:	2301      	movs	r3, #1
 800d216:	e09c      	b.n	800d352 <_printf_i+0x1e6>
 800d218:	6833      	ldr	r3, [r6, #0]
 800d21a:	6820      	ldr	r0, [r4, #0]
 800d21c:	1d19      	adds	r1, r3, #4
 800d21e:	6031      	str	r1, [r6, #0]
 800d220:	0606      	lsls	r6, r0, #24
 800d222:	d501      	bpl.n	800d228 <_printf_i+0xbc>
 800d224:	681d      	ldr	r5, [r3, #0]
 800d226:	e003      	b.n	800d230 <_printf_i+0xc4>
 800d228:	0645      	lsls	r5, r0, #25
 800d22a:	d5fb      	bpl.n	800d224 <_printf_i+0xb8>
 800d22c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d230:	2d00      	cmp	r5, #0
 800d232:	da03      	bge.n	800d23c <_printf_i+0xd0>
 800d234:	232d      	movs	r3, #45	@ 0x2d
 800d236:	426d      	negs	r5, r5
 800d238:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d23c:	4858      	ldr	r0, [pc, #352]	@ (800d3a0 <_printf_i+0x234>)
 800d23e:	230a      	movs	r3, #10
 800d240:	e011      	b.n	800d266 <_printf_i+0xfa>
 800d242:	6821      	ldr	r1, [r4, #0]
 800d244:	6833      	ldr	r3, [r6, #0]
 800d246:	0608      	lsls	r0, r1, #24
 800d248:	f853 5b04 	ldr.w	r5, [r3], #4
 800d24c:	d402      	bmi.n	800d254 <_printf_i+0xe8>
 800d24e:	0649      	lsls	r1, r1, #25
 800d250:	bf48      	it	mi
 800d252:	b2ad      	uxthmi	r5, r5
 800d254:	2f6f      	cmp	r7, #111	@ 0x6f
 800d256:	4852      	ldr	r0, [pc, #328]	@ (800d3a0 <_printf_i+0x234>)
 800d258:	6033      	str	r3, [r6, #0]
 800d25a:	bf14      	ite	ne
 800d25c:	230a      	movne	r3, #10
 800d25e:	2308      	moveq	r3, #8
 800d260:	2100      	movs	r1, #0
 800d262:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d266:	6866      	ldr	r6, [r4, #4]
 800d268:	60a6      	str	r6, [r4, #8]
 800d26a:	2e00      	cmp	r6, #0
 800d26c:	db05      	blt.n	800d27a <_printf_i+0x10e>
 800d26e:	6821      	ldr	r1, [r4, #0]
 800d270:	432e      	orrs	r6, r5
 800d272:	f021 0104 	bic.w	r1, r1, #4
 800d276:	6021      	str	r1, [r4, #0]
 800d278:	d04b      	beq.n	800d312 <_printf_i+0x1a6>
 800d27a:	4616      	mov	r6, r2
 800d27c:	fbb5 f1f3 	udiv	r1, r5, r3
 800d280:	fb03 5711 	mls	r7, r3, r1, r5
 800d284:	5dc7      	ldrb	r7, [r0, r7]
 800d286:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d28a:	462f      	mov	r7, r5
 800d28c:	42bb      	cmp	r3, r7
 800d28e:	460d      	mov	r5, r1
 800d290:	d9f4      	bls.n	800d27c <_printf_i+0x110>
 800d292:	2b08      	cmp	r3, #8
 800d294:	d10b      	bne.n	800d2ae <_printf_i+0x142>
 800d296:	6823      	ldr	r3, [r4, #0]
 800d298:	07df      	lsls	r7, r3, #31
 800d29a:	d508      	bpl.n	800d2ae <_printf_i+0x142>
 800d29c:	6923      	ldr	r3, [r4, #16]
 800d29e:	6861      	ldr	r1, [r4, #4]
 800d2a0:	4299      	cmp	r1, r3
 800d2a2:	bfde      	ittt	le
 800d2a4:	2330      	movle	r3, #48	@ 0x30
 800d2a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d2aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d2ae:	1b92      	subs	r2, r2, r6
 800d2b0:	6122      	str	r2, [r4, #16]
 800d2b2:	f8cd a000 	str.w	sl, [sp]
 800d2b6:	464b      	mov	r3, r9
 800d2b8:	aa03      	add	r2, sp, #12
 800d2ba:	4621      	mov	r1, r4
 800d2bc:	4640      	mov	r0, r8
 800d2be:	f7ff fee7 	bl	800d090 <_printf_common>
 800d2c2:	3001      	adds	r0, #1
 800d2c4:	d14a      	bne.n	800d35c <_printf_i+0x1f0>
 800d2c6:	f04f 30ff 	mov.w	r0, #4294967295
 800d2ca:	b004      	add	sp, #16
 800d2cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2d0:	6823      	ldr	r3, [r4, #0]
 800d2d2:	f043 0320 	orr.w	r3, r3, #32
 800d2d6:	6023      	str	r3, [r4, #0]
 800d2d8:	4832      	ldr	r0, [pc, #200]	@ (800d3a4 <_printf_i+0x238>)
 800d2da:	2778      	movs	r7, #120	@ 0x78
 800d2dc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d2e0:	6823      	ldr	r3, [r4, #0]
 800d2e2:	6831      	ldr	r1, [r6, #0]
 800d2e4:	061f      	lsls	r7, r3, #24
 800d2e6:	f851 5b04 	ldr.w	r5, [r1], #4
 800d2ea:	d402      	bmi.n	800d2f2 <_printf_i+0x186>
 800d2ec:	065f      	lsls	r7, r3, #25
 800d2ee:	bf48      	it	mi
 800d2f0:	b2ad      	uxthmi	r5, r5
 800d2f2:	6031      	str	r1, [r6, #0]
 800d2f4:	07d9      	lsls	r1, r3, #31
 800d2f6:	bf44      	itt	mi
 800d2f8:	f043 0320 	orrmi.w	r3, r3, #32
 800d2fc:	6023      	strmi	r3, [r4, #0]
 800d2fe:	b11d      	cbz	r5, 800d308 <_printf_i+0x19c>
 800d300:	2310      	movs	r3, #16
 800d302:	e7ad      	b.n	800d260 <_printf_i+0xf4>
 800d304:	4826      	ldr	r0, [pc, #152]	@ (800d3a0 <_printf_i+0x234>)
 800d306:	e7e9      	b.n	800d2dc <_printf_i+0x170>
 800d308:	6823      	ldr	r3, [r4, #0]
 800d30a:	f023 0320 	bic.w	r3, r3, #32
 800d30e:	6023      	str	r3, [r4, #0]
 800d310:	e7f6      	b.n	800d300 <_printf_i+0x194>
 800d312:	4616      	mov	r6, r2
 800d314:	e7bd      	b.n	800d292 <_printf_i+0x126>
 800d316:	6833      	ldr	r3, [r6, #0]
 800d318:	6825      	ldr	r5, [r4, #0]
 800d31a:	6961      	ldr	r1, [r4, #20]
 800d31c:	1d18      	adds	r0, r3, #4
 800d31e:	6030      	str	r0, [r6, #0]
 800d320:	062e      	lsls	r6, r5, #24
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	d501      	bpl.n	800d32a <_printf_i+0x1be>
 800d326:	6019      	str	r1, [r3, #0]
 800d328:	e002      	b.n	800d330 <_printf_i+0x1c4>
 800d32a:	0668      	lsls	r0, r5, #25
 800d32c:	d5fb      	bpl.n	800d326 <_printf_i+0x1ba>
 800d32e:	8019      	strh	r1, [r3, #0]
 800d330:	2300      	movs	r3, #0
 800d332:	6123      	str	r3, [r4, #16]
 800d334:	4616      	mov	r6, r2
 800d336:	e7bc      	b.n	800d2b2 <_printf_i+0x146>
 800d338:	6833      	ldr	r3, [r6, #0]
 800d33a:	1d1a      	adds	r2, r3, #4
 800d33c:	6032      	str	r2, [r6, #0]
 800d33e:	681e      	ldr	r6, [r3, #0]
 800d340:	6862      	ldr	r2, [r4, #4]
 800d342:	2100      	movs	r1, #0
 800d344:	4630      	mov	r0, r6
 800d346:	f7f2 ff53 	bl	80001f0 <memchr>
 800d34a:	b108      	cbz	r0, 800d350 <_printf_i+0x1e4>
 800d34c:	1b80      	subs	r0, r0, r6
 800d34e:	6060      	str	r0, [r4, #4]
 800d350:	6863      	ldr	r3, [r4, #4]
 800d352:	6123      	str	r3, [r4, #16]
 800d354:	2300      	movs	r3, #0
 800d356:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d35a:	e7aa      	b.n	800d2b2 <_printf_i+0x146>
 800d35c:	6923      	ldr	r3, [r4, #16]
 800d35e:	4632      	mov	r2, r6
 800d360:	4649      	mov	r1, r9
 800d362:	4640      	mov	r0, r8
 800d364:	47d0      	blx	sl
 800d366:	3001      	adds	r0, #1
 800d368:	d0ad      	beq.n	800d2c6 <_printf_i+0x15a>
 800d36a:	6823      	ldr	r3, [r4, #0]
 800d36c:	079b      	lsls	r3, r3, #30
 800d36e:	d413      	bmi.n	800d398 <_printf_i+0x22c>
 800d370:	68e0      	ldr	r0, [r4, #12]
 800d372:	9b03      	ldr	r3, [sp, #12]
 800d374:	4298      	cmp	r0, r3
 800d376:	bfb8      	it	lt
 800d378:	4618      	movlt	r0, r3
 800d37a:	e7a6      	b.n	800d2ca <_printf_i+0x15e>
 800d37c:	2301      	movs	r3, #1
 800d37e:	4632      	mov	r2, r6
 800d380:	4649      	mov	r1, r9
 800d382:	4640      	mov	r0, r8
 800d384:	47d0      	blx	sl
 800d386:	3001      	adds	r0, #1
 800d388:	d09d      	beq.n	800d2c6 <_printf_i+0x15a>
 800d38a:	3501      	adds	r5, #1
 800d38c:	68e3      	ldr	r3, [r4, #12]
 800d38e:	9903      	ldr	r1, [sp, #12]
 800d390:	1a5b      	subs	r3, r3, r1
 800d392:	42ab      	cmp	r3, r5
 800d394:	dcf2      	bgt.n	800d37c <_printf_i+0x210>
 800d396:	e7eb      	b.n	800d370 <_printf_i+0x204>
 800d398:	2500      	movs	r5, #0
 800d39a:	f104 0619 	add.w	r6, r4, #25
 800d39e:	e7f5      	b.n	800d38c <_printf_i+0x220>
 800d3a0:	0801094b 	.word	0x0801094b
 800d3a4:	0801095c 	.word	0x0801095c

0800d3a8 <std>:
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	b510      	push	{r4, lr}
 800d3ac:	4604      	mov	r4, r0
 800d3ae:	e9c0 3300 	strd	r3, r3, [r0]
 800d3b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d3b6:	6083      	str	r3, [r0, #8]
 800d3b8:	8181      	strh	r1, [r0, #12]
 800d3ba:	6643      	str	r3, [r0, #100]	@ 0x64
 800d3bc:	81c2      	strh	r2, [r0, #14]
 800d3be:	6183      	str	r3, [r0, #24]
 800d3c0:	4619      	mov	r1, r3
 800d3c2:	2208      	movs	r2, #8
 800d3c4:	305c      	adds	r0, #92	@ 0x5c
 800d3c6:	f000 f966 	bl	800d696 <memset>
 800d3ca:	4b0d      	ldr	r3, [pc, #52]	@ (800d400 <std+0x58>)
 800d3cc:	6263      	str	r3, [r4, #36]	@ 0x24
 800d3ce:	4b0d      	ldr	r3, [pc, #52]	@ (800d404 <std+0x5c>)
 800d3d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d3d2:	4b0d      	ldr	r3, [pc, #52]	@ (800d408 <std+0x60>)
 800d3d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d3d6:	4b0d      	ldr	r3, [pc, #52]	@ (800d40c <std+0x64>)
 800d3d8:	6323      	str	r3, [r4, #48]	@ 0x30
 800d3da:	4b0d      	ldr	r3, [pc, #52]	@ (800d410 <std+0x68>)
 800d3dc:	6224      	str	r4, [r4, #32]
 800d3de:	429c      	cmp	r4, r3
 800d3e0:	d006      	beq.n	800d3f0 <std+0x48>
 800d3e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d3e6:	4294      	cmp	r4, r2
 800d3e8:	d002      	beq.n	800d3f0 <std+0x48>
 800d3ea:	33d0      	adds	r3, #208	@ 0xd0
 800d3ec:	429c      	cmp	r4, r3
 800d3ee:	d105      	bne.n	800d3fc <std+0x54>
 800d3f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d3f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3f8:	f000 b9d6 	b.w	800d7a8 <__retarget_lock_init_recursive>
 800d3fc:	bd10      	pop	{r4, pc}
 800d3fe:	bf00      	nop
 800d400:	0800d5dd 	.word	0x0800d5dd
 800d404:	0800d5ff 	.word	0x0800d5ff
 800d408:	0800d637 	.word	0x0800d637
 800d40c:	0800d65b 	.word	0x0800d65b
 800d410:	20005d84 	.word	0x20005d84

0800d414 <stdio_exit_handler>:
 800d414:	4a02      	ldr	r2, [pc, #8]	@ (800d420 <stdio_exit_handler+0xc>)
 800d416:	4903      	ldr	r1, [pc, #12]	@ (800d424 <stdio_exit_handler+0x10>)
 800d418:	4803      	ldr	r0, [pc, #12]	@ (800d428 <stdio_exit_handler+0x14>)
 800d41a:	f000 b869 	b.w	800d4f0 <_fwalk_sglue>
 800d41e:	bf00      	nop
 800d420:	2000422c 	.word	0x2000422c
 800d424:	0800f12d 	.word	0x0800f12d
 800d428:	2000423c 	.word	0x2000423c

0800d42c <cleanup_stdio>:
 800d42c:	6841      	ldr	r1, [r0, #4]
 800d42e:	4b0c      	ldr	r3, [pc, #48]	@ (800d460 <cleanup_stdio+0x34>)
 800d430:	4299      	cmp	r1, r3
 800d432:	b510      	push	{r4, lr}
 800d434:	4604      	mov	r4, r0
 800d436:	d001      	beq.n	800d43c <cleanup_stdio+0x10>
 800d438:	f001 fe78 	bl	800f12c <_fflush_r>
 800d43c:	68a1      	ldr	r1, [r4, #8]
 800d43e:	4b09      	ldr	r3, [pc, #36]	@ (800d464 <cleanup_stdio+0x38>)
 800d440:	4299      	cmp	r1, r3
 800d442:	d002      	beq.n	800d44a <cleanup_stdio+0x1e>
 800d444:	4620      	mov	r0, r4
 800d446:	f001 fe71 	bl	800f12c <_fflush_r>
 800d44a:	68e1      	ldr	r1, [r4, #12]
 800d44c:	4b06      	ldr	r3, [pc, #24]	@ (800d468 <cleanup_stdio+0x3c>)
 800d44e:	4299      	cmp	r1, r3
 800d450:	d004      	beq.n	800d45c <cleanup_stdio+0x30>
 800d452:	4620      	mov	r0, r4
 800d454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d458:	f001 be68 	b.w	800f12c <_fflush_r>
 800d45c:	bd10      	pop	{r4, pc}
 800d45e:	bf00      	nop
 800d460:	20005d84 	.word	0x20005d84
 800d464:	20005dec 	.word	0x20005dec
 800d468:	20005e54 	.word	0x20005e54

0800d46c <global_stdio_init.part.0>:
 800d46c:	b510      	push	{r4, lr}
 800d46e:	4b0b      	ldr	r3, [pc, #44]	@ (800d49c <global_stdio_init.part.0+0x30>)
 800d470:	4c0b      	ldr	r4, [pc, #44]	@ (800d4a0 <global_stdio_init.part.0+0x34>)
 800d472:	4a0c      	ldr	r2, [pc, #48]	@ (800d4a4 <global_stdio_init.part.0+0x38>)
 800d474:	601a      	str	r2, [r3, #0]
 800d476:	4620      	mov	r0, r4
 800d478:	2200      	movs	r2, #0
 800d47a:	2104      	movs	r1, #4
 800d47c:	f7ff ff94 	bl	800d3a8 <std>
 800d480:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d484:	2201      	movs	r2, #1
 800d486:	2109      	movs	r1, #9
 800d488:	f7ff ff8e 	bl	800d3a8 <std>
 800d48c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d490:	2202      	movs	r2, #2
 800d492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d496:	2112      	movs	r1, #18
 800d498:	f7ff bf86 	b.w	800d3a8 <std>
 800d49c:	20005ebc 	.word	0x20005ebc
 800d4a0:	20005d84 	.word	0x20005d84
 800d4a4:	0800d415 	.word	0x0800d415

0800d4a8 <__sfp_lock_acquire>:
 800d4a8:	4801      	ldr	r0, [pc, #4]	@ (800d4b0 <__sfp_lock_acquire+0x8>)
 800d4aa:	f000 b97e 	b.w	800d7aa <__retarget_lock_acquire_recursive>
 800d4ae:	bf00      	nop
 800d4b0:	20005ec5 	.word	0x20005ec5

0800d4b4 <__sfp_lock_release>:
 800d4b4:	4801      	ldr	r0, [pc, #4]	@ (800d4bc <__sfp_lock_release+0x8>)
 800d4b6:	f000 b979 	b.w	800d7ac <__retarget_lock_release_recursive>
 800d4ba:	bf00      	nop
 800d4bc:	20005ec5 	.word	0x20005ec5

0800d4c0 <__sinit>:
 800d4c0:	b510      	push	{r4, lr}
 800d4c2:	4604      	mov	r4, r0
 800d4c4:	f7ff fff0 	bl	800d4a8 <__sfp_lock_acquire>
 800d4c8:	6a23      	ldr	r3, [r4, #32]
 800d4ca:	b11b      	cbz	r3, 800d4d4 <__sinit+0x14>
 800d4cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d4d0:	f7ff bff0 	b.w	800d4b4 <__sfp_lock_release>
 800d4d4:	4b04      	ldr	r3, [pc, #16]	@ (800d4e8 <__sinit+0x28>)
 800d4d6:	6223      	str	r3, [r4, #32]
 800d4d8:	4b04      	ldr	r3, [pc, #16]	@ (800d4ec <__sinit+0x2c>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d1f5      	bne.n	800d4cc <__sinit+0xc>
 800d4e0:	f7ff ffc4 	bl	800d46c <global_stdio_init.part.0>
 800d4e4:	e7f2      	b.n	800d4cc <__sinit+0xc>
 800d4e6:	bf00      	nop
 800d4e8:	0800d42d 	.word	0x0800d42d
 800d4ec:	20005ebc 	.word	0x20005ebc

0800d4f0 <_fwalk_sglue>:
 800d4f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4f4:	4607      	mov	r7, r0
 800d4f6:	4688      	mov	r8, r1
 800d4f8:	4614      	mov	r4, r2
 800d4fa:	2600      	movs	r6, #0
 800d4fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d500:	f1b9 0901 	subs.w	r9, r9, #1
 800d504:	d505      	bpl.n	800d512 <_fwalk_sglue+0x22>
 800d506:	6824      	ldr	r4, [r4, #0]
 800d508:	2c00      	cmp	r4, #0
 800d50a:	d1f7      	bne.n	800d4fc <_fwalk_sglue+0xc>
 800d50c:	4630      	mov	r0, r6
 800d50e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d512:	89ab      	ldrh	r3, [r5, #12]
 800d514:	2b01      	cmp	r3, #1
 800d516:	d907      	bls.n	800d528 <_fwalk_sglue+0x38>
 800d518:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d51c:	3301      	adds	r3, #1
 800d51e:	d003      	beq.n	800d528 <_fwalk_sglue+0x38>
 800d520:	4629      	mov	r1, r5
 800d522:	4638      	mov	r0, r7
 800d524:	47c0      	blx	r8
 800d526:	4306      	orrs	r6, r0
 800d528:	3568      	adds	r5, #104	@ 0x68
 800d52a:	e7e9      	b.n	800d500 <_fwalk_sglue+0x10>

0800d52c <sniprintf>:
 800d52c:	b40c      	push	{r2, r3}
 800d52e:	b530      	push	{r4, r5, lr}
 800d530:	4b18      	ldr	r3, [pc, #96]	@ (800d594 <sniprintf+0x68>)
 800d532:	1e0c      	subs	r4, r1, #0
 800d534:	681d      	ldr	r5, [r3, #0]
 800d536:	b09d      	sub	sp, #116	@ 0x74
 800d538:	da08      	bge.n	800d54c <sniprintf+0x20>
 800d53a:	238b      	movs	r3, #139	@ 0x8b
 800d53c:	602b      	str	r3, [r5, #0]
 800d53e:	f04f 30ff 	mov.w	r0, #4294967295
 800d542:	b01d      	add	sp, #116	@ 0x74
 800d544:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d548:	b002      	add	sp, #8
 800d54a:	4770      	bx	lr
 800d54c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d550:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d554:	f04f 0300 	mov.w	r3, #0
 800d558:	931b      	str	r3, [sp, #108]	@ 0x6c
 800d55a:	bf14      	ite	ne
 800d55c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d560:	4623      	moveq	r3, r4
 800d562:	9304      	str	r3, [sp, #16]
 800d564:	9307      	str	r3, [sp, #28]
 800d566:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d56a:	9002      	str	r0, [sp, #8]
 800d56c:	9006      	str	r0, [sp, #24]
 800d56e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d572:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d574:	ab21      	add	r3, sp, #132	@ 0x84
 800d576:	a902      	add	r1, sp, #8
 800d578:	4628      	mov	r0, r5
 800d57a:	9301      	str	r3, [sp, #4]
 800d57c:	f001 fc56 	bl	800ee2c <_svfiprintf_r>
 800d580:	1c43      	adds	r3, r0, #1
 800d582:	bfbc      	itt	lt
 800d584:	238b      	movlt	r3, #139	@ 0x8b
 800d586:	602b      	strlt	r3, [r5, #0]
 800d588:	2c00      	cmp	r4, #0
 800d58a:	d0da      	beq.n	800d542 <sniprintf+0x16>
 800d58c:	9b02      	ldr	r3, [sp, #8]
 800d58e:	2200      	movs	r2, #0
 800d590:	701a      	strb	r2, [r3, #0]
 800d592:	e7d6      	b.n	800d542 <sniprintf+0x16>
 800d594:	20004238 	.word	0x20004238

0800d598 <siprintf>:
 800d598:	b40e      	push	{r1, r2, r3}
 800d59a:	b510      	push	{r4, lr}
 800d59c:	b09d      	sub	sp, #116	@ 0x74
 800d59e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800d5a0:	9002      	str	r0, [sp, #8]
 800d5a2:	9006      	str	r0, [sp, #24]
 800d5a4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d5a8:	480a      	ldr	r0, [pc, #40]	@ (800d5d4 <siprintf+0x3c>)
 800d5aa:	9107      	str	r1, [sp, #28]
 800d5ac:	9104      	str	r1, [sp, #16]
 800d5ae:	490a      	ldr	r1, [pc, #40]	@ (800d5d8 <siprintf+0x40>)
 800d5b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5b4:	9105      	str	r1, [sp, #20]
 800d5b6:	2400      	movs	r4, #0
 800d5b8:	a902      	add	r1, sp, #8
 800d5ba:	6800      	ldr	r0, [r0, #0]
 800d5bc:	9301      	str	r3, [sp, #4]
 800d5be:	941b      	str	r4, [sp, #108]	@ 0x6c
 800d5c0:	f001 fc34 	bl	800ee2c <_svfiprintf_r>
 800d5c4:	9b02      	ldr	r3, [sp, #8]
 800d5c6:	701c      	strb	r4, [r3, #0]
 800d5c8:	b01d      	add	sp, #116	@ 0x74
 800d5ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5ce:	b003      	add	sp, #12
 800d5d0:	4770      	bx	lr
 800d5d2:	bf00      	nop
 800d5d4:	20004238 	.word	0x20004238
 800d5d8:	ffff0208 	.word	0xffff0208

0800d5dc <__sread>:
 800d5dc:	b510      	push	{r4, lr}
 800d5de:	460c      	mov	r4, r1
 800d5e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5e4:	f000 f892 	bl	800d70c <_read_r>
 800d5e8:	2800      	cmp	r0, #0
 800d5ea:	bfab      	itete	ge
 800d5ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d5ee:	89a3      	ldrhlt	r3, [r4, #12]
 800d5f0:	181b      	addge	r3, r3, r0
 800d5f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d5f6:	bfac      	ite	ge
 800d5f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d5fa:	81a3      	strhlt	r3, [r4, #12]
 800d5fc:	bd10      	pop	{r4, pc}

0800d5fe <__swrite>:
 800d5fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d602:	461f      	mov	r7, r3
 800d604:	898b      	ldrh	r3, [r1, #12]
 800d606:	05db      	lsls	r3, r3, #23
 800d608:	4605      	mov	r5, r0
 800d60a:	460c      	mov	r4, r1
 800d60c:	4616      	mov	r6, r2
 800d60e:	d505      	bpl.n	800d61c <__swrite+0x1e>
 800d610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d614:	2302      	movs	r3, #2
 800d616:	2200      	movs	r2, #0
 800d618:	f000 f866 	bl	800d6e8 <_lseek_r>
 800d61c:	89a3      	ldrh	r3, [r4, #12]
 800d61e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d622:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d626:	81a3      	strh	r3, [r4, #12]
 800d628:	4632      	mov	r2, r6
 800d62a:	463b      	mov	r3, r7
 800d62c:	4628      	mov	r0, r5
 800d62e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d632:	f000 b87d 	b.w	800d730 <_write_r>

0800d636 <__sseek>:
 800d636:	b510      	push	{r4, lr}
 800d638:	460c      	mov	r4, r1
 800d63a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d63e:	f000 f853 	bl	800d6e8 <_lseek_r>
 800d642:	1c43      	adds	r3, r0, #1
 800d644:	89a3      	ldrh	r3, [r4, #12]
 800d646:	bf15      	itete	ne
 800d648:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d64a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d64e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d652:	81a3      	strheq	r3, [r4, #12]
 800d654:	bf18      	it	ne
 800d656:	81a3      	strhne	r3, [r4, #12]
 800d658:	bd10      	pop	{r4, pc}

0800d65a <__sclose>:
 800d65a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d65e:	f000 b833 	b.w	800d6c8 <_close_r>

0800d662 <memmove>:
 800d662:	4288      	cmp	r0, r1
 800d664:	b510      	push	{r4, lr}
 800d666:	eb01 0402 	add.w	r4, r1, r2
 800d66a:	d902      	bls.n	800d672 <memmove+0x10>
 800d66c:	4284      	cmp	r4, r0
 800d66e:	4623      	mov	r3, r4
 800d670:	d807      	bhi.n	800d682 <memmove+0x20>
 800d672:	1e43      	subs	r3, r0, #1
 800d674:	42a1      	cmp	r1, r4
 800d676:	d008      	beq.n	800d68a <memmove+0x28>
 800d678:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d67c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d680:	e7f8      	b.n	800d674 <memmove+0x12>
 800d682:	4402      	add	r2, r0
 800d684:	4601      	mov	r1, r0
 800d686:	428a      	cmp	r2, r1
 800d688:	d100      	bne.n	800d68c <memmove+0x2a>
 800d68a:	bd10      	pop	{r4, pc}
 800d68c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d690:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d694:	e7f7      	b.n	800d686 <memmove+0x24>

0800d696 <memset>:
 800d696:	4402      	add	r2, r0
 800d698:	4603      	mov	r3, r0
 800d69a:	4293      	cmp	r3, r2
 800d69c:	d100      	bne.n	800d6a0 <memset+0xa>
 800d69e:	4770      	bx	lr
 800d6a0:	f803 1b01 	strb.w	r1, [r3], #1
 800d6a4:	e7f9      	b.n	800d69a <memset+0x4>

0800d6a6 <strchr>:
 800d6a6:	b2c9      	uxtb	r1, r1
 800d6a8:	4603      	mov	r3, r0
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6b0:	b112      	cbz	r2, 800d6b8 <strchr+0x12>
 800d6b2:	428a      	cmp	r2, r1
 800d6b4:	d1f9      	bne.n	800d6aa <strchr+0x4>
 800d6b6:	4770      	bx	lr
 800d6b8:	2900      	cmp	r1, #0
 800d6ba:	bf18      	it	ne
 800d6bc:	2000      	movne	r0, #0
 800d6be:	4770      	bx	lr

0800d6c0 <_localeconv_r>:
 800d6c0:	4800      	ldr	r0, [pc, #0]	@ (800d6c4 <_localeconv_r+0x4>)
 800d6c2:	4770      	bx	lr
 800d6c4:	20004378 	.word	0x20004378

0800d6c8 <_close_r>:
 800d6c8:	b538      	push	{r3, r4, r5, lr}
 800d6ca:	4d06      	ldr	r5, [pc, #24]	@ (800d6e4 <_close_r+0x1c>)
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	4604      	mov	r4, r0
 800d6d0:	4608      	mov	r0, r1
 800d6d2:	602b      	str	r3, [r5, #0]
 800d6d4:	f7fb f914 	bl	8008900 <_close>
 800d6d8:	1c43      	adds	r3, r0, #1
 800d6da:	d102      	bne.n	800d6e2 <_close_r+0x1a>
 800d6dc:	682b      	ldr	r3, [r5, #0]
 800d6de:	b103      	cbz	r3, 800d6e2 <_close_r+0x1a>
 800d6e0:	6023      	str	r3, [r4, #0]
 800d6e2:	bd38      	pop	{r3, r4, r5, pc}
 800d6e4:	20005ec0 	.word	0x20005ec0

0800d6e8 <_lseek_r>:
 800d6e8:	b538      	push	{r3, r4, r5, lr}
 800d6ea:	4d07      	ldr	r5, [pc, #28]	@ (800d708 <_lseek_r+0x20>)
 800d6ec:	4604      	mov	r4, r0
 800d6ee:	4608      	mov	r0, r1
 800d6f0:	4611      	mov	r1, r2
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	602a      	str	r2, [r5, #0]
 800d6f6:	461a      	mov	r2, r3
 800d6f8:	f7fb f929 	bl	800894e <_lseek>
 800d6fc:	1c43      	adds	r3, r0, #1
 800d6fe:	d102      	bne.n	800d706 <_lseek_r+0x1e>
 800d700:	682b      	ldr	r3, [r5, #0]
 800d702:	b103      	cbz	r3, 800d706 <_lseek_r+0x1e>
 800d704:	6023      	str	r3, [r4, #0]
 800d706:	bd38      	pop	{r3, r4, r5, pc}
 800d708:	20005ec0 	.word	0x20005ec0

0800d70c <_read_r>:
 800d70c:	b538      	push	{r3, r4, r5, lr}
 800d70e:	4d07      	ldr	r5, [pc, #28]	@ (800d72c <_read_r+0x20>)
 800d710:	4604      	mov	r4, r0
 800d712:	4608      	mov	r0, r1
 800d714:	4611      	mov	r1, r2
 800d716:	2200      	movs	r2, #0
 800d718:	602a      	str	r2, [r5, #0]
 800d71a:	461a      	mov	r2, r3
 800d71c:	f7fb f8b7 	bl	800888e <_read>
 800d720:	1c43      	adds	r3, r0, #1
 800d722:	d102      	bne.n	800d72a <_read_r+0x1e>
 800d724:	682b      	ldr	r3, [r5, #0]
 800d726:	b103      	cbz	r3, 800d72a <_read_r+0x1e>
 800d728:	6023      	str	r3, [r4, #0]
 800d72a:	bd38      	pop	{r3, r4, r5, pc}
 800d72c:	20005ec0 	.word	0x20005ec0

0800d730 <_write_r>:
 800d730:	b538      	push	{r3, r4, r5, lr}
 800d732:	4d07      	ldr	r5, [pc, #28]	@ (800d750 <_write_r+0x20>)
 800d734:	4604      	mov	r4, r0
 800d736:	4608      	mov	r0, r1
 800d738:	4611      	mov	r1, r2
 800d73a:	2200      	movs	r2, #0
 800d73c:	602a      	str	r2, [r5, #0]
 800d73e:	461a      	mov	r2, r3
 800d740:	f7fb f8c2 	bl	80088c8 <_write>
 800d744:	1c43      	adds	r3, r0, #1
 800d746:	d102      	bne.n	800d74e <_write_r+0x1e>
 800d748:	682b      	ldr	r3, [r5, #0]
 800d74a:	b103      	cbz	r3, 800d74e <_write_r+0x1e>
 800d74c:	6023      	str	r3, [r4, #0]
 800d74e:	bd38      	pop	{r3, r4, r5, pc}
 800d750:	20005ec0 	.word	0x20005ec0

0800d754 <__errno>:
 800d754:	4b01      	ldr	r3, [pc, #4]	@ (800d75c <__errno+0x8>)
 800d756:	6818      	ldr	r0, [r3, #0]
 800d758:	4770      	bx	lr
 800d75a:	bf00      	nop
 800d75c:	20004238 	.word	0x20004238

0800d760 <__libc_init_array>:
 800d760:	b570      	push	{r4, r5, r6, lr}
 800d762:	4d0d      	ldr	r5, [pc, #52]	@ (800d798 <__libc_init_array+0x38>)
 800d764:	4c0d      	ldr	r4, [pc, #52]	@ (800d79c <__libc_init_array+0x3c>)
 800d766:	1b64      	subs	r4, r4, r5
 800d768:	10a4      	asrs	r4, r4, #2
 800d76a:	2600      	movs	r6, #0
 800d76c:	42a6      	cmp	r6, r4
 800d76e:	d109      	bne.n	800d784 <__libc_init_array+0x24>
 800d770:	4d0b      	ldr	r5, [pc, #44]	@ (800d7a0 <__libc_init_array+0x40>)
 800d772:	4c0c      	ldr	r4, [pc, #48]	@ (800d7a4 <__libc_init_array+0x44>)
 800d774:	f002 f850 	bl	800f818 <_init>
 800d778:	1b64      	subs	r4, r4, r5
 800d77a:	10a4      	asrs	r4, r4, #2
 800d77c:	2600      	movs	r6, #0
 800d77e:	42a6      	cmp	r6, r4
 800d780:	d105      	bne.n	800d78e <__libc_init_array+0x2e>
 800d782:	bd70      	pop	{r4, r5, r6, pc}
 800d784:	f855 3b04 	ldr.w	r3, [r5], #4
 800d788:	4798      	blx	r3
 800d78a:	3601      	adds	r6, #1
 800d78c:	e7ee      	b.n	800d76c <__libc_init_array+0xc>
 800d78e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d792:	4798      	blx	r3
 800d794:	3601      	adds	r6, #1
 800d796:	e7f2      	b.n	800d77e <__libc_init_array+0x1e>
 800d798:	08010bb0 	.word	0x08010bb0
 800d79c:	08010bb0 	.word	0x08010bb0
 800d7a0:	08010bb0 	.word	0x08010bb0
 800d7a4:	08010bb4 	.word	0x08010bb4

0800d7a8 <__retarget_lock_init_recursive>:
 800d7a8:	4770      	bx	lr

0800d7aa <__retarget_lock_acquire_recursive>:
 800d7aa:	4770      	bx	lr

0800d7ac <__retarget_lock_release_recursive>:
 800d7ac:	4770      	bx	lr

0800d7ae <memcpy>:
 800d7ae:	440a      	add	r2, r1
 800d7b0:	4291      	cmp	r1, r2
 800d7b2:	f100 33ff 	add.w	r3, r0, #4294967295
 800d7b6:	d100      	bne.n	800d7ba <memcpy+0xc>
 800d7b8:	4770      	bx	lr
 800d7ba:	b510      	push	{r4, lr}
 800d7bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d7c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d7c4:	4291      	cmp	r1, r2
 800d7c6:	d1f9      	bne.n	800d7bc <memcpy+0xe>
 800d7c8:	bd10      	pop	{r4, pc}

0800d7ca <quorem>:
 800d7ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7ce:	6903      	ldr	r3, [r0, #16]
 800d7d0:	690c      	ldr	r4, [r1, #16]
 800d7d2:	42a3      	cmp	r3, r4
 800d7d4:	4607      	mov	r7, r0
 800d7d6:	db7e      	blt.n	800d8d6 <quorem+0x10c>
 800d7d8:	3c01      	subs	r4, #1
 800d7da:	f101 0814 	add.w	r8, r1, #20
 800d7de:	00a3      	lsls	r3, r4, #2
 800d7e0:	f100 0514 	add.w	r5, r0, #20
 800d7e4:	9300      	str	r3, [sp, #0]
 800d7e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d7ea:	9301      	str	r3, [sp, #4]
 800d7ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d7f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d7f4:	3301      	adds	r3, #1
 800d7f6:	429a      	cmp	r2, r3
 800d7f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d7fc:	fbb2 f6f3 	udiv	r6, r2, r3
 800d800:	d32e      	bcc.n	800d860 <quorem+0x96>
 800d802:	f04f 0a00 	mov.w	sl, #0
 800d806:	46c4      	mov	ip, r8
 800d808:	46ae      	mov	lr, r5
 800d80a:	46d3      	mov	fp, sl
 800d80c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d810:	b298      	uxth	r0, r3
 800d812:	fb06 a000 	mla	r0, r6, r0, sl
 800d816:	0c02      	lsrs	r2, r0, #16
 800d818:	0c1b      	lsrs	r3, r3, #16
 800d81a:	fb06 2303 	mla	r3, r6, r3, r2
 800d81e:	f8de 2000 	ldr.w	r2, [lr]
 800d822:	b280      	uxth	r0, r0
 800d824:	b292      	uxth	r2, r2
 800d826:	1a12      	subs	r2, r2, r0
 800d828:	445a      	add	r2, fp
 800d82a:	f8de 0000 	ldr.w	r0, [lr]
 800d82e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d832:	b29b      	uxth	r3, r3
 800d834:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d838:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d83c:	b292      	uxth	r2, r2
 800d83e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d842:	45e1      	cmp	r9, ip
 800d844:	f84e 2b04 	str.w	r2, [lr], #4
 800d848:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d84c:	d2de      	bcs.n	800d80c <quorem+0x42>
 800d84e:	9b00      	ldr	r3, [sp, #0]
 800d850:	58eb      	ldr	r3, [r5, r3]
 800d852:	b92b      	cbnz	r3, 800d860 <quorem+0x96>
 800d854:	9b01      	ldr	r3, [sp, #4]
 800d856:	3b04      	subs	r3, #4
 800d858:	429d      	cmp	r5, r3
 800d85a:	461a      	mov	r2, r3
 800d85c:	d32f      	bcc.n	800d8be <quorem+0xf4>
 800d85e:	613c      	str	r4, [r7, #16]
 800d860:	4638      	mov	r0, r7
 800d862:	f001 f97f 	bl	800eb64 <__mcmp>
 800d866:	2800      	cmp	r0, #0
 800d868:	db25      	blt.n	800d8b6 <quorem+0xec>
 800d86a:	4629      	mov	r1, r5
 800d86c:	2000      	movs	r0, #0
 800d86e:	f858 2b04 	ldr.w	r2, [r8], #4
 800d872:	f8d1 c000 	ldr.w	ip, [r1]
 800d876:	fa1f fe82 	uxth.w	lr, r2
 800d87a:	fa1f f38c 	uxth.w	r3, ip
 800d87e:	eba3 030e 	sub.w	r3, r3, lr
 800d882:	4403      	add	r3, r0
 800d884:	0c12      	lsrs	r2, r2, #16
 800d886:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d88a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d88e:	b29b      	uxth	r3, r3
 800d890:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d894:	45c1      	cmp	r9, r8
 800d896:	f841 3b04 	str.w	r3, [r1], #4
 800d89a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d89e:	d2e6      	bcs.n	800d86e <quorem+0xa4>
 800d8a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d8a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d8a8:	b922      	cbnz	r2, 800d8b4 <quorem+0xea>
 800d8aa:	3b04      	subs	r3, #4
 800d8ac:	429d      	cmp	r5, r3
 800d8ae:	461a      	mov	r2, r3
 800d8b0:	d30b      	bcc.n	800d8ca <quorem+0x100>
 800d8b2:	613c      	str	r4, [r7, #16]
 800d8b4:	3601      	adds	r6, #1
 800d8b6:	4630      	mov	r0, r6
 800d8b8:	b003      	add	sp, #12
 800d8ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8be:	6812      	ldr	r2, [r2, #0]
 800d8c0:	3b04      	subs	r3, #4
 800d8c2:	2a00      	cmp	r2, #0
 800d8c4:	d1cb      	bne.n	800d85e <quorem+0x94>
 800d8c6:	3c01      	subs	r4, #1
 800d8c8:	e7c6      	b.n	800d858 <quorem+0x8e>
 800d8ca:	6812      	ldr	r2, [r2, #0]
 800d8cc:	3b04      	subs	r3, #4
 800d8ce:	2a00      	cmp	r2, #0
 800d8d0:	d1ef      	bne.n	800d8b2 <quorem+0xe8>
 800d8d2:	3c01      	subs	r4, #1
 800d8d4:	e7ea      	b.n	800d8ac <quorem+0xe2>
 800d8d6:	2000      	movs	r0, #0
 800d8d8:	e7ee      	b.n	800d8b8 <quorem+0xee>
 800d8da:	0000      	movs	r0, r0
 800d8dc:	0000      	movs	r0, r0
	...

0800d8e0 <_dtoa_r>:
 800d8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8e4:	69c7      	ldr	r7, [r0, #28]
 800d8e6:	b097      	sub	sp, #92	@ 0x5c
 800d8e8:	ed8d 0b04 	vstr	d0, [sp, #16]
 800d8ec:	ec55 4b10 	vmov	r4, r5, d0
 800d8f0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800d8f2:	9107      	str	r1, [sp, #28]
 800d8f4:	4681      	mov	r9, r0
 800d8f6:	920c      	str	r2, [sp, #48]	@ 0x30
 800d8f8:	9311      	str	r3, [sp, #68]	@ 0x44
 800d8fa:	b97f      	cbnz	r7, 800d91c <_dtoa_r+0x3c>
 800d8fc:	2010      	movs	r0, #16
 800d8fe:	f000 fe09 	bl	800e514 <malloc>
 800d902:	4602      	mov	r2, r0
 800d904:	f8c9 001c 	str.w	r0, [r9, #28]
 800d908:	b920      	cbnz	r0, 800d914 <_dtoa_r+0x34>
 800d90a:	4ba9      	ldr	r3, [pc, #676]	@ (800dbb0 <_dtoa_r+0x2d0>)
 800d90c:	21ef      	movs	r1, #239	@ 0xef
 800d90e:	48a9      	ldr	r0, [pc, #676]	@ (800dbb4 <_dtoa_r+0x2d4>)
 800d910:	f001 fc44 	bl	800f19c <__assert_func>
 800d914:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d918:	6007      	str	r7, [r0, #0]
 800d91a:	60c7      	str	r7, [r0, #12]
 800d91c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d920:	6819      	ldr	r1, [r3, #0]
 800d922:	b159      	cbz	r1, 800d93c <_dtoa_r+0x5c>
 800d924:	685a      	ldr	r2, [r3, #4]
 800d926:	604a      	str	r2, [r1, #4]
 800d928:	2301      	movs	r3, #1
 800d92a:	4093      	lsls	r3, r2
 800d92c:	608b      	str	r3, [r1, #8]
 800d92e:	4648      	mov	r0, r9
 800d930:	f000 fee6 	bl	800e700 <_Bfree>
 800d934:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d938:	2200      	movs	r2, #0
 800d93a:	601a      	str	r2, [r3, #0]
 800d93c:	1e2b      	subs	r3, r5, #0
 800d93e:	bfb9      	ittee	lt
 800d940:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d944:	9305      	strlt	r3, [sp, #20]
 800d946:	2300      	movge	r3, #0
 800d948:	6033      	strge	r3, [r6, #0]
 800d94a:	9f05      	ldr	r7, [sp, #20]
 800d94c:	4b9a      	ldr	r3, [pc, #616]	@ (800dbb8 <_dtoa_r+0x2d8>)
 800d94e:	bfbc      	itt	lt
 800d950:	2201      	movlt	r2, #1
 800d952:	6032      	strlt	r2, [r6, #0]
 800d954:	43bb      	bics	r3, r7
 800d956:	d112      	bne.n	800d97e <_dtoa_r+0x9e>
 800d958:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d95a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d95e:	6013      	str	r3, [r2, #0]
 800d960:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d964:	4323      	orrs	r3, r4
 800d966:	f000 855a 	beq.w	800e41e <_dtoa_r+0xb3e>
 800d96a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d96c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800dbcc <_dtoa_r+0x2ec>
 800d970:	2b00      	cmp	r3, #0
 800d972:	f000 855c 	beq.w	800e42e <_dtoa_r+0xb4e>
 800d976:	f10a 0303 	add.w	r3, sl, #3
 800d97a:	f000 bd56 	b.w	800e42a <_dtoa_r+0xb4a>
 800d97e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d982:	2200      	movs	r2, #0
 800d984:	ec51 0b17 	vmov	r0, r1, d7
 800d988:	2300      	movs	r3, #0
 800d98a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800d98e:	f7f3 f8ab 	bl	8000ae8 <__aeabi_dcmpeq>
 800d992:	4680      	mov	r8, r0
 800d994:	b158      	cbz	r0, 800d9ae <_dtoa_r+0xce>
 800d996:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d998:	2301      	movs	r3, #1
 800d99a:	6013      	str	r3, [r2, #0]
 800d99c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d99e:	b113      	cbz	r3, 800d9a6 <_dtoa_r+0xc6>
 800d9a0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d9a2:	4b86      	ldr	r3, [pc, #536]	@ (800dbbc <_dtoa_r+0x2dc>)
 800d9a4:	6013      	str	r3, [r2, #0]
 800d9a6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800dbd0 <_dtoa_r+0x2f0>
 800d9aa:	f000 bd40 	b.w	800e42e <_dtoa_r+0xb4e>
 800d9ae:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800d9b2:	aa14      	add	r2, sp, #80	@ 0x50
 800d9b4:	a915      	add	r1, sp, #84	@ 0x54
 800d9b6:	4648      	mov	r0, r9
 800d9b8:	f001 f984 	bl	800ecc4 <__d2b>
 800d9bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d9c0:	9002      	str	r0, [sp, #8]
 800d9c2:	2e00      	cmp	r6, #0
 800d9c4:	d078      	beq.n	800dab8 <_dtoa_r+0x1d8>
 800d9c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d9c8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800d9cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d9d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d9d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d9d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d9dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d9e0:	4619      	mov	r1, r3
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	4b76      	ldr	r3, [pc, #472]	@ (800dbc0 <_dtoa_r+0x2e0>)
 800d9e6:	f7f2 fc5f 	bl	80002a8 <__aeabi_dsub>
 800d9ea:	a36b      	add	r3, pc, #428	@ (adr r3, 800db98 <_dtoa_r+0x2b8>)
 800d9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9f0:	f7f2 fe12 	bl	8000618 <__aeabi_dmul>
 800d9f4:	a36a      	add	r3, pc, #424	@ (adr r3, 800dba0 <_dtoa_r+0x2c0>)
 800d9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9fa:	f7f2 fc57 	bl	80002ac <__adddf3>
 800d9fe:	4604      	mov	r4, r0
 800da00:	4630      	mov	r0, r6
 800da02:	460d      	mov	r5, r1
 800da04:	f7f2 fd9e 	bl	8000544 <__aeabi_i2d>
 800da08:	a367      	add	r3, pc, #412	@ (adr r3, 800dba8 <_dtoa_r+0x2c8>)
 800da0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da0e:	f7f2 fe03 	bl	8000618 <__aeabi_dmul>
 800da12:	4602      	mov	r2, r0
 800da14:	460b      	mov	r3, r1
 800da16:	4620      	mov	r0, r4
 800da18:	4629      	mov	r1, r5
 800da1a:	f7f2 fc47 	bl	80002ac <__adddf3>
 800da1e:	4604      	mov	r4, r0
 800da20:	460d      	mov	r5, r1
 800da22:	f7f3 f8a9 	bl	8000b78 <__aeabi_d2iz>
 800da26:	2200      	movs	r2, #0
 800da28:	4607      	mov	r7, r0
 800da2a:	2300      	movs	r3, #0
 800da2c:	4620      	mov	r0, r4
 800da2e:	4629      	mov	r1, r5
 800da30:	f7f3 f864 	bl	8000afc <__aeabi_dcmplt>
 800da34:	b140      	cbz	r0, 800da48 <_dtoa_r+0x168>
 800da36:	4638      	mov	r0, r7
 800da38:	f7f2 fd84 	bl	8000544 <__aeabi_i2d>
 800da3c:	4622      	mov	r2, r4
 800da3e:	462b      	mov	r3, r5
 800da40:	f7f3 f852 	bl	8000ae8 <__aeabi_dcmpeq>
 800da44:	b900      	cbnz	r0, 800da48 <_dtoa_r+0x168>
 800da46:	3f01      	subs	r7, #1
 800da48:	2f16      	cmp	r7, #22
 800da4a:	d852      	bhi.n	800daf2 <_dtoa_r+0x212>
 800da4c:	4b5d      	ldr	r3, [pc, #372]	@ (800dbc4 <_dtoa_r+0x2e4>)
 800da4e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800da52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da56:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800da5a:	f7f3 f84f 	bl	8000afc <__aeabi_dcmplt>
 800da5e:	2800      	cmp	r0, #0
 800da60:	d049      	beq.n	800daf6 <_dtoa_r+0x216>
 800da62:	3f01      	subs	r7, #1
 800da64:	2300      	movs	r3, #0
 800da66:	9310      	str	r3, [sp, #64]	@ 0x40
 800da68:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800da6a:	1b9b      	subs	r3, r3, r6
 800da6c:	1e5a      	subs	r2, r3, #1
 800da6e:	bf45      	ittet	mi
 800da70:	f1c3 0301 	rsbmi	r3, r3, #1
 800da74:	9300      	strmi	r3, [sp, #0]
 800da76:	2300      	movpl	r3, #0
 800da78:	2300      	movmi	r3, #0
 800da7a:	9206      	str	r2, [sp, #24]
 800da7c:	bf54      	ite	pl
 800da7e:	9300      	strpl	r3, [sp, #0]
 800da80:	9306      	strmi	r3, [sp, #24]
 800da82:	2f00      	cmp	r7, #0
 800da84:	db39      	blt.n	800dafa <_dtoa_r+0x21a>
 800da86:	9b06      	ldr	r3, [sp, #24]
 800da88:	970d      	str	r7, [sp, #52]	@ 0x34
 800da8a:	443b      	add	r3, r7
 800da8c:	9306      	str	r3, [sp, #24]
 800da8e:	2300      	movs	r3, #0
 800da90:	9308      	str	r3, [sp, #32]
 800da92:	9b07      	ldr	r3, [sp, #28]
 800da94:	2b09      	cmp	r3, #9
 800da96:	d863      	bhi.n	800db60 <_dtoa_r+0x280>
 800da98:	2b05      	cmp	r3, #5
 800da9a:	bfc4      	itt	gt
 800da9c:	3b04      	subgt	r3, #4
 800da9e:	9307      	strgt	r3, [sp, #28]
 800daa0:	9b07      	ldr	r3, [sp, #28]
 800daa2:	f1a3 0302 	sub.w	r3, r3, #2
 800daa6:	bfcc      	ite	gt
 800daa8:	2400      	movgt	r4, #0
 800daaa:	2401      	movle	r4, #1
 800daac:	2b03      	cmp	r3, #3
 800daae:	d863      	bhi.n	800db78 <_dtoa_r+0x298>
 800dab0:	e8df f003 	tbb	[pc, r3]
 800dab4:	2b375452 	.word	0x2b375452
 800dab8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800dabc:	441e      	add	r6, r3
 800dabe:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800dac2:	2b20      	cmp	r3, #32
 800dac4:	bfc1      	itttt	gt
 800dac6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800daca:	409f      	lslgt	r7, r3
 800dacc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800dad0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800dad4:	bfd6      	itet	le
 800dad6:	f1c3 0320 	rsble	r3, r3, #32
 800dada:	ea47 0003 	orrgt.w	r0, r7, r3
 800dade:	fa04 f003 	lslle.w	r0, r4, r3
 800dae2:	f7f2 fd1f 	bl	8000524 <__aeabi_ui2d>
 800dae6:	2201      	movs	r2, #1
 800dae8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800daec:	3e01      	subs	r6, #1
 800daee:	9212      	str	r2, [sp, #72]	@ 0x48
 800daf0:	e776      	b.n	800d9e0 <_dtoa_r+0x100>
 800daf2:	2301      	movs	r3, #1
 800daf4:	e7b7      	b.n	800da66 <_dtoa_r+0x186>
 800daf6:	9010      	str	r0, [sp, #64]	@ 0x40
 800daf8:	e7b6      	b.n	800da68 <_dtoa_r+0x188>
 800dafa:	9b00      	ldr	r3, [sp, #0]
 800dafc:	1bdb      	subs	r3, r3, r7
 800dafe:	9300      	str	r3, [sp, #0]
 800db00:	427b      	negs	r3, r7
 800db02:	9308      	str	r3, [sp, #32]
 800db04:	2300      	movs	r3, #0
 800db06:	930d      	str	r3, [sp, #52]	@ 0x34
 800db08:	e7c3      	b.n	800da92 <_dtoa_r+0x1b2>
 800db0a:	2301      	movs	r3, #1
 800db0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800db0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800db10:	eb07 0b03 	add.w	fp, r7, r3
 800db14:	f10b 0301 	add.w	r3, fp, #1
 800db18:	2b01      	cmp	r3, #1
 800db1a:	9303      	str	r3, [sp, #12]
 800db1c:	bfb8      	it	lt
 800db1e:	2301      	movlt	r3, #1
 800db20:	e006      	b.n	800db30 <_dtoa_r+0x250>
 800db22:	2301      	movs	r3, #1
 800db24:	9309      	str	r3, [sp, #36]	@ 0x24
 800db26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800db28:	2b00      	cmp	r3, #0
 800db2a:	dd28      	ble.n	800db7e <_dtoa_r+0x29e>
 800db2c:	469b      	mov	fp, r3
 800db2e:	9303      	str	r3, [sp, #12]
 800db30:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800db34:	2100      	movs	r1, #0
 800db36:	2204      	movs	r2, #4
 800db38:	f102 0514 	add.w	r5, r2, #20
 800db3c:	429d      	cmp	r5, r3
 800db3e:	d926      	bls.n	800db8e <_dtoa_r+0x2ae>
 800db40:	6041      	str	r1, [r0, #4]
 800db42:	4648      	mov	r0, r9
 800db44:	f000 fd9c 	bl	800e680 <_Balloc>
 800db48:	4682      	mov	sl, r0
 800db4a:	2800      	cmp	r0, #0
 800db4c:	d142      	bne.n	800dbd4 <_dtoa_r+0x2f4>
 800db4e:	4b1e      	ldr	r3, [pc, #120]	@ (800dbc8 <_dtoa_r+0x2e8>)
 800db50:	4602      	mov	r2, r0
 800db52:	f240 11af 	movw	r1, #431	@ 0x1af
 800db56:	e6da      	b.n	800d90e <_dtoa_r+0x2e>
 800db58:	2300      	movs	r3, #0
 800db5a:	e7e3      	b.n	800db24 <_dtoa_r+0x244>
 800db5c:	2300      	movs	r3, #0
 800db5e:	e7d5      	b.n	800db0c <_dtoa_r+0x22c>
 800db60:	2401      	movs	r4, #1
 800db62:	2300      	movs	r3, #0
 800db64:	9307      	str	r3, [sp, #28]
 800db66:	9409      	str	r4, [sp, #36]	@ 0x24
 800db68:	f04f 3bff 	mov.w	fp, #4294967295
 800db6c:	2200      	movs	r2, #0
 800db6e:	f8cd b00c 	str.w	fp, [sp, #12]
 800db72:	2312      	movs	r3, #18
 800db74:	920c      	str	r2, [sp, #48]	@ 0x30
 800db76:	e7db      	b.n	800db30 <_dtoa_r+0x250>
 800db78:	2301      	movs	r3, #1
 800db7a:	9309      	str	r3, [sp, #36]	@ 0x24
 800db7c:	e7f4      	b.n	800db68 <_dtoa_r+0x288>
 800db7e:	f04f 0b01 	mov.w	fp, #1
 800db82:	f8cd b00c 	str.w	fp, [sp, #12]
 800db86:	465b      	mov	r3, fp
 800db88:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800db8c:	e7d0      	b.n	800db30 <_dtoa_r+0x250>
 800db8e:	3101      	adds	r1, #1
 800db90:	0052      	lsls	r2, r2, #1
 800db92:	e7d1      	b.n	800db38 <_dtoa_r+0x258>
 800db94:	f3af 8000 	nop.w
 800db98:	636f4361 	.word	0x636f4361
 800db9c:	3fd287a7 	.word	0x3fd287a7
 800dba0:	8b60c8b3 	.word	0x8b60c8b3
 800dba4:	3fc68a28 	.word	0x3fc68a28
 800dba8:	509f79fb 	.word	0x509f79fb
 800dbac:	3fd34413 	.word	0x3fd34413
 800dbb0:	0801097a 	.word	0x0801097a
 800dbb4:	08010991 	.word	0x08010991
 800dbb8:	7ff00000 	.word	0x7ff00000
 800dbbc:	0801094a 	.word	0x0801094a
 800dbc0:	3ff80000 	.word	0x3ff80000
 800dbc4:	08010ae0 	.word	0x08010ae0
 800dbc8:	080109e9 	.word	0x080109e9
 800dbcc:	08010976 	.word	0x08010976
 800dbd0:	08010949 	.word	0x08010949
 800dbd4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800dbd8:	6018      	str	r0, [r3, #0]
 800dbda:	9b03      	ldr	r3, [sp, #12]
 800dbdc:	2b0e      	cmp	r3, #14
 800dbde:	f200 80a1 	bhi.w	800dd24 <_dtoa_r+0x444>
 800dbe2:	2c00      	cmp	r4, #0
 800dbe4:	f000 809e 	beq.w	800dd24 <_dtoa_r+0x444>
 800dbe8:	2f00      	cmp	r7, #0
 800dbea:	dd33      	ble.n	800dc54 <_dtoa_r+0x374>
 800dbec:	4b9c      	ldr	r3, [pc, #624]	@ (800de60 <_dtoa_r+0x580>)
 800dbee:	f007 020f 	and.w	r2, r7, #15
 800dbf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dbf6:	ed93 7b00 	vldr	d7, [r3]
 800dbfa:	05f8      	lsls	r0, r7, #23
 800dbfc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800dc00:	ea4f 1427 	mov.w	r4, r7, asr #4
 800dc04:	d516      	bpl.n	800dc34 <_dtoa_r+0x354>
 800dc06:	4b97      	ldr	r3, [pc, #604]	@ (800de64 <_dtoa_r+0x584>)
 800dc08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800dc0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dc10:	f7f2 fe2c 	bl	800086c <__aeabi_ddiv>
 800dc14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dc18:	f004 040f 	and.w	r4, r4, #15
 800dc1c:	2603      	movs	r6, #3
 800dc1e:	4d91      	ldr	r5, [pc, #580]	@ (800de64 <_dtoa_r+0x584>)
 800dc20:	b954      	cbnz	r4, 800dc38 <_dtoa_r+0x358>
 800dc22:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800dc26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dc2a:	f7f2 fe1f 	bl	800086c <__aeabi_ddiv>
 800dc2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dc32:	e028      	b.n	800dc86 <_dtoa_r+0x3a6>
 800dc34:	2602      	movs	r6, #2
 800dc36:	e7f2      	b.n	800dc1e <_dtoa_r+0x33e>
 800dc38:	07e1      	lsls	r1, r4, #31
 800dc3a:	d508      	bpl.n	800dc4e <_dtoa_r+0x36e>
 800dc3c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800dc40:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dc44:	f7f2 fce8 	bl	8000618 <__aeabi_dmul>
 800dc48:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800dc4c:	3601      	adds	r6, #1
 800dc4e:	1064      	asrs	r4, r4, #1
 800dc50:	3508      	adds	r5, #8
 800dc52:	e7e5      	b.n	800dc20 <_dtoa_r+0x340>
 800dc54:	f000 80af 	beq.w	800ddb6 <_dtoa_r+0x4d6>
 800dc58:	427c      	negs	r4, r7
 800dc5a:	4b81      	ldr	r3, [pc, #516]	@ (800de60 <_dtoa_r+0x580>)
 800dc5c:	4d81      	ldr	r5, [pc, #516]	@ (800de64 <_dtoa_r+0x584>)
 800dc5e:	f004 020f 	and.w	r2, r4, #15
 800dc62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dc66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800dc6e:	f7f2 fcd3 	bl	8000618 <__aeabi_dmul>
 800dc72:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dc76:	1124      	asrs	r4, r4, #4
 800dc78:	2300      	movs	r3, #0
 800dc7a:	2602      	movs	r6, #2
 800dc7c:	2c00      	cmp	r4, #0
 800dc7e:	f040 808f 	bne.w	800dda0 <_dtoa_r+0x4c0>
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d1d3      	bne.n	800dc2e <_dtoa_r+0x34e>
 800dc86:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800dc88:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	f000 8094 	beq.w	800ddba <_dtoa_r+0x4da>
 800dc92:	4b75      	ldr	r3, [pc, #468]	@ (800de68 <_dtoa_r+0x588>)
 800dc94:	2200      	movs	r2, #0
 800dc96:	4620      	mov	r0, r4
 800dc98:	4629      	mov	r1, r5
 800dc9a:	f7f2 ff2f 	bl	8000afc <__aeabi_dcmplt>
 800dc9e:	2800      	cmp	r0, #0
 800dca0:	f000 808b 	beq.w	800ddba <_dtoa_r+0x4da>
 800dca4:	9b03      	ldr	r3, [sp, #12]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	f000 8087 	beq.w	800ddba <_dtoa_r+0x4da>
 800dcac:	f1bb 0f00 	cmp.w	fp, #0
 800dcb0:	dd34      	ble.n	800dd1c <_dtoa_r+0x43c>
 800dcb2:	4620      	mov	r0, r4
 800dcb4:	4b6d      	ldr	r3, [pc, #436]	@ (800de6c <_dtoa_r+0x58c>)
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	4629      	mov	r1, r5
 800dcba:	f7f2 fcad 	bl	8000618 <__aeabi_dmul>
 800dcbe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dcc2:	f107 38ff 	add.w	r8, r7, #4294967295
 800dcc6:	3601      	adds	r6, #1
 800dcc8:	465c      	mov	r4, fp
 800dcca:	4630      	mov	r0, r6
 800dccc:	f7f2 fc3a 	bl	8000544 <__aeabi_i2d>
 800dcd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dcd4:	f7f2 fca0 	bl	8000618 <__aeabi_dmul>
 800dcd8:	4b65      	ldr	r3, [pc, #404]	@ (800de70 <_dtoa_r+0x590>)
 800dcda:	2200      	movs	r2, #0
 800dcdc:	f7f2 fae6 	bl	80002ac <__adddf3>
 800dce0:	4605      	mov	r5, r0
 800dce2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800dce6:	2c00      	cmp	r4, #0
 800dce8:	d16a      	bne.n	800ddc0 <_dtoa_r+0x4e0>
 800dcea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dcee:	4b61      	ldr	r3, [pc, #388]	@ (800de74 <_dtoa_r+0x594>)
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	f7f2 fad9 	bl	80002a8 <__aeabi_dsub>
 800dcf6:	4602      	mov	r2, r0
 800dcf8:	460b      	mov	r3, r1
 800dcfa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dcfe:	462a      	mov	r2, r5
 800dd00:	4633      	mov	r3, r6
 800dd02:	f7f2 ff19 	bl	8000b38 <__aeabi_dcmpgt>
 800dd06:	2800      	cmp	r0, #0
 800dd08:	f040 8298 	bne.w	800e23c <_dtoa_r+0x95c>
 800dd0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dd10:	462a      	mov	r2, r5
 800dd12:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800dd16:	f7f2 fef1 	bl	8000afc <__aeabi_dcmplt>
 800dd1a:	bb38      	cbnz	r0, 800dd6c <_dtoa_r+0x48c>
 800dd1c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800dd20:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800dd24:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	f2c0 8157 	blt.w	800dfda <_dtoa_r+0x6fa>
 800dd2c:	2f0e      	cmp	r7, #14
 800dd2e:	f300 8154 	bgt.w	800dfda <_dtoa_r+0x6fa>
 800dd32:	4b4b      	ldr	r3, [pc, #300]	@ (800de60 <_dtoa_r+0x580>)
 800dd34:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dd38:	ed93 7b00 	vldr	d7, [r3]
 800dd3c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	ed8d 7b00 	vstr	d7, [sp]
 800dd44:	f280 80e5 	bge.w	800df12 <_dtoa_r+0x632>
 800dd48:	9b03      	ldr	r3, [sp, #12]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	f300 80e1 	bgt.w	800df12 <_dtoa_r+0x632>
 800dd50:	d10c      	bne.n	800dd6c <_dtoa_r+0x48c>
 800dd52:	4b48      	ldr	r3, [pc, #288]	@ (800de74 <_dtoa_r+0x594>)
 800dd54:	2200      	movs	r2, #0
 800dd56:	ec51 0b17 	vmov	r0, r1, d7
 800dd5a:	f7f2 fc5d 	bl	8000618 <__aeabi_dmul>
 800dd5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dd62:	f7f2 fedf 	bl	8000b24 <__aeabi_dcmpge>
 800dd66:	2800      	cmp	r0, #0
 800dd68:	f000 8266 	beq.w	800e238 <_dtoa_r+0x958>
 800dd6c:	2400      	movs	r4, #0
 800dd6e:	4625      	mov	r5, r4
 800dd70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dd72:	4656      	mov	r6, sl
 800dd74:	ea6f 0803 	mvn.w	r8, r3
 800dd78:	2700      	movs	r7, #0
 800dd7a:	4621      	mov	r1, r4
 800dd7c:	4648      	mov	r0, r9
 800dd7e:	f000 fcbf 	bl	800e700 <_Bfree>
 800dd82:	2d00      	cmp	r5, #0
 800dd84:	f000 80bd 	beq.w	800df02 <_dtoa_r+0x622>
 800dd88:	b12f      	cbz	r7, 800dd96 <_dtoa_r+0x4b6>
 800dd8a:	42af      	cmp	r7, r5
 800dd8c:	d003      	beq.n	800dd96 <_dtoa_r+0x4b6>
 800dd8e:	4639      	mov	r1, r7
 800dd90:	4648      	mov	r0, r9
 800dd92:	f000 fcb5 	bl	800e700 <_Bfree>
 800dd96:	4629      	mov	r1, r5
 800dd98:	4648      	mov	r0, r9
 800dd9a:	f000 fcb1 	bl	800e700 <_Bfree>
 800dd9e:	e0b0      	b.n	800df02 <_dtoa_r+0x622>
 800dda0:	07e2      	lsls	r2, r4, #31
 800dda2:	d505      	bpl.n	800ddb0 <_dtoa_r+0x4d0>
 800dda4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dda8:	f7f2 fc36 	bl	8000618 <__aeabi_dmul>
 800ddac:	3601      	adds	r6, #1
 800ddae:	2301      	movs	r3, #1
 800ddb0:	1064      	asrs	r4, r4, #1
 800ddb2:	3508      	adds	r5, #8
 800ddb4:	e762      	b.n	800dc7c <_dtoa_r+0x39c>
 800ddb6:	2602      	movs	r6, #2
 800ddb8:	e765      	b.n	800dc86 <_dtoa_r+0x3a6>
 800ddba:	9c03      	ldr	r4, [sp, #12]
 800ddbc:	46b8      	mov	r8, r7
 800ddbe:	e784      	b.n	800dcca <_dtoa_r+0x3ea>
 800ddc0:	4b27      	ldr	r3, [pc, #156]	@ (800de60 <_dtoa_r+0x580>)
 800ddc2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ddc4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ddc8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ddcc:	4454      	add	r4, sl
 800ddce:	2900      	cmp	r1, #0
 800ddd0:	d054      	beq.n	800de7c <_dtoa_r+0x59c>
 800ddd2:	4929      	ldr	r1, [pc, #164]	@ (800de78 <_dtoa_r+0x598>)
 800ddd4:	2000      	movs	r0, #0
 800ddd6:	f7f2 fd49 	bl	800086c <__aeabi_ddiv>
 800ddda:	4633      	mov	r3, r6
 800dddc:	462a      	mov	r2, r5
 800ddde:	f7f2 fa63 	bl	80002a8 <__aeabi_dsub>
 800dde2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800dde6:	4656      	mov	r6, sl
 800dde8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ddec:	f7f2 fec4 	bl	8000b78 <__aeabi_d2iz>
 800ddf0:	4605      	mov	r5, r0
 800ddf2:	f7f2 fba7 	bl	8000544 <__aeabi_i2d>
 800ddf6:	4602      	mov	r2, r0
 800ddf8:	460b      	mov	r3, r1
 800ddfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ddfe:	f7f2 fa53 	bl	80002a8 <__aeabi_dsub>
 800de02:	3530      	adds	r5, #48	@ 0x30
 800de04:	4602      	mov	r2, r0
 800de06:	460b      	mov	r3, r1
 800de08:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800de0c:	f806 5b01 	strb.w	r5, [r6], #1
 800de10:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800de14:	f7f2 fe72 	bl	8000afc <__aeabi_dcmplt>
 800de18:	2800      	cmp	r0, #0
 800de1a:	d172      	bne.n	800df02 <_dtoa_r+0x622>
 800de1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800de20:	4911      	ldr	r1, [pc, #68]	@ (800de68 <_dtoa_r+0x588>)
 800de22:	2000      	movs	r0, #0
 800de24:	f7f2 fa40 	bl	80002a8 <__aeabi_dsub>
 800de28:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800de2c:	f7f2 fe66 	bl	8000afc <__aeabi_dcmplt>
 800de30:	2800      	cmp	r0, #0
 800de32:	f040 80b4 	bne.w	800df9e <_dtoa_r+0x6be>
 800de36:	42a6      	cmp	r6, r4
 800de38:	f43f af70 	beq.w	800dd1c <_dtoa_r+0x43c>
 800de3c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800de40:	4b0a      	ldr	r3, [pc, #40]	@ (800de6c <_dtoa_r+0x58c>)
 800de42:	2200      	movs	r2, #0
 800de44:	f7f2 fbe8 	bl	8000618 <__aeabi_dmul>
 800de48:	4b08      	ldr	r3, [pc, #32]	@ (800de6c <_dtoa_r+0x58c>)
 800de4a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800de4e:	2200      	movs	r2, #0
 800de50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800de54:	f7f2 fbe0 	bl	8000618 <__aeabi_dmul>
 800de58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800de5c:	e7c4      	b.n	800dde8 <_dtoa_r+0x508>
 800de5e:	bf00      	nop
 800de60:	08010ae0 	.word	0x08010ae0
 800de64:	08010ab8 	.word	0x08010ab8
 800de68:	3ff00000 	.word	0x3ff00000
 800de6c:	40240000 	.word	0x40240000
 800de70:	401c0000 	.word	0x401c0000
 800de74:	40140000 	.word	0x40140000
 800de78:	3fe00000 	.word	0x3fe00000
 800de7c:	4631      	mov	r1, r6
 800de7e:	4628      	mov	r0, r5
 800de80:	f7f2 fbca 	bl	8000618 <__aeabi_dmul>
 800de84:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800de88:	9413      	str	r4, [sp, #76]	@ 0x4c
 800de8a:	4656      	mov	r6, sl
 800de8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800de90:	f7f2 fe72 	bl	8000b78 <__aeabi_d2iz>
 800de94:	4605      	mov	r5, r0
 800de96:	f7f2 fb55 	bl	8000544 <__aeabi_i2d>
 800de9a:	4602      	mov	r2, r0
 800de9c:	460b      	mov	r3, r1
 800de9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dea2:	f7f2 fa01 	bl	80002a8 <__aeabi_dsub>
 800dea6:	3530      	adds	r5, #48	@ 0x30
 800dea8:	f806 5b01 	strb.w	r5, [r6], #1
 800deac:	4602      	mov	r2, r0
 800deae:	460b      	mov	r3, r1
 800deb0:	42a6      	cmp	r6, r4
 800deb2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800deb6:	f04f 0200 	mov.w	r2, #0
 800deba:	d124      	bne.n	800df06 <_dtoa_r+0x626>
 800debc:	4baf      	ldr	r3, [pc, #700]	@ (800e17c <_dtoa_r+0x89c>)
 800debe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800dec2:	f7f2 f9f3 	bl	80002ac <__adddf3>
 800dec6:	4602      	mov	r2, r0
 800dec8:	460b      	mov	r3, r1
 800deca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dece:	f7f2 fe33 	bl	8000b38 <__aeabi_dcmpgt>
 800ded2:	2800      	cmp	r0, #0
 800ded4:	d163      	bne.n	800df9e <_dtoa_r+0x6be>
 800ded6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800deda:	49a8      	ldr	r1, [pc, #672]	@ (800e17c <_dtoa_r+0x89c>)
 800dedc:	2000      	movs	r0, #0
 800dede:	f7f2 f9e3 	bl	80002a8 <__aeabi_dsub>
 800dee2:	4602      	mov	r2, r0
 800dee4:	460b      	mov	r3, r1
 800dee6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800deea:	f7f2 fe07 	bl	8000afc <__aeabi_dcmplt>
 800deee:	2800      	cmp	r0, #0
 800def0:	f43f af14 	beq.w	800dd1c <_dtoa_r+0x43c>
 800def4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800def6:	1e73      	subs	r3, r6, #1
 800def8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800defa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800defe:	2b30      	cmp	r3, #48	@ 0x30
 800df00:	d0f8      	beq.n	800def4 <_dtoa_r+0x614>
 800df02:	4647      	mov	r7, r8
 800df04:	e03b      	b.n	800df7e <_dtoa_r+0x69e>
 800df06:	4b9e      	ldr	r3, [pc, #632]	@ (800e180 <_dtoa_r+0x8a0>)
 800df08:	f7f2 fb86 	bl	8000618 <__aeabi_dmul>
 800df0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800df10:	e7bc      	b.n	800de8c <_dtoa_r+0x5ac>
 800df12:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800df16:	4656      	mov	r6, sl
 800df18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df1c:	4620      	mov	r0, r4
 800df1e:	4629      	mov	r1, r5
 800df20:	f7f2 fca4 	bl	800086c <__aeabi_ddiv>
 800df24:	f7f2 fe28 	bl	8000b78 <__aeabi_d2iz>
 800df28:	4680      	mov	r8, r0
 800df2a:	f7f2 fb0b 	bl	8000544 <__aeabi_i2d>
 800df2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df32:	f7f2 fb71 	bl	8000618 <__aeabi_dmul>
 800df36:	4602      	mov	r2, r0
 800df38:	460b      	mov	r3, r1
 800df3a:	4620      	mov	r0, r4
 800df3c:	4629      	mov	r1, r5
 800df3e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800df42:	f7f2 f9b1 	bl	80002a8 <__aeabi_dsub>
 800df46:	f806 4b01 	strb.w	r4, [r6], #1
 800df4a:	9d03      	ldr	r5, [sp, #12]
 800df4c:	eba6 040a 	sub.w	r4, r6, sl
 800df50:	42a5      	cmp	r5, r4
 800df52:	4602      	mov	r2, r0
 800df54:	460b      	mov	r3, r1
 800df56:	d133      	bne.n	800dfc0 <_dtoa_r+0x6e0>
 800df58:	f7f2 f9a8 	bl	80002ac <__adddf3>
 800df5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df60:	4604      	mov	r4, r0
 800df62:	460d      	mov	r5, r1
 800df64:	f7f2 fde8 	bl	8000b38 <__aeabi_dcmpgt>
 800df68:	b9c0      	cbnz	r0, 800df9c <_dtoa_r+0x6bc>
 800df6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df6e:	4620      	mov	r0, r4
 800df70:	4629      	mov	r1, r5
 800df72:	f7f2 fdb9 	bl	8000ae8 <__aeabi_dcmpeq>
 800df76:	b110      	cbz	r0, 800df7e <_dtoa_r+0x69e>
 800df78:	f018 0f01 	tst.w	r8, #1
 800df7c:	d10e      	bne.n	800df9c <_dtoa_r+0x6bc>
 800df7e:	9902      	ldr	r1, [sp, #8]
 800df80:	4648      	mov	r0, r9
 800df82:	f000 fbbd 	bl	800e700 <_Bfree>
 800df86:	2300      	movs	r3, #0
 800df88:	7033      	strb	r3, [r6, #0]
 800df8a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800df8c:	3701      	adds	r7, #1
 800df8e:	601f      	str	r7, [r3, #0]
 800df90:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800df92:	2b00      	cmp	r3, #0
 800df94:	f000 824b 	beq.w	800e42e <_dtoa_r+0xb4e>
 800df98:	601e      	str	r6, [r3, #0]
 800df9a:	e248      	b.n	800e42e <_dtoa_r+0xb4e>
 800df9c:	46b8      	mov	r8, r7
 800df9e:	4633      	mov	r3, r6
 800dfa0:	461e      	mov	r6, r3
 800dfa2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dfa6:	2a39      	cmp	r2, #57	@ 0x39
 800dfa8:	d106      	bne.n	800dfb8 <_dtoa_r+0x6d8>
 800dfaa:	459a      	cmp	sl, r3
 800dfac:	d1f8      	bne.n	800dfa0 <_dtoa_r+0x6c0>
 800dfae:	2230      	movs	r2, #48	@ 0x30
 800dfb0:	f108 0801 	add.w	r8, r8, #1
 800dfb4:	f88a 2000 	strb.w	r2, [sl]
 800dfb8:	781a      	ldrb	r2, [r3, #0]
 800dfba:	3201      	adds	r2, #1
 800dfbc:	701a      	strb	r2, [r3, #0]
 800dfbe:	e7a0      	b.n	800df02 <_dtoa_r+0x622>
 800dfc0:	4b6f      	ldr	r3, [pc, #444]	@ (800e180 <_dtoa_r+0x8a0>)
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	f7f2 fb28 	bl	8000618 <__aeabi_dmul>
 800dfc8:	2200      	movs	r2, #0
 800dfca:	2300      	movs	r3, #0
 800dfcc:	4604      	mov	r4, r0
 800dfce:	460d      	mov	r5, r1
 800dfd0:	f7f2 fd8a 	bl	8000ae8 <__aeabi_dcmpeq>
 800dfd4:	2800      	cmp	r0, #0
 800dfd6:	d09f      	beq.n	800df18 <_dtoa_r+0x638>
 800dfd8:	e7d1      	b.n	800df7e <_dtoa_r+0x69e>
 800dfda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dfdc:	2a00      	cmp	r2, #0
 800dfde:	f000 80ea 	beq.w	800e1b6 <_dtoa_r+0x8d6>
 800dfe2:	9a07      	ldr	r2, [sp, #28]
 800dfe4:	2a01      	cmp	r2, #1
 800dfe6:	f300 80cd 	bgt.w	800e184 <_dtoa_r+0x8a4>
 800dfea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800dfec:	2a00      	cmp	r2, #0
 800dfee:	f000 80c1 	beq.w	800e174 <_dtoa_r+0x894>
 800dff2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800dff6:	9c08      	ldr	r4, [sp, #32]
 800dff8:	9e00      	ldr	r6, [sp, #0]
 800dffa:	9a00      	ldr	r2, [sp, #0]
 800dffc:	441a      	add	r2, r3
 800dffe:	9200      	str	r2, [sp, #0]
 800e000:	9a06      	ldr	r2, [sp, #24]
 800e002:	2101      	movs	r1, #1
 800e004:	441a      	add	r2, r3
 800e006:	4648      	mov	r0, r9
 800e008:	9206      	str	r2, [sp, #24]
 800e00a:	f000 fc2d 	bl	800e868 <__i2b>
 800e00e:	4605      	mov	r5, r0
 800e010:	b166      	cbz	r6, 800e02c <_dtoa_r+0x74c>
 800e012:	9b06      	ldr	r3, [sp, #24]
 800e014:	2b00      	cmp	r3, #0
 800e016:	dd09      	ble.n	800e02c <_dtoa_r+0x74c>
 800e018:	42b3      	cmp	r3, r6
 800e01a:	9a00      	ldr	r2, [sp, #0]
 800e01c:	bfa8      	it	ge
 800e01e:	4633      	movge	r3, r6
 800e020:	1ad2      	subs	r2, r2, r3
 800e022:	9200      	str	r2, [sp, #0]
 800e024:	9a06      	ldr	r2, [sp, #24]
 800e026:	1af6      	subs	r6, r6, r3
 800e028:	1ad3      	subs	r3, r2, r3
 800e02a:	9306      	str	r3, [sp, #24]
 800e02c:	9b08      	ldr	r3, [sp, #32]
 800e02e:	b30b      	cbz	r3, 800e074 <_dtoa_r+0x794>
 800e030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e032:	2b00      	cmp	r3, #0
 800e034:	f000 80c6 	beq.w	800e1c4 <_dtoa_r+0x8e4>
 800e038:	2c00      	cmp	r4, #0
 800e03a:	f000 80c0 	beq.w	800e1be <_dtoa_r+0x8de>
 800e03e:	4629      	mov	r1, r5
 800e040:	4622      	mov	r2, r4
 800e042:	4648      	mov	r0, r9
 800e044:	f000 fcc8 	bl	800e9d8 <__pow5mult>
 800e048:	9a02      	ldr	r2, [sp, #8]
 800e04a:	4601      	mov	r1, r0
 800e04c:	4605      	mov	r5, r0
 800e04e:	4648      	mov	r0, r9
 800e050:	f000 fc20 	bl	800e894 <__multiply>
 800e054:	9902      	ldr	r1, [sp, #8]
 800e056:	4680      	mov	r8, r0
 800e058:	4648      	mov	r0, r9
 800e05a:	f000 fb51 	bl	800e700 <_Bfree>
 800e05e:	9b08      	ldr	r3, [sp, #32]
 800e060:	1b1b      	subs	r3, r3, r4
 800e062:	9308      	str	r3, [sp, #32]
 800e064:	f000 80b1 	beq.w	800e1ca <_dtoa_r+0x8ea>
 800e068:	9a08      	ldr	r2, [sp, #32]
 800e06a:	4641      	mov	r1, r8
 800e06c:	4648      	mov	r0, r9
 800e06e:	f000 fcb3 	bl	800e9d8 <__pow5mult>
 800e072:	9002      	str	r0, [sp, #8]
 800e074:	2101      	movs	r1, #1
 800e076:	4648      	mov	r0, r9
 800e078:	f000 fbf6 	bl	800e868 <__i2b>
 800e07c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e07e:	4604      	mov	r4, r0
 800e080:	2b00      	cmp	r3, #0
 800e082:	f000 81d8 	beq.w	800e436 <_dtoa_r+0xb56>
 800e086:	461a      	mov	r2, r3
 800e088:	4601      	mov	r1, r0
 800e08a:	4648      	mov	r0, r9
 800e08c:	f000 fca4 	bl	800e9d8 <__pow5mult>
 800e090:	9b07      	ldr	r3, [sp, #28]
 800e092:	2b01      	cmp	r3, #1
 800e094:	4604      	mov	r4, r0
 800e096:	f300 809f 	bgt.w	800e1d8 <_dtoa_r+0x8f8>
 800e09a:	9b04      	ldr	r3, [sp, #16]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	f040 8097 	bne.w	800e1d0 <_dtoa_r+0x8f0>
 800e0a2:	9b05      	ldr	r3, [sp, #20]
 800e0a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	f040 8093 	bne.w	800e1d4 <_dtoa_r+0x8f4>
 800e0ae:	9b05      	ldr	r3, [sp, #20]
 800e0b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e0b4:	0d1b      	lsrs	r3, r3, #20
 800e0b6:	051b      	lsls	r3, r3, #20
 800e0b8:	b133      	cbz	r3, 800e0c8 <_dtoa_r+0x7e8>
 800e0ba:	9b00      	ldr	r3, [sp, #0]
 800e0bc:	3301      	adds	r3, #1
 800e0be:	9300      	str	r3, [sp, #0]
 800e0c0:	9b06      	ldr	r3, [sp, #24]
 800e0c2:	3301      	adds	r3, #1
 800e0c4:	9306      	str	r3, [sp, #24]
 800e0c6:	2301      	movs	r3, #1
 800e0c8:	9308      	str	r3, [sp, #32]
 800e0ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	f000 81b8 	beq.w	800e442 <_dtoa_r+0xb62>
 800e0d2:	6923      	ldr	r3, [r4, #16]
 800e0d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e0d8:	6918      	ldr	r0, [r3, #16]
 800e0da:	f000 fb79 	bl	800e7d0 <__hi0bits>
 800e0de:	f1c0 0020 	rsb	r0, r0, #32
 800e0e2:	9b06      	ldr	r3, [sp, #24]
 800e0e4:	4418      	add	r0, r3
 800e0e6:	f010 001f 	ands.w	r0, r0, #31
 800e0ea:	f000 8082 	beq.w	800e1f2 <_dtoa_r+0x912>
 800e0ee:	f1c0 0320 	rsb	r3, r0, #32
 800e0f2:	2b04      	cmp	r3, #4
 800e0f4:	dd73      	ble.n	800e1de <_dtoa_r+0x8fe>
 800e0f6:	9b00      	ldr	r3, [sp, #0]
 800e0f8:	f1c0 001c 	rsb	r0, r0, #28
 800e0fc:	4403      	add	r3, r0
 800e0fe:	9300      	str	r3, [sp, #0]
 800e100:	9b06      	ldr	r3, [sp, #24]
 800e102:	4403      	add	r3, r0
 800e104:	4406      	add	r6, r0
 800e106:	9306      	str	r3, [sp, #24]
 800e108:	9b00      	ldr	r3, [sp, #0]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	dd05      	ble.n	800e11a <_dtoa_r+0x83a>
 800e10e:	9902      	ldr	r1, [sp, #8]
 800e110:	461a      	mov	r2, r3
 800e112:	4648      	mov	r0, r9
 800e114:	f000 fcba 	bl	800ea8c <__lshift>
 800e118:	9002      	str	r0, [sp, #8]
 800e11a:	9b06      	ldr	r3, [sp, #24]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	dd05      	ble.n	800e12c <_dtoa_r+0x84c>
 800e120:	4621      	mov	r1, r4
 800e122:	461a      	mov	r2, r3
 800e124:	4648      	mov	r0, r9
 800e126:	f000 fcb1 	bl	800ea8c <__lshift>
 800e12a:	4604      	mov	r4, r0
 800e12c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d061      	beq.n	800e1f6 <_dtoa_r+0x916>
 800e132:	9802      	ldr	r0, [sp, #8]
 800e134:	4621      	mov	r1, r4
 800e136:	f000 fd15 	bl	800eb64 <__mcmp>
 800e13a:	2800      	cmp	r0, #0
 800e13c:	da5b      	bge.n	800e1f6 <_dtoa_r+0x916>
 800e13e:	2300      	movs	r3, #0
 800e140:	9902      	ldr	r1, [sp, #8]
 800e142:	220a      	movs	r2, #10
 800e144:	4648      	mov	r0, r9
 800e146:	f000 fafd 	bl	800e744 <__multadd>
 800e14a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e14c:	9002      	str	r0, [sp, #8]
 800e14e:	f107 38ff 	add.w	r8, r7, #4294967295
 800e152:	2b00      	cmp	r3, #0
 800e154:	f000 8177 	beq.w	800e446 <_dtoa_r+0xb66>
 800e158:	4629      	mov	r1, r5
 800e15a:	2300      	movs	r3, #0
 800e15c:	220a      	movs	r2, #10
 800e15e:	4648      	mov	r0, r9
 800e160:	f000 faf0 	bl	800e744 <__multadd>
 800e164:	f1bb 0f00 	cmp.w	fp, #0
 800e168:	4605      	mov	r5, r0
 800e16a:	dc6f      	bgt.n	800e24c <_dtoa_r+0x96c>
 800e16c:	9b07      	ldr	r3, [sp, #28]
 800e16e:	2b02      	cmp	r3, #2
 800e170:	dc49      	bgt.n	800e206 <_dtoa_r+0x926>
 800e172:	e06b      	b.n	800e24c <_dtoa_r+0x96c>
 800e174:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e176:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e17a:	e73c      	b.n	800dff6 <_dtoa_r+0x716>
 800e17c:	3fe00000 	.word	0x3fe00000
 800e180:	40240000 	.word	0x40240000
 800e184:	9b03      	ldr	r3, [sp, #12]
 800e186:	1e5c      	subs	r4, r3, #1
 800e188:	9b08      	ldr	r3, [sp, #32]
 800e18a:	42a3      	cmp	r3, r4
 800e18c:	db09      	blt.n	800e1a2 <_dtoa_r+0x8c2>
 800e18e:	1b1c      	subs	r4, r3, r4
 800e190:	9b03      	ldr	r3, [sp, #12]
 800e192:	2b00      	cmp	r3, #0
 800e194:	f6bf af30 	bge.w	800dff8 <_dtoa_r+0x718>
 800e198:	9b00      	ldr	r3, [sp, #0]
 800e19a:	9a03      	ldr	r2, [sp, #12]
 800e19c:	1a9e      	subs	r6, r3, r2
 800e19e:	2300      	movs	r3, #0
 800e1a0:	e72b      	b.n	800dffa <_dtoa_r+0x71a>
 800e1a2:	9b08      	ldr	r3, [sp, #32]
 800e1a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e1a6:	9408      	str	r4, [sp, #32]
 800e1a8:	1ae3      	subs	r3, r4, r3
 800e1aa:	441a      	add	r2, r3
 800e1ac:	9e00      	ldr	r6, [sp, #0]
 800e1ae:	9b03      	ldr	r3, [sp, #12]
 800e1b0:	920d      	str	r2, [sp, #52]	@ 0x34
 800e1b2:	2400      	movs	r4, #0
 800e1b4:	e721      	b.n	800dffa <_dtoa_r+0x71a>
 800e1b6:	9c08      	ldr	r4, [sp, #32]
 800e1b8:	9e00      	ldr	r6, [sp, #0]
 800e1ba:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800e1bc:	e728      	b.n	800e010 <_dtoa_r+0x730>
 800e1be:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800e1c2:	e751      	b.n	800e068 <_dtoa_r+0x788>
 800e1c4:	9a08      	ldr	r2, [sp, #32]
 800e1c6:	9902      	ldr	r1, [sp, #8]
 800e1c8:	e750      	b.n	800e06c <_dtoa_r+0x78c>
 800e1ca:	f8cd 8008 	str.w	r8, [sp, #8]
 800e1ce:	e751      	b.n	800e074 <_dtoa_r+0x794>
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	e779      	b.n	800e0c8 <_dtoa_r+0x7e8>
 800e1d4:	9b04      	ldr	r3, [sp, #16]
 800e1d6:	e777      	b.n	800e0c8 <_dtoa_r+0x7e8>
 800e1d8:	2300      	movs	r3, #0
 800e1da:	9308      	str	r3, [sp, #32]
 800e1dc:	e779      	b.n	800e0d2 <_dtoa_r+0x7f2>
 800e1de:	d093      	beq.n	800e108 <_dtoa_r+0x828>
 800e1e0:	9a00      	ldr	r2, [sp, #0]
 800e1e2:	331c      	adds	r3, #28
 800e1e4:	441a      	add	r2, r3
 800e1e6:	9200      	str	r2, [sp, #0]
 800e1e8:	9a06      	ldr	r2, [sp, #24]
 800e1ea:	441a      	add	r2, r3
 800e1ec:	441e      	add	r6, r3
 800e1ee:	9206      	str	r2, [sp, #24]
 800e1f0:	e78a      	b.n	800e108 <_dtoa_r+0x828>
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	e7f4      	b.n	800e1e0 <_dtoa_r+0x900>
 800e1f6:	9b03      	ldr	r3, [sp, #12]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	46b8      	mov	r8, r7
 800e1fc:	dc20      	bgt.n	800e240 <_dtoa_r+0x960>
 800e1fe:	469b      	mov	fp, r3
 800e200:	9b07      	ldr	r3, [sp, #28]
 800e202:	2b02      	cmp	r3, #2
 800e204:	dd1e      	ble.n	800e244 <_dtoa_r+0x964>
 800e206:	f1bb 0f00 	cmp.w	fp, #0
 800e20a:	f47f adb1 	bne.w	800dd70 <_dtoa_r+0x490>
 800e20e:	4621      	mov	r1, r4
 800e210:	465b      	mov	r3, fp
 800e212:	2205      	movs	r2, #5
 800e214:	4648      	mov	r0, r9
 800e216:	f000 fa95 	bl	800e744 <__multadd>
 800e21a:	4601      	mov	r1, r0
 800e21c:	4604      	mov	r4, r0
 800e21e:	9802      	ldr	r0, [sp, #8]
 800e220:	f000 fca0 	bl	800eb64 <__mcmp>
 800e224:	2800      	cmp	r0, #0
 800e226:	f77f ada3 	ble.w	800dd70 <_dtoa_r+0x490>
 800e22a:	4656      	mov	r6, sl
 800e22c:	2331      	movs	r3, #49	@ 0x31
 800e22e:	f806 3b01 	strb.w	r3, [r6], #1
 800e232:	f108 0801 	add.w	r8, r8, #1
 800e236:	e59f      	b.n	800dd78 <_dtoa_r+0x498>
 800e238:	9c03      	ldr	r4, [sp, #12]
 800e23a:	46b8      	mov	r8, r7
 800e23c:	4625      	mov	r5, r4
 800e23e:	e7f4      	b.n	800e22a <_dtoa_r+0x94a>
 800e240:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800e244:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e246:	2b00      	cmp	r3, #0
 800e248:	f000 8101 	beq.w	800e44e <_dtoa_r+0xb6e>
 800e24c:	2e00      	cmp	r6, #0
 800e24e:	dd05      	ble.n	800e25c <_dtoa_r+0x97c>
 800e250:	4629      	mov	r1, r5
 800e252:	4632      	mov	r2, r6
 800e254:	4648      	mov	r0, r9
 800e256:	f000 fc19 	bl	800ea8c <__lshift>
 800e25a:	4605      	mov	r5, r0
 800e25c:	9b08      	ldr	r3, [sp, #32]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d05c      	beq.n	800e31c <_dtoa_r+0xa3c>
 800e262:	6869      	ldr	r1, [r5, #4]
 800e264:	4648      	mov	r0, r9
 800e266:	f000 fa0b 	bl	800e680 <_Balloc>
 800e26a:	4606      	mov	r6, r0
 800e26c:	b928      	cbnz	r0, 800e27a <_dtoa_r+0x99a>
 800e26e:	4b82      	ldr	r3, [pc, #520]	@ (800e478 <_dtoa_r+0xb98>)
 800e270:	4602      	mov	r2, r0
 800e272:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e276:	f7ff bb4a 	b.w	800d90e <_dtoa_r+0x2e>
 800e27a:	692a      	ldr	r2, [r5, #16]
 800e27c:	3202      	adds	r2, #2
 800e27e:	0092      	lsls	r2, r2, #2
 800e280:	f105 010c 	add.w	r1, r5, #12
 800e284:	300c      	adds	r0, #12
 800e286:	f7ff fa92 	bl	800d7ae <memcpy>
 800e28a:	2201      	movs	r2, #1
 800e28c:	4631      	mov	r1, r6
 800e28e:	4648      	mov	r0, r9
 800e290:	f000 fbfc 	bl	800ea8c <__lshift>
 800e294:	f10a 0301 	add.w	r3, sl, #1
 800e298:	9300      	str	r3, [sp, #0]
 800e29a:	eb0a 030b 	add.w	r3, sl, fp
 800e29e:	9308      	str	r3, [sp, #32]
 800e2a0:	9b04      	ldr	r3, [sp, #16]
 800e2a2:	f003 0301 	and.w	r3, r3, #1
 800e2a6:	462f      	mov	r7, r5
 800e2a8:	9306      	str	r3, [sp, #24]
 800e2aa:	4605      	mov	r5, r0
 800e2ac:	9b00      	ldr	r3, [sp, #0]
 800e2ae:	9802      	ldr	r0, [sp, #8]
 800e2b0:	4621      	mov	r1, r4
 800e2b2:	f103 3bff 	add.w	fp, r3, #4294967295
 800e2b6:	f7ff fa88 	bl	800d7ca <quorem>
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	3330      	adds	r3, #48	@ 0x30
 800e2be:	9003      	str	r0, [sp, #12]
 800e2c0:	4639      	mov	r1, r7
 800e2c2:	9802      	ldr	r0, [sp, #8]
 800e2c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e2c6:	f000 fc4d 	bl	800eb64 <__mcmp>
 800e2ca:	462a      	mov	r2, r5
 800e2cc:	9004      	str	r0, [sp, #16]
 800e2ce:	4621      	mov	r1, r4
 800e2d0:	4648      	mov	r0, r9
 800e2d2:	f000 fc63 	bl	800eb9c <__mdiff>
 800e2d6:	68c2      	ldr	r2, [r0, #12]
 800e2d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2da:	4606      	mov	r6, r0
 800e2dc:	bb02      	cbnz	r2, 800e320 <_dtoa_r+0xa40>
 800e2de:	4601      	mov	r1, r0
 800e2e0:	9802      	ldr	r0, [sp, #8]
 800e2e2:	f000 fc3f 	bl	800eb64 <__mcmp>
 800e2e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2e8:	4602      	mov	r2, r0
 800e2ea:	4631      	mov	r1, r6
 800e2ec:	4648      	mov	r0, r9
 800e2ee:	920c      	str	r2, [sp, #48]	@ 0x30
 800e2f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800e2f2:	f000 fa05 	bl	800e700 <_Bfree>
 800e2f6:	9b07      	ldr	r3, [sp, #28]
 800e2f8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e2fa:	9e00      	ldr	r6, [sp, #0]
 800e2fc:	ea42 0103 	orr.w	r1, r2, r3
 800e300:	9b06      	ldr	r3, [sp, #24]
 800e302:	4319      	orrs	r1, r3
 800e304:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e306:	d10d      	bne.n	800e324 <_dtoa_r+0xa44>
 800e308:	2b39      	cmp	r3, #57	@ 0x39
 800e30a:	d027      	beq.n	800e35c <_dtoa_r+0xa7c>
 800e30c:	9a04      	ldr	r2, [sp, #16]
 800e30e:	2a00      	cmp	r2, #0
 800e310:	dd01      	ble.n	800e316 <_dtoa_r+0xa36>
 800e312:	9b03      	ldr	r3, [sp, #12]
 800e314:	3331      	adds	r3, #49	@ 0x31
 800e316:	f88b 3000 	strb.w	r3, [fp]
 800e31a:	e52e      	b.n	800dd7a <_dtoa_r+0x49a>
 800e31c:	4628      	mov	r0, r5
 800e31e:	e7b9      	b.n	800e294 <_dtoa_r+0x9b4>
 800e320:	2201      	movs	r2, #1
 800e322:	e7e2      	b.n	800e2ea <_dtoa_r+0xa0a>
 800e324:	9904      	ldr	r1, [sp, #16]
 800e326:	2900      	cmp	r1, #0
 800e328:	db04      	blt.n	800e334 <_dtoa_r+0xa54>
 800e32a:	9807      	ldr	r0, [sp, #28]
 800e32c:	4301      	orrs	r1, r0
 800e32e:	9806      	ldr	r0, [sp, #24]
 800e330:	4301      	orrs	r1, r0
 800e332:	d120      	bne.n	800e376 <_dtoa_r+0xa96>
 800e334:	2a00      	cmp	r2, #0
 800e336:	ddee      	ble.n	800e316 <_dtoa_r+0xa36>
 800e338:	9902      	ldr	r1, [sp, #8]
 800e33a:	9300      	str	r3, [sp, #0]
 800e33c:	2201      	movs	r2, #1
 800e33e:	4648      	mov	r0, r9
 800e340:	f000 fba4 	bl	800ea8c <__lshift>
 800e344:	4621      	mov	r1, r4
 800e346:	9002      	str	r0, [sp, #8]
 800e348:	f000 fc0c 	bl	800eb64 <__mcmp>
 800e34c:	2800      	cmp	r0, #0
 800e34e:	9b00      	ldr	r3, [sp, #0]
 800e350:	dc02      	bgt.n	800e358 <_dtoa_r+0xa78>
 800e352:	d1e0      	bne.n	800e316 <_dtoa_r+0xa36>
 800e354:	07da      	lsls	r2, r3, #31
 800e356:	d5de      	bpl.n	800e316 <_dtoa_r+0xa36>
 800e358:	2b39      	cmp	r3, #57	@ 0x39
 800e35a:	d1da      	bne.n	800e312 <_dtoa_r+0xa32>
 800e35c:	2339      	movs	r3, #57	@ 0x39
 800e35e:	f88b 3000 	strb.w	r3, [fp]
 800e362:	4633      	mov	r3, r6
 800e364:	461e      	mov	r6, r3
 800e366:	3b01      	subs	r3, #1
 800e368:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e36c:	2a39      	cmp	r2, #57	@ 0x39
 800e36e:	d04e      	beq.n	800e40e <_dtoa_r+0xb2e>
 800e370:	3201      	adds	r2, #1
 800e372:	701a      	strb	r2, [r3, #0]
 800e374:	e501      	b.n	800dd7a <_dtoa_r+0x49a>
 800e376:	2a00      	cmp	r2, #0
 800e378:	dd03      	ble.n	800e382 <_dtoa_r+0xaa2>
 800e37a:	2b39      	cmp	r3, #57	@ 0x39
 800e37c:	d0ee      	beq.n	800e35c <_dtoa_r+0xa7c>
 800e37e:	3301      	adds	r3, #1
 800e380:	e7c9      	b.n	800e316 <_dtoa_r+0xa36>
 800e382:	9a00      	ldr	r2, [sp, #0]
 800e384:	9908      	ldr	r1, [sp, #32]
 800e386:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e38a:	428a      	cmp	r2, r1
 800e38c:	d028      	beq.n	800e3e0 <_dtoa_r+0xb00>
 800e38e:	9902      	ldr	r1, [sp, #8]
 800e390:	2300      	movs	r3, #0
 800e392:	220a      	movs	r2, #10
 800e394:	4648      	mov	r0, r9
 800e396:	f000 f9d5 	bl	800e744 <__multadd>
 800e39a:	42af      	cmp	r7, r5
 800e39c:	9002      	str	r0, [sp, #8]
 800e39e:	f04f 0300 	mov.w	r3, #0
 800e3a2:	f04f 020a 	mov.w	r2, #10
 800e3a6:	4639      	mov	r1, r7
 800e3a8:	4648      	mov	r0, r9
 800e3aa:	d107      	bne.n	800e3bc <_dtoa_r+0xadc>
 800e3ac:	f000 f9ca 	bl	800e744 <__multadd>
 800e3b0:	4607      	mov	r7, r0
 800e3b2:	4605      	mov	r5, r0
 800e3b4:	9b00      	ldr	r3, [sp, #0]
 800e3b6:	3301      	adds	r3, #1
 800e3b8:	9300      	str	r3, [sp, #0]
 800e3ba:	e777      	b.n	800e2ac <_dtoa_r+0x9cc>
 800e3bc:	f000 f9c2 	bl	800e744 <__multadd>
 800e3c0:	4629      	mov	r1, r5
 800e3c2:	4607      	mov	r7, r0
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	220a      	movs	r2, #10
 800e3c8:	4648      	mov	r0, r9
 800e3ca:	f000 f9bb 	bl	800e744 <__multadd>
 800e3ce:	4605      	mov	r5, r0
 800e3d0:	e7f0      	b.n	800e3b4 <_dtoa_r+0xad4>
 800e3d2:	f1bb 0f00 	cmp.w	fp, #0
 800e3d6:	bfcc      	ite	gt
 800e3d8:	465e      	movgt	r6, fp
 800e3da:	2601      	movle	r6, #1
 800e3dc:	4456      	add	r6, sl
 800e3de:	2700      	movs	r7, #0
 800e3e0:	9902      	ldr	r1, [sp, #8]
 800e3e2:	9300      	str	r3, [sp, #0]
 800e3e4:	2201      	movs	r2, #1
 800e3e6:	4648      	mov	r0, r9
 800e3e8:	f000 fb50 	bl	800ea8c <__lshift>
 800e3ec:	4621      	mov	r1, r4
 800e3ee:	9002      	str	r0, [sp, #8]
 800e3f0:	f000 fbb8 	bl	800eb64 <__mcmp>
 800e3f4:	2800      	cmp	r0, #0
 800e3f6:	dcb4      	bgt.n	800e362 <_dtoa_r+0xa82>
 800e3f8:	d102      	bne.n	800e400 <_dtoa_r+0xb20>
 800e3fa:	9b00      	ldr	r3, [sp, #0]
 800e3fc:	07db      	lsls	r3, r3, #31
 800e3fe:	d4b0      	bmi.n	800e362 <_dtoa_r+0xa82>
 800e400:	4633      	mov	r3, r6
 800e402:	461e      	mov	r6, r3
 800e404:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e408:	2a30      	cmp	r2, #48	@ 0x30
 800e40a:	d0fa      	beq.n	800e402 <_dtoa_r+0xb22>
 800e40c:	e4b5      	b.n	800dd7a <_dtoa_r+0x49a>
 800e40e:	459a      	cmp	sl, r3
 800e410:	d1a8      	bne.n	800e364 <_dtoa_r+0xa84>
 800e412:	2331      	movs	r3, #49	@ 0x31
 800e414:	f108 0801 	add.w	r8, r8, #1
 800e418:	f88a 3000 	strb.w	r3, [sl]
 800e41c:	e4ad      	b.n	800dd7a <_dtoa_r+0x49a>
 800e41e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e420:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800e47c <_dtoa_r+0xb9c>
 800e424:	b11b      	cbz	r3, 800e42e <_dtoa_r+0xb4e>
 800e426:	f10a 0308 	add.w	r3, sl, #8
 800e42a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e42c:	6013      	str	r3, [r2, #0]
 800e42e:	4650      	mov	r0, sl
 800e430:	b017      	add	sp, #92	@ 0x5c
 800e432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e436:	9b07      	ldr	r3, [sp, #28]
 800e438:	2b01      	cmp	r3, #1
 800e43a:	f77f ae2e 	ble.w	800e09a <_dtoa_r+0x7ba>
 800e43e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e440:	9308      	str	r3, [sp, #32]
 800e442:	2001      	movs	r0, #1
 800e444:	e64d      	b.n	800e0e2 <_dtoa_r+0x802>
 800e446:	f1bb 0f00 	cmp.w	fp, #0
 800e44a:	f77f aed9 	ble.w	800e200 <_dtoa_r+0x920>
 800e44e:	4656      	mov	r6, sl
 800e450:	9802      	ldr	r0, [sp, #8]
 800e452:	4621      	mov	r1, r4
 800e454:	f7ff f9b9 	bl	800d7ca <quorem>
 800e458:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800e45c:	f806 3b01 	strb.w	r3, [r6], #1
 800e460:	eba6 020a 	sub.w	r2, r6, sl
 800e464:	4593      	cmp	fp, r2
 800e466:	ddb4      	ble.n	800e3d2 <_dtoa_r+0xaf2>
 800e468:	9902      	ldr	r1, [sp, #8]
 800e46a:	2300      	movs	r3, #0
 800e46c:	220a      	movs	r2, #10
 800e46e:	4648      	mov	r0, r9
 800e470:	f000 f968 	bl	800e744 <__multadd>
 800e474:	9002      	str	r0, [sp, #8]
 800e476:	e7eb      	b.n	800e450 <_dtoa_r+0xb70>
 800e478:	080109e9 	.word	0x080109e9
 800e47c:	0801096d 	.word	0x0801096d

0800e480 <_free_r>:
 800e480:	b538      	push	{r3, r4, r5, lr}
 800e482:	4605      	mov	r5, r0
 800e484:	2900      	cmp	r1, #0
 800e486:	d041      	beq.n	800e50c <_free_r+0x8c>
 800e488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e48c:	1f0c      	subs	r4, r1, #4
 800e48e:	2b00      	cmp	r3, #0
 800e490:	bfb8      	it	lt
 800e492:	18e4      	addlt	r4, r4, r3
 800e494:	f000 f8e8 	bl	800e668 <__malloc_lock>
 800e498:	4a1d      	ldr	r2, [pc, #116]	@ (800e510 <_free_r+0x90>)
 800e49a:	6813      	ldr	r3, [r2, #0]
 800e49c:	b933      	cbnz	r3, 800e4ac <_free_r+0x2c>
 800e49e:	6063      	str	r3, [r4, #4]
 800e4a0:	6014      	str	r4, [r2, #0]
 800e4a2:	4628      	mov	r0, r5
 800e4a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e4a8:	f000 b8e4 	b.w	800e674 <__malloc_unlock>
 800e4ac:	42a3      	cmp	r3, r4
 800e4ae:	d908      	bls.n	800e4c2 <_free_r+0x42>
 800e4b0:	6820      	ldr	r0, [r4, #0]
 800e4b2:	1821      	adds	r1, r4, r0
 800e4b4:	428b      	cmp	r3, r1
 800e4b6:	bf01      	itttt	eq
 800e4b8:	6819      	ldreq	r1, [r3, #0]
 800e4ba:	685b      	ldreq	r3, [r3, #4]
 800e4bc:	1809      	addeq	r1, r1, r0
 800e4be:	6021      	streq	r1, [r4, #0]
 800e4c0:	e7ed      	b.n	800e49e <_free_r+0x1e>
 800e4c2:	461a      	mov	r2, r3
 800e4c4:	685b      	ldr	r3, [r3, #4]
 800e4c6:	b10b      	cbz	r3, 800e4cc <_free_r+0x4c>
 800e4c8:	42a3      	cmp	r3, r4
 800e4ca:	d9fa      	bls.n	800e4c2 <_free_r+0x42>
 800e4cc:	6811      	ldr	r1, [r2, #0]
 800e4ce:	1850      	adds	r0, r2, r1
 800e4d0:	42a0      	cmp	r0, r4
 800e4d2:	d10b      	bne.n	800e4ec <_free_r+0x6c>
 800e4d4:	6820      	ldr	r0, [r4, #0]
 800e4d6:	4401      	add	r1, r0
 800e4d8:	1850      	adds	r0, r2, r1
 800e4da:	4283      	cmp	r3, r0
 800e4dc:	6011      	str	r1, [r2, #0]
 800e4de:	d1e0      	bne.n	800e4a2 <_free_r+0x22>
 800e4e0:	6818      	ldr	r0, [r3, #0]
 800e4e2:	685b      	ldr	r3, [r3, #4]
 800e4e4:	6053      	str	r3, [r2, #4]
 800e4e6:	4408      	add	r0, r1
 800e4e8:	6010      	str	r0, [r2, #0]
 800e4ea:	e7da      	b.n	800e4a2 <_free_r+0x22>
 800e4ec:	d902      	bls.n	800e4f4 <_free_r+0x74>
 800e4ee:	230c      	movs	r3, #12
 800e4f0:	602b      	str	r3, [r5, #0]
 800e4f2:	e7d6      	b.n	800e4a2 <_free_r+0x22>
 800e4f4:	6820      	ldr	r0, [r4, #0]
 800e4f6:	1821      	adds	r1, r4, r0
 800e4f8:	428b      	cmp	r3, r1
 800e4fa:	bf04      	itt	eq
 800e4fc:	6819      	ldreq	r1, [r3, #0]
 800e4fe:	685b      	ldreq	r3, [r3, #4]
 800e500:	6063      	str	r3, [r4, #4]
 800e502:	bf04      	itt	eq
 800e504:	1809      	addeq	r1, r1, r0
 800e506:	6021      	streq	r1, [r4, #0]
 800e508:	6054      	str	r4, [r2, #4]
 800e50a:	e7ca      	b.n	800e4a2 <_free_r+0x22>
 800e50c:	bd38      	pop	{r3, r4, r5, pc}
 800e50e:	bf00      	nop
 800e510:	20005ecc 	.word	0x20005ecc

0800e514 <malloc>:
 800e514:	4b02      	ldr	r3, [pc, #8]	@ (800e520 <malloc+0xc>)
 800e516:	4601      	mov	r1, r0
 800e518:	6818      	ldr	r0, [r3, #0]
 800e51a:	f000 b825 	b.w	800e568 <_malloc_r>
 800e51e:	bf00      	nop
 800e520:	20004238 	.word	0x20004238

0800e524 <sbrk_aligned>:
 800e524:	b570      	push	{r4, r5, r6, lr}
 800e526:	4e0f      	ldr	r6, [pc, #60]	@ (800e564 <sbrk_aligned+0x40>)
 800e528:	460c      	mov	r4, r1
 800e52a:	6831      	ldr	r1, [r6, #0]
 800e52c:	4605      	mov	r5, r0
 800e52e:	b911      	cbnz	r1, 800e536 <sbrk_aligned+0x12>
 800e530:	f000 fe24 	bl	800f17c <_sbrk_r>
 800e534:	6030      	str	r0, [r6, #0]
 800e536:	4621      	mov	r1, r4
 800e538:	4628      	mov	r0, r5
 800e53a:	f000 fe1f 	bl	800f17c <_sbrk_r>
 800e53e:	1c43      	adds	r3, r0, #1
 800e540:	d103      	bne.n	800e54a <sbrk_aligned+0x26>
 800e542:	f04f 34ff 	mov.w	r4, #4294967295
 800e546:	4620      	mov	r0, r4
 800e548:	bd70      	pop	{r4, r5, r6, pc}
 800e54a:	1cc4      	adds	r4, r0, #3
 800e54c:	f024 0403 	bic.w	r4, r4, #3
 800e550:	42a0      	cmp	r0, r4
 800e552:	d0f8      	beq.n	800e546 <sbrk_aligned+0x22>
 800e554:	1a21      	subs	r1, r4, r0
 800e556:	4628      	mov	r0, r5
 800e558:	f000 fe10 	bl	800f17c <_sbrk_r>
 800e55c:	3001      	adds	r0, #1
 800e55e:	d1f2      	bne.n	800e546 <sbrk_aligned+0x22>
 800e560:	e7ef      	b.n	800e542 <sbrk_aligned+0x1e>
 800e562:	bf00      	nop
 800e564:	20005ec8 	.word	0x20005ec8

0800e568 <_malloc_r>:
 800e568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e56c:	1ccd      	adds	r5, r1, #3
 800e56e:	f025 0503 	bic.w	r5, r5, #3
 800e572:	3508      	adds	r5, #8
 800e574:	2d0c      	cmp	r5, #12
 800e576:	bf38      	it	cc
 800e578:	250c      	movcc	r5, #12
 800e57a:	2d00      	cmp	r5, #0
 800e57c:	4606      	mov	r6, r0
 800e57e:	db01      	blt.n	800e584 <_malloc_r+0x1c>
 800e580:	42a9      	cmp	r1, r5
 800e582:	d904      	bls.n	800e58e <_malloc_r+0x26>
 800e584:	230c      	movs	r3, #12
 800e586:	6033      	str	r3, [r6, #0]
 800e588:	2000      	movs	r0, #0
 800e58a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e58e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e664 <_malloc_r+0xfc>
 800e592:	f000 f869 	bl	800e668 <__malloc_lock>
 800e596:	f8d8 3000 	ldr.w	r3, [r8]
 800e59a:	461c      	mov	r4, r3
 800e59c:	bb44      	cbnz	r4, 800e5f0 <_malloc_r+0x88>
 800e59e:	4629      	mov	r1, r5
 800e5a0:	4630      	mov	r0, r6
 800e5a2:	f7ff ffbf 	bl	800e524 <sbrk_aligned>
 800e5a6:	1c43      	adds	r3, r0, #1
 800e5a8:	4604      	mov	r4, r0
 800e5aa:	d158      	bne.n	800e65e <_malloc_r+0xf6>
 800e5ac:	f8d8 4000 	ldr.w	r4, [r8]
 800e5b0:	4627      	mov	r7, r4
 800e5b2:	2f00      	cmp	r7, #0
 800e5b4:	d143      	bne.n	800e63e <_malloc_r+0xd6>
 800e5b6:	2c00      	cmp	r4, #0
 800e5b8:	d04b      	beq.n	800e652 <_malloc_r+0xea>
 800e5ba:	6823      	ldr	r3, [r4, #0]
 800e5bc:	4639      	mov	r1, r7
 800e5be:	4630      	mov	r0, r6
 800e5c0:	eb04 0903 	add.w	r9, r4, r3
 800e5c4:	f000 fdda 	bl	800f17c <_sbrk_r>
 800e5c8:	4581      	cmp	r9, r0
 800e5ca:	d142      	bne.n	800e652 <_malloc_r+0xea>
 800e5cc:	6821      	ldr	r1, [r4, #0]
 800e5ce:	1a6d      	subs	r5, r5, r1
 800e5d0:	4629      	mov	r1, r5
 800e5d2:	4630      	mov	r0, r6
 800e5d4:	f7ff ffa6 	bl	800e524 <sbrk_aligned>
 800e5d8:	3001      	adds	r0, #1
 800e5da:	d03a      	beq.n	800e652 <_malloc_r+0xea>
 800e5dc:	6823      	ldr	r3, [r4, #0]
 800e5de:	442b      	add	r3, r5
 800e5e0:	6023      	str	r3, [r4, #0]
 800e5e2:	f8d8 3000 	ldr.w	r3, [r8]
 800e5e6:	685a      	ldr	r2, [r3, #4]
 800e5e8:	bb62      	cbnz	r2, 800e644 <_malloc_r+0xdc>
 800e5ea:	f8c8 7000 	str.w	r7, [r8]
 800e5ee:	e00f      	b.n	800e610 <_malloc_r+0xa8>
 800e5f0:	6822      	ldr	r2, [r4, #0]
 800e5f2:	1b52      	subs	r2, r2, r5
 800e5f4:	d420      	bmi.n	800e638 <_malloc_r+0xd0>
 800e5f6:	2a0b      	cmp	r2, #11
 800e5f8:	d917      	bls.n	800e62a <_malloc_r+0xc2>
 800e5fa:	1961      	adds	r1, r4, r5
 800e5fc:	42a3      	cmp	r3, r4
 800e5fe:	6025      	str	r5, [r4, #0]
 800e600:	bf18      	it	ne
 800e602:	6059      	strne	r1, [r3, #4]
 800e604:	6863      	ldr	r3, [r4, #4]
 800e606:	bf08      	it	eq
 800e608:	f8c8 1000 	streq.w	r1, [r8]
 800e60c:	5162      	str	r2, [r4, r5]
 800e60e:	604b      	str	r3, [r1, #4]
 800e610:	4630      	mov	r0, r6
 800e612:	f000 f82f 	bl	800e674 <__malloc_unlock>
 800e616:	f104 000b 	add.w	r0, r4, #11
 800e61a:	1d23      	adds	r3, r4, #4
 800e61c:	f020 0007 	bic.w	r0, r0, #7
 800e620:	1ac2      	subs	r2, r0, r3
 800e622:	bf1c      	itt	ne
 800e624:	1a1b      	subne	r3, r3, r0
 800e626:	50a3      	strne	r3, [r4, r2]
 800e628:	e7af      	b.n	800e58a <_malloc_r+0x22>
 800e62a:	6862      	ldr	r2, [r4, #4]
 800e62c:	42a3      	cmp	r3, r4
 800e62e:	bf0c      	ite	eq
 800e630:	f8c8 2000 	streq.w	r2, [r8]
 800e634:	605a      	strne	r2, [r3, #4]
 800e636:	e7eb      	b.n	800e610 <_malloc_r+0xa8>
 800e638:	4623      	mov	r3, r4
 800e63a:	6864      	ldr	r4, [r4, #4]
 800e63c:	e7ae      	b.n	800e59c <_malloc_r+0x34>
 800e63e:	463c      	mov	r4, r7
 800e640:	687f      	ldr	r7, [r7, #4]
 800e642:	e7b6      	b.n	800e5b2 <_malloc_r+0x4a>
 800e644:	461a      	mov	r2, r3
 800e646:	685b      	ldr	r3, [r3, #4]
 800e648:	42a3      	cmp	r3, r4
 800e64a:	d1fb      	bne.n	800e644 <_malloc_r+0xdc>
 800e64c:	2300      	movs	r3, #0
 800e64e:	6053      	str	r3, [r2, #4]
 800e650:	e7de      	b.n	800e610 <_malloc_r+0xa8>
 800e652:	230c      	movs	r3, #12
 800e654:	6033      	str	r3, [r6, #0]
 800e656:	4630      	mov	r0, r6
 800e658:	f000 f80c 	bl	800e674 <__malloc_unlock>
 800e65c:	e794      	b.n	800e588 <_malloc_r+0x20>
 800e65e:	6005      	str	r5, [r0, #0]
 800e660:	e7d6      	b.n	800e610 <_malloc_r+0xa8>
 800e662:	bf00      	nop
 800e664:	20005ecc 	.word	0x20005ecc

0800e668 <__malloc_lock>:
 800e668:	4801      	ldr	r0, [pc, #4]	@ (800e670 <__malloc_lock+0x8>)
 800e66a:	f7ff b89e 	b.w	800d7aa <__retarget_lock_acquire_recursive>
 800e66e:	bf00      	nop
 800e670:	20005ec4 	.word	0x20005ec4

0800e674 <__malloc_unlock>:
 800e674:	4801      	ldr	r0, [pc, #4]	@ (800e67c <__malloc_unlock+0x8>)
 800e676:	f7ff b899 	b.w	800d7ac <__retarget_lock_release_recursive>
 800e67a:	bf00      	nop
 800e67c:	20005ec4 	.word	0x20005ec4

0800e680 <_Balloc>:
 800e680:	b570      	push	{r4, r5, r6, lr}
 800e682:	69c6      	ldr	r6, [r0, #28]
 800e684:	4604      	mov	r4, r0
 800e686:	460d      	mov	r5, r1
 800e688:	b976      	cbnz	r6, 800e6a8 <_Balloc+0x28>
 800e68a:	2010      	movs	r0, #16
 800e68c:	f7ff ff42 	bl	800e514 <malloc>
 800e690:	4602      	mov	r2, r0
 800e692:	61e0      	str	r0, [r4, #28]
 800e694:	b920      	cbnz	r0, 800e6a0 <_Balloc+0x20>
 800e696:	4b18      	ldr	r3, [pc, #96]	@ (800e6f8 <_Balloc+0x78>)
 800e698:	4818      	ldr	r0, [pc, #96]	@ (800e6fc <_Balloc+0x7c>)
 800e69a:	216b      	movs	r1, #107	@ 0x6b
 800e69c:	f000 fd7e 	bl	800f19c <__assert_func>
 800e6a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e6a4:	6006      	str	r6, [r0, #0]
 800e6a6:	60c6      	str	r6, [r0, #12]
 800e6a8:	69e6      	ldr	r6, [r4, #28]
 800e6aa:	68f3      	ldr	r3, [r6, #12]
 800e6ac:	b183      	cbz	r3, 800e6d0 <_Balloc+0x50>
 800e6ae:	69e3      	ldr	r3, [r4, #28]
 800e6b0:	68db      	ldr	r3, [r3, #12]
 800e6b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e6b6:	b9b8      	cbnz	r0, 800e6e8 <_Balloc+0x68>
 800e6b8:	2101      	movs	r1, #1
 800e6ba:	fa01 f605 	lsl.w	r6, r1, r5
 800e6be:	1d72      	adds	r2, r6, #5
 800e6c0:	0092      	lsls	r2, r2, #2
 800e6c2:	4620      	mov	r0, r4
 800e6c4:	f000 fd88 	bl	800f1d8 <_calloc_r>
 800e6c8:	b160      	cbz	r0, 800e6e4 <_Balloc+0x64>
 800e6ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e6ce:	e00e      	b.n	800e6ee <_Balloc+0x6e>
 800e6d0:	2221      	movs	r2, #33	@ 0x21
 800e6d2:	2104      	movs	r1, #4
 800e6d4:	4620      	mov	r0, r4
 800e6d6:	f000 fd7f 	bl	800f1d8 <_calloc_r>
 800e6da:	69e3      	ldr	r3, [r4, #28]
 800e6dc:	60f0      	str	r0, [r6, #12]
 800e6de:	68db      	ldr	r3, [r3, #12]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d1e4      	bne.n	800e6ae <_Balloc+0x2e>
 800e6e4:	2000      	movs	r0, #0
 800e6e6:	bd70      	pop	{r4, r5, r6, pc}
 800e6e8:	6802      	ldr	r2, [r0, #0]
 800e6ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e6f4:	e7f7      	b.n	800e6e6 <_Balloc+0x66>
 800e6f6:	bf00      	nop
 800e6f8:	0801097a 	.word	0x0801097a
 800e6fc:	080109fa 	.word	0x080109fa

0800e700 <_Bfree>:
 800e700:	b570      	push	{r4, r5, r6, lr}
 800e702:	69c6      	ldr	r6, [r0, #28]
 800e704:	4605      	mov	r5, r0
 800e706:	460c      	mov	r4, r1
 800e708:	b976      	cbnz	r6, 800e728 <_Bfree+0x28>
 800e70a:	2010      	movs	r0, #16
 800e70c:	f7ff ff02 	bl	800e514 <malloc>
 800e710:	4602      	mov	r2, r0
 800e712:	61e8      	str	r0, [r5, #28]
 800e714:	b920      	cbnz	r0, 800e720 <_Bfree+0x20>
 800e716:	4b09      	ldr	r3, [pc, #36]	@ (800e73c <_Bfree+0x3c>)
 800e718:	4809      	ldr	r0, [pc, #36]	@ (800e740 <_Bfree+0x40>)
 800e71a:	218f      	movs	r1, #143	@ 0x8f
 800e71c:	f000 fd3e 	bl	800f19c <__assert_func>
 800e720:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e724:	6006      	str	r6, [r0, #0]
 800e726:	60c6      	str	r6, [r0, #12]
 800e728:	b13c      	cbz	r4, 800e73a <_Bfree+0x3a>
 800e72a:	69eb      	ldr	r3, [r5, #28]
 800e72c:	6862      	ldr	r2, [r4, #4]
 800e72e:	68db      	ldr	r3, [r3, #12]
 800e730:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e734:	6021      	str	r1, [r4, #0]
 800e736:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e73a:	bd70      	pop	{r4, r5, r6, pc}
 800e73c:	0801097a 	.word	0x0801097a
 800e740:	080109fa 	.word	0x080109fa

0800e744 <__multadd>:
 800e744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e748:	690d      	ldr	r5, [r1, #16]
 800e74a:	4607      	mov	r7, r0
 800e74c:	460c      	mov	r4, r1
 800e74e:	461e      	mov	r6, r3
 800e750:	f101 0c14 	add.w	ip, r1, #20
 800e754:	2000      	movs	r0, #0
 800e756:	f8dc 3000 	ldr.w	r3, [ip]
 800e75a:	b299      	uxth	r1, r3
 800e75c:	fb02 6101 	mla	r1, r2, r1, r6
 800e760:	0c1e      	lsrs	r6, r3, #16
 800e762:	0c0b      	lsrs	r3, r1, #16
 800e764:	fb02 3306 	mla	r3, r2, r6, r3
 800e768:	b289      	uxth	r1, r1
 800e76a:	3001      	adds	r0, #1
 800e76c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e770:	4285      	cmp	r5, r0
 800e772:	f84c 1b04 	str.w	r1, [ip], #4
 800e776:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e77a:	dcec      	bgt.n	800e756 <__multadd+0x12>
 800e77c:	b30e      	cbz	r6, 800e7c2 <__multadd+0x7e>
 800e77e:	68a3      	ldr	r3, [r4, #8]
 800e780:	42ab      	cmp	r3, r5
 800e782:	dc19      	bgt.n	800e7b8 <__multadd+0x74>
 800e784:	6861      	ldr	r1, [r4, #4]
 800e786:	4638      	mov	r0, r7
 800e788:	3101      	adds	r1, #1
 800e78a:	f7ff ff79 	bl	800e680 <_Balloc>
 800e78e:	4680      	mov	r8, r0
 800e790:	b928      	cbnz	r0, 800e79e <__multadd+0x5a>
 800e792:	4602      	mov	r2, r0
 800e794:	4b0c      	ldr	r3, [pc, #48]	@ (800e7c8 <__multadd+0x84>)
 800e796:	480d      	ldr	r0, [pc, #52]	@ (800e7cc <__multadd+0x88>)
 800e798:	21ba      	movs	r1, #186	@ 0xba
 800e79a:	f000 fcff 	bl	800f19c <__assert_func>
 800e79e:	6922      	ldr	r2, [r4, #16]
 800e7a0:	3202      	adds	r2, #2
 800e7a2:	f104 010c 	add.w	r1, r4, #12
 800e7a6:	0092      	lsls	r2, r2, #2
 800e7a8:	300c      	adds	r0, #12
 800e7aa:	f7ff f800 	bl	800d7ae <memcpy>
 800e7ae:	4621      	mov	r1, r4
 800e7b0:	4638      	mov	r0, r7
 800e7b2:	f7ff ffa5 	bl	800e700 <_Bfree>
 800e7b6:	4644      	mov	r4, r8
 800e7b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e7bc:	3501      	adds	r5, #1
 800e7be:	615e      	str	r6, [r3, #20]
 800e7c0:	6125      	str	r5, [r4, #16]
 800e7c2:	4620      	mov	r0, r4
 800e7c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7c8:	080109e9 	.word	0x080109e9
 800e7cc:	080109fa 	.word	0x080109fa

0800e7d0 <__hi0bits>:
 800e7d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e7d4:	4603      	mov	r3, r0
 800e7d6:	bf36      	itet	cc
 800e7d8:	0403      	lslcc	r3, r0, #16
 800e7da:	2000      	movcs	r0, #0
 800e7dc:	2010      	movcc	r0, #16
 800e7de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e7e2:	bf3c      	itt	cc
 800e7e4:	021b      	lslcc	r3, r3, #8
 800e7e6:	3008      	addcc	r0, #8
 800e7e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e7ec:	bf3c      	itt	cc
 800e7ee:	011b      	lslcc	r3, r3, #4
 800e7f0:	3004      	addcc	r0, #4
 800e7f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e7f6:	bf3c      	itt	cc
 800e7f8:	009b      	lslcc	r3, r3, #2
 800e7fa:	3002      	addcc	r0, #2
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	db05      	blt.n	800e80c <__hi0bits+0x3c>
 800e800:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e804:	f100 0001 	add.w	r0, r0, #1
 800e808:	bf08      	it	eq
 800e80a:	2020      	moveq	r0, #32
 800e80c:	4770      	bx	lr

0800e80e <__lo0bits>:
 800e80e:	6803      	ldr	r3, [r0, #0]
 800e810:	4602      	mov	r2, r0
 800e812:	f013 0007 	ands.w	r0, r3, #7
 800e816:	d00b      	beq.n	800e830 <__lo0bits+0x22>
 800e818:	07d9      	lsls	r1, r3, #31
 800e81a:	d421      	bmi.n	800e860 <__lo0bits+0x52>
 800e81c:	0798      	lsls	r0, r3, #30
 800e81e:	bf49      	itett	mi
 800e820:	085b      	lsrmi	r3, r3, #1
 800e822:	089b      	lsrpl	r3, r3, #2
 800e824:	2001      	movmi	r0, #1
 800e826:	6013      	strmi	r3, [r2, #0]
 800e828:	bf5c      	itt	pl
 800e82a:	6013      	strpl	r3, [r2, #0]
 800e82c:	2002      	movpl	r0, #2
 800e82e:	4770      	bx	lr
 800e830:	b299      	uxth	r1, r3
 800e832:	b909      	cbnz	r1, 800e838 <__lo0bits+0x2a>
 800e834:	0c1b      	lsrs	r3, r3, #16
 800e836:	2010      	movs	r0, #16
 800e838:	b2d9      	uxtb	r1, r3
 800e83a:	b909      	cbnz	r1, 800e840 <__lo0bits+0x32>
 800e83c:	3008      	adds	r0, #8
 800e83e:	0a1b      	lsrs	r3, r3, #8
 800e840:	0719      	lsls	r1, r3, #28
 800e842:	bf04      	itt	eq
 800e844:	091b      	lsreq	r3, r3, #4
 800e846:	3004      	addeq	r0, #4
 800e848:	0799      	lsls	r1, r3, #30
 800e84a:	bf04      	itt	eq
 800e84c:	089b      	lsreq	r3, r3, #2
 800e84e:	3002      	addeq	r0, #2
 800e850:	07d9      	lsls	r1, r3, #31
 800e852:	d403      	bmi.n	800e85c <__lo0bits+0x4e>
 800e854:	085b      	lsrs	r3, r3, #1
 800e856:	f100 0001 	add.w	r0, r0, #1
 800e85a:	d003      	beq.n	800e864 <__lo0bits+0x56>
 800e85c:	6013      	str	r3, [r2, #0]
 800e85e:	4770      	bx	lr
 800e860:	2000      	movs	r0, #0
 800e862:	4770      	bx	lr
 800e864:	2020      	movs	r0, #32
 800e866:	4770      	bx	lr

0800e868 <__i2b>:
 800e868:	b510      	push	{r4, lr}
 800e86a:	460c      	mov	r4, r1
 800e86c:	2101      	movs	r1, #1
 800e86e:	f7ff ff07 	bl	800e680 <_Balloc>
 800e872:	4602      	mov	r2, r0
 800e874:	b928      	cbnz	r0, 800e882 <__i2b+0x1a>
 800e876:	4b05      	ldr	r3, [pc, #20]	@ (800e88c <__i2b+0x24>)
 800e878:	4805      	ldr	r0, [pc, #20]	@ (800e890 <__i2b+0x28>)
 800e87a:	f240 1145 	movw	r1, #325	@ 0x145
 800e87e:	f000 fc8d 	bl	800f19c <__assert_func>
 800e882:	2301      	movs	r3, #1
 800e884:	6144      	str	r4, [r0, #20]
 800e886:	6103      	str	r3, [r0, #16]
 800e888:	bd10      	pop	{r4, pc}
 800e88a:	bf00      	nop
 800e88c:	080109e9 	.word	0x080109e9
 800e890:	080109fa 	.word	0x080109fa

0800e894 <__multiply>:
 800e894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e898:	4617      	mov	r7, r2
 800e89a:	690a      	ldr	r2, [r1, #16]
 800e89c:	693b      	ldr	r3, [r7, #16]
 800e89e:	429a      	cmp	r2, r3
 800e8a0:	bfa8      	it	ge
 800e8a2:	463b      	movge	r3, r7
 800e8a4:	4689      	mov	r9, r1
 800e8a6:	bfa4      	itt	ge
 800e8a8:	460f      	movge	r7, r1
 800e8aa:	4699      	movge	r9, r3
 800e8ac:	693d      	ldr	r5, [r7, #16]
 800e8ae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e8b2:	68bb      	ldr	r3, [r7, #8]
 800e8b4:	6879      	ldr	r1, [r7, #4]
 800e8b6:	eb05 060a 	add.w	r6, r5, sl
 800e8ba:	42b3      	cmp	r3, r6
 800e8bc:	b085      	sub	sp, #20
 800e8be:	bfb8      	it	lt
 800e8c0:	3101      	addlt	r1, #1
 800e8c2:	f7ff fedd 	bl	800e680 <_Balloc>
 800e8c6:	b930      	cbnz	r0, 800e8d6 <__multiply+0x42>
 800e8c8:	4602      	mov	r2, r0
 800e8ca:	4b41      	ldr	r3, [pc, #260]	@ (800e9d0 <__multiply+0x13c>)
 800e8cc:	4841      	ldr	r0, [pc, #260]	@ (800e9d4 <__multiply+0x140>)
 800e8ce:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e8d2:	f000 fc63 	bl	800f19c <__assert_func>
 800e8d6:	f100 0414 	add.w	r4, r0, #20
 800e8da:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800e8de:	4623      	mov	r3, r4
 800e8e0:	2200      	movs	r2, #0
 800e8e2:	4573      	cmp	r3, lr
 800e8e4:	d320      	bcc.n	800e928 <__multiply+0x94>
 800e8e6:	f107 0814 	add.w	r8, r7, #20
 800e8ea:	f109 0114 	add.w	r1, r9, #20
 800e8ee:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800e8f2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800e8f6:	9302      	str	r3, [sp, #8]
 800e8f8:	1beb      	subs	r3, r5, r7
 800e8fa:	3b15      	subs	r3, #21
 800e8fc:	f023 0303 	bic.w	r3, r3, #3
 800e900:	3304      	adds	r3, #4
 800e902:	3715      	adds	r7, #21
 800e904:	42bd      	cmp	r5, r7
 800e906:	bf38      	it	cc
 800e908:	2304      	movcc	r3, #4
 800e90a:	9301      	str	r3, [sp, #4]
 800e90c:	9b02      	ldr	r3, [sp, #8]
 800e90e:	9103      	str	r1, [sp, #12]
 800e910:	428b      	cmp	r3, r1
 800e912:	d80c      	bhi.n	800e92e <__multiply+0x9a>
 800e914:	2e00      	cmp	r6, #0
 800e916:	dd03      	ble.n	800e920 <__multiply+0x8c>
 800e918:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d055      	beq.n	800e9cc <__multiply+0x138>
 800e920:	6106      	str	r6, [r0, #16]
 800e922:	b005      	add	sp, #20
 800e924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e928:	f843 2b04 	str.w	r2, [r3], #4
 800e92c:	e7d9      	b.n	800e8e2 <__multiply+0x4e>
 800e92e:	f8b1 a000 	ldrh.w	sl, [r1]
 800e932:	f1ba 0f00 	cmp.w	sl, #0
 800e936:	d01f      	beq.n	800e978 <__multiply+0xe4>
 800e938:	46c4      	mov	ip, r8
 800e93a:	46a1      	mov	r9, r4
 800e93c:	2700      	movs	r7, #0
 800e93e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e942:	f8d9 3000 	ldr.w	r3, [r9]
 800e946:	fa1f fb82 	uxth.w	fp, r2
 800e94a:	b29b      	uxth	r3, r3
 800e94c:	fb0a 330b 	mla	r3, sl, fp, r3
 800e950:	443b      	add	r3, r7
 800e952:	f8d9 7000 	ldr.w	r7, [r9]
 800e956:	0c12      	lsrs	r2, r2, #16
 800e958:	0c3f      	lsrs	r7, r7, #16
 800e95a:	fb0a 7202 	mla	r2, sl, r2, r7
 800e95e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800e962:	b29b      	uxth	r3, r3
 800e964:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e968:	4565      	cmp	r5, ip
 800e96a:	f849 3b04 	str.w	r3, [r9], #4
 800e96e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800e972:	d8e4      	bhi.n	800e93e <__multiply+0xaa>
 800e974:	9b01      	ldr	r3, [sp, #4]
 800e976:	50e7      	str	r7, [r4, r3]
 800e978:	9b03      	ldr	r3, [sp, #12]
 800e97a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e97e:	3104      	adds	r1, #4
 800e980:	f1b9 0f00 	cmp.w	r9, #0
 800e984:	d020      	beq.n	800e9c8 <__multiply+0x134>
 800e986:	6823      	ldr	r3, [r4, #0]
 800e988:	4647      	mov	r7, r8
 800e98a:	46a4      	mov	ip, r4
 800e98c:	f04f 0a00 	mov.w	sl, #0
 800e990:	f8b7 b000 	ldrh.w	fp, [r7]
 800e994:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800e998:	fb09 220b 	mla	r2, r9, fp, r2
 800e99c:	4452      	add	r2, sl
 800e99e:	b29b      	uxth	r3, r3
 800e9a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e9a4:	f84c 3b04 	str.w	r3, [ip], #4
 800e9a8:	f857 3b04 	ldr.w	r3, [r7], #4
 800e9ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e9b0:	f8bc 3000 	ldrh.w	r3, [ip]
 800e9b4:	fb09 330a 	mla	r3, r9, sl, r3
 800e9b8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800e9bc:	42bd      	cmp	r5, r7
 800e9be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e9c2:	d8e5      	bhi.n	800e990 <__multiply+0xfc>
 800e9c4:	9a01      	ldr	r2, [sp, #4]
 800e9c6:	50a3      	str	r3, [r4, r2]
 800e9c8:	3404      	adds	r4, #4
 800e9ca:	e79f      	b.n	800e90c <__multiply+0x78>
 800e9cc:	3e01      	subs	r6, #1
 800e9ce:	e7a1      	b.n	800e914 <__multiply+0x80>
 800e9d0:	080109e9 	.word	0x080109e9
 800e9d4:	080109fa 	.word	0x080109fa

0800e9d8 <__pow5mult>:
 800e9d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9dc:	4615      	mov	r5, r2
 800e9de:	f012 0203 	ands.w	r2, r2, #3
 800e9e2:	4607      	mov	r7, r0
 800e9e4:	460e      	mov	r6, r1
 800e9e6:	d007      	beq.n	800e9f8 <__pow5mult+0x20>
 800e9e8:	4c25      	ldr	r4, [pc, #148]	@ (800ea80 <__pow5mult+0xa8>)
 800e9ea:	3a01      	subs	r2, #1
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e9f2:	f7ff fea7 	bl	800e744 <__multadd>
 800e9f6:	4606      	mov	r6, r0
 800e9f8:	10ad      	asrs	r5, r5, #2
 800e9fa:	d03d      	beq.n	800ea78 <__pow5mult+0xa0>
 800e9fc:	69fc      	ldr	r4, [r7, #28]
 800e9fe:	b97c      	cbnz	r4, 800ea20 <__pow5mult+0x48>
 800ea00:	2010      	movs	r0, #16
 800ea02:	f7ff fd87 	bl	800e514 <malloc>
 800ea06:	4602      	mov	r2, r0
 800ea08:	61f8      	str	r0, [r7, #28]
 800ea0a:	b928      	cbnz	r0, 800ea18 <__pow5mult+0x40>
 800ea0c:	4b1d      	ldr	r3, [pc, #116]	@ (800ea84 <__pow5mult+0xac>)
 800ea0e:	481e      	ldr	r0, [pc, #120]	@ (800ea88 <__pow5mult+0xb0>)
 800ea10:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ea14:	f000 fbc2 	bl	800f19c <__assert_func>
 800ea18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ea1c:	6004      	str	r4, [r0, #0]
 800ea1e:	60c4      	str	r4, [r0, #12]
 800ea20:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ea24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ea28:	b94c      	cbnz	r4, 800ea3e <__pow5mult+0x66>
 800ea2a:	f240 2171 	movw	r1, #625	@ 0x271
 800ea2e:	4638      	mov	r0, r7
 800ea30:	f7ff ff1a 	bl	800e868 <__i2b>
 800ea34:	2300      	movs	r3, #0
 800ea36:	f8c8 0008 	str.w	r0, [r8, #8]
 800ea3a:	4604      	mov	r4, r0
 800ea3c:	6003      	str	r3, [r0, #0]
 800ea3e:	f04f 0900 	mov.w	r9, #0
 800ea42:	07eb      	lsls	r3, r5, #31
 800ea44:	d50a      	bpl.n	800ea5c <__pow5mult+0x84>
 800ea46:	4631      	mov	r1, r6
 800ea48:	4622      	mov	r2, r4
 800ea4a:	4638      	mov	r0, r7
 800ea4c:	f7ff ff22 	bl	800e894 <__multiply>
 800ea50:	4631      	mov	r1, r6
 800ea52:	4680      	mov	r8, r0
 800ea54:	4638      	mov	r0, r7
 800ea56:	f7ff fe53 	bl	800e700 <_Bfree>
 800ea5a:	4646      	mov	r6, r8
 800ea5c:	106d      	asrs	r5, r5, #1
 800ea5e:	d00b      	beq.n	800ea78 <__pow5mult+0xa0>
 800ea60:	6820      	ldr	r0, [r4, #0]
 800ea62:	b938      	cbnz	r0, 800ea74 <__pow5mult+0x9c>
 800ea64:	4622      	mov	r2, r4
 800ea66:	4621      	mov	r1, r4
 800ea68:	4638      	mov	r0, r7
 800ea6a:	f7ff ff13 	bl	800e894 <__multiply>
 800ea6e:	6020      	str	r0, [r4, #0]
 800ea70:	f8c0 9000 	str.w	r9, [r0]
 800ea74:	4604      	mov	r4, r0
 800ea76:	e7e4      	b.n	800ea42 <__pow5mult+0x6a>
 800ea78:	4630      	mov	r0, r6
 800ea7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea7e:	bf00      	nop
 800ea80:	08010aac 	.word	0x08010aac
 800ea84:	0801097a 	.word	0x0801097a
 800ea88:	080109fa 	.word	0x080109fa

0800ea8c <__lshift>:
 800ea8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea90:	460c      	mov	r4, r1
 800ea92:	6849      	ldr	r1, [r1, #4]
 800ea94:	6923      	ldr	r3, [r4, #16]
 800ea96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ea9a:	68a3      	ldr	r3, [r4, #8]
 800ea9c:	4607      	mov	r7, r0
 800ea9e:	4691      	mov	r9, r2
 800eaa0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800eaa4:	f108 0601 	add.w	r6, r8, #1
 800eaa8:	42b3      	cmp	r3, r6
 800eaaa:	db0b      	blt.n	800eac4 <__lshift+0x38>
 800eaac:	4638      	mov	r0, r7
 800eaae:	f7ff fde7 	bl	800e680 <_Balloc>
 800eab2:	4605      	mov	r5, r0
 800eab4:	b948      	cbnz	r0, 800eaca <__lshift+0x3e>
 800eab6:	4602      	mov	r2, r0
 800eab8:	4b28      	ldr	r3, [pc, #160]	@ (800eb5c <__lshift+0xd0>)
 800eaba:	4829      	ldr	r0, [pc, #164]	@ (800eb60 <__lshift+0xd4>)
 800eabc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800eac0:	f000 fb6c 	bl	800f19c <__assert_func>
 800eac4:	3101      	adds	r1, #1
 800eac6:	005b      	lsls	r3, r3, #1
 800eac8:	e7ee      	b.n	800eaa8 <__lshift+0x1c>
 800eaca:	2300      	movs	r3, #0
 800eacc:	f100 0114 	add.w	r1, r0, #20
 800ead0:	f100 0210 	add.w	r2, r0, #16
 800ead4:	4618      	mov	r0, r3
 800ead6:	4553      	cmp	r3, sl
 800ead8:	db33      	blt.n	800eb42 <__lshift+0xb6>
 800eada:	6920      	ldr	r0, [r4, #16]
 800eadc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800eae0:	f104 0314 	add.w	r3, r4, #20
 800eae4:	f019 091f 	ands.w	r9, r9, #31
 800eae8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800eaec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800eaf0:	d02b      	beq.n	800eb4a <__lshift+0xbe>
 800eaf2:	f1c9 0e20 	rsb	lr, r9, #32
 800eaf6:	468a      	mov	sl, r1
 800eaf8:	2200      	movs	r2, #0
 800eafa:	6818      	ldr	r0, [r3, #0]
 800eafc:	fa00 f009 	lsl.w	r0, r0, r9
 800eb00:	4310      	orrs	r0, r2
 800eb02:	f84a 0b04 	str.w	r0, [sl], #4
 800eb06:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb0a:	459c      	cmp	ip, r3
 800eb0c:	fa22 f20e 	lsr.w	r2, r2, lr
 800eb10:	d8f3      	bhi.n	800eafa <__lshift+0x6e>
 800eb12:	ebac 0304 	sub.w	r3, ip, r4
 800eb16:	3b15      	subs	r3, #21
 800eb18:	f023 0303 	bic.w	r3, r3, #3
 800eb1c:	3304      	adds	r3, #4
 800eb1e:	f104 0015 	add.w	r0, r4, #21
 800eb22:	4560      	cmp	r0, ip
 800eb24:	bf88      	it	hi
 800eb26:	2304      	movhi	r3, #4
 800eb28:	50ca      	str	r2, [r1, r3]
 800eb2a:	b10a      	cbz	r2, 800eb30 <__lshift+0xa4>
 800eb2c:	f108 0602 	add.w	r6, r8, #2
 800eb30:	3e01      	subs	r6, #1
 800eb32:	4638      	mov	r0, r7
 800eb34:	612e      	str	r6, [r5, #16]
 800eb36:	4621      	mov	r1, r4
 800eb38:	f7ff fde2 	bl	800e700 <_Bfree>
 800eb3c:	4628      	mov	r0, r5
 800eb3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb42:	f842 0f04 	str.w	r0, [r2, #4]!
 800eb46:	3301      	adds	r3, #1
 800eb48:	e7c5      	b.n	800ead6 <__lshift+0x4a>
 800eb4a:	3904      	subs	r1, #4
 800eb4c:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb50:	f841 2f04 	str.w	r2, [r1, #4]!
 800eb54:	459c      	cmp	ip, r3
 800eb56:	d8f9      	bhi.n	800eb4c <__lshift+0xc0>
 800eb58:	e7ea      	b.n	800eb30 <__lshift+0xa4>
 800eb5a:	bf00      	nop
 800eb5c:	080109e9 	.word	0x080109e9
 800eb60:	080109fa 	.word	0x080109fa

0800eb64 <__mcmp>:
 800eb64:	690a      	ldr	r2, [r1, #16]
 800eb66:	4603      	mov	r3, r0
 800eb68:	6900      	ldr	r0, [r0, #16]
 800eb6a:	1a80      	subs	r0, r0, r2
 800eb6c:	b530      	push	{r4, r5, lr}
 800eb6e:	d10e      	bne.n	800eb8e <__mcmp+0x2a>
 800eb70:	3314      	adds	r3, #20
 800eb72:	3114      	adds	r1, #20
 800eb74:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800eb78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800eb7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800eb80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800eb84:	4295      	cmp	r5, r2
 800eb86:	d003      	beq.n	800eb90 <__mcmp+0x2c>
 800eb88:	d205      	bcs.n	800eb96 <__mcmp+0x32>
 800eb8a:	f04f 30ff 	mov.w	r0, #4294967295
 800eb8e:	bd30      	pop	{r4, r5, pc}
 800eb90:	42a3      	cmp	r3, r4
 800eb92:	d3f3      	bcc.n	800eb7c <__mcmp+0x18>
 800eb94:	e7fb      	b.n	800eb8e <__mcmp+0x2a>
 800eb96:	2001      	movs	r0, #1
 800eb98:	e7f9      	b.n	800eb8e <__mcmp+0x2a>
	...

0800eb9c <__mdiff>:
 800eb9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eba0:	4689      	mov	r9, r1
 800eba2:	4606      	mov	r6, r0
 800eba4:	4611      	mov	r1, r2
 800eba6:	4648      	mov	r0, r9
 800eba8:	4614      	mov	r4, r2
 800ebaa:	f7ff ffdb 	bl	800eb64 <__mcmp>
 800ebae:	1e05      	subs	r5, r0, #0
 800ebb0:	d112      	bne.n	800ebd8 <__mdiff+0x3c>
 800ebb2:	4629      	mov	r1, r5
 800ebb4:	4630      	mov	r0, r6
 800ebb6:	f7ff fd63 	bl	800e680 <_Balloc>
 800ebba:	4602      	mov	r2, r0
 800ebbc:	b928      	cbnz	r0, 800ebca <__mdiff+0x2e>
 800ebbe:	4b3f      	ldr	r3, [pc, #252]	@ (800ecbc <__mdiff+0x120>)
 800ebc0:	f240 2137 	movw	r1, #567	@ 0x237
 800ebc4:	483e      	ldr	r0, [pc, #248]	@ (800ecc0 <__mdiff+0x124>)
 800ebc6:	f000 fae9 	bl	800f19c <__assert_func>
 800ebca:	2301      	movs	r3, #1
 800ebcc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ebd0:	4610      	mov	r0, r2
 800ebd2:	b003      	add	sp, #12
 800ebd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebd8:	bfbc      	itt	lt
 800ebda:	464b      	movlt	r3, r9
 800ebdc:	46a1      	movlt	r9, r4
 800ebde:	4630      	mov	r0, r6
 800ebe0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ebe4:	bfba      	itte	lt
 800ebe6:	461c      	movlt	r4, r3
 800ebe8:	2501      	movlt	r5, #1
 800ebea:	2500      	movge	r5, #0
 800ebec:	f7ff fd48 	bl	800e680 <_Balloc>
 800ebf0:	4602      	mov	r2, r0
 800ebf2:	b918      	cbnz	r0, 800ebfc <__mdiff+0x60>
 800ebf4:	4b31      	ldr	r3, [pc, #196]	@ (800ecbc <__mdiff+0x120>)
 800ebf6:	f240 2145 	movw	r1, #581	@ 0x245
 800ebfa:	e7e3      	b.n	800ebc4 <__mdiff+0x28>
 800ebfc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ec00:	6926      	ldr	r6, [r4, #16]
 800ec02:	60c5      	str	r5, [r0, #12]
 800ec04:	f109 0310 	add.w	r3, r9, #16
 800ec08:	f109 0514 	add.w	r5, r9, #20
 800ec0c:	f104 0e14 	add.w	lr, r4, #20
 800ec10:	f100 0b14 	add.w	fp, r0, #20
 800ec14:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ec18:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ec1c:	9301      	str	r3, [sp, #4]
 800ec1e:	46d9      	mov	r9, fp
 800ec20:	f04f 0c00 	mov.w	ip, #0
 800ec24:	9b01      	ldr	r3, [sp, #4]
 800ec26:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ec2a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ec2e:	9301      	str	r3, [sp, #4]
 800ec30:	fa1f f38a 	uxth.w	r3, sl
 800ec34:	4619      	mov	r1, r3
 800ec36:	b283      	uxth	r3, r0
 800ec38:	1acb      	subs	r3, r1, r3
 800ec3a:	0c00      	lsrs	r0, r0, #16
 800ec3c:	4463      	add	r3, ip
 800ec3e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ec42:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ec46:	b29b      	uxth	r3, r3
 800ec48:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ec4c:	4576      	cmp	r6, lr
 800ec4e:	f849 3b04 	str.w	r3, [r9], #4
 800ec52:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ec56:	d8e5      	bhi.n	800ec24 <__mdiff+0x88>
 800ec58:	1b33      	subs	r3, r6, r4
 800ec5a:	3b15      	subs	r3, #21
 800ec5c:	f023 0303 	bic.w	r3, r3, #3
 800ec60:	3415      	adds	r4, #21
 800ec62:	3304      	adds	r3, #4
 800ec64:	42a6      	cmp	r6, r4
 800ec66:	bf38      	it	cc
 800ec68:	2304      	movcc	r3, #4
 800ec6a:	441d      	add	r5, r3
 800ec6c:	445b      	add	r3, fp
 800ec6e:	461e      	mov	r6, r3
 800ec70:	462c      	mov	r4, r5
 800ec72:	4544      	cmp	r4, r8
 800ec74:	d30e      	bcc.n	800ec94 <__mdiff+0xf8>
 800ec76:	f108 0103 	add.w	r1, r8, #3
 800ec7a:	1b49      	subs	r1, r1, r5
 800ec7c:	f021 0103 	bic.w	r1, r1, #3
 800ec80:	3d03      	subs	r5, #3
 800ec82:	45a8      	cmp	r8, r5
 800ec84:	bf38      	it	cc
 800ec86:	2100      	movcc	r1, #0
 800ec88:	440b      	add	r3, r1
 800ec8a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ec8e:	b191      	cbz	r1, 800ecb6 <__mdiff+0x11a>
 800ec90:	6117      	str	r7, [r2, #16]
 800ec92:	e79d      	b.n	800ebd0 <__mdiff+0x34>
 800ec94:	f854 1b04 	ldr.w	r1, [r4], #4
 800ec98:	46e6      	mov	lr, ip
 800ec9a:	0c08      	lsrs	r0, r1, #16
 800ec9c:	fa1c fc81 	uxtah	ip, ip, r1
 800eca0:	4471      	add	r1, lr
 800eca2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800eca6:	b289      	uxth	r1, r1
 800eca8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ecac:	f846 1b04 	str.w	r1, [r6], #4
 800ecb0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ecb4:	e7dd      	b.n	800ec72 <__mdiff+0xd6>
 800ecb6:	3f01      	subs	r7, #1
 800ecb8:	e7e7      	b.n	800ec8a <__mdiff+0xee>
 800ecba:	bf00      	nop
 800ecbc:	080109e9 	.word	0x080109e9
 800ecc0:	080109fa 	.word	0x080109fa

0800ecc4 <__d2b>:
 800ecc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ecc8:	460f      	mov	r7, r1
 800ecca:	2101      	movs	r1, #1
 800eccc:	ec59 8b10 	vmov	r8, r9, d0
 800ecd0:	4616      	mov	r6, r2
 800ecd2:	f7ff fcd5 	bl	800e680 <_Balloc>
 800ecd6:	4604      	mov	r4, r0
 800ecd8:	b930      	cbnz	r0, 800ece8 <__d2b+0x24>
 800ecda:	4602      	mov	r2, r0
 800ecdc:	4b23      	ldr	r3, [pc, #140]	@ (800ed6c <__d2b+0xa8>)
 800ecde:	4824      	ldr	r0, [pc, #144]	@ (800ed70 <__d2b+0xac>)
 800ece0:	f240 310f 	movw	r1, #783	@ 0x30f
 800ece4:	f000 fa5a 	bl	800f19c <__assert_func>
 800ece8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ecec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ecf0:	b10d      	cbz	r5, 800ecf6 <__d2b+0x32>
 800ecf2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ecf6:	9301      	str	r3, [sp, #4]
 800ecf8:	f1b8 0300 	subs.w	r3, r8, #0
 800ecfc:	d023      	beq.n	800ed46 <__d2b+0x82>
 800ecfe:	4668      	mov	r0, sp
 800ed00:	9300      	str	r3, [sp, #0]
 800ed02:	f7ff fd84 	bl	800e80e <__lo0bits>
 800ed06:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ed0a:	b1d0      	cbz	r0, 800ed42 <__d2b+0x7e>
 800ed0c:	f1c0 0320 	rsb	r3, r0, #32
 800ed10:	fa02 f303 	lsl.w	r3, r2, r3
 800ed14:	430b      	orrs	r3, r1
 800ed16:	40c2      	lsrs	r2, r0
 800ed18:	6163      	str	r3, [r4, #20]
 800ed1a:	9201      	str	r2, [sp, #4]
 800ed1c:	9b01      	ldr	r3, [sp, #4]
 800ed1e:	61a3      	str	r3, [r4, #24]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	bf0c      	ite	eq
 800ed24:	2201      	moveq	r2, #1
 800ed26:	2202      	movne	r2, #2
 800ed28:	6122      	str	r2, [r4, #16]
 800ed2a:	b1a5      	cbz	r5, 800ed56 <__d2b+0x92>
 800ed2c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ed30:	4405      	add	r5, r0
 800ed32:	603d      	str	r5, [r7, #0]
 800ed34:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ed38:	6030      	str	r0, [r6, #0]
 800ed3a:	4620      	mov	r0, r4
 800ed3c:	b003      	add	sp, #12
 800ed3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed42:	6161      	str	r1, [r4, #20]
 800ed44:	e7ea      	b.n	800ed1c <__d2b+0x58>
 800ed46:	a801      	add	r0, sp, #4
 800ed48:	f7ff fd61 	bl	800e80e <__lo0bits>
 800ed4c:	9b01      	ldr	r3, [sp, #4]
 800ed4e:	6163      	str	r3, [r4, #20]
 800ed50:	3020      	adds	r0, #32
 800ed52:	2201      	movs	r2, #1
 800ed54:	e7e8      	b.n	800ed28 <__d2b+0x64>
 800ed56:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ed5a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ed5e:	6038      	str	r0, [r7, #0]
 800ed60:	6918      	ldr	r0, [r3, #16]
 800ed62:	f7ff fd35 	bl	800e7d0 <__hi0bits>
 800ed66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ed6a:	e7e5      	b.n	800ed38 <__d2b+0x74>
 800ed6c:	080109e9 	.word	0x080109e9
 800ed70:	080109fa 	.word	0x080109fa

0800ed74 <__ssputs_r>:
 800ed74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed78:	688e      	ldr	r6, [r1, #8]
 800ed7a:	461f      	mov	r7, r3
 800ed7c:	42be      	cmp	r6, r7
 800ed7e:	680b      	ldr	r3, [r1, #0]
 800ed80:	4682      	mov	sl, r0
 800ed82:	460c      	mov	r4, r1
 800ed84:	4690      	mov	r8, r2
 800ed86:	d82d      	bhi.n	800ede4 <__ssputs_r+0x70>
 800ed88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ed8c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ed90:	d026      	beq.n	800ede0 <__ssputs_r+0x6c>
 800ed92:	6965      	ldr	r5, [r4, #20]
 800ed94:	6909      	ldr	r1, [r1, #16]
 800ed96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ed9a:	eba3 0901 	sub.w	r9, r3, r1
 800ed9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eda2:	1c7b      	adds	r3, r7, #1
 800eda4:	444b      	add	r3, r9
 800eda6:	106d      	asrs	r5, r5, #1
 800eda8:	429d      	cmp	r5, r3
 800edaa:	bf38      	it	cc
 800edac:	461d      	movcc	r5, r3
 800edae:	0553      	lsls	r3, r2, #21
 800edb0:	d527      	bpl.n	800ee02 <__ssputs_r+0x8e>
 800edb2:	4629      	mov	r1, r5
 800edb4:	f7ff fbd8 	bl	800e568 <_malloc_r>
 800edb8:	4606      	mov	r6, r0
 800edba:	b360      	cbz	r0, 800ee16 <__ssputs_r+0xa2>
 800edbc:	6921      	ldr	r1, [r4, #16]
 800edbe:	464a      	mov	r2, r9
 800edc0:	f7fe fcf5 	bl	800d7ae <memcpy>
 800edc4:	89a3      	ldrh	r3, [r4, #12]
 800edc6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800edca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800edce:	81a3      	strh	r3, [r4, #12]
 800edd0:	6126      	str	r6, [r4, #16]
 800edd2:	6165      	str	r5, [r4, #20]
 800edd4:	444e      	add	r6, r9
 800edd6:	eba5 0509 	sub.w	r5, r5, r9
 800edda:	6026      	str	r6, [r4, #0]
 800eddc:	60a5      	str	r5, [r4, #8]
 800edde:	463e      	mov	r6, r7
 800ede0:	42be      	cmp	r6, r7
 800ede2:	d900      	bls.n	800ede6 <__ssputs_r+0x72>
 800ede4:	463e      	mov	r6, r7
 800ede6:	6820      	ldr	r0, [r4, #0]
 800ede8:	4632      	mov	r2, r6
 800edea:	4641      	mov	r1, r8
 800edec:	f7fe fc39 	bl	800d662 <memmove>
 800edf0:	68a3      	ldr	r3, [r4, #8]
 800edf2:	1b9b      	subs	r3, r3, r6
 800edf4:	60a3      	str	r3, [r4, #8]
 800edf6:	6823      	ldr	r3, [r4, #0]
 800edf8:	4433      	add	r3, r6
 800edfa:	6023      	str	r3, [r4, #0]
 800edfc:	2000      	movs	r0, #0
 800edfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee02:	462a      	mov	r2, r5
 800ee04:	f000 fa0e 	bl	800f224 <_realloc_r>
 800ee08:	4606      	mov	r6, r0
 800ee0a:	2800      	cmp	r0, #0
 800ee0c:	d1e0      	bne.n	800edd0 <__ssputs_r+0x5c>
 800ee0e:	6921      	ldr	r1, [r4, #16]
 800ee10:	4650      	mov	r0, sl
 800ee12:	f7ff fb35 	bl	800e480 <_free_r>
 800ee16:	230c      	movs	r3, #12
 800ee18:	f8ca 3000 	str.w	r3, [sl]
 800ee1c:	89a3      	ldrh	r3, [r4, #12]
 800ee1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee22:	81a3      	strh	r3, [r4, #12]
 800ee24:	f04f 30ff 	mov.w	r0, #4294967295
 800ee28:	e7e9      	b.n	800edfe <__ssputs_r+0x8a>
	...

0800ee2c <_svfiprintf_r>:
 800ee2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee30:	4698      	mov	r8, r3
 800ee32:	898b      	ldrh	r3, [r1, #12]
 800ee34:	061b      	lsls	r3, r3, #24
 800ee36:	b09d      	sub	sp, #116	@ 0x74
 800ee38:	4607      	mov	r7, r0
 800ee3a:	460d      	mov	r5, r1
 800ee3c:	4614      	mov	r4, r2
 800ee3e:	d510      	bpl.n	800ee62 <_svfiprintf_r+0x36>
 800ee40:	690b      	ldr	r3, [r1, #16]
 800ee42:	b973      	cbnz	r3, 800ee62 <_svfiprintf_r+0x36>
 800ee44:	2140      	movs	r1, #64	@ 0x40
 800ee46:	f7ff fb8f 	bl	800e568 <_malloc_r>
 800ee4a:	6028      	str	r0, [r5, #0]
 800ee4c:	6128      	str	r0, [r5, #16]
 800ee4e:	b930      	cbnz	r0, 800ee5e <_svfiprintf_r+0x32>
 800ee50:	230c      	movs	r3, #12
 800ee52:	603b      	str	r3, [r7, #0]
 800ee54:	f04f 30ff 	mov.w	r0, #4294967295
 800ee58:	b01d      	add	sp, #116	@ 0x74
 800ee5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee5e:	2340      	movs	r3, #64	@ 0x40
 800ee60:	616b      	str	r3, [r5, #20]
 800ee62:	2300      	movs	r3, #0
 800ee64:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee66:	2320      	movs	r3, #32
 800ee68:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ee6c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee70:	2330      	movs	r3, #48	@ 0x30
 800ee72:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f010 <_svfiprintf_r+0x1e4>
 800ee76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ee7a:	f04f 0901 	mov.w	r9, #1
 800ee7e:	4623      	mov	r3, r4
 800ee80:	469a      	mov	sl, r3
 800ee82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee86:	b10a      	cbz	r2, 800ee8c <_svfiprintf_r+0x60>
 800ee88:	2a25      	cmp	r2, #37	@ 0x25
 800ee8a:	d1f9      	bne.n	800ee80 <_svfiprintf_r+0x54>
 800ee8c:	ebba 0b04 	subs.w	fp, sl, r4
 800ee90:	d00b      	beq.n	800eeaa <_svfiprintf_r+0x7e>
 800ee92:	465b      	mov	r3, fp
 800ee94:	4622      	mov	r2, r4
 800ee96:	4629      	mov	r1, r5
 800ee98:	4638      	mov	r0, r7
 800ee9a:	f7ff ff6b 	bl	800ed74 <__ssputs_r>
 800ee9e:	3001      	adds	r0, #1
 800eea0:	f000 80a7 	beq.w	800eff2 <_svfiprintf_r+0x1c6>
 800eea4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eea6:	445a      	add	r2, fp
 800eea8:	9209      	str	r2, [sp, #36]	@ 0x24
 800eeaa:	f89a 3000 	ldrb.w	r3, [sl]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	f000 809f 	beq.w	800eff2 <_svfiprintf_r+0x1c6>
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	f04f 32ff 	mov.w	r2, #4294967295
 800eeba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eebe:	f10a 0a01 	add.w	sl, sl, #1
 800eec2:	9304      	str	r3, [sp, #16]
 800eec4:	9307      	str	r3, [sp, #28]
 800eec6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eeca:	931a      	str	r3, [sp, #104]	@ 0x68
 800eecc:	4654      	mov	r4, sl
 800eece:	2205      	movs	r2, #5
 800eed0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eed4:	484e      	ldr	r0, [pc, #312]	@ (800f010 <_svfiprintf_r+0x1e4>)
 800eed6:	f7f1 f98b 	bl	80001f0 <memchr>
 800eeda:	9a04      	ldr	r2, [sp, #16]
 800eedc:	b9d8      	cbnz	r0, 800ef16 <_svfiprintf_r+0xea>
 800eede:	06d0      	lsls	r0, r2, #27
 800eee0:	bf44      	itt	mi
 800eee2:	2320      	movmi	r3, #32
 800eee4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eee8:	0711      	lsls	r1, r2, #28
 800eeea:	bf44      	itt	mi
 800eeec:	232b      	movmi	r3, #43	@ 0x2b
 800eeee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eef2:	f89a 3000 	ldrb.w	r3, [sl]
 800eef6:	2b2a      	cmp	r3, #42	@ 0x2a
 800eef8:	d015      	beq.n	800ef26 <_svfiprintf_r+0xfa>
 800eefa:	9a07      	ldr	r2, [sp, #28]
 800eefc:	4654      	mov	r4, sl
 800eefe:	2000      	movs	r0, #0
 800ef00:	f04f 0c0a 	mov.w	ip, #10
 800ef04:	4621      	mov	r1, r4
 800ef06:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef0a:	3b30      	subs	r3, #48	@ 0x30
 800ef0c:	2b09      	cmp	r3, #9
 800ef0e:	d94b      	bls.n	800efa8 <_svfiprintf_r+0x17c>
 800ef10:	b1b0      	cbz	r0, 800ef40 <_svfiprintf_r+0x114>
 800ef12:	9207      	str	r2, [sp, #28]
 800ef14:	e014      	b.n	800ef40 <_svfiprintf_r+0x114>
 800ef16:	eba0 0308 	sub.w	r3, r0, r8
 800ef1a:	fa09 f303 	lsl.w	r3, r9, r3
 800ef1e:	4313      	orrs	r3, r2
 800ef20:	9304      	str	r3, [sp, #16]
 800ef22:	46a2      	mov	sl, r4
 800ef24:	e7d2      	b.n	800eecc <_svfiprintf_r+0xa0>
 800ef26:	9b03      	ldr	r3, [sp, #12]
 800ef28:	1d19      	adds	r1, r3, #4
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	9103      	str	r1, [sp, #12]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	bfbb      	ittet	lt
 800ef32:	425b      	neglt	r3, r3
 800ef34:	f042 0202 	orrlt.w	r2, r2, #2
 800ef38:	9307      	strge	r3, [sp, #28]
 800ef3a:	9307      	strlt	r3, [sp, #28]
 800ef3c:	bfb8      	it	lt
 800ef3e:	9204      	strlt	r2, [sp, #16]
 800ef40:	7823      	ldrb	r3, [r4, #0]
 800ef42:	2b2e      	cmp	r3, #46	@ 0x2e
 800ef44:	d10a      	bne.n	800ef5c <_svfiprintf_r+0x130>
 800ef46:	7863      	ldrb	r3, [r4, #1]
 800ef48:	2b2a      	cmp	r3, #42	@ 0x2a
 800ef4a:	d132      	bne.n	800efb2 <_svfiprintf_r+0x186>
 800ef4c:	9b03      	ldr	r3, [sp, #12]
 800ef4e:	1d1a      	adds	r2, r3, #4
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	9203      	str	r2, [sp, #12]
 800ef54:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ef58:	3402      	adds	r4, #2
 800ef5a:	9305      	str	r3, [sp, #20]
 800ef5c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f020 <_svfiprintf_r+0x1f4>
 800ef60:	7821      	ldrb	r1, [r4, #0]
 800ef62:	2203      	movs	r2, #3
 800ef64:	4650      	mov	r0, sl
 800ef66:	f7f1 f943 	bl	80001f0 <memchr>
 800ef6a:	b138      	cbz	r0, 800ef7c <_svfiprintf_r+0x150>
 800ef6c:	9b04      	ldr	r3, [sp, #16]
 800ef6e:	eba0 000a 	sub.w	r0, r0, sl
 800ef72:	2240      	movs	r2, #64	@ 0x40
 800ef74:	4082      	lsls	r2, r0
 800ef76:	4313      	orrs	r3, r2
 800ef78:	3401      	adds	r4, #1
 800ef7a:	9304      	str	r3, [sp, #16]
 800ef7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef80:	4824      	ldr	r0, [pc, #144]	@ (800f014 <_svfiprintf_r+0x1e8>)
 800ef82:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ef86:	2206      	movs	r2, #6
 800ef88:	f7f1 f932 	bl	80001f0 <memchr>
 800ef8c:	2800      	cmp	r0, #0
 800ef8e:	d036      	beq.n	800effe <_svfiprintf_r+0x1d2>
 800ef90:	4b21      	ldr	r3, [pc, #132]	@ (800f018 <_svfiprintf_r+0x1ec>)
 800ef92:	bb1b      	cbnz	r3, 800efdc <_svfiprintf_r+0x1b0>
 800ef94:	9b03      	ldr	r3, [sp, #12]
 800ef96:	3307      	adds	r3, #7
 800ef98:	f023 0307 	bic.w	r3, r3, #7
 800ef9c:	3308      	adds	r3, #8
 800ef9e:	9303      	str	r3, [sp, #12]
 800efa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800efa2:	4433      	add	r3, r6
 800efa4:	9309      	str	r3, [sp, #36]	@ 0x24
 800efa6:	e76a      	b.n	800ee7e <_svfiprintf_r+0x52>
 800efa8:	fb0c 3202 	mla	r2, ip, r2, r3
 800efac:	460c      	mov	r4, r1
 800efae:	2001      	movs	r0, #1
 800efb0:	e7a8      	b.n	800ef04 <_svfiprintf_r+0xd8>
 800efb2:	2300      	movs	r3, #0
 800efb4:	3401      	adds	r4, #1
 800efb6:	9305      	str	r3, [sp, #20]
 800efb8:	4619      	mov	r1, r3
 800efba:	f04f 0c0a 	mov.w	ip, #10
 800efbe:	4620      	mov	r0, r4
 800efc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800efc4:	3a30      	subs	r2, #48	@ 0x30
 800efc6:	2a09      	cmp	r2, #9
 800efc8:	d903      	bls.n	800efd2 <_svfiprintf_r+0x1a6>
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d0c6      	beq.n	800ef5c <_svfiprintf_r+0x130>
 800efce:	9105      	str	r1, [sp, #20]
 800efd0:	e7c4      	b.n	800ef5c <_svfiprintf_r+0x130>
 800efd2:	fb0c 2101 	mla	r1, ip, r1, r2
 800efd6:	4604      	mov	r4, r0
 800efd8:	2301      	movs	r3, #1
 800efda:	e7f0      	b.n	800efbe <_svfiprintf_r+0x192>
 800efdc:	ab03      	add	r3, sp, #12
 800efde:	9300      	str	r3, [sp, #0]
 800efe0:	462a      	mov	r2, r5
 800efe2:	4b0e      	ldr	r3, [pc, #56]	@ (800f01c <_svfiprintf_r+0x1f0>)
 800efe4:	a904      	add	r1, sp, #16
 800efe6:	4638      	mov	r0, r7
 800efe8:	f7fd fe28 	bl	800cc3c <_printf_float>
 800efec:	1c42      	adds	r2, r0, #1
 800efee:	4606      	mov	r6, r0
 800eff0:	d1d6      	bne.n	800efa0 <_svfiprintf_r+0x174>
 800eff2:	89ab      	ldrh	r3, [r5, #12]
 800eff4:	065b      	lsls	r3, r3, #25
 800eff6:	f53f af2d 	bmi.w	800ee54 <_svfiprintf_r+0x28>
 800effa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800effc:	e72c      	b.n	800ee58 <_svfiprintf_r+0x2c>
 800effe:	ab03      	add	r3, sp, #12
 800f000:	9300      	str	r3, [sp, #0]
 800f002:	462a      	mov	r2, r5
 800f004:	4b05      	ldr	r3, [pc, #20]	@ (800f01c <_svfiprintf_r+0x1f0>)
 800f006:	a904      	add	r1, sp, #16
 800f008:	4638      	mov	r0, r7
 800f00a:	f7fe f8af 	bl	800d16c <_printf_i>
 800f00e:	e7ed      	b.n	800efec <_svfiprintf_r+0x1c0>
 800f010:	08010a53 	.word	0x08010a53
 800f014:	08010a5d 	.word	0x08010a5d
 800f018:	0800cc3d 	.word	0x0800cc3d
 800f01c:	0800ed75 	.word	0x0800ed75
 800f020:	08010a59 	.word	0x08010a59

0800f024 <__sflush_r>:
 800f024:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f02c:	0716      	lsls	r6, r2, #28
 800f02e:	4605      	mov	r5, r0
 800f030:	460c      	mov	r4, r1
 800f032:	d454      	bmi.n	800f0de <__sflush_r+0xba>
 800f034:	684b      	ldr	r3, [r1, #4]
 800f036:	2b00      	cmp	r3, #0
 800f038:	dc02      	bgt.n	800f040 <__sflush_r+0x1c>
 800f03a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	dd48      	ble.n	800f0d2 <__sflush_r+0xae>
 800f040:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f042:	2e00      	cmp	r6, #0
 800f044:	d045      	beq.n	800f0d2 <__sflush_r+0xae>
 800f046:	2300      	movs	r3, #0
 800f048:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f04c:	682f      	ldr	r7, [r5, #0]
 800f04e:	6a21      	ldr	r1, [r4, #32]
 800f050:	602b      	str	r3, [r5, #0]
 800f052:	d030      	beq.n	800f0b6 <__sflush_r+0x92>
 800f054:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f056:	89a3      	ldrh	r3, [r4, #12]
 800f058:	0759      	lsls	r1, r3, #29
 800f05a:	d505      	bpl.n	800f068 <__sflush_r+0x44>
 800f05c:	6863      	ldr	r3, [r4, #4]
 800f05e:	1ad2      	subs	r2, r2, r3
 800f060:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f062:	b10b      	cbz	r3, 800f068 <__sflush_r+0x44>
 800f064:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f066:	1ad2      	subs	r2, r2, r3
 800f068:	2300      	movs	r3, #0
 800f06a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f06c:	6a21      	ldr	r1, [r4, #32]
 800f06e:	4628      	mov	r0, r5
 800f070:	47b0      	blx	r6
 800f072:	1c43      	adds	r3, r0, #1
 800f074:	89a3      	ldrh	r3, [r4, #12]
 800f076:	d106      	bne.n	800f086 <__sflush_r+0x62>
 800f078:	6829      	ldr	r1, [r5, #0]
 800f07a:	291d      	cmp	r1, #29
 800f07c:	d82b      	bhi.n	800f0d6 <__sflush_r+0xb2>
 800f07e:	4a2a      	ldr	r2, [pc, #168]	@ (800f128 <__sflush_r+0x104>)
 800f080:	40ca      	lsrs	r2, r1
 800f082:	07d6      	lsls	r6, r2, #31
 800f084:	d527      	bpl.n	800f0d6 <__sflush_r+0xb2>
 800f086:	2200      	movs	r2, #0
 800f088:	6062      	str	r2, [r4, #4]
 800f08a:	04d9      	lsls	r1, r3, #19
 800f08c:	6922      	ldr	r2, [r4, #16]
 800f08e:	6022      	str	r2, [r4, #0]
 800f090:	d504      	bpl.n	800f09c <__sflush_r+0x78>
 800f092:	1c42      	adds	r2, r0, #1
 800f094:	d101      	bne.n	800f09a <__sflush_r+0x76>
 800f096:	682b      	ldr	r3, [r5, #0]
 800f098:	b903      	cbnz	r3, 800f09c <__sflush_r+0x78>
 800f09a:	6560      	str	r0, [r4, #84]	@ 0x54
 800f09c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f09e:	602f      	str	r7, [r5, #0]
 800f0a0:	b1b9      	cbz	r1, 800f0d2 <__sflush_r+0xae>
 800f0a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f0a6:	4299      	cmp	r1, r3
 800f0a8:	d002      	beq.n	800f0b0 <__sflush_r+0x8c>
 800f0aa:	4628      	mov	r0, r5
 800f0ac:	f7ff f9e8 	bl	800e480 <_free_r>
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	6363      	str	r3, [r4, #52]	@ 0x34
 800f0b4:	e00d      	b.n	800f0d2 <__sflush_r+0xae>
 800f0b6:	2301      	movs	r3, #1
 800f0b8:	4628      	mov	r0, r5
 800f0ba:	47b0      	blx	r6
 800f0bc:	4602      	mov	r2, r0
 800f0be:	1c50      	adds	r0, r2, #1
 800f0c0:	d1c9      	bne.n	800f056 <__sflush_r+0x32>
 800f0c2:	682b      	ldr	r3, [r5, #0]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d0c6      	beq.n	800f056 <__sflush_r+0x32>
 800f0c8:	2b1d      	cmp	r3, #29
 800f0ca:	d001      	beq.n	800f0d0 <__sflush_r+0xac>
 800f0cc:	2b16      	cmp	r3, #22
 800f0ce:	d11e      	bne.n	800f10e <__sflush_r+0xea>
 800f0d0:	602f      	str	r7, [r5, #0]
 800f0d2:	2000      	movs	r0, #0
 800f0d4:	e022      	b.n	800f11c <__sflush_r+0xf8>
 800f0d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f0da:	b21b      	sxth	r3, r3
 800f0dc:	e01b      	b.n	800f116 <__sflush_r+0xf2>
 800f0de:	690f      	ldr	r7, [r1, #16]
 800f0e0:	2f00      	cmp	r7, #0
 800f0e2:	d0f6      	beq.n	800f0d2 <__sflush_r+0xae>
 800f0e4:	0793      	lsls	r3, r2, #30
 800f0e6:	680e      	ldr	r6, [r1, #0]
 800f0e8:	bf08      	it	eq
 800f0ea:	694b      	ldreq	r3, [r1, #20]
 800f0ec:	600f      	str	r7, [r1, #0]
 800f0ee:	bf18      	it	ne
 800f0f0:	2300      	movne	r3, #0
 800f0f2:	eba6 0807 	sub.w	r8, r6, r7
 800f0f6:	608b      	str	r3, [r1, #8]
 800f0f8:	f1b8 0f00 	cmp.w	r8, #0
 800f0fc:	dde9      	ble.n	800f0d2 <__sflush_r+0xae>
 800f0fe:	6a21      	ldr	r1, [r4, #32]
 800f100:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f102:	4643      	mov	r3, r8
 800f104:	463a      	mov	r2, r7
 800f106:	4628      	mov	r0, r5
 800f108:	47b0      	blx	r6
 800f10a:	2800      	cmp	r0, #0
 800f10c:	dc08      	bgt.n	800f120 <__sflush_r+0xfc>
 800f10e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f112:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f116:	81a3      	strh	r3, [r4, #12]
 800f118:	f04f 30ff 	mov.w	r0, #4294967295
 800f11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f120:	4407      	add	r7, r0
 800f122:	eba8 0800 	sub.w	r8, r8, r0
 800f126:	e7e7      	b.n	800f0f8 <__sflush_r+0xd4>
 800f128:	20400001 	.word	0x20400001

0800f12c <_fflush_r>:
 800f12c:	b538      	push	{r3, r4, r5, lr}
 800f12e:	690b      	ldr	r3, [r1, #16]
 800f130:	4605      	mov	r5, r0
 800f132:	460c      	mov	r4, r1
 800f134:	b913      	cbnz	r3, 800f13c <_fflush_r+0x10>
 800f136:	2500      	movs	r5, #0
 800f138:	4628      	mov	r0, r5
 800f13a:	bd38      	pop	{r3, r4, r5, pc}
 800f13c:	b118      	cbz	r0, 800f146 <_fflush_r+0x1a>
 800f13e:	6a03      	ldr	r3, [r0, #32]
 800f140:	b90b      	cbnz	r3, 800f146 <_fflush_r+0x1a>
 800f142:	f7fe f9bd 	bl	800d4c0 <__sinit>
 800f146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d0f3      	beq.n	800f136 <_fflush_r+0xa>
 800f14e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f150:	07d0      	lsls	r0, r2, #31
 800f152:	d404      	bmi.n	800f15e <_fflush_r+0x32>
 800f154:	0599      	lsls	r1, r3, #22
 800f156:	d402      	bmi.n	800f15e <_fflush_r+0x32>
 800f158:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f15a:	f7fe fb26 	bl	800d7aa <__retarget_lock_acquire_recursive>
 800f15e:	4628      	mov	r0, r5
 800f160:	4621      	mov	r1, r4
 800f162:	f7ff ff5f 	bl	800f024 <__sflush_r>
 800f166:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f168:	07da      	lsls	r2, r3, #31
 800f16a:	4605      	mov	r5, r0
 800f16c:	d4e4      	bmi.n	800f138 <_fflush_r+0xc>
 800f16e:	89a3      	ldrh	r3, [r4, #12]
 800f170:	059b      	lsls	r3, r3, #22
 800f172:	d4e1      	bmi.n	800f138 <_fflush_r+0xc>
 800f174:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f176:	f7fe fb19 	bl	800d7ac <__retarget_lock_release_recursive>
 800f17a:	e7dd      	b.n	800f138 <_fflush_r+0xc>

0800f17c <_sbrk_r>:
 800f17c:	b538      	push	{r3, r4, r5, lr}
 800f17e:	4d06      	ldr	r5, [pc, #24]	@ (800f198 <_sbrk_r+0x1c>)
 800f180:	2300      	movs	r3, #0
 800f182:	4604      	mov	r4, r0
 800f184:	4608      	mov	r0, r1
 800f186:	602b      	str	r3, [r5, #0]
 800f188:	f7f9 fbee 	bl	8008968 <_sbrk>
 800f18c:	1c43      	adds	r3, r0, #1
 800f18e:	d102      	bne.n	800f196 <_sbrk_r+0x1a>
 800f190:	682b      	ldr	r3, [r5, #0]
 800f192:	b103      	cbz	r3, 800f196 <_sbrk_r+0x1a>
 800f194:	6023      	str	r3, [r4, #0]
 800f196:	bd38      	pop	{r3, r4, r5, pc}
 800f198:	20005ec0 	.word	0x20005ec0

0800f19c <__assert_func>:
 800f19c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f19e:	4614      	mov	r4, r2
 800f1a0:	461a      	mov	r2, r3
 800f1a2:	4b09      	ldr	r3, [pc, #36]	@ (800f1c8 <__assert_func+0x2c>)
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	4605      	mov	r5, r0
 800f1a8:	68d8      	ldr	r0, [r3, #12]
 800f1aa:	b14c      	cbz	r4, 800f1c0 <__assert_func+0x24>
 800f1ac:	4b07      	ldr	r3, [pc, #28]	@ (800f1cc <__assert_func+0x30>)
 800f1ae:	9100      	str	r1, [sp, #0]
 800f1b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f1b4:	4906      	ldr	r1, [pc, #24]	@ (800f1d0 <__assert_func+0x34>)
 800f1b6:	462b      	mov	r3, r5
 800f1b8:	f000 f870 	bl	800f29c <fiprintf>
 800f1bc:	f000 f880 	bl	800f2c0 <abort>
 800f1c0:	4b04      	ldr	r3, [pc, #16]	@ (800f1d4 <__assert_func+0x38>)
 800f1c2:	461c      	mov	r4, r3
 800f1c4:	e7f3      	b.n	800f1ae <__assert_func+0x12>
 800f1c6:	bf00      	nop
 800f1c8:	20004238 	.word	0x20004238
 800f1cc:	08010a6e 	.word	0x08010a6e
 800f1d0:	08010a7b 	.word	0x08010a7b
 800f1d4:	08010aa9 	.word	0x08010aa9

0800f1d8 <_calloc_r>:
 800f1d8:	b570      	push	{r4, r5, r6, lr}
 800f1da:	fba1 5402 	umull	r5, r4, r1, r2
 800f1de:	b934      	cbnz	r4, 800f1ee <_calloc_r+0x16>
 800f1e0:	4629      	mov	r1, r5
 800f1e2:	f7ff f9c1 	bl	800e568 <_malloc_r>
 800f1e6:	4606      	mov	r6, r0
 800f1e8:	b928      	cbnz	r0, 800f1f6 <_calloc_r+0x1e>
 800f1ea:	4630      	mov	r0, r6
 800f1ec:	bd70      	pop	{r4, r5, r6, pc}
 800f1ee:	220c      	movs	r2, #12
 800f1f0:	6002      	str	r2, [r0, #0]
 800f1f2:	2600      	movs	r6, #0
 800f1f4:	e7f9      	b.n	800f1ea <_calloc_r+0x12>
 800f1f6:	462a      	mov	r2, r5
 800f1f8:	4621      	mov	r1, r4
 800f1fa:	f7fe fa4c 	bl	800d696 <memset>
 800f1fe:	e7f4      	b.n	800f1ea <_calloc_r+0x12>

0800f200 <__ascii_mbtowc>:
 800f200:	b082      	sub	sp, #8
 800f202:	b901      	cbnz	r1, 800f206 <__ascii_mbtowc+0x6>
 800f204:	a901      	add	r1, sp, #4
 800f206:	b142      	cbz	r2, 800f21a <__ascii_mbtowc+0x1a>
 800f208:	b14b      	cbz	r3, 800f21e <__ascii_mbtowc+0x1e>
 800f20a:	7813      	ldrb	r3, [r2, #0]
 800f20c:	600b      	str	r3, [r1, #0]
 800f20e:	7812      	ldrb	r2, [r2, #0]
 800f210:	1e10      	subs	r0, r2, #0
 800f212:	bf18      	it	ne
 800f214:	2001      	movne	r0, #1
 800f216:	b002      	add	sp, #8
 800f218:	4770      	bx	lr
 800f21a:	4610      	mov	r0, r2
 800f21c:	e7fb      	b.n	800f216 <__ascii_mbtowc+0x16>
 800f21e:	f06f 0001 	mvn.w	r0, #1
 800f222:	e7f8      	b.n	800f216 <__ascii_mbtowc+0x16>

0800f224 <_realloc_r>:
 800f224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f228:	4607      	mov	r7, r0
 800f22a:	4614      	mov	r4, r2
 800f22c:	460d      	mov	r5, r1
 800f22e:	b921      	cbnz	r1, 800f23a <_realloc_r+0x16>
 800f230:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f234:	4611      	mov	r1, r2
 800f236:	f7ff b997 	b.w	800e568 <_malloc_r>
 800f23a:	b92a      	cbnz	r2, 800f248 <_realloc_r+0x24>
 800f23c:	f7ff f920 	bl	800e480 <_free_r>
 800f240:	4625      	mov	r5, r4
 800f242:	4628      	mov	r0, r5
 800f244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f248:	f000 f841 	bl	800f2ce <_malloc_usable_size_r>
 800f24c:	4284      	cmp	r4, r0
 800f24e:	4606      	mov	r6, r0
 800f250:	d802      	bhi.n	800f258 <_realloc_r+0x34>
 800f252:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f256:	d8f4      	bhi.n	800f242 <_realloc_r+0x1e>
 800f258:	4621      	mov	r1, r4
 800f25a:	4638      	mov	r0, r7
 800f25c:	f7ff f984 	bl	800e568 <_malloc_r>
 800f260:	4680      	mov	r8, r0
 800f262:	b908      	cbnz	r0, 800f268 <_realloc_r+0x44>
 800f264:	4645      	mov	r5, r8
 800f266:	e7ec      	b.n	800f242 <_realloc_r+0x1e>
 800f268:	42b4      	cmp	r4, r6
 800f26a:	4622      	mov	r2, r4
 800f26c:	4629      	mov	r1, r5
 800f26e:	bf28      	it	cs
 800f270:	4632      	movcs	r2, r6
 800f272:	f7fe fa9c 	bl	800d7ae <memcpy>
 800f276:	4629      	mov	r1, r5
 800f278:	4638      	mov	r0, r7
 800f27a:	f7ff f901 	bl	800e480 <_free_r>
 800f27e:	e7f1      	b.n	800f264 <_realloc_r+0x40>

0800f280 <__ascii_wctomb>:
 800f280:	4603      	mov	r3, r0
 800f282:	4608      	mov	r0, r1
 800f284:	b141      	cbz	r1, 800f298 <__ascii_wctomb+0x18>
 800f286:	2aff      	cmp	r2, #255	@ 0xff
 800f288:	d904      	bls.n	800f294 <__ascii_wctomb+0x14>
 800f28a:	228a      	movs	r2, #138	@ 0x8a
 800f28c:	601a      	str	r2, [r3, #0]
 800f28e:	f04f 30ff 	mov.w	r0, #4294967295
 800f292:	4770      	bx	lr
 800f294:	700a      	strb	r2, [r1, #0]
 800f296:	2001      	movs	r0, #1
 800f298:	4770      	bx	lr
	...

0800f29c <fiprintf>:
 800f29c:	b40e      	push	{r1, r2, r3}
 800f29e:	b503      	push	{r0, r1, lr}
 800f2a0:	4601      	mov	r1, r0
 800f2a2:	ab03      	add	r3, sp, #12
 800f2a4:	4805      	ldr	r0, [pc, #20]	@ (800f2bc <fiprintf+0x20>)
 800f2a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f2aa:	6800      	ldr	r0, [r0, #0]
 800f2ac:	9301      	str	r3, [sp, #4]
 800f2ae:	f000 f83f 	bl	800f330 <_vfiprintf_r>
 800f2b2:	b002      	add	sp, #8
 800f2b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f2b8:	b003      	add	sp, #12
 800f2ba:	4770      	bx	lr
 800f2bc:	20004238 	.word	0x20004238

0800f2c0 <abort>:
 800f2c0:	b508      	push	{r3, lr}
 800f2c2:	2006      	movs	r0, #6
 800f2c4:	f000 fa08 	bl	800f6d8 <raise>
 800f2c8:	2001      	movs	r0, #1
 800f2ca:	f7f9 fad5 	bl	8008878 <_exit>

0800f2ce <_malloc_usable_size_r>:
 800f2ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f2d2:	1f18      	subs	r0, r3, #4
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	bfbc      	itt	lt
 800f2d8:	580b      	ldrlt	r3, [r1, r0]
 800f2da:	18c0      	addlt	r0, r0, r3
 800f2dc:	4770      	bx	lr

0800f2de <__sfputc_r>:
 800f2de:	6893      	ldr	r3, [r2, #8]
 800f2e0:	3b01      	subs	r3, #1
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	b410      	push	{r4}
 800f2e6:	6093      	str	r3, [r2, #8]
 800f2e8:	da08      	bge.n	800f2fc <__sfputc_r+0x1e>
 800f2ea:	6994      	ldr	r4, [r2, #24]
 800f2ec:	42a3      	cmp	r3, r4
 800f2ee:	db01      	blt.n	800f2f4 <__sfputc_r+0x16>
 800f2f0:	290a      	cmp	r1, #10
 800f2f2:	d103      	bne.n	800f2fc <__sfputc_r+0x1e>
 800f2f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f2f8:	f000 b932 	b.w	800f560 <__swbuf_r>
 800f2fc:	6813      	ldr	r3, [r2, #0]
 800f2fe:	1c58      	adds	r0, r3, #1
 800f300:	6010      	str	r0, [r2, #0]
 800f302:	7019      	strb	r1, [r3, #0]
 800f304:	4608      	mov	r0, r1
 800f306:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f30a:	4770      	bx	lr

0800f30c <__sfputs_r>:
 800f30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f30e:	4606      	mov	r6, r0
 800f310:	460f      	mov	r7, r1
 800f312:	4614      	mov	r4, r2
 800f314:	18d5      	adds	r5, r2, r3
 800f316:	42ac      	cmp	r4, r5
 800f318:	d101      	bne.n	800f31e <__sfputs_r+0x12>
 800f31a:	2000      	movs	r0, #0
 800f31c:	e007      	b.n	800f32e <__sfputs_r+0x22>
 800f31e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f322:	463a      	mov	r2, r7
 800f324:	4630      	mov	r0, r6
 800f326:	f7ff ffda 	bl	800f2de <__sfputc_r>
 800f32a:	1c43      	adds	r3, r0, #1
 800f32c:	d1f3      	bne.n	800f316 <__sfputs_r+0xa>
 800f32e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f330 <_vfiprintf_r>:
 800f330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f334:	460d      	mov	r5, r1
 800f336:	b09d      	sub	sp, #116	@ 0x74
 800f338:	4614      	mov	r4, r2
 800f33a:	4698      	mov	r8, r3
 800f33c:	4606      	mov	r6, r0
 800f33e:	b118      	cbz	r0, 800f348 <_vfiprintf_r+0x18>
 800f340:	6a03      	ldr	r3, [r0, #32]
 800f342:	b90b      	cbnz	r3, 800f348 <_vfiprintf_r+0x18>
 800f344:	f7fe f8bc 	bl	800d4c0 <__sinit>
 800f348:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f34a:	07d9      	lsls	r1, r3, #31
 800f34c:	d405      	bmi.n	800f35a <_vfiprintf_r+0x2a>
 800f34e:	89ab      	ldrh	r3, [r5, #12]
 800f350:	059a      	lsls	r2, r3, #22
 800f352:	d402      	bmi.n	800f35a <_vfiprintf_r+0x2a>
 800f354:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f356:	f7fe fa28 	bl	800d7aa <__retarget_lock_acquire_recursive>
 800f35a:	89ab      	ldrh	r3, [r5, #12]
 800f35c:	071b      	lsls	r3, r3, #28
 800f35e:	d501      	bpl.n	800f364 <_vfiprintf_r+0x34>
 800f360:	692b      	ldr	r3, [r5, #16]
 800f362:	b99b      	cbnz	r3, 800f38c <_vfiprintf_r+0x5c>
 800f364:	4629      	mov	r1, r5
 800f366:	4630      	mov	r0, r6
 800f368:	f000 f938 	bl	800f5dc <__swsetup_r>
 800f36c:	b170      	cbz	r0, 800f38c <_vfiprintf_r+0x5c>
 800f36e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f370:	07dc      	lsls	r4, r3, #31
 800f372:	d504      	bpl.n	800f37e <_vfiprintf_r+0x4e>
 800f374:	f04f 30ff 	mov.w	r0, #4294967295
 800f378:	b01d      	add	sp, #116	@ 0x74
 800f37a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f37e:	89ab      	ldrh	r3, [r5, #12]
 800f380:	0598      	lsls	r0, r3, #22
 800f382:	d4f7      	bmi.n	800f374 <_vfiprintf_r+0x44>
 800f384:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f386:	f7fe fa11 	bl	800d7ac <__retarget_lock_release_recursive>
 800f38a:	e7f3      	b.n	800f374 <_vfiprintf_r+0x44>
 800f38c:	2300      	movs	r3, #0
 800f38e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f390:	2320      	movs	r3, #32
 800f392:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f396:	f8cd 800c 	str.w	r8, [sp, #12]
 800f39a:	2330      	movs	r3, #48	@ 0x30
 800f39c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f54c <_vfiprintf_r+0x21c>
 800f3a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f3a4:	f04f 0901 	mov.w	r9, #1
 800f3a8:	4623      	mov	r3, r4
 800f3aa:	469a      	mov	sl, r3
 800f3ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f3b0:	b10a      	cbz	r2, 800f3b6 <_vfiprintf_r+0x86>
 800f3b2:	2a25      	cmp	r2, #37	@ 0x25
 800f3b4:	d1f9      	bne.n	800f3aa <_vfiprintf_r+0x7a>
 800f3b6:	ebba 0b04 	subs.w	fp, sl, r4
 800f3ba:	d00b      	beq.n	800f3d4 <_vfiprintf_r+0xa4>
 800f3bc:	465b      	mov	r3, fp
 800f3be:	4622      	mov	r2, r4
 800f3c0:	4629      	mov	r1, r5
 800f3c2:	4630      	mov	r0, r6
 800f3c4:	f7ff ffa2 	bl	800f30c <__sfputs_r>
 800f3c8:	3001      	adds	r0, #1
 800f3ca:	f000 80a7 	beq.w	800f51c <_vfiprintf_r+0x1ec>
 800f3ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f3d0:	445a      	add	r2, fp
 800f3d2:	9209      	str	r2, [sp, #36]	@ 0x24
 800f3d4:	f89a 3000 	ldrb.w	r3, [sl]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	f000 809f 	beq.w	800f51c <_vfiprintf_r+0x1ec>
 800f3de:	2300      	movs	r3, #0
 800f3e0:	f04f 32ff 	mov.w	r2, #4294967295
 800f3e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f3e8:	f10a 0a01 	add.w	sl, sl, #1
 800f3ec:	9304      	str	r3, [sp, #16]
 800f3ee:	9307      	str	r3, [sp, #28]
 800f3f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f3f4:	931a      	str	r3, [sp, #104]	@ 0x68
 800f3f6:	4654      	mov	r4, sl
 800f3f8:	2205      	movs	r2, #5
 800f3fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3fe:	4853      	ldr	r0, [pc, #332]	@ (800f54c <_vfiprintf_r+0x21c>)
 800f400:	f7f0 fef6 	bl	80001f0 <memchr>
 800f404:	9a04      	ldr	r2, [sp, #16]
 800f406:	b9d8      	cbnz	r0, 800f440 <_vfiprintf_r+0x110>
 800f408:	06d1      	lsls	r1, r2, #27
 800f40a:	bf44      	itt	mi
 800f40c:	2320      	movmi	r3, #32
 800f40e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f412:	0713      	lsls	r3, r2, #28
 800f414:	bf44      	itt	mi
 800f416:	232b      	movmi	r3, #43	@ 0x2b
 800f418:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f41c:	f89a 3000 	ldrb.w	r3, [sl]
 800f420:	2b2a      	cmp	r3, #42	@ 0x2a
 800f422:	d015      	beq.n	800f450 <_vfiprintf_r+0x120>
 800f424:	9a07      	ldr	r2, [sp, #28]
 800f426:	4654      	mov	r4, sl
 800f428:	2000      	movs	r0, #0
 800f42a:	f04f 0c0a 	mov.w	ip, #10
 800f42e:	4621      	mov	r1, r4
 800f430:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f434:	3b30      	subs	r3, #48	@ 0x30
 800f436:	2b09      	cmp	r3, #9
 800f438:	d94b      	bls.n	800f4d2 <_vfiprintf_r+0x1a2>
 800f43a:	b1b0      	cbz	r0, 800f46a <_vfiprintf_r+0x13a>
 800f43c:	9207      	str	r2, [sp, #28]
 800f43e:	e014      	b.n	800f46a <_vfiprintf_r+0x13a>
 800f440:	eba0 0308 	sub.w	r3, r0, r8
 800f444:	fa09 f303 	lsl.w	r3, r9, r3
 800f448:	4313      	orrs	r3, r2
 800f44a:	9304      	str	r3, [sp, #16]
 800f44c:	46a2      	mov	sl, r4
 800f44e:	e7d2      	b.n	800f3f6 <_vfiprintf_r+0xc6>
 800f450:	9b03      	ldr	r3, [sp, #12]
 800f452:	1d19      	adds	r1, r3, #4
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	9103      	str	r1, [sp, #12]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	bfbb      	ittet	lt
 800f45c:	425b      	neglt	r3, r3
 800f45e:	f042 0202 	orrlt.w	r2, r2, #2
 800f462:	9307      	strge	r3, [sp, #28]
 800f464:	9307      	strlt	r3, [sp, #28]
 800f466:	bfb8      	it	lt
 800f468:	9204      	strlt	r2, [sp, #16]
 800f46a:	7823      	ldrb	r3, [r4, #0]
 800f46c:	2b2e      	cmp	r3, #46	@ 0x2e
 800f46e:	d10a      	bne.n	800f486 <_vfiprintf_r+0x156>
 800f470:	7863      	ldrb	r3, [r4, #1]
 800f472:	2b2a      	cmp	r3, #42	@ 0x2a
 800f474:	d132      	bne.n	800f4dc <_vfiprintf_r+0x1ac>
 800f476:	9b03      	ldr	r3, [sp, #12]
 800f478:	1d1a      	adds	r2, r3, #4
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	9203      	str	r2, [sp, #12]
 800f47e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f482:	3402      	adds	r4, #2
 800f484:	9305      	str	r3, [sp, #20]
 800f486:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f55c <_vfiprintf_r+0x22c>
 800f48a:	7821      	ldrb	r1, [r4, #0]
 800f48c:	2203      	movs	r2, #3
 800f48e:	4650      	mov	r0, sl
 800f490:	f7f0 feae 	bl	80001f0 <memchr>
 800f494:	b138      	cbz	r0, 800f4a6 <_vfiprintf_r+0x176>
 800f496:	9b04      	ldr	r3, [sp, #16]
 800f498:	eba0 000a 	sub.w	r0, r0, sl
 800f49c:	2240      	movs	r2, #64	@ 0x40
 800f49e:	4082      	lsls	r2, r0
 800f4a0:	4313      	orrs	r3, r2
 800f4a2:	3401      	adds	r4, #1
 800f4a4:	9304      	str	r3, [sp, #16]
 800f4a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4aa:	4829      	ldr	r0, [pc, #164]	@ (800f550 <_vfiprintf_r+0x220>)
 800f4ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f4b0:	2206      	movs	r2, #6
 800f4b2:	f7f0 fe9d 	bl	80001f0 <memchr>
 800f4b6:	2800      	cmp	r0, #0
 800f4b8:	d03f      	beq.n	800f53a <_vfiprintf_r+0x20a>
 800f4ba:	4b26      	ldr	r3, [pc, #152]	@ (800f554 <_vfiprintf_r+0x224>)
 800f4bc:	bb1b      	cbnz	r3, 800f506 <_vfiprintf_r+0x1d6>
 800f4be:	9b03      	ldr	r3, [sp, #12]
 800f4c0:	3307      	adds	r3, #7
 800f4c2:	f023 0307 	bic.w	r3, r3, #7
 800f4c6:	3308      	adds	r3, #8
 800f4c8:	9303      	str	r3, [sp, #12]
 800f4ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4cc:	443b      	add	r3, r7
 800f4ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800f4d0:	e76a      	b.n	800f3a8 <_vfiprintf_r+0x78>
 800f4d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800f4d6:	460c      	mov	r4, r1
 800f4d8:	2001      	movs	r0, #1
 800f4da:	e7a8      	b.n	800f42e <_vfiprintf_r+0xfe>
 800f4dc:	2300      	movs	r3, #0
 800f4de:	3401      	adds	r4, #1
 800f4e0:	9305      	str	r3, [sp, #20]
 800f4e2:	4619      	mov	r1, r3
 800f4e4:	f04f 0c0a 	mov.w	ip, #10
 800f4e8:	4620      	mov	r0, r4
 800f4ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f4ee:	3a30      	subs	r2, #48	@ 0x30
 800f4f0:	2a09      	cmp	r2, #9
 800f4f2:	d903      	bls.n	800f4fc <_vfiprintf_r+0x1cc>
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d0c6      	beq.n	800f486 <_vfiprintf_r+0x156>
 800f4f8:	9105      	str	r1, [sp, #20]
 800f4fa:	e7c4      	b.n	800f486 <_vfiprintf_r+0x156>
 800f4fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800f500:	4604      	mov	r4, r0
 800f502:	2301      	movs	r3, #1
 800f504:	e7f0      	b.n	800f4e8 <_vfiprintf_r+0x1b8>
 800f506:	ab03      	add	r3, sp, #12
 800f508:	9300      	str	r3, [sp, #0]
 800f50a:	462a      	mov	r2, r5
 800f50c:	4b12      	ldr	r3, [pc, #72]	@ (800f558 <_vfiprintf_r+0x228>)
 800f50e:	a904      	add	r1, sp, #16
 800f510:	4630      	mov	r0, r6
 800f512:	f7fd fb93 	bl	800cc3c <_printf_float>
 800f516:	4607      	mov	r7, r0
 800f518:	1c78      	adds	r0, r7, #1
 800f51a:	d1d6      	bne.n	800f4ca <_vfiprintf_r+0x19a>
 800f51c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f51e:	07d9      	lsls	r1, r3, #31
 800f520:	d405      	bmi.n	800f52e <_vfiprintf_r+0x1fe>
 800f522:	89ab      	ldrh	r3, [r5, #12]
 800f524:	059a      	lsls	r2, r3, #22
 800f526:	d402      	bmi.n	800f52e <_vfiprintf_r+0x1fe>
 800f528:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f52a:	f7fe f93f 	bl	800d7ac <__retarget_lock_release_recursive>
 800f52e:	89ab      	ldrh	r3, [r5, #12]
 800f530:	065b      	lsls	r3, r3, #25
 800f532:	f53f af1f 	bmi.w	800f374 <_vfiprintf_r+0x44>
 800f536:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f538:	e71e      	b.n	800f378 <_vfiprintf_r+0x48>
 800f53a:	ab03      	add	r3, sp, #12
 800f53c:	9300      	str	r3, [sp, #0]
 800f53e:	462a      	mov	r2, r5
 800f540:	4b05      	ldr	r3, [pc, #20]	@ (800f558 <_vfiprintf_r+0x228>)
 800f542:	a904      	add	r1, sp, #16
 800f544:	4630      	mov	r0, r6
 800f546:	f7fd fe11 	bl	800d16c <_printf_i>
 800f54a:	e7e4      	b.n	800f516 <_vfiprintf_r+0x1e6>
 800f54c:	08010a53 	.word	0x08010a53
 800f550:	08010a5d 	.word	0x08010a5d
 800f554:	0800cc3d 	.word	0x0800cc3d
 800f558:	0800f30d 	.word	0x0800f30d
 800f55c:	08010a59 	.word	0x08010a59

0800f560 <__swbuf_r>:
 800f560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f562:	460e      	mov	r6, r1
 800f564:	4614      	mov	r4, r2
 800f566:	4605      	mov	r5, r0
 800f568:	b118      	cbz	r0, 800f572 <__swbuf_r+0x12>
 800f56a:	6a03      	ldr	r3, [r0, #32]
 800f56c:	b90b      	cbnz	r3, 800f572 <__swbuf_r+0x12>
 800f56e:	f7fd ffa7 	bl	800d4c0 <__sinit>
 800f572:	69a3      	ldr	r3, [r4, #24]
 800f574:	60a3      	str	r3, [r4, #8]
 800f576:	89a3      	ldrh	r3, [r4, #12]
 800f578:	071a      	lsls	r2, r3, #28
 800f57a:	d501      	bpl.n	800f580 <__swbuf_r+0x20>
 800f57c:	6923      	ldr	r3, [r4, #16]
 800f57e:	b943      	cbnz	r3, 800f592 <__swbuf_r+0x32>
 800f580:	4621      	mov	r1, r4
 800f582:	4628      	mov	r0, r5
 800f584:	f000 f82a 	bl	800f5dc <__swsetup_r>
 800f588:	b118      	cbz	r0, 800f592 <__swbuf_r+0x32>
 800f58a:	f04f 37ff 	mov.w	r7, #4294967295
 800f58e:	4638      	mov	r0, r7
 800f590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f592:	6823      	ldr	r3, [r4, #0]
 800f594:	6922      	ldr	r2, [r4, #16]
 800f596:	1a98      	subs	r0, r3, r2
 800f598:	6963      	ldr	r3, [r4, #20]
 800f59a:	b2f6      	uxtb	r6, r6
 800f59c:	4283      	cmp	r3, r0
 800f59e:	4637      	mov	r7, r6
 800f5a0:	dc05      	bgt.n	800f5ae <__swbuf_r+0x4e>
 800f5a2:	4621      	mov	r1, r4
 800f5a4:	4628      	mov	r0, r5
 800f5a6:	f7ff fdc1 	bl	800f12c <_fflush_r>
 800f5aa:	2800      	cmp	r0, #0
 800f5ac:	d1ed      	bne.n	800f58a <__swbuf_r+0x2a>
 800f5ae:	68a3      	ldr	r3, [r4, #8]
 800f5b0:	3b01      	subs	r3, #1
 800f5b2:	60a3      	str	r3, [r4, #8]
 800f5b4:	6823      	ldr	r3, [r4, #0]
 800f5b6:	1c5a      	adds	r2, r3, #1
 800f5b8:	6022      	str	r2, [r4, #0]
 800f5ba:	701e      	strb	r6, [r3, #0]
 800f5bc:	6962      	ldr	r2, [r4, #20]
 800f5be:	1c43      	adds	r3, r0, #1
 800f5c0:	429a      	cmp	r2, r3
 800f5c2:	d004      	beq.n	800f5ce <__swbuf_r+0x6e>
 800f5c4:	89a3      	ldrh	r3, [r4, #12]
 800f5c6:	07db      	lsls	r3, r3, #31
 800f5c8:	d5e1      	bpl.n	800f58e <__swbuf_r+0x2e>
 800f5ca:	2e0a      	cmp	r6, #10
 800f5cc:	d1df      	bne.n	800f58e <__swbuf_r+0x2e>
 800f5ce:	4621      	mov	r1, r4
 800f5d0:	4628      	mov	r0, r5
 800f5d2:	f7ff fdab 	bl	800f12c <_fflush_r>
 800f5d6:	2800      	cmp	r0, #0
 800f5d8:	d0d9      	beq.n	800f58e <__swbuf_r+0x2e>
 800f5da:	e7d6      	b.n	800f58a <__swbuf_r+0x2a>

0800f5dc <__swsetup_r>:
 800f5dc:	b538      	push	{r3, r4, r5, lr}
 800f5de:	4b29      	ldr	r3, [pc, #164]	@ (800f684 <__swsetup_r+0xa8>)
 800f5e0:	4605      	mov	r5, r0
 800f5e2:	6818      	ldr	r0, [r3, #0]
 800f5e4:	460c      	mov	r4, r1
 800f5e6:	b118      	cbz	r0, 800f5f0 <__swsetup_r+0x14>
 800f5e8:	6a03      	ldr	r3, [r0, #32]
 800f5ea:	b90b      	cbnz	r3, 800f5f0 <__swsetup_r+0x14>
 800f5ec:	f7fd ff68 	bl	800d4c0 <__sinit>
 800f5f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5f4:	0719      	lsls	r1, r3, #28
 800f5f6:	d422      	bmi.n	800f63e <__swsetup_r+0x62>
 800f5f8:	06da      	lsls	r2, r3, #27
 800f5fa:	d407      	bmi.n	800f60c <__swsetup_r+0x30>
 800f5fc:	2209      	movs	r2, #9
 800f5fe:	602a      	str	r2, [r5, #0]
 800f600:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f604:	81a3      	strh	r3, [r4, #12]
 800f606:	f04f 30ff 	mov.w	r0, #4294967295
 800f60a:	e033      	b.n	800f674 <__swsetup_r+0x98>
 800f60c:	0758      	lsls	r0, r3, #29
 800f60e:	d512      	bpl.n	800f636 <__swsetup_r+0x5a>
 800f610:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f612:	b141      	cbz	r1, 800f626 <__swsetup_r+0x4a>
 800f614:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f618:	4299      	cmp	r1, r3
 800f61a:	d002      	beq.n	800f622 <__swsetup_r+0x46>
 800f61c:	4628      	mov	r0, r5
 800f61e:	f7fe ff2f 	bl	800e480 <_free_r>
 800f622:	2300      	movs	r3, #0
 800f624:	6363      	str	r3, [r4, #52]	@ 0x34
 800f626:	89a3      	ldrh	r3, [r4, #12]
 800f628:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f62c:	81a3      	strh	r3, [r4, #12]
 800f62e:	2300      	movs	r3, #0
 800f630:	6063      	str	r3, [r4, #4]
 800f632:	6923      	ldr	r3, [r4, #16]
 800f634:	6023      	str	r3, [r4, #0]
 800f636:	89a3      	ldrh	r3, [r4, #12]
 800f638:	f043 0308 	orr.w	r3, r3, #8
 800f63c:	81a3      	strh	r3, [r4, #12]
 800f63e:	6923      	ldr	r3, [r4, #16]
 800f640:	b94b      	cbnz	r3, 800f656 <__swsetup_r+0x7a>
 800f642:	89a3      	ldrh	r3, [r4, #12]
 800f644:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f648:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f64c:	d003      	beq.n	800f656 <__swsetup_r+0x7a>
 800f64e:	4621      	mov	r1, r4
 800f650:	4628      	mov	r0, r5
 800f652:	f000 f883 	bl	800f75c <__smakebuf_r>
 800f656:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f65a:	f013 0201 	ands.w	r2, r3, #1
 800f65e:	d00a      	beq.n	800f676 <__swsetup_r+0x9a>
 800f660:	2200      	movs	r2, #0
 800f662:	60a2      	str	r2, [r4, #8]
 800f664:	6962      	ldr	r2, [r4, #20]
 800f666:	4252      	negs	r2, r2
 800f668:	61a2      	str	r2, [r4, #24]
 800f66a:	6922      	ldr	r2, [r4, #16]
 800f66c:	b942      	cbnz	r2, 800f680 <__swsetup_r+0xa4>
 800f66e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f672:	d1c5      	bne.n	800f600 <__swsetup_r+0x24>
 800f674:	bd38      	pop	{r3, r4, r5, pc}
 800f676:	0799      	lsls	r1, r3, #30
 800f678:	bf58      	it	pl
 800f67a:	6962      	ldrpl	r2, [r4, #20]
 800f67c:	60a2      	str	r2, [r4, #8]
 800f67e:	e7f4      	b.n	800f66a <__swsetup_r+0x8e>
 800f680:	2000      	movs	r0, #0
 800f682:	e7f7      	b.n	800f674 <__swsetup_r+0x98>
 800f684:	20004238 	.word	0x20004238

0800f688 <_raise_r>:
 800f688:	291f      	cmp	r1, #31
 800f68a:	b538      	push	{r3, r4, r5, lr}
 800f68c:	4605      	mov	r5, r0
 800f68e:	460c      	mov	r4, r1
 800f690:	d904      	bls.n	800f69c <_raise_r+0x14>
 800f692:	2316      	movs	r3, #22
 800f694:	6003      	str	r3, [r0, #0]
 800f696:	f04f 30ff 	mov.w	r0, #4294967295
 800f69a:	bd38      	pop	{r3, r4, r5, pc}
 800f69c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f69e:	b112      	cbz	r2, 800f6a6 <_raise_r+0x1e>
 800f6a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f6a4:	b94b      	cbnz	r3, 800f6ba <_raise_r+0x32>
 800f6a6:	4628      	mov	r0, r5
 800f6a8:	f000 f830 	bl	800f70c <_getpid_r>
 800f6ac:	4622      	mov	r2, r4
 800f6ae:	4601      	mov	r1, r0
 800f6b0:	4628      	mov	r0, r5
 800f6b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f6b6:	f000 b817 	b.w	800f6e8 <_kill_r>
 800f6ba:	2b01      	cmp	r3, #1
 800f6bc:	d00a      	beq.n	800f6d4 <_raise_r+0x4c>
 800f6be:	1c59      	adds	r1, r3, #1
 800f6c0:	d103      	bne.n	800f6ca <_raise_r+0x42>
 800f6c2:	2316      	movs	r3, #22
 800f6c4:	6003      	str	r3, [r0, #0]
 800f6c6:	2001      	movs	r0, #1
 800f6c8:	e7e7      	b.n	800f69a <_raise_r+0x12>
 800f6ca:	2100      	movs	r1, #0
 800f6cc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f6d0:	4620      	mov	r0, r4
 800f6d2:	4798      	blx	r3
 800f6d4:	2000      	movs	r0, #0
 800f6d6:	e7e0      	b.n	800f69a <_raise_r+0x12>

0800f6d8 <raise>:
 800f6d8:	4b02      	ldr	r3, [pc, #8]	@ (800f6e4 <raise+0xc>)
 800f6da:	4601      	mov	r1, r0
 800f6dc:	6818      	ldr	r0, [r3, #0]
 800f6de:	f7ff bfd3 	b.w	800f688 <_raise_r>
 800f6e2:	bf00      	nop
 800f6e4:	20004238 	.word	0x20004238

0800f6e8 <_kill_r>:
 800f6e8:	b538      	push	{r3, r4, r5, lr}
 800f6ea:	4d07      	ldr	r5, [pc, #28]	@ (800f708 <_kill_r+0x20>)
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	4604      	mov	r4, r0
 800f6f0:	4608      	mov	r0, r1
 800f6f2:	4611      	mov	r1, r2
 800f6f4:	602b      	str	r3, [r5, #0]
 800f6f6:	f7f9 f8af 	bl	8008858 <_kill>
 800f6fa:	1c43      	adds	r3, r0, #1
 800f6fc:	d102      	bne.n	800f704 <_kill_r+0x1c>
 800f6fe:	682b      	ldr	r3, [r5, #0]
 800f700:	b103      	cbz	r3, 800f704 <_kill_r+0x1c>
 800f702:	6023      	str	r3, [r4, #0]
 800f704:	bd38      	pop	{r3, r4, r5, pc}
 800f706:	bf00      	nop
 800f708:	20005ec0 	.word	0x20005ec0

0800f70c <_getpid_r>:
 800f70c:	f7f9 b89c 	b.w	8008848 <_getpid>

0800f710 <__swhatbuf_r>:
 800f710:	b570      	push	{r4, r5, r6, lr}
 800f712:	460c      	mov	r4, r1
 800f714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f718:	2900      	cmp	r1, #0
 800f71a:	b096      	sub	sp, #88	@ 0x58
 800f71c:	4615      	mov	r5, r2
 800f71e:	461e      	mov	r6, r3
 800f720:	da0d      	bge.n	800f73e <__swhatbuf_r+0x2e>
 800f722:	89a3      	ldrh	r3, [r4, #12]
 800f724:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f728:	f04f 0100 	mov.w	r1, #0
 800f72c:	bf14      	ite	ne
 800f72e:	2340      	movne	r3, #64	@ 0x40
 800f730:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f734:	2000      	movs	r0, #0
 800f736:	6031      	str	r1, [r6, #0]
 800f738:	602b      	str	r3, [r5, #0]
 800f73a:	b016      	add	sp, #88	@ 0x58
 800f73c:	bd70      	pop	{r4, r5, r6, pc}
 800f73e:	466a      	mov	r2, sp
 800f740:	f000 f848 	bl	800f7d4 <_fstat_r>
 800f744:	2800      	cmp	r0, #0
 800f746:	dbec      	blt.n	800f722 <__swhatbuf_r+0x12>
 800f748:	9901      	ldr	r1, [sp, #4]
 800f74a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f74e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f752:	4259      	negs	r1, r3
 800f754:	4159      	adcs	r1, r3
 800f756:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f75a:	e7eb      	b.n	800f734 <__swhatbuf_r+0x24>

0800f75c <__smakebuf_r>:
 800f75c:	898b      	ldrh	r3, [r1, #12]
 800f75e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f760:	079d      	lsls	r5, r3, #30
 800f762:	4606      	mov	r6, r0
 800f764:	460c      	mov	r4, r1
 800f766:	d507      	bpl.n	800f778 <__smakebuf_r+0x1c>
 800f768:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f76c:	6023      	str	r3, [r4, #0]
 800f76e:	6123      	str	r3, [r4, #16]
 800f770:	2301      	movs	r3, #1
 800f772:	6163      	str	r3, [r4, #20]
 800f774:	b003      	add	sp, #12
 800f776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f778:	ab01      	add	r3, sp, #4
 800f77a:	466a      	mov	r2, sp
 800f77c:	f7ff ffc8 	bl	800f710 <__swhatbuf_r>
 800f780:	9f00      	ldr	r7, [sp, #0]
 800f782:	4605      	mov	r5, r0
 800f784:	4639      	mov	r1, r7
 800f786:	4630      	mov	r0, r6
 800f788:	f7fe feee 	bl	800e568 <_malloc_r>
 800f78c:	b948      	cbnz	r0, 800f7a2 <__smakebuf_r+0x46>
 800f78e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f792:	059a      	lsls	r2, r3, #22
 800f794:	d4ee      	bmi.n	800f774 <__smakebuf_r+0x18>
 800f796:	f023 0303 	bic.w	r3, r3, #3
 800f79a:	f043 0302 	orr.w	r3, r3, #2
 800f79e:	81a3      	strh	r3, [r4, #12]
 800f7a0:	e7e2      	b.n	800f768 <__smakebuf_r+0xc>
 800f7a2:	89a3      	ldrh	r3, [r4, #12]
 800f7a4:	6020      	str	r0, [r4, #0]
 800f7a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f7aa:	81a3      	strh	r3, [r4, #12]
 800f7ac:	9b01      	ldr	r3, [sp, #4]
 800f7ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f7b2:	b15b      	cbz	r3, 800f7cc <__smakebuf_r+0x70>
 800f7b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f7b8:	4630      	mov	r0, r6
 800f7ba:	f000 f81d 	bl	800f7f8 <_isatty_r>
 800f7be:	b128      	cbz	r0, 800f7cc <__smakebuf_r+0x70>
 800f7c0:	89a3      	ldrh	r3, [r4, #12]
 800f7c2:	f023 0303 	bic.w	r3, r3, #3
 800f7c6:	f043 0301 	orr.w	r3, r3, #1
 800f7ca:	81a3      	strh	r3, [r4, #12]
 800f7cc:	89a3      	ldrh	r3, [r4, #12]
 800f7ce:	431d      	orrs	r5, r3
 800f7d0:	81a5      	strh	r5, [r4, #12]
 800f7d2:	e7cf      	b.n	800f774 <__smakebuf_r+0x18>

0800f7d4 <_fstat_r>:
 800f7d4:	b538      	push	{r3, r4, r5, lr}
 800f7d6:	4d07      	ldr	r5, [pc, #28]	@ (800f7f4 <_fstat_r+0x20>)
 800f7d8:	2300      	movs	r3, #0
 800f7da:	4604      	mov	r4, r0
 800f7dc:	4608      	mov	r0, r1
 800f7de:	4611      	mov	r1, r2
 800f7e0:	602b      	str	r3, [r5, #0]
 800f7e2:	f7f9 f899 	bl	8008918 <_fstat>
 800f7e6:	1c43      	adds	r3, r0, #1
 800f7e8:	d102      	bne.n	800f7f0 <_fstat_r+0x1c>
 800f7ea:	682b      	ldr	r3, [r5, #0]
 800f7ec:	b103      	cbz	r3, 800f7f0 <_fstat_r+0x1c>
 800f7ee:	6023      	str	r3, [r4, #0]
 800f7f0:	bd38      	pop	{r3, r4, r5, pc}
 800f7f2:	bf00      	nop
 800f7f4:	20005ec0 	.word	0x20005ec0

0800f7f8 <_isatty_r>:
 800f7f8:	b538      	push	{r3, r4, r5, lr}
 800f7fa:	4d06      	ldr	r5, [pc, #24]	@ (800f814 <_isatty_r+0x1c>)
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	4604      	mov	r4, r0
 800f800:	4608      	mov	r0, r1
 800f802:	602b      	str	r3, [r5, #0]
 800f804:	f7f9 f898 	bl	8008938 <_isatty>
 800f808:	1c43      	adds	r3, r0, #1
 800f80a:	d102      	bne.n	800f812 <_isatty_r+0x1a>
 800f80c:	682b      	ldr	r3, [r5, #0]
 800f80e:	b103      	cbz	r3, 800f812 <_isatty_r+0x1a>
 800f810:	6023      	str	r3, [r4, #0]
 800f812:	bd38      	pop	{r3, r4, r5, pc}
 800f814:	20005ec0 	.word	0x20005ec0

0800f818 <_init>:
 800f818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f81a:	bf00      	nop
 800f81c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f81e:	bc08      	pop	{r3}
 800f820:	469e      	mov	lr, r3
 800f822:	4770      	bx	lr

0800f824 <_fini>:
 800f824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f826:	bf00      	nop
 800f828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f82a:	bc08      	pop	{r3}
 800f82c:	469e      	mov	lr, r3
 800f82e:	4770      	bx	lr
